<rules>
    <builtin>
        <category name="GLOBAL" description="Global Static Analysis">
        <rule id="ONEEXTERNDEF" header="An identifier with external linkage shall have exactly one external definition" severity="3">
            <implementation class="com.parasoft.xtest.cpp.analyzer.global.rules.ONEEXTERNDEF"/>
        </rule>
        <rule id="AVOIDEXTERN" header="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" severity="4">
            <implementation class="com.parasoft.xtest.cpp.analyzer.global.rules.AVOIDEXTERN"/>
        </rule>
        <rule id="CONDMUTEXVAR" header="Do not use more than one mutex for concurrent waiting operations on a condition variable" severity="3">
            <implementation class="com.parasoft.xtest.cpp.analyzer.global.rules.CONDMUTEXVAR"/>
        </rule>
        <rule id="ONEDEFRULE" header="The One Definition Rule shall not be violated" severity="3">
            <implementation class="com.parasoft.xtest.cpp.analyzer.global.rules.ONEDEFRULE"/>
        </rule>        
        <rule id="COMPATDECLS" header="All declarations of an object or function shall have compatible types" severity="3">
            <implementation class="com.parasoft.xtest.cpp.analyzer.global.rules.COMPATDECLS"/>
        </rule>
        <rule id="ONEFILEDECL" header="A type, object or function that is used in multiple translation units shall be declared in one and only one file" severity="3">
            <implementation class="com.parasoft.xtest.cpp.analyzer.global.rules.ONEFILEDECL"/>
        </rule>
        <rule id="EXCSPECDECL" header="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" severity="3">
            <implementation class="com.parasoft.xtest.cpp.analyzer.global.rules.EXCSPECDECL"/>
        </rule>
        <rule id="TEMPLNOINST" header="All class templates, function templates, class template member functions and class template static members shall be instantiated at least one" severity="3">
            <implementation class="com.parasoft.xtest.cpp.analyzer.global.rules.TEMPLNOINST"/>
        </rule>
		<rule id="VIRTBASECLASS" header="A base class shall only be declared virtual if it is used in a diamond hierarchy" severity="3">
            <implementation class="com.parasoft.xtest.cpp.analyzer.global.rules.VIRTBASECLASS"/>
        </rule>
        <rule id="UNUSEDVIRTPARAM" header="There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it" severity="3">
            <implementation class="com.parasoft.xtest.cpp.analyzer.global.rules.UNUSEDVIRTPARAM"/>
        </rule>
        <rule id="UNUSEDTYPE" header="A project shall not contain unused type declarations" severity="3">
            <implementation class="com.parasoft.xtest.cpp.analyzer.global.rules.UNUSEDTYPE"/>
        </rule>
        <rule id="UNUSEDFUNC" header="Every defined function with external linkage shall be used at least once" severity="3">
            <implementation class="com.parasoft.xtest.cpp.analyzer.global.rules.UNUSEDFUNC"/>
        </rule>
        <rule id="ONEUSEVAR" header="A project shall not contain non-volatile POD variables having only one use" severity="3">
            <implementation class="com.parasoft.xtest.cpp.analyzer.global.rules.ONEUSEVAR"/>
        </rule>
        <rule id="REUSEDQUALGLOBVAR" header="The identifier name of a non-member object with static storage duration shall not be reused within a namespace" severity="3">
            <implementation class="com.parasoft.xtest.cpp.analyzer.global.rules.REUSEDQUALGLOBVAR"/>
        </rule>
        <rule id="REUSEDQUALSTATFUN" header="The identifier name of a non-member static function shall not be reused within a namespace" severity="3">
            <implementation class="com.parasoft.xtest.cpp.analyzer.global.rules.REUSEDQUALSTATFUN"/>
        </rule>
        <rule id="UNIQUETYPEDEF" header="A typedef name (including qualification, if any) shall be a unique identifier" severity="3">
            <implementation class="com.parasoft.xtest.cpp.analyzer.global.rules.UNIQUETYPEDEF"/>
        </rule>
        <rule id="UNIQUETYPE" header="A class, union or enum name (including qualification, if any) shall be a unique identifier" severity="3">
            <implementation class="com.parasoft.xtest.cpp.analyzer.global.rules.UNIQUETYPE"/>
        </rule>
        <rule id="ONEDEFINLINE" header="An inline function that is used in multiple translation units shall be defined in one and only one file" severity="3">
            <implementation class="com.parasoft.xtest.cpp.analyzer.global.rules.ONEDEFINLINE"/>
        </rule>
        <rule id="ONEDEFTEMPL" header="A function template that is used in multiple translation units shall be defined in one and only one file" severity="3">
            <implementation class="com.parasoft.xtest.cpp.analyzer.global.rules.ONEDEFTEMPL"/>
        </rule>
        <rule id="ONEDEFTYPE" header="A type that is used in multiple translation units shall be defined in one and only one file" severity="3">
            <implementation class="com.parasoft.xtest.cpp.analyzer.global.rules.ONEDEFTYPE"/>
        </rule>
        </category>
    </builtin>
</rules>
