<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<rules>
   <builtin>
      <category description="Servlets" name="SERVLET">
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERVLET.CETS" header="Catch all exceptions which may be thrown within Servlet methods" id="CETS" scope="LINE" severity="4">
            <messages>
               <msg index="1" value="The method ''{0}()'' is declared to throw the exception type ''{1}'', but this exception is not caught."/>
            </messages>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               <reference href="http://cwe.mitre.org/data/definitions/600.html" name="CWE"/>
            </references>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERVLET.LML" header="Avoid using collections without size limit in servlets" id="LML" scope="LINE" severity="3">
            <messages>
               <msg index="1" value="Field ''{0}'' is used in servlet without limit size"/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERVLET.MDC" header="Declare a &quot;public&quot; constructor that takes no parameters" id="MDC" scope="CLASS" severity="1">
            <messages>
               <msg index="1" value="No argument constructor or default constructor does not exist."/>
               <msg index="2" value="No argument constructor should be &quot;public&quot;."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERVLET.NSIS" header="Do not create static variables in a servlet" id="NSIS" scope="LINE" severity="5" since="9.0">
            <messages>
               <msg index="1" value="Do not create static variable ''{0}'' in a servlet"/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERVLET.NSSS" header="Do not use static variables in servlets without synchronization" id="NSSS" scope="LINE" severity="2">
            <messages>
               <msg index="1" value="Static variable ''{0}'' used in servlet without synchronization"/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERVLET.SYN" header="Minimize synchronization in Servlets" id="SYN" scope="LINE" severity="2">
            <messages>
               <msg index="1" value="&quot;synchronized&quot; block contains more than ''{0}'' statements."/>
            </messages>
            <oldparameters>
               <oldparam id="SERVLET.SYN.NUM_LINES" name="NUM_LINES" value="Flag &quot;synchronized&quot; blocks with number of lines greater than"/>
            </oldparameters>
            <parameters>
               <param defaultValue="6" id="SERVLET.SYN.NUM_LINES" inputType="integer" label="Flag &quot;synchronized&quot; blocks with number of lines greater than" min="1"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERVLET.SOP" header="Minimize usage of System.out and System.err in Servlets" id="SOP" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="System.out or System.err used in a Servlet"/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERVLET.UCO" header="Use a Context Object to manage HTTP request parameters" id="UCO" scope="LINE" severity="2" since="5.1">
            <messages>
               <msg index="1" value="Consider using a &quot;Context&quot; Object instead of calling ''{0}()''."/>
            </messages>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/15.html" name="CWE"/>
               <reference href="http://cwe.mitre.org/data/definitions/601.html" name="CWE"/>
            </references>
         </rule>
      </category>
      <category description="Initialization" name="INIT">
         <rule class="com.parasoft.jtest.standards.rules.builtin.INIT.AAI" header="Do not use array initializers." id="AAI" scope="CLASS" severity="4" since="8.0">
            <messages>
               <msg index="1" value="Array initializer used."/>
            </messages>
            <oldparameters>
               <oldparam id="INIT.AAI.ALLOW_EMPTY" name="ALLOW_EMPTY" value="Allow empty array initializers."/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="INIT.AAI.ALLOW_EMPTY" inputType="checkbox" label="Allow empty array initializers."/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INIT.ADI" header="Avoid explicitly initializing fields which have already been initialized by a superclass' constructor" id="ADI" scope="LINE" severity="3" since="8.2">
            <messages>
               <msg index="1" value="This initialization of the field &quot;{0}&quot; may overwrite the value to which the field is initialized by a constructor of a superclass."/>
               <msg index="2" value="This assignment to the field &quot;{0}&quot; may overwrite the value to which the field is initialized by a constructor of a superclass."/>
            </messages>
            <oldparameters>
               <oldparam id="INIT.ADI.MAX_DEPTH" name="MAX_DEPTH" value="Maximum depth of checking allowed"/>
            </oldparameters>
            <parameters>
               <param defaultValue="7" id="INIT.ADI.MAX_DEPTH" inputType="integer" label="Maximum depth of checking allowed" min="1"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INIT.AULI" header="Ensure that the &quot;if&quot; check for lazy initialization uses the correct operator." id="AULI" scope="LINE" severity="3" since="8.2">
            <messages>
               <msg index="1" value="This &quot;if&quot; statement may mistakenly use &quot;!=&quot; instead of &quot;==&quot; for lazy initialization of &quot;{0}&quot;."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INIT.CLIB" header="Do not put code other than initialization code in lazy initialization blocks." id="CLIB" scope="LINE" severity="4" since="8.1">
            <messages>
               <msg index="1" value="This lazy initialization block may contain code other than initialization code.  Make sure that the logic is correct."/>
            </messages>
            <oldparameters>
               <oldparam id="INIT.CLIB.NOT_USED_OUTSIDE" name="NOT_USED_OUTSIDE" value="Only report a violation for lazy-initialized variables which are not read outside of the lazy initialization block."/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="INIT.CLIB.NOT_USED_OUTSIDE" inputType="checkbox" label="Only report a violation for lazy-initialized variables which are not read outside of the lazy initialization block."/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INIT.CSI" header="Explicitly initialize all fields" id="CSI" scope="LINE" severity="4" since="4.5">
            <messages>
               <msg index="1" value="Field ''{0}'', declared on line {1}, is not initialized in this constructor."/>
               <msg index="2" value="Field ''{0}'' is not initialized in its declaration."/>
               <msg index="3" value="Field ''{0}'', declared on line {1}, is not initialized in this constructor nor in its declaration."/>
               <msg index="4" value="There is no explicit constructor to initialize the field ''{0}''."/>
            </messages>
            <oldparameters>
               <oldparam id="INIT.CSI.CHECK_NON_STATIC" name="CHECK_NON_STATIC" value="Check non-static fields"/>
               <oldparam id="INIT.CSI.MAX_CHECKING_LEVEL" name="MAX_CHECKING_LEVEL" value="Maximum level of checking allowed"/>
               <oldparam id="INIT.CSI.CHECK_STATIC" name="CHECK_STATIC" value="Check static fields"/>
               <oldparam id="INIT.CSI.INIT_IN_CONST" name="INIT_IN_CONST" value="Allow initialization in each constructor"/>
               <oldparam id="INIT.CSI.INIT_IN_DECLARATION" name="INIT_IN_DECLARATION" value="Allow initialization in the declaration"/>
               <oldparam id="INIT.CSI.INIT_IN_CONST_STATIC" name="INIT_IN_CONST_STATIC" value="Allow initialization in each constructor"/>
               <oldparam id="INIT.CSI.INIT_IN_DECLARATION_STATIC" name="INIT_IN_DECLARATION_STATIC" value="Allow initialization in the declaration"/>
            </oldparameters>
            <parameters>
               <param defaultValue="4" id="INIT.CSI.MAX_CHECKING_LEVEL" inputType="integer" label="Maximum level of checking allowed" min="1"/>
               <param defaultValue="true" id="INIT.CSI.CHECK_NON_STATIC" inputType="checkbox" label="Check non-static fields">
                  <param defaultValue="true" id="INIT.CSI.INIT_IN_CONST" inputType="checkbox" label="Allow initialization in each constructor"/>
                  <param defaultValue="true" id="INIT.CSI.INIT_IN_DECLARATION" inputType="checkbox" label="Allow initialization in the declaration"/>
               </param>
               <param defaultValue="false" id="INIT.CSI.CHECK_STATIC" inputType="checkbox" label="Check static fields">
                  <param defaultValue="true" id="INIT.CSI.INIT_IN_CONST_STATIC" inputType="checkbox" label="Allow initialization in each constructor"/>
                  <param defaultValue="true" id="INIT.CSI.INIT_IN_DECLARATION_STATIC" inputType="checkbox" label="Allow initialization in the declaration"/>
               </param>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INIT.IC" header="Do not use initialization circularities for fields" id="IC" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Initialization circularity is detected on this field. Trace of the cycle: {0}."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INIT.UIRC" header="Avoid uninitialized reads of fields before or during constructor execution" id="UIRC" scope="LINE" severity="1" since="6.0">
            <messages>
               <msg index="1" value="Field ''{0}'' is not initialized by the time of this read access."/>
               <msg index="2" value="Field ''{0}'' is not explicitly initialized by the time of this read access."/>
            </messages>
            <oldparameters>
               <oldparam id="INIT.UIRC.CHECK_NON_STATIC" name="CHECK_NON_STATIC" value="Check non-static fields."/>
               <oldparam id="INIT.UIRC.MAX_CHECKING_LEVEL" name="MAX_CHECKING_LEVEL" value="Maximum level of checking allowed"/>
               <oldparam id="INIT.UIRC.CHECK_STATIC" name="CHECK_STATIC" value="Check static fields."/>
               <oldparam id="INIT.UIRC.IGNORE_PRIMITIVE" name="IGNORE_PRIMITIVE" value="Ignore fields of primitive types."/>
            </oldparameters>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/457.html" name="CWE"/>
            </references>
            <parameters>
               <param defaultValue="4" id="INIT.UIRC.MAX_CHECKING_LEVEL" inputType="integer" label="Maximum level of checking allowed" min="1"/>
               <param defaultValue="true" id="INIT.UIRC.CHECK_NON_STATIC" inputType="checkbox" label="Check non-static fields."/>
               <param defaultValue="true" id="INIT.UIRC.CHECK_STATIC" inputType="checkbox" label="Check static fields."/>
               <param defaultValue="false" id="INIT.UIRC.IGNORE_PRIMITIVE" inputType="checkbox" label="Ignore fields of primitive types."/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INIT.DI" header="Avoid double initialization of fields" id="DI" scope="LINE" severity="4" since="8.4">
            <messages>
               <msg index="1" value="Field ''{0}'' may be double initialized (initialized both in a constructor and in its declaration)."/>
            </messages>
            <oldparameters>
               <oldparam id="INIT.DI.CHECK_NON_STATIC" name="CHECK_NON_STATIC" value="Check non-static fields"/>
               <oldparam id="INIT.DI.MAX_CHECKING_LEVEL" name="MAX_CHECKING_LEVEL" value="Maximum level of checking allowed"/>
               <oldparam id="INIT.DI.CHECK_STATIC" name="CHECK_STATIC" value="Check static fields"/>
               <oldparam id="INIT.DI.IGNORE_DEFAULT" name="IGNORE_DEFAULT" value="Ignore fields initialized with default values"/>
            </oldparameters>
            <parameters>
               <param defaultValue="4" id="INIT.DI.MAX_CHECKING_LEVEL" inputType="integer" label="Maximum level of checking allowed" min="1"/>
               <param defaultValue="true" id="INIT.DI.CHECK_NON_STATIC" inputType="checkbox" label="Check non-static fields"/>
               <param defaultValue="false" id="INIT.DI.CHECK_STATIC" inputType="checkbox" label="Check static fields"/>
               <param defaultValue="true" id="INIT.DI.IGNORE_DEFAULT" inputType="checkbox" label="Ignore fields initialized with default values"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INIT.DIA" header="Use diamond to invoke the constructor of a generic class" id="DIA" scope="LINE" severity="3" since="9.4">
            <messages>
               <msg index="1" value="Unnecessarily invoked full constructor of a generic class ''{0}''. You should use diamond ''{1}'' instead."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INIT.SF" header="Use explicit initializations/Do not initialize &quot;static&quot; fields to default values" id="SF" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="&quot;static&quot; field ''{0}'' not initialized."/>
               <msg index="2" value="&quot;static&quot; field ''{0}'' is redundantly initialized to default value."/>
            </messages>
            <oldparameters>
               <oldparam id="INIT.SF.ENFORCE" name="ENFORCE" value="Enforce explicit initializations"/>
               <oldparam id="INIT.SF.INITIALIZATION_OPTION" name="INITIALIZATION_OPTION" value="Check option:"/>
               <oldparam id="INIT.SF.DISALLOW" name="DISALLOW" value="Disallow explicit initializations to default values"/>
            </oldparameters>
            <parameters>
               <radioGroup id="INIT.SF.INITIALIZATION_OPTION" label="Check option:" prevType="MultipleChoice" showLabel="true">
                  <radioItem defaultValue="checked" label="Enforce explicit initializations" value="0"/>
                  <radioItem label="Disallow explicit initializations to default values" value="1"/>
               </radioGroup>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INIT.SFA" header="Do not initialize &quot;static&quot; &quot;final&quot; variables with non &quot;final&quot; &quot;static&quot; variables." id="SFA" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Avoid initializing static final fields with static but non final fields."/>
            </messages>
            <oldparameters>
               <oldparam id="INIT.SFA.IGNORE_STRING" name="IGNORE_STRING" value="Ignore fields of type &quot;String&quot; in initializations."/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="INIT.SFA.IGNORE_STRING" inputType="checkbox" label="Ignore fields of type &quot;String&quot; in initializations."/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INIT.LV" header="Initialize all local variables explicitly at the declaration statement" id="LV" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Local variable not initialized: {0}"/>
            </messages>
         </rule>
      </category>
      <category description="Optimization" name="OPT">
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.STR" header="Use single quotes instead of double quotes for single character string concatenation" id="STR" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Single character ''{0}'' using double quotes in string concatenation."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.UNC" header="Avoid unnecessary casting" id="UNC" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Unnecessary cast to ''{0}''."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.ISC" header="Do not instantiate a class which contains only static fields and methods" id="ISC" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="This instantiation may be unnecessary since all the methods and fields of the class are static."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.CIO" header="Close input and output resources in &quot;finally&quot; blocks" id="CIO" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Variable ''{0}'' is not closed within a &quot;finally&quot; block."/>
            </messages>
            <oldparameters>
               <oldparam id="OPT.CIO.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
               <oldparam id="OPT.CIO.ADDITIONAL_CLOSE_METHODS" name="ADDITIONAL_CLOSE_METHODS" value="Additional resource closing methods (in regular expression)"/>
               <oldparam id="OPT.CIO.METHOD" name="METHOD" value="Method name"/>
               <oldparam id="OPT.CIO.TYPE" name="TYPE" value="Declaring type"/>
               <oldparam id="OPT.CIO.IGNORE_TYPES" name="IGNORE_TYPES" value="Ignored types (Specify fully qualified names)"/>
            </oldparameters>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE"/>
               <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE"/>
            </references>
            <parameters>
               <param defaultValue="java.io.ByteArrayInputStream;java.io.ByteArrayOutputStream;java.io.CharArrayWriter;java.io.StringBufferInputStream;java.io.StringReader;java.io.StringWriter;" id="OPT.CIO.IGNORE_TYPES" inputType="stringList" label="Ignored types (Specify fully qualified names)" prevType="StringList"/>
               <!--param id="OPT.CIO.ADDITIONAL_CLOSE_METHODS" inputType="bigtext" defaultValue="" label="Additional resource closing methods (in regular expression)"/-->
               <!--  complexParamTable id="OPT.CIO.ADDITIONAL_CLOSE_METHODS" reader="SATable" label="Additional resource closing methods (in regular expression)" canAddRow="true" canRemoveRow="true" canEditRow="true" canSetOrdering="true">
                        <columns>
                            <column id="OPT__CIO__ADDITIONAL_CLOSE_METHODS__COLUMN1" label="Declaring type" columnType="text" defaultValue=".*" editable="true" required="true" />
                            <column id="OPT__CIO__ADDITIONAL_CLOSE_METHODS__COLUMN2" label="Method name" columnType="text" defaultValue=".*" editable="true" required="true" />
                        </columns>
                    </complexParamTable>-->
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.ICDPC" header="When calling &quot;Math.ceil()&quot;, do not pass in an integer that has been cast to a floating point type" id="ICDPC" scope="LINE" severity="2" since="8.0">
            <messages>
               <msg index="1" value="Calling &quot;Math.ceil()&quot; with this argument is not necessary since the argument is guaranteed to have no fractional part."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.CTLV" header="Do not use a &quot;private&quot; field that is accessed in only one method; change it to a local variable" id="CTLV" scope="LINE" severity="3" since="5.0">
            <messages>
               <msg index="1" value="Field ''{0}'' is used only in method ''{1}''."/>
               <msg index="2" value="Field ''{0}'' is used only in one constructor."/>
            </messages>
            <oldparameters>
               <oldparam id="OPT.CTLV.IGNORE_CONST" name="IGNORE_CONST" value="Ignore fields which are used in a constructor."/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="OPT.CTLV.IGNORE_CONST" inputType="checkbox" label="Ignore fields which are used in a constructor."/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.CRWD" header="Close resources as early as possible" id="CRWD" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="It may be possible to move this call to &quot;close&quot; earlier in the method."/>
            </messages>
            <oldparameters>
               <oldparam id="OPT.CRWD.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
               <oldparam id="OPT.CRWD.ADDITIONAL_CLOSE_METHODS" name="ADDITIONAL_CLOSE_METHODS" value="Additional resource closing methods (in regular expression)"/>
               <oldparam id="OPT.CRWD.METHOD" name="METHOD" value="Method name"/>
               <oldparam id="OPT.CRWD.TYPE" name="TYPE" value="Declaring type"/>
            </oldparameters>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE"/>
               <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE"/>
            </references>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.UISO" header="Avoid unnecessary &quot;instanceof&quot; evaluations" id="UISO" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Unnecessary &quot;instanceof&quot; evaluation on variable ''{0}''."/>
               <msg index="2" value="Unnecessary &quot;instanceof&quot; evaluation on expression ''{0}''."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.NIVND" header="Use the 'nextInt()' method to generate a random integer" id="NIVND" scope="LINE" severity="5" since="8.0">
            <messages>
               <msg index="1" value="Consider using the 'Random.nextInt()' method here instead of 'Random.nextDouble()' to generate a random integer."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.ICGA" header="Avoid accessing members which will require synthetic accessor methods" id="ICGA" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="The method ''{0}'' will require a generated accessor to access."/>
               <msg index="2" value="The field ''{0}'' will require a generated accessor to access."/>
               <msg index="3" value="Instantiation of the class ''{0}'' needs a generated accessor."/>
            </messages>
            <oldparameters>
               <oldparam id="OPT.ICGA.METHOD_ACCESSES" name="METHOD_ACCESSES" value="Method Invocations"/>
               <oldparam id="OPT.ICGA.FIELD_ACCESSES" name="FIELD_ACCESSES" value="Field Accesses"/>
               <oldparam id="OPT.ICGA.OBJECT_INST" name="OBJECT_INST" value="Object Instantiations"/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="OPT.ICGA.group.0" label="What to Check">
                  <param defaultValue="true" id="OPT.ICGA.METHOD_ACCESSES" inputType="checkbox" label="Method Invocations"/>
                  <param defaultValue="true" id="OPT.ICGA.FIELD_ACCESSES" inputType="checkbox" label="Field Accesses"/>
                  <param defaultValue="true" id="OPT.ICGA.OBJECT_INST" inputType="checkbox" label="Object Instantiations"/>
               </group>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.STS" header="Avoid unnecessary calls to 'String' methods" id="STS" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="'toString()' is invoked on a 'String' object."/>
               <msg index="2" value="Unnecessary call to 'substring(0)'."/>
            </messages>
            <oldparameters>
               <oldparam id="OPT.STS.SUBSTRING" name="SUBSTRING" value="Check for calls to 'substring(0)' on 'java.lang.String' objects"/>
               <oldparam id="OPT.STS.TO_STRING" name="TO_STRING" value="Check for invocations of 'toString()' on 'java.lang.String' objects"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="OPT.STS.TO_STRING" inputType="checkbox" label="Check for invocations of 'toString()' on 'java.lang.String' objects"/>
               <param defaultValue="false" id="OPT.STS.SUBSTRING" inputType="checkbox" label="Check for calls to 'substring(0)' on 'java.lang.String' objects"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.EES" header="Use 'String.length() == 0' instead of 'String.equals(&quot;&quot;)'" id="EES" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Consider using ''String.length() {0} 0'' here instead of the ''String.equals()'' method."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.UMATH" header="Do not call the methods from 'java.lang.Math' if the result is a constant which can be easily determined" id="UMATH" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="The result of this call to ''{0}'' with argument ''{1}'' should be calculated statically."/>
               <msg index="2" value="The result of this call to ''{0}'' with arguments ''{1}'' and ''{2}'' should be calculated statically."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.CPTS" header="Do not convert a value to a String by concatenating the empty String." id="CPTS" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="The value ''{0}'' is converted to a String here by concatenation with the empty String."/>
            </messages>
            <oldparameters>
               <oldparam id="OPT.CPTS.CHECK_TYPE" name="CHECK_TYPE" value="What to check"/>
               <oldparam id="OPT.CPTS.CHECK_PRIMITIVE" name="CHECK_PRIMITIVE" value="Check primitive types"/>
               <oldparam id="OPT.CPTS.CHECK_ALL" name="CHECK_ALL" value="Check all types"/>
            </oldparameters>
            <parameters>
               <radioGroup id="OPT.CPTS.CHECK_TYPE" label="What to check" prevType="MultipleChoice" showLabel="true">
                  <radioItem label="Check all types" value="0"/>
                  <radioItem defaultValue="checked" label="Check primitive types" value="1"/>
               </radioGroup>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.EOIL" header="Avoid calling expensive operations in the body of a loop." id="EOIL" scope="LINE" severity="3" since="8.0">
            <oldparameters>
               <oldparam id="OPT.EOIL.EXPENSE_OPERS" name="EXPENSE_OPERS" value="Methods which should not be called in loops\n(in form of &lt;regular expression for qualified name of declaring type&gt;#&lt;regular expression for method name&gt;)"/>
            </oldparameters>
            <messages>
               <msg index="1" value="It may be possible to take this call to the method ''{0}'' out of its enclosing loop(s)."/>
            </messages>
            <parameters>
               <param defaultValue="java\.util\.Arrays#^sort$" description="Methods which should not be called in loops (in form of &lt;regular expression for qualified name of declaring type&gt;#&lt;regular expression for method name&gt;)" id="OPT.EOIL.EXPENSE_OPERS" inputType="stringList" label="Methods which should not be called in loops" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.CEL" header="Do not call methods in loop condition statements." id="CEL" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Method called in condition statement of &quot;for&quot; loop."/>
               <msg index="2" value="Method called in condition statement of &quot;while&quot; loop."/>
               <msg index="3" value="Method called in condition statement of &quot;do&quot; loop."/>
            </messages>
            <oldparameters>
               <oldparam id="OPT.CEL.TYPE_TAB" name="TYPE_TAB" value="Type"/>
               <oldparam id="OPT.CEL.METHOD_TAB" name="METHOD_TAB" value="Method"/>
               <oldparam id="OPT.CEL.IGNORE_CLASSES" name="IGNORE_CLASSES" value="Ignore types and subclasses (in regular expression)"/>
               <oldparam id="OPT.CEL.IGNORE_LIST" name="IGNORE_LIST" value="Ignore method (left-hand side of list) in loop condition statement, if method (right-hand side of list) is invoked in loop body."/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="OPT.CEL.tab.TYPE_TAB" label="Type">
                  <param defaultValue="^java.util.Enumeration$;^java.util.Iterator$;^java.sql.ResultSet$;^java.util.StringTokenizer$" id="OPT.CEL.IGNORE_CLASSES" inputType="stringList" label="Ignore types and subclasses (in regular expression)" prevType="StringList"/>
               </group>
               <group collapsible="false" id="OPT.CEL.tab.METHOD_TAB" label="Method">
                  <!-- param id="OPT.CEL.IGNORE_LIST" inputType="bigtext" defaultValue="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;twolist version=&quot;1.0&quot;&gt;&lt;list1 value=&quot;^java.util.*#isEmpty$&quot;&gt;&lt;list2 value=&quot;^java.util.*#get*$&quot;/&gt;&lt;list2 value=&quot;^java.util.*#remove$&quot;/&gt;&lt;list2 value=&quot;^java.util.*#pop$&quot;/&gt;&lt;/list1&gt;&lt;list1 value=&quot;^java.lang.System.*#currentTimeMillis$&quot;&gt;&lt;list2 value=&quot;^.*$&quot;/&gt;&lt;/list1&gt;&lt;/twolist&gt;" label="Ignore method (left-hand side of list) in loop condition statement, if method (right-hand side of list) is invoked in loop body." prevType="DuoList"/-->
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="OPT.CEL.IGNORE_LIST" label="Ignore method in loop condition statement, if method is invoked in loop body." prevType="DuoList" reader="SADuoList">
                     <columns>
                        <column columnType="text" editable="true" id="OPT__CEL__IGNORE_LIST__COLUMN1" label="Ignore method" required="true" textSize="large"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="OPT__CEL__IGNORE_LIST__COLUMN1" value="^java.util.*#isEmpty$"/>
                        </row>
                        <row id="2">
                           <column refColumnId="OPT__CEL__IGNORE_LIST__COLUMN1" value="^java.lang.System.*#currentTimeMillis$"/>
                        </row>
                     </predefinedRows>
                     <childTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="OPT__CEL__IGNORE_LIST__CHILDTABLE1" label="">
                        <columns>
                           <column columnType="text" editable="true" id="OPT__CEL__IGNORE_LIST__COLUMN2" label="Invoked method" required="true"/>
                        </columns>
                        <predefinedRows refParentRowId="1">
                           <row id="1">
                              <column refColumnId="OPT__CEL__IGNORE_LIST__COLUMN2" value="^java.util.*#get*$"/>
                           </row>
                           <row id="2">
                              <column refColumnId="OPT__CEL__IGNORE_LIST__COLUMN2" value="^java.util.*#remove$"/>
                           </row>
                           <row id="3">
                              <column refColumnId="OPT__CEL__IGNORE_LIST__COLUMN2" value="^java.util.*#pop$"/>
                           </row>
                        </predefinedRows>
                        <predefinedRows refParentRowId="2">
                           <row id="1">
                              <column refColumnId="OPT__CEL__IGNORE_LIST__COLUMN2" value="^.*$"/>
                           </row>
                        </predefinedRows>
                     </childTable>
                  </complexParamTable>
               </group>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.USC" header="Use 'String' instead of 'StringBuffer' for constant strings." id="USC" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="''StringBuffer'' value never modified : {0}."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.STCA" header="Do not call ''String.toCharArray()'' unnecessarily." id="STCA" scope="LINE" severity="4" since="8.0">
            <messages>
               <msg index="1" value="This call to ''toCharArray()'' may be unnecessary."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.ILUG" header="Do not iterate through Lists using the 'get()' method" id="ILUG" scope="LINE" severity="3" since="8.1">
            <messages>
               <msg index="1" value="The list ''{0}'' is iterated through using the ''get()'' method.  This may be inefficient."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.USB" header="Use 'StringBuffer' instead of 'String' when concatenating strings." id="USB" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="String concatenation is performed here on the String &quot;{0}&quot;."/>
               <msg index="2" value="''{0}'' appends a String concatenation."/>
               <msg index="3" value="''{0}'' initialized to a String concatenation."/>
            </messages>
            <oldparameters>
               <oldparam id="OPT.USB.WHAT_TO_CHECK" name="WHAT_TO_CHECK" value="What to Flag"/>
               <oldparam id="OPT.USB.MORE_THAN_ONCE" name="MORE_THAN_ONCE" value="Only cases where the same String may be appended to more than once"/>
               <oldparam id="OPT.USB.ANY" name="ANY" value="Any case where a String is appended to"/>
            </oldparameters>
            <parameters>
               <radioGroup id="OPT.USB.WHAT_TO_CHECK" label="What to Flag" prevType="MultipleChoice" showLabel="true">
                  <radioItem defaultValue="checked" label="Only cases where the same String may be appended to more than once" value="0"/>
                  <radioItem label="Any case where a String is appended to" value="1"/>
               </radioGroup>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.CLL" header="Check the logging level before calling potentially expensive logging operations." id="CLL" scope="LINE" severity="3" since="8.1">
            <messages>
               <msg index="1" value="This call to the logging method ''{0}()'' contains an embedded method call.  It may be more efficient to check the logging level first."/>
            </messages>
            <oldparameters>
               <oldparam id="OPT.CLL.LEVEL_CHECK_METHS" name="LEVEL_CHECK_METHS" value="Level checking methods (in form of \n&lt;regular expression for fully qualified type&gt;#&lt;regular expression for method name&gt;)"/>
               <oldparam id="OPT.CLL.LOGGING_METHS" name="LOGGING_METHS" value="Logging methods to be checked (in form of \n&lt;regular expression for fully qualified type&gt;#&lt;regular expression for method name&gt;)"/>
               <oldparam id="OPT.CLL.LOG_4J" name="LOG_4J" value="Apache Log and Log4j logging Levels which require checking"/>
               <oldparam id="OPT.CLL.UTIL_LOG" name="UTIL_LOG" value="java.util.logging Levels which require checking"/>
               <oldparam id="OPT.CLL.LOG_LEVELS" name="LOG_LEVELS" value="Logging levels to check"/>
               <oldparam id="OPT.CLL.CUSTOM_LOGS" name="CUSTOM_LOGS" value="Customized logging systems"/>
               <oldparam id="OPT.CLL.FATAL" name="FATAL" value="FATAL"/>
               <oldparam id="OPT.CLL.ERROR" name="ERROR" value="ERROR"/>
               <oldparam id="OPT.CLL.WARN" name="WARN" value="WARN"/>
               <oldparam id="OPT.CLL.INFO" name="INFO" value="INFO"/>
               <oldparam id="OPT.CLL.DEBUG" name="DEBUG" value="DEBUG"/>
               <oldparam id="OPT.CLL.TRACE" name="TRACE" value="TRACE"/>
               <oldparam id="OPT.CLL.SEVERE" name="SEVERE" value="SEVERE"/>
               <oldparam id="OPT.CLL.WARN_UTIL" name="WARN_UTIL" value="WARNING"/>
               <oldparam id="OPT.CLL.INFO_UTIL" name="INFO_UTIL" value="INFO"/>
               <oldparam id="OPT.CLL.CONFIG" name="CONFIG" value="CONFIG"/>
               <oldparam id="OPT.CLL.FINE" name="FINE" value="FINE"/>
               <oldparam id="OPT.CLL.FINER" name="FINER" value="FINER"/>
               <oldparam id="OPT.CLL.FINEST" name="FINEST" value="FINEST"/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="OPT.CLL.group.1" label="Apache Log and Log4j logging Levels which require checking">
                  <param defaultValue="false" id="OPT.CLL.FATAL" inputType="checkbox" label="FATAL"/>
                  <param defaultValue="false" id="OPT.CLL.ERROR" inputType="checkbox" label="ERROR"/>
                  <param defaultValue="true" id="OPT.CLL.WARN" inputType="checkbox" label="WARN"/>
                  <param defaultValue="true" id="OPT.CLL.INFO" inputType="checkbox" label="INFO"/>
                  <param defaultValue="true" id="OPT.CLL.DEBUG" inputType="checkbox" label="DEBUG"/>
                  <param defaultValue="true" id="OPT.CLL.TRACE" inputType="checkbox" label="TRACE"/>
               </group>
               <group collapsible="false" id="OPT.CLL.group.0" label="java.util.logging Levels which require checking">
                  <param defaultValue="false" id="OPT.CLL.SEVERE" inputType="checkbox" label="SEVERE"/>
                  <param defaultValue="true" id="OPT.CLL.WARN_UTIL" inputType="checkbox" label="WARNING"/>
                  <param defaultValue="true" id="OPT.CLL.INFO_UTIL" inputType="checkbox" label="INFO"/>
                  <param defaultValue="true" id="OPT.CLL.CONFIG" inputType="checkbox" label="CONFIG"/>
                  <param defaultValue="true" id="OPT.CLL.FINE" inputType="checkbox" label="FINE"/>
                  <param defaultValue="true" id="OPT.CLL.FINER" inputType="checkbox" label="FINER"/>
                  <param defaultValue="true" id="OPT.CLL.FINEST" inputType="checkbox" label="FINEST"/>
               </group>
               <group collapsible="false" id="OPT.CLL.tab.CUSTOM_LOGS" label="Customized logging systems">
                  <param defaultValue="" description="Logging methods to be checked (in form of &lt;regular expression for fully qualified type&gt;#&lt;regular expression for method name&gt;)" id="OPT.CLL.LOGGING_METHS" inputType="stringList" label="Logging methods to be checked" prevType="StringList"/>
                  <param defaultValue="" description="Level checking methods (in form of &lt;regular expression for fully qualified type&gt;#&lt;regular expression for method name&gt;)" id="OPT.CLL.LEVEL_CHECK_METHS" inputType="stringList" label="Level checking methods" prevType="StringList"/>
               </group>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.CCR" header="Close all &quot;java.io.Closeable&quot; resources in a &quot;finally&quot; block." id="CCR" scope="LINE" severity="3" since="8.1">
            <messages>
               <msg index="1" value="Resource ''{0}'' is opened but is not closed in a &quot;finally&quot; block."/>
            </messages>
            <oldparameters>
               <oldparam id="OPT.CCR.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
               <oldparam id="OPT.CCR.ADDITIONAL_CLOSE_METHODS" name="ADDITIONAL_CLOSE_METHODS" value="Additional resource closing methods (in regular expression)"/>
               <oldparam id="OPT.CCR.METHOD" name="METHOD" value="Method name"/>
               <oldparam id="OPT.CCR.TYPE" name="TYPE" value="Declaring type"/>
               <oldparam id="OPT.CCR.IGNORE_TYPES" name="IGNORE_TYPES" value="Ignored types (Specify fully qualified names)"/>
            </oldparameters>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE"/>
               <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE"/>
            </references>
            <parameters>
               <param defaultValue="java.io.ByteArrayInputStream;java.io.ByteArrayOutputStream;java.io.CharArrayWriter;java.io.StringBufferInputStream;java.io.StringReader;java.io.StringWriter;" id="OPT.CCR.IGNORE_TYPES" inputType="stringList" label="Ignored types (Specify fully qualified names)" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.AAM" header="Change non-&quot;private&quot; members to &quot;private&quot; in anonymous classes" id="AAM" scope="LINE" severity="3" since="8.2">
            <messages>
               <msg index="1" value="Method ''{0}()'' should be declared &quot;private&quot;."/>
               <msg index="2" value="Field ''{0}'' should be declared &quot;private&quot;."/>
               <msg index="3" value="Fields ''{0}'' should be declared &quot;private&quot;."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.CRSG" header="Avoid duplicate calls to the &quot;get&quot; methods of &quot;ResultSet&quot;" id="CRSG" scope="LINE" severity="3" since="8.2">
            <messages>
               <msg index="1" value="The method ''{0}()'' has already been called on the &quot;ResultSet&quot; &quot;{1}&quot; with the same argument."/>
               <msg index="2" value="The method ''{0}()'' has already been called on the &quot;ResultSet&quot; &quot;{1}&quot; with the same arguments."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.SDLS" header="Avoid using synchronized data structures for local variables" id="SDLS" scope="METHOD" severity="3" since="8.4">
            <messages>
               <msg index="1" value="Consider using a ''{0}'' instead of a ''{1}'' here for efficiency."/>
               <msg index="2" value="Consider using an ''{0}'' instead of a ''{1}'' here for efficiency."/>
            </messages>
            <oldparameters>
               <oldparam id="OPT.SDLS.IGNORE_NON_TRIVIAL" name="IGNORE_NON_TRIVIAL" value="Ignore cases where converting from a Vector to an ArrayList is not trivial"/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="OPT.SDLS.IGNORE_NON_TRIVIAL" inputType="checkbox" label="Ignore cases where converting from a Vector to an ArrayList is not trivial"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.LIOL" header="Move invariants outside of loops wherever possible." id="LIOL" scope="METHOD" severity="3" since="8.4">
            <messages>
               <msg index="1" value="It may be possible to move this assignment to the variable ''{0}'' outside of the enclosing loop."/>
               <msg index="2" value="It may be possible to move the declaration of the variable ''{0}'' outside of the enclosing loop."/>
               <msg index="3" value="It may be possible to move this assignment to the field ''{0}'' outside of the enclosing loop."/>
               <msg index="4" value="It may be possible to move this expression outside of the enclosing loop."/>
            </messages>
            <oldparameters>
               <oldparam id="OPT.LIOL.CONSTANT_METHODS" name="CONSTANT_METHODS" value="Specify method calls which should be considered constant."/>
               <oldparam id="OPT.LIOL.TYPE" name="TYPE" value="Type (regular expression)"/>
               <oldparam id="OPT.LIOL.METHOD" name="METHOD" value="Method (regular expression)"/>
            </oldparameters>
            <parameters>
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OPT.LIOL.CONSTANT_METHODS" label="Specify method calls which should be considered constant." reader="SATable">
                  <columns>
                     <column columnType="text" editable="true" id="OPT__LIOL__CONSTANT_METHODS__COLUMN1" label="Type (regular expression)" required="true"/>
                     <column columnType="text" editable="true" id="OPT__LIOL__CONSTANT_METHODS__COLUMN2" label="Method (regular expression)" required="true"/>
                  </columns>
                  <predefinedRows>
                     <row id="1">
                        <column refColumnId="OPT__LIOL__CONSTANT_METHODS__COLUMN1" value="^java\.util\.Map\.Entry$"/>
                        <column refColumnId="OPT__LIOL__CONSTANT_METHODS__COLUMN2" value="get.*"/>
                     </row>
                  </predefinedRows>
               </complexParamTable>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.SRA" header="Avoid using 'String.replaceAll()' with literal values." id="SRA" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="{0} is a literal value."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.AUMO" header="Avoid unnecessary Map operations." id="AUMO" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="''{0}'' calls &quot;containsKey()&quot; and then &quot;get()&quot;."/>
               <msg index="2" value="''{0}'' calls &quot;get()&quot; and then &quot;remove()&quot;."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.EIC" header="Use 'equalsIgnoreCase()' instead of calls to 'toLowerCase()' or 'toUpperCase()'" id="EIC" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="''{0}()'' called here."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.SBL" header="Avoid converting StringBuffer or StringBuilder to String to check length" id="SBL" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="''{0}()'' called here."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.STRBUF" header="Simplify methods that return strings that are always concatenated" id="STRBUF" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="Returned string always concatenated."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.SYN" header="Do not call a synchronized method inside of a loop" id="SYN" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Calling synchronized method ''{0}'' inside of a loop."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.SWIF" header="Avoid use of if statements if they can be replaced with switch statements" id="SWIF" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="This if statement would be more efficient if it was replaced with a switch statement."/>
            </messages>
            <oldparameters>
               <oldparam id="OPT.SWIF.NUMBER_LEVELS" name="NUMBER_LEVELS" value="Number of consecutive if statements before it should be flagged."/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="OPT.SWIF.tab.Type" label="Type">
                  <param defaultValue="3" id="OPT.SWIF.NUMBER_LEVELS" inputType="integer" label="Number of consecutive if statements before it should be flagged." min="2"/>
               </group>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.AAS" header="Use abbreviated assignment operators" id="AAS" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="&quot;{0}=&quot; abbreviated assignment operator not used."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.ANIPW" header="Avoid new instantiations of primitive wrapper objects, whose values are cached" id="ANIPW" scope="LINE" severity="3" since="8.4">
            <messages>
               <msg index="1" value="''{0}'' instantiates a cached primitive wrapper."/>
            </messages>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
            </references>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.CEIL" header="Avoid putting constant expressions inside loops" id="CEIL" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Consider simplifying this constant expression or moving it outside the body of the loop."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.LOOP" header="Do not instantiate variables in a loop body." id="LOOP" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Object creation in a loop body: {0}."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.MUNC" header="Avoid unnecessary comparisons to &quot;null&quot;" id="MUNC" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="This comparison to &quot;null&quot; may be unnecessary because ''{0}'' is always &quot;null&quot;."/>
               <msg index="2" value="This comparison to &quot;null&quot; may be unnecessary because ''{0}'' is never &quot;null&quot;."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.NCIO" header="Avoid 'null' check before 'instanceof'" id="NCIO" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="''{0}'' checks ''null'' before ''instanceof'' here."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.NIW" header="Avoid creating new instances of BigInteger and BigDecimal" id="NIW" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="''{0}'' already exists in ''{1}''."/>
            </messages>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
            </references>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.PRIM" header="Do not instantiate the wrapper classes for primitive types." id="PRIM" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Unnecessary instantiation of ''{0}'' object."/>
               <msg index="2" value="Unnecessary instantiation of ''{0}'' array."/>
            </messages>
            <oldparameters>
               <oldparam id="OPT.PRIM.TYPES_TO_CHECK" name="TYPES_TO_CHECK" value="Types to Check"/>
               <oldparam id="OPT.PRIM.BOOLEAN" name="BOOLEAN" value="Boolean"/>
               <oldparam id="OPT.PRIM.BYTE" name="BYTE" value="Byte"/>
               <oldparam id="OPT.PRIM.SHORT" name="SHORT" value="Short"/>
               <oldparam id="OPT.PRIM.INTEGER" name="INTEGER" value="Integer"/>
               <oldparam id="OPT.PRIM.LONG" name="LONG" value="Long"/>
               <oldparam id="OPT.PRIM.FLOAT" name="FLOAT" value="Float"/>
               <oldparam id="OPT.PRIM.DOUBLE" name="DOUBLE" value="Double"/>
               <oldparam id="OPT.PRIM.CHARACTER" name="CHARACTER" value="Character"/>
               <oldparam id="OPT.PRIM.CHECK_ARRAY" name="CHECK_ARRAY" value="Check arrays of primitive wrappers"/>
            </oldparameters>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
            </references>
            <parameters>
               <param defaultValue="false" id="OPT.PRIM.CHECK_ARRAY" inputType="checkbox" label="Check arrays of primitive wrappers"/>
               <group collapsible="false" id="OPT.PRIM.group.0" label="Types to Check">
                  <param defaultValue="true" id="OPT.PRIM.BOOLEAN" inputType="checkbox" label="Boolean"/>
                  <param defaultValue="true" id="OPT.PRIM.BYTE" inputType="checkbox" label="Byte"/>
                  <param defaultValue="true" id="OPT.PRIM.SHORT" inputType="checkbox" label="Short"/>
                  <param defaultValue="true" id="OPT.PRIM.INTEGER" inputType="checkbox" label="Integer"/>
                  <param defaultValue="true" id="OPT.PRIM.LONG" inputType="checkbox" label="Long"/>
                  <param defaultValue="true" id="OPT.PRIM.FLOAT" inputType="checkbox" label="Float"/>
                  <param defaultValue="true" id="OPT.PRIM.DOUBLE" inputType="checkbox" label="Double"/>
                  <param defaultValue="true" id="OPT.PRIM.CHARACTER" inputType="checkbox" label="Character"/>
               </group>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.SBS" header="Use 'StringBuilder' instead of 'StringBuffer' when synchronization is not required." id="SBS" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="Consider using &quot;StringBuilder&quot; for ''{0}''."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.USCL" header="Avoid questionable uses of non-short-circuit logic" id="USCL" scope="LINE" severity="2" since="9.0">
            <messages>
               <msg index="1" value="Usage of non-short-circuit logic: replace ''{0}'' with ''{1}'' unless you want both sides to always be evaluated."/>
               <msg index="2" value="Usage of non-short-circuit logic: use assignment with ''{0}'' instead of ''{1}'' unless you want both sides to always be evaluated."/>
            </messages>
            <oldparameters>
               <oldparam id="OPT.USCL.IGNORE_METHODS" name="IGNORE_METHODS" value="Ignore methods (in regular expression)"/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="OPT.USCL.tab.Type" label="Type">
                  <param defaultValue="^remove[.]*;^add[.]*" id="OPT.USCL.IGNORE_METHODS" inputType="stringList" label="Ignore methods that match the regular expression" prevType="StringList"/>
               </group>
               <param defaultValue="false" id="OPT.USCL.IGNORE_IF_COMMENT" inputType="checkbox" label="Ignore if the operator is directly followed by a comment, or the line ends with a comment"/>
               <param defaultValue="false" id="OPT.USCL.IGNORE_IF_COMMENT_ABOVE" inputType="checkbox" label="Ignore if the line above the operator contains a comment"/>
            </parameters>
         </rule>
      </category>
      <category description="Naming Conventions" name="NAMING">
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.UTIL" header="Use a naming convention for utility classes" id="UTIL" scope="LINE" severity="3" since="8.0" type="global">
            <messages>
               <msg index="1" value="Name of utility class ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="Name of utility class ''{0}'' matches user-specified regular expression ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.UTIL.NAME_REG" name="NAME_REG" value="Pattern of utility class names in regular expression:  "/>
               <oldparam id="NAMING.UTIL.IGNORE_CASE" name="IGNORE_CASE" value="Ignore case"/>
               <oldparam id="NAMING.UTIL.NEGATE" name="NEGATE" value="Negate regular expression"/>
            </oldparameters>
            <parameters>
               <param defaultValue="(Util$)|(Utility$)|(Utilities$)" id="NAMING.UTIL.NAME_REG" inputType="text" label="Pattern of utility class names in regular expression:  "/>
               <param defaultValue="false" id="NAMING.UTIL.NEGATE" inputType="checkbox" label="Negate regular expression"/>
               <param defaultValue="false" id="NAMING.UTIL.IGNORE_CASE" inputType="checkbox" label="Ignore case"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.DJLO" header="Do not declare types with the same name as types in the Java platform." id="DJLO" scope="LINE" severity="2" since="8.0">
            <messages>
               <msg index="1" value="The name of the type ''{0}'' matches that of a Java platform type."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.DJLO.CHECKED_PACKAGES" name="CHECKED_PACKAGES" value="Packages in the Java platform which should be checked for duplicate type names"/>
            </oldparameters>
            <parameters>
               <param defaultValue="java.lang" id="NAMING.DJLO.CHECKED_PACKAGES" inputType="stringList" label="Packages in the Java platform which should be checked for duplicate type names" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.NE" header="Use a naming convention for exceptions" id="NE" scope="CLASS" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Name of exception class ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="Name of exception class ''{0}'' matches user-specified regular expression ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.NE.CHECK_PROTECTED" name="CHECK_PROTECTED" value="check &quot;protected&quot; exception declaration."/>
               <oldparam id="NAMING.NE.IGNORE_CASE" name="IGNORE_CASE" value="Ignore case"/>
               <oldparam id="NAMING.NE.CHECK_PUBLIC" name="CHECK_PUBLIC" value="check &quot;public&quot; exception declaration."/>
               <oldparam id="NAMING.NE.CHECK_PACKAGE" name="CHECK_PACKAGE" value="check package-private exception declaration."/>
               <oldparam id="NAMING.NE.NEGATE" name="NEGATE" value="Negate regular expression"/>
               <oldparam id="NAMING.NE.CHECK_PRIVATE" name="CHECK_PRIVATE" value="check &quot;private&quot; exception declaration."/>
               <oldparam id="NAMING.NE.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression"/>
            </oldparameters>
            <extras>
               <arg name="default_reg_exp" value="Exception$"/>
            </extras>
            <parameters>
               <param defaultValue="Exception$" id="NAMING.NE.REGULAR_EXPRESSION" inputType="text" label="regular expression"/>
               <param defaultValue="true" id="NAMING.NE.CHECK_PUBLIC" inputType="checkbox" label="check &quot;public&quot; exception declaration."/>
               <param defaultValue="true" id="NAMING.NE.CHECK_PROTECTED" inputType="checkbox" label="check &quot;protected&quot; exception declaration."/>
               <param defaultValue="true" id="NAMING.NE.CHECK_PACKAGE" inputType="checkbox" label="check package-private exception declaration."/>
               <param defaultValue="true" id="NAMING.NE.CHECK_PRIVATE" inputType="checkbox" label="check &quot;private&quot; exception declaration."/>
               <param defaultValue="false" id="NAMING.NE.NEGATE" inputType="checkbox" label="Negate regular expression"/>
               <param defaultValue="false" id="NAMING.NE.IGNORE_CASE" inputType="checkbox" label="Ignore case"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.NAC" header="Use a naming convention for array and collection variables" id="NAC" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Variable name ''{0}'' does not match user-specified regular expression ''{1}'' for array and collection variables."/>
               <msg index="2" value="Variable name ''{0}'' matches user-specified regular expression ''{1}'' for array and collection variables."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.NAC.IGNORE_CASE" name="IGNORE_CASE" value="Ignore case"/>
               <oldparam id="NAMING.NAC.NEGATE" name="NEGATE" value="Negate regular expression"/>
               <oldparam id="NAMING.NAC.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression"/>
            </oldparameters>
            <extras>
               <arg name="default_reg_exp" value="(s|List|Set|Array|Table)$"/>
            </extras>
            <parameters>
               <param defaultValue="(s|List|Set|Array|Table)$" id="NAMING.NAC.REGULAR_EXPRESSION" inputType="text" label="regular expression"/>
               <param defaultValue="true" id="NAMING.NAC.CHECK_PUBLIC" inputType="checkbox" label="check &quot;public&quot; method."/>
               <param defaultValue="true" id="NAMING.NAC.CHECK_PROTECTED" inputType="checkbox" label="check &quot;protected&quot; method."/>
               <param defaultValue="true" id="NAMING.NAC.CHECK_PACKAGE" inputType="checkbox" label="check package-private method."/>
               <param defaultValue="true" id="NAMING.NAC.CHECK_PRIVATE" inputType="checkbox" label="check &quot;private&quot; method."/>
               <param defaultValue="false" id="NAMING.NAC.NEGATE" inputType="checkbox" label="Negate regular expression"/>
               <param defaultValue="true" id="NAMING.NAC.IGNORE_CASE" inputType="checkbox" label="Ignore case"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.GETA" header="Follow a naming convention for getter methods" id="GETA" scope="METHOD" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Name of getter method ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="Name of getter method ''{0}'' matches user-specified regular expression ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.GETA.CHECK_PROTECTED" name="CHECK_PROTECTED" value="check &quot;protected&quot; method."/>
               <oldparam id="NAMING.GETA.IGNORE_CASE" name="IGNORE_CASE" value="Ignore case"/>
               <oldparam id="NAMING.GETA.CHECK_PUBLIC" name="CHECK_PUBLIC" value="check &quot;public&quot; method."/>
               <oldparam id="NAMING.GETA.CHECK_PACKAGE" name="CHECK_PACKAGE" value="check package-private method."/>
               <oldparam id="NAMING.GETA.NEGATE" name="NEGATE" value="Negate regular expression"/>
               <oldparam id="NAMING.GETA.CHECK_PRIVATE" name="CHECK_PRIVATE" value="check &quot;private&quot; method."/>
               <oldparam id="NAMING.GETA.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression"/>
            </oldparameters>
            <extras>
               <arg name="default_reg_exp" value="^get."/>
            </extras>
            <parameters>
               <param defaultValue="^get." id="NAMING.GETA.REGULAR_EXPRESSION" inputType="text" label="regular expression"/>
               <param defaultValue="true" id="NAMING.GETA.CHECK_PUBLIC" inputType="checkbox" label="check &quot;public&quot; method."/>
               <param defaultValue="true" id="NAMING.GETA.CHECK_PROTECTED" inputType="checkbox" label="check &quot;protected&quot; method."/>
               <param defaultValue="true" id="NAMING.GETA.CHECK_PACKAGE" inputType="checkbox" label="check package-private method."/>
               <param defaultValue="true" id="NAMING.GETA.CHECK_PRIVATE" inputType="checkbox" label="check &quot;private&quot; method."/>
               <param defaultValue="false" id="NAMING.GETA.NEGATE" inputType="checkbox" label="Negate regular expression"/>
               <param defaultValue="false" id="NAMING.GETA.IGNORE_CASE" inputType="checkbox" label="Ignore case"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.GETB" header="Follow a naming convention for &quot;boolean&quot; getter methods" id="GETB" scope="METHOD" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Name of &quot;boolean&quot; getter method ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="Name of &quot;boolean&quot; getter method ''{0}'' matches user-specified regular expression ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.GETB.CHECK_PROTECTED" name="CHECK_PROTECTED" value="check &quot;protected&quot; method."/>
               <oldparam id="NAMING.GETB.IGNORE_CASE" name="IGNORE_CASE" value="Ignore case"/>
               <oldparam id="NAMING.GETB.CHECK_PUBLIC" name="CHECK_PUBLIC" value="check &quot;public&quot; method."/>
               <oldparam id="NAMING.GETB.CHECK_PACKAGE" name="CHECK_PACKAGE" value="check package-private method."/>
               <oldparam id="NAMING.GETB.NEGATE" name="NEGATE" value="Negate regular expression"/>
               <oldparam id="NAMING.GETB.CHECK_PRIVATE" name="CHECK_PRIVATE" value="check &quot;private&quot; method."/>
               <oldparam id="NAMING.GETB.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression"/>
            </oldparameters>
            <extras>
               <arg name="default_reg_exp" value="^(is|can|has|have|are|was|contains)."/>
            </extras>
            <parameters>
               <param defaultValue="^(is|can|has|have|are|was|contains)." id="NAMING.GETB.REGULAR_EXPRESSION" inputType="text" label="regular expression"/>
               <param defaultValue="true" id="NAMING.GETB.CHECK_PUBLIC" inputType="checkbox" label="check &quot;public&quot; method."/>
               <param defaultValue="true" id="NAMING.GETB.CHECK_PROTECTED" inputType="checkbox" label="check &quot;protected&quot; method."/>
               <param defaultValue="true" id="NAMING.GETB.CHECK_PACKAGE" inputType="checkbox" label="check package-private method."/>
               <param defaultValue="true" id="NAMING.GETB.CHECK_PRIVATE" inputType="checkbox" label="check &quot;private&quot; method."/>
               <param defaultValue="false" id="NAMING.GETB.NEGATE" inputType="checkbox" label="Negate regular expression"/>
               <param defaultValue="false" id="NAMING.GETB.IGNORE_CASE" inputType="checkbox" label="Ignore case"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.SETA" header="Follow a naming convention for setter methods" id="SETA" scope="METHOD" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Name of setter method ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="Name of setter method ''{0}'' matches user-specified regular expression ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.SETA.CHECK_PROTECTED" name="CHECK_PROTECTED" value="check &quot;protected&quot; method."/>
               <oldparam id="NAMING.SETA.IGNORE_CASE" name="IGNORE_CASE" value="Ignore case"/>
               <oldparam id="NAMING.SETA.CHECK_PUBLIC" name="CHECK_PUBLIC" value="check &quot;public&quot; method."/>
               <oldparam id="NAMING.SETA.CHECK_PACKAGE" name="CHECK_PACKAGE" value="check package-private method."/>
               <oldparam id="NAMING.SETA.NEGATE" name="NEGATE" value="Negate regular expression"/>
               <oldparam id="NAMING.SETA.CHECK_PRIVATE" name="CHECK_PRIVATE" value="check &quot;private&quot; method."/>
               <oldparam id="NAMING.SETA.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression"/>
            </oldparameters>
            <extras>
               <arg name="default_reg_exp" value="^set."/>
            </extras>
            <parameters>
               <param defaultValue="^set." id="NAMING.SETA.REGULAR_EXPRESSION" inputType="text" label="regular expression"/>
               <param defaultValue="true" id="NAMING.SETA.CHECK_PUBLIC" inputType="checkbox" label="check &quot;public&quot; method."/>
               <param defaultValue="true" id="NAMING.SETA.CHECK_PROTECTED" inputType="checkbox" label="check &quot;protected&quot; method."/>
               <param defaultValue="true" id="NAMING.SETA.CHECK_PACKAGE" inputType="checkbox" label="check package-private method."/>
               <param defaultValue="true" id="NAMING.SETA.CHECK_PRIVATE" inputType="checkbox" label="check &quot;private&quot; method."/>
               <param defaultValue="false" id="NAMING.SETA.NEGATE" inputType="checkbox" label="Negate regular expression"/>
               <param defaultValue="false" id="NAMING.SETA.IGNORE_CASE" inputType="checkbox" label="Ignore case"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.LLI" header="Follow limits for the lengths of type, method, field, parameter, and variable names." id="LLI" scope="LINE" severity="4" since="8.2">
            <messages>
               <msg index="1" value="The length of the identifier &quot;{0}&quot; is less than the minimum length ({1})."/>
               <msg index="2" value="The length of the identifier &quot;{0}&quot; exceeds the maximum length ({1})."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.LLI.TYPE_MIN_LENGTH" name="TYPE_MIN_LENGTH" value="Minimum length"/>
               <oldparam id="NAMING.LLI.TYPE_MAX_LENGTH" name="TYPE_MAX_LENGTH" value="Maximum length"/>
               <oldparam id="NAMING.LLI.METHOD_MIN_LENGTH" name="METHOD_MIN_LENGTH" value="Minimum length"/>
               <oldparam id="NAMING.LLI.METHOD_MAX_LENGTH" name="METHOD_MAX_LENGTH" value="Maximum length"/>
               <oldparam id="NAMING.LLI.FIELD_MIN_LENGTH" name="FIELD_MIN_LENGTH" value="Minimum length"/>
               <oldparam id="NAMING.LLI.FIELD_MAX_LENGTH" name="FIELD_MAX_LENGTH" value="Maximum length"/>
               <oldparam id="NAMING.LLI.PARAM_MIN_LENGTH" name="PARAM_MIN_LENGTH" value="Minimum length"/>
               <oldparam id="NAMING.LLI.PARAM_MAX_LENGTH" name="PARAM_MAX_LENGTH" value="Maximum length"/>
               <oldparam id="NAMING.LLI.VAR_MIN_LENGTH" name="VAR_MIN_LENGTH" value="Minimum length"/>
               <oldparam id="NAMING.LLI.VAR_MAX_LENGTH" name="VAR_MAX_LENGTH" value="Maximum length"/>
               <oldparam id="NAMING.LLI.LOOP_INDEX_MIN_LENGTH" name="LOOP_INDEX_MIN_LENGTH" value="Minimum length"/>
               <oldparam id="NAMING.LLI.CHECK_LOOP_INDEX" name="CHECK_LOOP_INDEX" value="Check loop indices"/>
               <oldparam id="NAMING.LLI.CHECK_TYPE" name="CHECK_TYPE" value="Check type names"/>
               <oldparam id="NAMING.LLI.CHECK_METHOD" name="CHECK_METHOD" value="Check method names"/>
               <oldparam id="NAMING.LLI.CHECK_FIELD" name="CHECK_FIELD" value="Check field names"/>
               <oldparam id="NAMING.LLI.CHECK_PARAM" name="CHECK_PARAM" value="Check parameter names"/>
               <oldparam id="NAMING.LLI.CHECK_VARIABLE" name="CHECK_VARIABLE" value="Check variable names"/>
               <oldparam id="NAMING.LLI.IGNORE_TYPE" name="IGNORE_TYPE" value="Ignore the following names:"/>
               <oldparam id="NAMING.LLI.IGNORE_METHOD" name="IGNORE_METHOD" value="Ignore the following names:"/>
               <oldparam id="NAMING.LLI.IGNORE_FIELD" name="IGNORE_FIELD" value="Ignore the following names:"/>
               <oldparam id="NAMING.LLI.IGNORE_PARAM" name="IGNORE_PARAM" value="Ignore the following names:"/>
               <oldparam id="NAMING.LLI.IGNORE_VARIABLE" name="IGNORE_VARIABLE" value="Ignore the following names:"/>
               <oldparam id="NAMING.LLI.TYPE" name="TYPE" value="Type"/>
               <oldparam id="NAMING.LLI.METHOD" name="METHOD" value="Method"/>
               <oldparam id="NAMING.LLI.FIELD" name="FIELD" value="Field"/>
               <oldparam id="NAMING.LLI.PARAMETER" name="PARAMETER" value="Parameter"/>
               <oldparam id="NAMING.LLI.VARIABLE" name="VARIABLE" value="Variable"/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="NAMING.LLI.tab.TYPE" label="Type">
                  <param defaultValue="true" id="NAMING.LLI.CHECK_TYPE" inputType="checkbox" label="Check type names"/>
                  <param defaultValue="3" id="NAMING.LLI.TYPE_MIN_LENGTH" inputType="integer" label="Minimum length" min="0"/>
                  <param defaultValue="30" id="NAMING.LLI.TYPE_MAX_LENGTH" inputType="integer" label="Maximum length" min="1"/>
                  <param defaultValue="" id="NAMING.LLI.IGNORE_TYPE" inputType="stringList" label="Ignore the following names:" prevType="StringList"/>
               </group>
               <group collapsible="false" id="NAMING.LLI.tab.METHOD" label="Method">
                  <param defaultValue="true" id="NAMING.LLI.CHECK_METHOD" inputType="checkbox" label="Check method names"/>
                  <param defaultValue="3" id="NAMING.LLI.METHOD_MIN_LENGTH" inputType="integer" label="Minimum length" min="1"/>
                  <param defaultValue="30" id="NAMING.LLI.METHOD_MAX_LENGTH" inputType="integer" label="Maximum length" min="1"/>
                  <param defaultValue="" id="NAMING.LLI.IGNORE_METHOD" inputType="stringList" label="Ignore the following names:" prevType="StringList"/>
               </group>
               <group collapsible="false" id="NAMING.LLI.tab.FIELD" label="Field">
                  <param defaultValue="true" id="NAMING.LLI.CHECK_FIELD" inputType="checkbox" label="Check field names"/>
                  <param defaultValue="2" id="NAMING.LLI.FIELD_MIN_LENGTH" inputType="integer" label="Minimum length" min="1"/>
                  <param defaultValue="30" id="NAMING.LLI.FIELD_MAX_LENGTH" inputType="integer" label="Maximum length" min="1"/>
                  <param defaultValue="" id="NAMING.LLI.IGNORE_FIELD" inputType="stringList" label="Ignore the following names:" prevType="StringList"/>
               </group>
               <group collapsible="false" id="NAMING.LLI.tab.PARAMETER" label="Parameter">
                  <param defaultValue="true" id="NAMING.LLI.CHECK_PARAM" inputType="checkbox" label="Check parameter names"/>
                  <param defaultValue="2" id="NAMING.LLI.PARAM_MIN_LENGTH" inputType="integer" label="Minimum length" min="1"/>
                  <param defaultValue="30" id="NAMING.LLI.PARAM_MAX_LENGTH" inputType="integer" label="Maximum length" min="1"/>
                  <param defaultValue="" id="NAMING.LLI.IGNORE_PARAM" inputType="stringList" label="Ignore the following names:" prevType="StringList"/>
               </group>
               <group collapsible="false" id="NAMING.LLI.tab.VARIABLE" label="Variable">
                  <param defaultValue="true" id="NAMING.LLI.CHECK_VARIABLE" inputType="checkbox" label="Check variable names"/>
                  <param defaultValue="2" id="NAMING.LLI.VAR_MIN_LENGTH" inputType="integer" label="Minimum length" min="1"/>
                  <param defaultValue="30" id="NAMING.LLI.VAR_MAX_LENGTH" inputType="integer" label="Maximum length" min="1"/>
                  <param defaultValue="false" id="NAMING.LLI.CHECK_LOOP_INDEX" inputType="checkbox" label="Check loop indices">
                     <param defaultValue="1" id="NAMING.LLI.LOOP_INDEX_MIN_LENGTH" inputType="integer" label="Minimum length" min="1"/>
                  </param>
                  <param defaultValue="" id="NAMING.LLI.IGNORE_VARIABLE" inputType="stringList" label="Ignore the following names:" prevType="StringList"/>
               </group>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.ECN" header="Ensure class names reflect classes which they extend." id="ECN" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Class ''{0}'' does not extend ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.ECN.CHECKED_TYPES" name="CHECKED_TYPES" value="Check the following names and types:"/>
               <oldparam id="NAMING.ECN.NAME" name="NAME" value="Name of class (regular expression)"/>
               <oldparam id="NAMING.ECN.QN" name="QN" value="Extended class (qualified name)"/>
            </oldparameters>
            <parameters>
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="NAMING.ECN.CHECKED_TYPES" label="Check the following names and types:" reader="SATable">
                  <columns>
                     <column columnType="text" editable="true" id="NAMING__ECN__CHECKED_TYPES__COLUMN1" label="Name of class (regular expression)" required="true"/>
                     <column columnType="text" editable="true" id="NAMING__ECN__CHECKED_TYPES__COLUMN2" label="Extended class (qualified name)" required="true"/>
                  </columns>
                  <predefinedRows>
                     <row id="1">
                        <column refColumnId="NAMING__ECN__CHECKED_TYPES__COLUMN1" value="^.*Exception$"/>
                        <column refColumnId="NAMING__ECN__CHECKED_TYPES__COLUMN2" value="java.lang.Exception"/>
                     </row>
                     <row id="2">
                        <column refColumnId="NAMING__ECN__CHECKED_TYPES__COLUMN1" value="^.*Throwable$"/>
                        <column refColumnId="NAMING__ECN__CHECKED_TYPES__COLUMN2" value="java.lang.Throwable"/>
                     </row>
                  </predefinedRows>
               </complexParamTable>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.ANNS" header="Follow class name conventions defined for annotations" id="ANNS" scope="LINE" severity="3" since="9.2">
            <messages>
               <msg index="1" value="Your class should using regexp ''{0}'' convention because using ''{1}'' annotation."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.ANNS.ANNOTATIONS_TYPES" name="ANNOTATIONS_TYPES" value="Fully qualified name of annotation"/>
               <oldparam id="NAMING.ANNS.EXPECTED_NAMES" name="EXPECTED_NAMES" value="Expected class name"/>
               <oldparam id="NAMING.ANNS.SET_CLASS_NAME" name="SET_CLASS_NAME" value="Configure expected name for class using annotation"/>
            </oldparameters>
            <parameters>
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="NAMING.ANNS.SET_CLASS_NAME" label="Configure expected name for class using annotation" reader="SATable">
                  <columns>
                     <column columnType="text" editable="true" id="NAMING__ANNS__SET_CLASS_NAME__COLUMN1" label="Expected class name" required="true"/>
                     <column columnType="text" editable="true" id="NAMING__ANNS__SET_CLASS_NAME__COLUMN2" label="Fully qualified name of annotation" required="true"/>
                  </columns>
               </complexParamTable>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.CVN" header="Use conventional variable names" id="CVN" scope="LINE" severity="4" since="4.5">
            <messages>
               <msg index="1" value="Variable name ''{0}'' is not of type &quot;{1}&quot;."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.CVN.CHECK" name="CHECK" value="check"/>
               <oldparam id="NAMING.CVN.LOCAL" name="LOCAL" value="Local variable"/>
               <oldparam id="NAMING.CVN.NAMING_TABLE" name="NAMING_TABLE" value="Local variable naming convention table"/>
               <oldparam id="NAMING.CVN.TYPE" name="TYPE" value="Type"/>
            </oldparameters>
            <parameters>
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="NAMING.CVN.NAMING_TABLE" label="Local variable naming convention table" reader="SATable">
                  <columns>
                     <column columnType="checkbox" defaultValue="true" editable="true" id="NAMING__CVN__NAMING_TABLE__COLUMN1" label="" required="true"/>
                     <column columnType="text" defaultValue="unknown" editable="true" id="NAMING__CVN__NAMING_TABLE__COLUMN2" label="Local variable" required="true" textSize="smallPlus"/>
                     <column columnType="text" defaultValue="unknown" editable="true" id="NAMING__CVN__NAMING_TABLE__COLUMN3" label="Type" required="true"/>
                  </columns>
                  <predefinedRows>
                     <row id="1">
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN1" value="true"/>
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN2" value="b"/>
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN3" value="byte"/>
                     </row>
                     <row id="2">
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN1" value="true"/>
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN2" value="c"/>
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN3" value="char"/>
                     </row>
                     <row id="3">
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN1" value="true"/>
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN2" value="d"/>
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN3" value="double"/>
                     </row>
                     <row id="4">
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN1" value="true"/>
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN2" value="f"/>
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN3" value="float"/>
                     </row>
                     <row id="5">
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN1" value="true"/>
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN2" value="i"/>
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN3" value="int"/>
                     </row>
                     <row id="6">
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN1" value="true"/>
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN2" value="j"/>
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN3" value="int"/>
                     </row>
                     <row id="7">
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN1" value="true"/>
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN2" value="k"/>
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN3" value="int"/>
                     </row>
                     <row id="8">
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN1" value="true"/>
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN2" value="k"/>
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN3" value="long"/>
                     </row>
                     <row id="9">
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN1" value="true"/>
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN2" value="o"/>
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN3" value="java.lang.Object"/>
                     </row>
                     <row id="10">
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN1" value="true"/>
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN2" value="s"/>
                        <column refColumnId="NAMING__CVN__NAMING_TABLE__COLUMN3" value="java.lang.String"/>
                     </row>
                  </predefinedRows>
               </complexParamTable>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.DSN" header="Avoid using dollar signs in names." id="DSN" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="Name ''{0}'' used here."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.DSN.WHAT_TO_CHECK" name="WHAT_TO_CHECK" value="What to check"/>
               <oldparam id="NAMING.DSN.CHECK_TYPE" name="CHECK_TYPE" value="Check type declarations"/>
               <oldparam id="NAMING.DSN.CHECK_ANNOTATION" name="CHECK_ANNOTATION" value="Check annotation declarations"/>
               <oldparam id="NAMING.DSN.CHECK_ENUM" name="CHECK_ENUM" value="Check enum declarations"/>
               <oldparam id="NAMING.DSN.CHECK_CLASS" name="CHECK_CLASS" value="Check class declarations"/>
               <oldparam id="NAMING.DSN.CHECK_INTERFACE" name="CHECK_INTERFACE" value="Check interface declarations"/>
               <oldparam id="NAMING.DSN.CHECK_METHOD" name="CHECK_METHOD" value="Check method declarations"/>
               <oldparam id="NAMING.DSN.CHECK_VARIABLE" name="CHECK_VARIABLE" value="Check variable declarations"/>
               <oldparam id="NAMING.DSN.CHECK_FIELD" name="CHECK_FIELD" value="Check field declarations"/>
               <oldparam id="NAMING.DSN.CHECK_LOCAL_VARIABLE" name="CHECK_LOCAL_VARIABLE" value="Check local variable declarations"/>
               <oldparam id="NAMING.DSN.CHECK_PARAMETER" name="CHECK_PARAMETER" value="Check parameter declarations"/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="NAMING.DSN.group.0" label="What to check">
                  <param defaultValue="true" id="NAMING.DSN.CHECK_TYPE" inputType="checkbox" label="Check type declarations">
                     <param defaultValue="true" id="NAMING.DSN.CHECK_ANNOTATION" inputType="checkbox" label="Check annotation declarations"/>
                     <param defaultValue="true" id="NAMING.DSN.CHECK_ENUM" inputType="checkbox" label="Check enum declarations"/>
                     <param defaultValue="true" id="NAMING.DSN.CHECK_CLASS" inputType="checkbox" label="Check class declarations"/>
                     <param defaultValue="true" id="NAMING.DSN.CHECK_INTERFACE" inputType="checkbox" label="Check interface declarations"/>
                  </param>
                  <param defaultValue="true" id="NAMING.DSN.CHECK_METHOD" inputType="checkbox" label="Check method declarations"/>
                  <param defaultValue="true" id="NAMING.DSN.CHECK_VARIABLE" inputType="checkbox" label="Check variable declarations">
                     <param defaultValue="true" id="NAMING.DSN.CHECK_FIELD" inputType="checkbox" label="Check field declarations"/>
                     <param defaultValue="true" id="NAMING.DSN.CHECK_LOCAL_VARIABLE" inputType="checkbox" label="Check local variable declarations"/>
                     <param defaultValue="true" id="NAMING.DSN.CHECK_PARAMETER" inputType="checkbox" label="Check parameter declarations"/>
                  </param>
               </group>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.EXTENDS" header="Follow class name conventions defined for base classes" id="EXTENDS" scope="LINE" severity="3" since="9.2">
            <messages>
               <msg index="1" value="Your class should using regexp ''{0}'' convention because extends ''{1}'' class."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.EXTENDS.CHECK_HIERARCHY" name="CHECK_HIERARCHY" value="Check hierarchy"/>
               <oldparam id="NAMING.EXTENDS.EXTENDS_CLASSES" name="EXTENDS_CLASSES" value="Fully qualified name of superclass"/>
               <oldparam id="NAMING.EXTENDS.EXPECTED_NAMES" name="EXPECTED_NAMES" value="Expected class name"/>
               <oldparam id="NAMING.EXTENDS.SET_CLASS_NAME" name="SET_CLASS_NAME" value="Configure expected name for class extends superclass"/>
            </oldparameters>
            <parameters>
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="NAMING.EXTENDS.SET_CLASS_NAME" label="Configure expected name for class extends superclass" reader="SATable">
                  <columns>
                     <column columnType="checkbox" defaultValue="true" editable="true" id="NAMING__EXTENDS__SET_CLASS_NAME__COLUMN1" label="Check hierarchy" required="true"/>
                     <column columnType="text" editable="true" id="NAMING__EXTENDS__SET_CLASS_NAME__COLUMN2" label="Expected class name" required="true"/>
                     <column columnType="text" editable="true" id="NAMING__EXTENDS__SET_CLASS_NAME__COLUMN3" label="Fully qualified name of superclass" required="true"/>
                  </columns>
               </complexParamTable>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.IMPLS" header="Follow class name conventions defined for implemented interfaces" id="IMPLS" scope="LINE" severity="3" since="9.2">
            <messages>
               <msg index="1" value="Your class should using regexp ''{0}'' convention because implements ''{1}'' interface."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.IMPLS.CHECK_HIERARCHY" name="CHECK_HIERARCHY" value="Check hierarchy"/>
               <oldparam id="NAMING.IMPLS.IMPLEMENTS_INTERFACES" name="IMPLEMENTS_INTERFACES" value="Fully qualified name of interface"/>
               <oldparam id="NAMING.IMPLS.EXPECTED_NAMES" name="EXPECTED_NAMES" value="Expected class name"/>
               <oldparam id="NAMING.IMPLS.SET_CLASS_NAME" name="SET_CLASS_NAME" value="Configure expected name for class implements interface"/>
            </oldparameters>
            <parameters>
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" description="You can place here regex(ex. pattern that should follow the class name) or fully qualified class name." id="NAMING.IMPLS.SET_CLASS_NAME" label="Configure expected name for class implements interface" reader="SATable">
                  <columns>
                     <column columnType="checkbox" defaultValue="true" editable="true" id="NAMING__IMPLS__SET_CLASS_NAME__COLUMN1" label="Check hierarchy" required="true"/>
                     <column columnType="text" editable="true" id="NAMING__IMPLS__SET_CLASS_NAME__COLUMN2" label="Expected fully qualified class name" required="true"/>
                     <column columnType="text" editable="true" id="NAMING__IMPLS__SET_CLASS_NAME__COLUMN3" label="Fully qualified name of interface" required="true"/>
                  </columns>
               </complexParamTable>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.IRB" header="Use 'is...'  only for naming methods that return a &quot;boolean&quot;" id="IRB" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="''{0} ()'' starts with ''is'' but does not &quot;return&quot; a &quot;boolean&quot;"/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.NA" header="Use a naming convention for annotations" id="NA" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Name of annotation ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="Name of annotation ''{0}'' matches user-specified regular expression ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.NA.CHECK_PROTECTED" name="CHECK_PROTECTED" value="check &quot;protected&quot; annotation declaration."/>
               <oldparam id="NAMING.NA.IGNORE_CASE" name="IGNORE_CASE" value="Ignore case"/>
               <oldparam id="NAMING.NA.CHECK_PUBLIC" name="CHECK_PUBLIC" value="check &quot;public&quot; annotation declaration."/>
               <oldparam id="NAMING.NA.NEGATE" name="NEGATE" value="Negate regular expression"/>
               <oldparam id="NAMING.NA.CHECK_PACKAGE" name="CHECK_PACKAGE" value="check package-private annotation declaration."/>
               <oldparam id="NAMING.NA.CHECK_PRIVATE" name="CHECK_PRIVATE" value="check &quot;private&quot; annotation declaration."/>
               <oldparam id="NAMING.NA.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression"/>
            </oldparameters>
            <extras>
               <arg name="default_reg_exp" value="^[A-Z]"/>
            </extras>
            <parameters>
               <param defaultValue="^[A-Z]" id="NAMING.NA.REGULAR_EXPRESSION" inputType="text" label="regular expression"/>
               <param defaultValue="true" id="NAMING.NA.CHECK_PUBLIC" inputType="checkbox" label="check &quot;public&quot; annotation declaration."/>
               <param defaultValue="true" id="NAMING.NA.CHECK_PROTECTED" inputType="checkbox" label="check &quot;protected&quot; annotation declaration."/>
               <param defaultValue="true" id="NAMING.NA.CHECK_PACKAGE" inputType="checkbox" label="check package-private annotation declaration."/>
               <param defaultValue="true" id="NAMING.NA.CHECK_PRIVATE" inputType="checkbox" label="check &quot;private&quot; annotation declaration."/>
               <param defaultValue="false" id="NAMING.NA.NEGATE" inputType="checkbox" label="Negate regular expression"/>
               <param defaultValue="false" id="NAMING.NA.IGNORE_CASE" inputType="checkbox" label="Ignore case"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.NACL" header="Use a naming convention for &quot;abstract&quot; classes" id="NACL" scope="CLASS" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Name of &quot;abstract&quot; class ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="Name of &quot;abstract&quot; class ''{0}'' matches user-specified regular expression ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.NACL.CHECK_PROTECTED" name="CHECK_PROTECTED" value="check protected class."/>
               <oldparam id="NAMING.NACL.IGNORE_CASE" name="IGNORE_CASE" value="Ignore case"/>
               <oldparam id="NAMING.NACL.CHECK_PUBLIC" name="CHECK_PUBLIC" value="check public class."/>
               <oldparam id="NAMING.NACL.NEGATE" name="NEGATE" value="Negate regular expression"/>
               <oldparam id="NAMING.NACL.CHECK_PACKAGE" name="CHECK_PACKAGE" value="check package-private class."/>
               <oldparam id="NAMING.NACL.CHECK_PRIVATE" name="CHECK_PRIVATE" value="check private class."/>
               <oldparam id="NAMING.NACL.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression"/>
            </oldparameters>
            <extras>
               <arg name="default_reg_exp" value="^Abstract|Factory$"/>
            </extras>
            <parameters>
               <param defaultValue="^Abstract|Factory$" id="NAMING.NACL.REGULAR_EXPRESSION" inputType="text" label="regular expression"/>
               <param defaultValue="true" id="NAMING.NACL.CHECK_PUBLIC" inputType="checkbox" label="check public class."/>
               <param defaultValue="true" id="NAMING.NACL.CHECK_PROTECTED" inputType="checkbox" label="check protected class."/>
               <param defaultValue="true" id="NAMING.NACL.CHECK_PACKAGE" inputType="checkbox" label="check package-private class."/>
               <param defaultValue="true" id="NAMING.NACL.CHECK_PRIVATE" inputType="checkbox" label="check private class."/>
               <param defaultValue="false" id="NAMING.NACL.NEGATE" inputType="checkbox" label="Negate regular expression"/>
               <param defaultValue="false" id="NAMING.NACL.IGNORE_CASE" inputType="checkbox" label="Ignore case"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.NCL" header="Use a naming convention for classes" id="NCL" scope="CLASS" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Name of class ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="Name of class ''{0}'' matches user-specified regular expression ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.NCL.CHECK_PUBLIC" name="CHECK_PUBLIC" value="check &quot;public&quot; top-level class."/>
               <oldparam id="NAMING.NCL.LOCAL_LEVEL" name="LOCAL_LEVEL" value="Local class"/>
               <oldparam id="NAMING.NCL.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression of top-level class"/>
               <oldparam id="NAMING.NCL.LOCAL_CHECK_PACKAGE" name="LOCAL_CHECK_PACKAGE" value="check local class."/>
               <oldparam id="NAMING.NCL.INNER_CHECK_PUBLIC" name="INNER_CHECK_PUBLIC" value="check &quot;public&quot; member class."/>
               <oldparam id="NAMING.NCL.INNER_CHECK_PROTECTED" name="INNER_CHECK_PROTECTED" value="check &quot;protected&quot; member class."/>
               <oldparam id="NAMING.NCL.NEGATE_TOP_LEVEL" name="NEGATE_TOP_LEVEL" value="Negate regular expression"/>
               <oldparam id="NAMING.NCL.NEGATE_LOCAL" name="NEGATE_LOCAL" value="Negate regular expression"/>
               <oldparam id="NAMING.NCL.NEGATE_MEMBER" name="NEGATE_MEMBER" value="Negate regular expression"/>
               <oldparam id="NAMING.NCL.IGNORE_CASE_TOP_LEVEL" name="IGNORE_CASE_TOP_LEVEL" value="Ignore case"/>
               <oldparam id="NAMING.NCL.IGNORE_CASE_LOCAL" name="IGNORE_CASE_LOCAL" value="Ignore case"/>
               <oldparam id="NAMING.NCL.IGNORE_CASE_MEMBER" name="IGNORE_CASE_MEMBER" value="Ignore case"/>
               <oldparam id="NAMING.NCL.TOP_LEVEL" name="TOP_LEVEL" value="Top-level class"/>
               <oldparam id="NAMING.NCL.INNER_REGULAR_EXPRESSION" name="INNER_REGULAR_EXPRESSION" value="regular expression of member class"/>
               <oldparam id="NAMING.NCL.CHECK_PACKAGE" name="CHECK_PACKAGE" value="check package-private top-level class."/>
               <oldparam id="NAMING.NCL.IGNORE_CASE" name="IGNORE_CASE" value="Ignore case"/>
               <oldparam id="NAMING.NCL.INNER_CHECK_PACKAGE" name="INNER_CHECK_PACKAGE" value="check package-private member class."/>
               <oldparam id="NAMING.NCL.INNER_LEVEL" name="INNER_LEVEL" value="Member class"/>
               <oldparam id="NAMING.NCL.LOCAL_REGULAR_EXPRESSION" name="LOCAL_REGULAR_EXPRESSION" value="regular expression of local class"/>
               <oldparam id="NAMING.NCL.INNER_CHECK_PRIVATE" name="INNER_CHECK_PRIVATE" value="check &quot;private&quot; member class."/>
            </oldparameters>
            <extras>
               <arg name="default_reg_exp" value="^[A-Z]"/>
            </extras>
            <parameters>
               <group collapsible="false" id="NAMING.NCL.tab.TOP_LEVEL" label="Top-level class">
                  <param defaultValue="^[A-Z]" id="NAMING.NCL.REGULAR_EXPRESSION" inputType="text" label="regular expression of top-level class"/>
                  <param defaultValue="true" id="NAMING.NCL.CHECK_PUBLIC" inputType="checkbox" label="check &quot;public&quot; top-level class."/>
                  <param defaultValue="true" id="NAMING.NCL.CHECK_PACKAGE" inputType="checkbox" label="check package-private top-level class."/>
                  <param defaultValue="false" id="NAMING.NCL.NEGATE_TOP_LEVEL" inputType="checkbox" label="Negate regular expression"/>
                  <param defaultValue="false" id="NAMING.NCL.IGNORE_CASE_TOP_LEVEL" inputType="checkbox" label="Ignore case"/>
               </group>
               <group collapsible="false" id="NAMING.NCL.tab.INNER_LEVEL" label="Member class">
                  <param defaultValue="^[A-Z]" id="NAMING.NCL.INNER_REGULAR_EXPRESSION" inputType="text" label="regular expression of member class"/>
                  <param defaultValue="true" id="NAMING.NCL.INNER_CHECK_PUBLIC" inputType="checkbox" label="check &quot;public&quot; member class."/>
                  <param defaultValue="true" id="NAMING.NCL.INNER_CHECK_PROTECTED" inputType="checkbox" label="check &quot;protected&quot; member class."/>
                  <param defaultValue="true" id="NAMING.NCL.INNER_CHECK_PACKAGE" inputType="checkbox" label="check package-private member class."/>
                  <param defaultValue="true" id="NAMING.NCL.INNER_CHECK_PRIVATE" inputType="checkbox" label="check &quot;private&quot; member class."/>
                  <param defaultValue="false" id="NAMING.NCL.NEGATE_MEMBER" inputType="checkbox" label="Negate regular expression"/>
                  <param defaultValue="false" id="NAMING.NCL.IGNORE_CASE_MEMBER" inputType="checkbox" label="Ignore case"/>
               </group>
               <group collapsible="false" id="NAMING.NCL.tab.LOCAL_LEVEL" label="Local class">
                  <param defaultValue="^[A-Z]" id="NAMING.NCL.LOCAL_REGULAR_EXPRESSION" inputType="text" label="regular expression of local class"/>
                  <param defaultValue="true" id="NAMING.NCL.LOCAL_CHECK_PACKAGE" inputType="checkbox" label="check local class."/>
                  <param defaultValue="false" id="NAMING.NCL.NEGATE_LOCAL" inputType="checkbox" label="Negate regular expression"/>
                  <param defaultValue="false" id="NAMING.NCL.IGNORE_CASE_LOCAL" inputType="checkbox" label="Ignore case"/>
               </group>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.NENUM" header="Use a naming convention for enum type declarations" id="NENUM" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Name of enum ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="Name of enum ''{0}'' matches user-specified regular expression ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.NENUM.CHECK_PROTECTED" name="CHECK_PROTECTED" value="check &quot;protected&quot; enum declaration."/>
               <oldparam id="NAMING.NENUM.IGNORE_CASE" name="IGNORE_CASE" value="Ignore case"/>
               <oldparam id="NAMING.NENUM.CHECK_PUBLIC" name="CHECK_PUBLIC" value="check &quot;public&quot; enum declaration."/>
               <oldparam id="NAMING.NENUM.NEGATE" name="NEGATE" value="Negate regular expression"/>
               <oldparam id="NAMING.NENUM.CHECK_PACKAGE" name="CHECK_PACKAGE" value="check package-private enum declaration."/>
               <oldparam id="NAMING.NENUM.CHECK_PRIVATE" name="CHECK_PRIVATE" value="check &quot;private&quot; enum declaration."/>
               <oldparam id="NAMING.NENUM.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression"/>
            </oldparameters>
            <extras>
               <arg name="default_reg_exp" value="^[A-Z]"/>
            </extras>
            <parameters>
               <param defaultValue="^[A-Z]" id="NAMING.NENUM.REGULAR_EXPRESSION" inputType="text" label="regular expression"/>
               <param defaultValue="true" id="NAMING.NENUM.CHECK_PUBLIC" inputType="checkbox" label="check &quot;public&quot; enum declaration."/>
               <param defaultValue="true" id="NAMING.NENUM.CHECK_PROTECTED" inputType="checkbox" label="check &quot;protected&quot; enum declaration."/>
               <param defaultValue="true" id="NAMING.NENUM.CHECK_PACKAGE" inputType="checkbox" label="check package-private enum declaration."/>
               <param defaultValue="true" id="NAMING.NENUM.CHECK_PRIVATE" inputType="checkbox" label="check &quot;private&quot; enum declaration."/>
               <param defaultValue="false" id="NAMING.NENUM.NEGATE" inputType="checkbox" label="Negate regular expression"/>
               <param defaultValue="false" id="NAMING.NENUM.IGNORE_CASE" inputType="checkbox" label="Ignore case"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.NFL" header="Use a naming convention for &quot;final&quot; local variables" id="NFL" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Name of &quot;final&quot; local variables ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="Name of &quot;final&quot; local variables ''{0}'' matches user-specified regular expression ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.NFL.IGNORE_CASE" name="IGNORE_CASE" value="Ignore case"/>
               <oldparam id="NAMING.NFL.NEGATE" name="NEGATE" value="Negate regular expression"/>
               <oldparam id="NAMING.NFL.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression"/>
            </oldparameters>
            <extras>
               <arg name="default_reg_exp" value="^[a-z][a-zA-Z0-9]*$"/>
            </extras>
            <parameters>
               <param defaultValue="^[a-z][a-zA-Z0-9]*$" id="NAMING.NFL.REGULAR_EXPRESSION" inputType="text" label="regular expression"/>
               <param defaultValue="true" id="NAMING.NFL.CHECK_PUBLIC" inputType="checkbox" label="check &quot;public&quot; method."/>
               <param defaultValue="true" id="NAMING.NFL.CHECK_PROTECTED" inputType="checkbox" label="check &quot;protected&quot; method."/>
               <param defaultValue="true" id="NAMING.NFL.CHECK_PACKAGE" inputType="checkbox" label="check package-private method."/>
               <param defaultValue="true" id="NAMING.NFL.CHECK_PRIVATE" inputType="checkbox" label="check &quot;private&quot; method."/>
               <param defaultValue="false" id="NAMING.NFL.NEGATE" inputType="checkbox" label="Negate regular expression"/>
               <param defaultValue="false" id="NAMING.NFL.IGNORE_CASE" inputType="checkbox" label="Ignore case"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.NIF" header="Use a naming convention for non-&quot;static&quot; fields" id="NIF" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Name of non-&quot;static&quot; field ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="Name of non-&quot;static&quot; field ''{0}'' matches user-specified regular expression ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.NIF.CHECK_PROTECTED" name="CHECK_PROTECTED" value="check &quot;protected&quot; field."/>
               <oldparam id="NAMING.NIF.IGNORE_CASE" name="IGNORE_CASE" value="Ignore case"/>
               <oldparam id="NAMING.NIF.CHECK_PUBLIC" name="CHECK_PUBLIC" value="check &quot;public&quot; field."/>
               <oldparam id="NAMING.NIF.NEGATE" name="NEGATE" value="Negate regular expression"/>
               <oldparam id="NAMING.NIF.CHECK_PACKAGE" name="CHECK_PACKAGE" value="check package-private field."/>
               <oldparam id="NAMING.NIF.CHECK_PRIVATE" name="CHECK_PRIVATE" value="check &quot;private&quot; field."/>
               <oldparam id="NAMING.NIF.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression"/>
            </oldparameters>
            <extras>
               <arg name="default_reg_exp" value=""/>
            </extras>
            <parameters>
               <param defaultValue="" id="NAMING.NIF.REGULAR_EXPRESSION" inputType="text" label="regular expression"/>
               <param defaultValue="true" id="NAMING.NIF.CHECK_PUBLIC" inputType="checkbox" label="check &quot;public&quot; field."/>
               <param defaultValue="true" id="NAMING.NIF.CHECK_PROTECTED" inputType="checkbox" label="check &quot;protected&quot; field."/>
               <param defaultValue="true" id="NAMING.NIF.CHECK_PACKAGE" inputType="checkbox" label="check package-private field."/>
               <param defaultValue="true" id="NAMING.NIF.CHECK_PRIVATE" inputType="checkbox" label="check &quot;private&quot; field."/>
               <param defaultValue="false" id="NAMING.NIF.NEGATE" inputType="checkbox" label="Negate regular expression"/>
               <param defaultValue="false" id="NAMING.NIF.IGNORE_CASE" inputType="checkbox" label="Ignore case"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.NITF" header="Use a naming convention for interfaces" id="NITF" scope="CLASS" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Name of &quot;interface&quot; ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="Name of &quot;interface&quot; ''{0}'' matches user-specified regular expression ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.NITF.CHECK_PUBLIC" name="CHECK_PUBLIC" value="check &quot;public&quot; top-level interface."/>
               <oldparam id="NAMING.NITF.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression of top-level interface"/>
               <oldparam id="NAMING.NITF.INNER_CHECK_PUBLIC" name="INNER_CHECK_PUBLIC" value="check &quot;public&quot; member interface."/>
               <oldparam id="NAMING.NITF.INNER_CHECK_PROTECTED" name="INNER_CHECK_PROTECTED" value="check &quot;protected&quot; member interface."/>
               <oldparam id="NAMING.NITF.NEGATE_TOP_LEVEL" name="NEGATE_TOP_LEVEL" value="Negate regular expression"/>
               <oldparam id="NAMING.NITF.NEGATE_MEMBER" name="NEGATE_MEMBER" value="Negate regular expression"/>
               <oldparam id="NAMING.NITF.IGNORE_CASE_TOP_LEVEL" name="IGNORE_CASE_TOP_LEVEL" value="Ignore case"/>
               <oldparam id="NAMING.NITF.IGNORE_CASE_MEMBER" name="IGNORE_CASE_MEMBER" value="Ignore case"/>
               <oldparam id="NAMING.NITF.TOP_LEVEL" name="TOP_LEVEL" value="Top-level interface"/>
               <oldparam id="NAMING.NITF.INNER_REGULAR_EXPRESSION" name="INNER_REGULAR_EXPRESSION" value="regular expression of member interface"/>
               <oldparam id="NAMING.NITF.CHECK_PACKAGE" name="CHECK_PACKAGE" value="check package-private top-level interface."/>
               <oldparam id="NAMING.NITF.INNER_CHECK_PACKAGE" name="INNER_CHECK_PACKAGE" value="check package-private member interface."/>
               <oldparam id="NAMING.NITF.INNER_LEVEL" name="INNER_LEVEL" value="Member interface"/>
               <oldparam id="NAMING.NITF.INNER_CHECK_PRIVATE" name="INNER_CHECK_PRIVATE" value="check &quot;private&quot; member interface."/>
            </oldparameters>
            <extras>
               <arg name="default_reg_exp" value="^[A-Z]"/>
            </extras>
            <parameters>
               <group collapsible="false" id="NAMING.NITF.tab.TOP_LEVEL" label="Top-level interface">
                  <param defaultValue="^[A-Z]" id="NAMING.NITF.REGULAR_EXPRESSION" inputType="text" label="regular expression of top-level interface"/>
                  <param defaultValue="true" id="NAMING.NITF.CHECK_PUBLIC" inputType="checkbox" label="check &quot;public&quot; top-level interface."/>
                  <param defaultValue="true" id="NAMING.NITF.CHECK_PACKAGE" inputType="checkbox" label="check package-private top-level interface."/>
                  <param defaultValue="false" id="NAMING.NITF.NEGATE_TOP_LEVEL" inputType="checkbox" label="Negate regular expression"/>
                  <param defaultValue="false" id="NAMING.NITF.IGNORE_CASE_TOP_LEVEL" inputType="checkbox" label="Ignore case"/>
               </group>
               <group collapsible="false" id="NAMING.NITF.tab.INNER_LEVEL" label="Member interface">
                  <param defaultValue="^[A-Z]" id="NAMING.NITF.INNER_REGULAR_EXPRESSION" inputType="text" label="regular expression of member interface"/>
                  <param defaultValue="true" id="NAMING.NITF.INNER_CHECK_PUBLIC" inputType="checkbox" label="check &quot;public&quot; member interface."/>
                  <param defaultValue="true" id="NAMING.NITF.INNER_CHECK_PROTECTED" inputType="checkbox" label="check &quot;protected&quot; member interface."/>
                  <param defaultValue="true" id="NAMING.NITF.INNER_CHECK_PACKAGE" inputType="checkbox" label="check package-private member interface."/>
                  <param defaultValue="true" id="NAMING.NITF.INNER_CHECK_PRIVATE" inputType="checkbox" label="check &quot;private&quot; member interface."/>
                  <param defaultValue="false" id="NAMING.NITF.NEGATE_MEMBER" inputType="checkbox" label="Negate regular expression"/>
                  <param defaultValue="false" id="NAMING.NITF.IGNORE_CASE_MEMBER" inputType="checkbox" label="Ignore case"/>
               </group>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.NLV" header="Use a naming convention for local variables" id="NLV" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Name of local variable ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="Name of local variable ''{0}'' matches user-specified regular expression ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.NLV.IGNORE_CASE" name="IGNORE_CASE" value="Ignore case"/>
               <oldparam id="NAMING.NLV.NEGATE" name="NEGATE" value="Negate regular expression"/>
               <oldparam id="NAMING.NLV.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression"/>
               <oldparam id="NAMING.NLV.IGNORE_FINAL" name="IGNORE_FINAL" value="Ignore &quot;final&quot; local variables"/>
            </oldparameters>
            <extras>
               <arg name="default_reg_exp" value="^[a-z]"/>
            </extras>
            <parameters>
               <param defaultValue="^[a-z]" id="NAMING.NLV.REGULAR_EXPRESSION" inputType="text" label="regular expression"/>
               <param defaultValue="true" id="NAMING.NLV.CHECK_PUBLIC" inputType="checkbox" label="check &quot;public&quot; method."/>
               <param defaultValue="true" id="NAMING.NLV.CHECK_PROTECTED" inputType="checkbox" label="check &quot;protected&quot; method."/>
               <param defaultValue="true" id="NAMING.NLV.CHECK_PACKAGE" inputType="checkbox" label="check package-private method."/>
               <param defaultValue="true" id="NAMING.NLV.CHECK_PRIVATE" inputType="checkbox" label="check &quot;private&quot; method."/>
               <param defaultValue="false" id="NAMING.NLV.NEGATE" inputType="checkbox" label="Negate regular expression"/>
               <param defaultValue="false" id="NAMING.NLV.IGNORE_CASE" inputType="checkbox" label="Ignore case"/>
               <param defaultValue="false" id="NAMING.NLV.IGNORE_FINAL" inputType="checkbox" label="Ignore &quot;final&quot; local variables"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.NM" header="Use a naming convention for non-&quot;static&quot; methods" id="NM" scope="METHOD" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Name of non-&quot;static&quot; method ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="Name of non-&quot;static&quot; method ''{0}'' matches user-specified regular expression ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.NM.CHECK_PROTECTED" name="CHECK_PROTECTED" value="check &quot;protected&quot; method."/>
               <oldparam id="NAMING.NM.IGNORE_CASE" name="IGNORE_CASE" value="Ignore case"/>
               <oldparam id="NAMING.NM.CHECK_PUBLIC" name="CHECK_PUBLIC" value="check &quot;public&quot; method."/>
               <oldparam id="NAMING.NM.CHECK_PACKAGE" name="CHECK_PACKAGE" value="check package-private method."/>
               <oldparam id="NAMING.NM.NEGATE" name="NEGATE" value="Negate regular expression"/>
               <oldparam id="NAMING.NM.CHECK_PRIVATE" name="CHECK_PRIVATE" value="check &quot;private&quot; method."/>
               <oldparam id="NAMING.NM.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression"/>
            </oldparameters>
            <extras>
               <arg name="default_reg_exp" value="^[a-z]"/>
            </extras>
            <parameters>
               <param defaultValue="^[a-z]" id="NAMING.NM.REGULAR_EXPRESSION" inputType="text" label="regular expression"/>
               <param defaultValue="true" id="NAMING.NM.CHECK_PUBLIC" inputType="checkbox" label="check &quot;public&quot; method."/>
               <param defaultValue="true" id="NAMING.NM.CHECK_PROTECTED" inputType="checkbox" label="check &quot;protected&quot; method."/>
               <param defaultValue="true" id="NAMING.NM.CHECK_PACKAGE" inputType="checkbox" label="check package-private method."/>
               <param defaultValue="true" id="NAMING.NM.CHECK_PRIVATE" inputType="checkbox" label="check &quot;private&quot; method."/>
               <param defaultValue="false" id="NAMING.NM.NEGATE" inputType="checkbox" label="Negate regular expression"/>
               <param defaultValue="false" id="NAMING.NM.IGNORE_CASE" inputType="checkbox" label="Ignore case"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.NMP" header="Use a naming convention for method parameters" id="NMP" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Name of parameter ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="Name of parameter ''{0}'' matches user-specified regular expression ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.NMP.IGNORE_CASE" name="IGNORE_CASE" value="Ignore case"/>
               <oldparam id="NAMING.NMP.NEGATE" name="NEGATE" value="Negate regular expression"/>
               <oldparam id="NAMING.NMP.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression"/>
            </oldparameters>
            <extras>
               <arg name="default_reg_exp" value="^[a-z]"/>
            </extras>
            <parameters>
               <param defaultValue="^[a-z]" id="NAMING.NMP.REGULAR_EXPRESSION" inputType="text" label="regular expression"/>
               <param defaultValue="true" id="NAMING.NMP.CHECK_PUBLIC" inputType="checkbox" label="check &quot;public&quot; method."/>
               <param defaultValue="true" id="NAMING.NMP.CHECK_PROTECTED" inputType="checkbox" label="check &quot;protected&quot; method."/>
               <param defaultValue="true" id="NAMING.NMP.CHECK_PACKAGE" inputType="checkbox" label="check package-private method."/>
               <param defaultValue="true" id="NAMING.NMP.CHECK_PRIVATE" inputType="checkbox" label="check &quot;private&quot; method."/>
               <param defaultValue="false" id="NAMING.NMP.NEGATE" inputType="checkbox" label="Negate regular expression"/>
               <param defaultValue="false" id="NAMING.NMP.IGNORE_CASE" inputType="checkbox" label="Ignore case"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.NPH" header="Use a naming convention for type parameters" id="NPH" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Type parameter name ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="Type parameter name ''{0}'' matches user-specified regular expression ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.NPH.IGNORE_CASE" name="IGNORE_CASE" value="Ignore case"/>
               <oldparam id="NAMING.NPH.NEGATE" name="NEGATE" value="Negate regular expression"/>
               <oldparam id="NAMING.NPH.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression"/>
            </oldparameters>
            <extras>
               <arg name="default_reg_exp" value="^[A-Z]$"/>
            </extras>
            <parameters>
               <param defaultValue="^[A-Z]$" id="NAMING.NPH.REGULAR_EXPRESSION" inputType="text" label="regular expression"/>
               <param defaultValue="false" id="NAMING.NPH.NEGATE" inputType="checkbox" label="Negate regular expression"/>
               <param defaultValue="false" id="NAMING.NPH.IGNORE_CASE" inputType="checkbox" label="Ignore case"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.NSF" header="Use a naming convention for non-&quot;final&quot; &quot;static&quot; fields" id="NSF" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Name of non-&quot;final&quot; &quot;static&quot; field ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="Name of non-&quot;final&quot; &quot;static&quot; field ''{0}'' matches user-specified regular expression ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.NSF.CHECK_PROTECTED" name="CHECK_PROTECTED" value="check &quot;protected&quot; field."/>
               <oldparam id="NAMING.NSF.IGNORE_CASE" name="IGNORE_CASE" value="Ignore case"/>
               <oldparam id="NAMING.NSF.CHECK_PUBLIC" name="CHECK_PUBLIC" value="check &quot;public&quot; field."/>
               <oldparam id="NAMING.NSF.CHECK_PACKAGE" name="CHECK_PACKAGE" value="check package-private field."/>
               <oldparam id="NAMING.NSF.NEGATE" name="NEGATE" value="Negate regular expression"/>
               <oldparam id="NAMING.NSF.CHECK_PRIVATE" name="CHECK_PRIVATE" value="check &quot;private&quot; field."/>
               <oldparam id="NAMING.NSF.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression"/>
            </oldparameters>
            <extras>
               <arg name="default_reg_exp" value=""/>
            </extras>
            <parameters>
               <param defaultValue="" id="NAMING.NSF.REGULAR_EXPRESSION" inputType="text" label="regular expression"/>
               <param defaultValue="true" id="NAMING.NSF.CHECK_PUBLIC" inputType="checkbox" label="check &quot;public&quot; field."/>
               <param defaultValue="true" id="NAMING.NSF.CHECK_PROTECTED" inputType="checkbox" label="check &quot;protected&quot; field."/>
               <param defaultValue="true" id="NAMING.NSF.CHECK_PACKAGE" inputType="checkbox" label="check package-private field."/>
               <param defaultValue="true" id="NAMING.NSF.CHECK_PRIVATE" inputType="checkbox" label="check &quot;private&quot; field."/>
               <param defaultValue="false" id="NAMING.NSF.NEGATE" inputType="checkbox" label="Negate regular expression"/>
               <param defaultValue="false" id="NAMING.NSF.IGNORE_CASE" inputType="checkbox" label="Ignore case"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.NSM" header="Use a naming convention for &quot;static&quot; methods" id="NSM" scope="METHOD" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Name of &quot;static&quot; method ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="Name of &quot;static&quot; method ''{0}'' matches user-specified regular expression ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.NSM.CHECK_PROTECTED" name="CHECK_PROTECTED" value="check &quot;protected&quot; method."/>
               <oldparam id="NAMING.NSM.IGNORE_CASE" name="IGNORE_CASE" value="Ignore case"/>
               <oldparam id="NAMING.NSM.CHECK_PUBLIC" name="CHECK_PUBLIC" value="check &quot;public&quot; method."/>
               <oldparam id="NAMING.NSM.CHECK_PACKAGE" name="CHECK_PACKAGE" value="check package-private method."/>
               <oldparam id="NAMING.NSM.NEGATE" name="NEGATE" value="Negate regular expression"/>
               <oldparam id="NAMING.NSM.CHECK_PRIVATE" name="CHECK_PRIVATE" value="check &quot;private&quot; method."/>
               <oldparam id="NAMING.NSM.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression"/>
            </oldparameters>
            <extras>
               <arg name="default_reg_exp" value="^[a-z]"/>
            </extras>
            <parameters>
               <param defaultValue="^[a-z]" id="NAMING.NSM.REGULAR_EXPRESSION" inputType="text" label="regular expression"/>
               <param defaultValue="true" id="NAMING.NSM.CHECK_PUBLIC" inputType="checkbox" label="check &quot;public&quot; method."/>
               <param defaultValue="true" id="NAMING.NSM.CHECK_PROTECTED" inputType="checkbox" label="check &quot;protected&quot; method."/>
               <param defaultValue="true" id="NAMING.NSM.CHECK_PACKAGE" inputType="checkbox" label="check package-private method."/>
               <param defaultValue="true" id="NAMING.NSM.CHECK_PRIVATE" inputType="checkbox" label="check &quot;private&quot; method."/>
               <param defaultValue="false" id="NAMING.NSM.NEGATE" inputType="checkbox" label="Negate regular expression"/>
               <param defaultValue="false" id="NAMING.NSM.IGNORE_CASE" inputType="checkbox" label="Ignore case"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.NTEST" header="Use a naming convention for JUnit test classes" id="NTEST" scope="LINE" severity="3" since="8.1">
            <messages>
               <msg index="1" value="Name of test class ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="Name of test class ''{0}'' matches user-specified regular expression ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.NTEST.CHECK_PUBLIC" name="CHECK_PUBLIC" value="check &quot;public&quot; top-level class."/>
               <oldparam id="NAMING.NTEST.LOCAL_LEVEL" name="LOCAL_LEVEL" value="Local class"/>
               <oldparam id="NAMING.NTEST.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression of top-level class"/>
               <oldparam id="NAMING.NTEST.LOCAL_CHECK_PACKAGE" name="LOCAL_CHECK_PACKAGE" value="check local class."/>
               <oldparam id="NAMING.NTEST.INNER_CHECK_PUBLIC" name="INNER_CHECK_PUBLIC" value="check &quot;public&quot; member class."/>
               <oldparam id="NAMING.NTEST.INNER_CHECK_PROTECTED" name="INNER_CHECK_PROTECTED" value="check &quot;protected&quot; member class."/>
               <oldparam id="NAMING.NTEST.NEGATE_TOP_LEVEL" name="NEGATE_TOP_LEVEL" value="Negate regular expression"/>
               <oldparam id="NAMING.NTEST.NEGATE_LOCAL" name="NEGATE_LOCAL" value="Negate regular expression"/>
               <oldparam id="NAMING.NTEST.NEGATE_MEMBER" name="NEGATE_MEMBER" value="Negate regular expression"/>
               <oldparam id="NAMING.NTEST.IGNORE_CASE_TOP_LEVEL" name="IGNORE_CASE_TOP_LEVEL" value="Ignore case"/>
               <oldparam id="NAMING.NTEST.IGNORE_CASE_LOCAL" name="IGNORE_CASE_LOCAL" value="Ignore case"/>
               <oldparam id="NAMING.NTEST.IGNORE_CASE_MEMBER" name="IGNORE_CASE_MEMBER" value="Ignore case"/>
               <oldparam id="NAMING.NTEST.TOP_LEVEL" name="TOP_LEVEL" value="Top-level class"/>
               <oldparam id="NAMING.NTEST.INNER_REGULAR_EXPRESSION" name="INNER_REGULAR_EXPRESSION" value="regular expression of member class"/>
               <oldparam id="NAMING.NTEST.CHECK_PACKAGE" name="CHECK_PACKAGE" value="check package-private top-level class."/>
               <oldparam id="NAMING.NTEST.INNER_CHECK_PACKAGE" name="INNER_CHECK_PACKAGE" value="check package-private member class."/>
               <oldparam id="NAMING.NTEST.INNER_LEVEL" name="INNER_LEVEL" value="Member class"/>
               <oldparam id="NAMING.NTEST.LOCAL_REGULAR_EXPRESSION" name="LOCAL_REGULAR_EXPRESSION" value="regular expression of local class"/>
               <oldparam id="NAMING.NTEST.INNER_CHECK_PRIVATE" name="INNER_CHECK_PRIVATE" value="check &quot;private&quot; member class."/>
            </oldparameters>
            <extras>
               <arg name="default_reg_exp" value="Test(s|Case)?$"/>
            </extras>
            <parameters>
               <group collapsible="false" id="NAMING.NTEST.tab.TOP_LEVEL" label="Top-level class">
                  <param defaultValue="Test(s|Case)?$" id="NAMING.NTEST.REGULAR_EXPRESSION" inputType="text" label="regular expression of top-level class"/>
                  <param defaultValue="true" id="NAMING.NTEST.CHECK_PUBLIC" inputType="checkbox" label="check &quot;public&quot; top-level class."/>
                  <param defaultValue="true" id="NAMING.NTEST.CHECK_PACKAGE" inputType="checkbox" label="check package-private top-level class."/>
                  <param defaultValue="false" id="NAMING.NTEST.NEGATE_TOP_LEVEL" inputType="checkbox" label="Negate regular expression"/>
                  <param defaultValue="false" id="NAMING.NTEST.IGNORE_CASE_TOP_LEVEL" inputType="checkbox" label="Ignore case"/>
               </group>
               <group collapsible="false" id="NAMING.NTEST.tab.INNER_LEVEL" label="Member class">
                  <param defaultValue="Test(s|Case)?$" id="NAMING.NTEST.INNER_REGULAR_EXPRESSION" inputType="text" label="regular expression of member class"/>
                  <param defaultValue="true" id="NAMING.NTEST.INNER_CHECK_PUBLIC" inputType="checkbox" label="check &quot;public&quot; member class."/>
                  <param defaultValue="true" id="NAMING.NTEST.INNER_CHECK_PROTECTED" inputType="checkbox" label="check &quot;protected&quot; member class."/>
                  <param defaultValue="true" id="NAMING.NTEST.INNER_CHECK_PACKAGE" inputType="checkbox" label="check package-private member class."/>
                  <param defaultValue="true" id="NAMING.NTEST.INNER_CHECK_PRIVATE" inputType="checkbox" label="check &quot;private&quot; member class."/>
                  <param defaultValue="false" id="NAMING.NTEST.NEGATE_MEMBER" inputType="checkbox" label="Negate regular expression"/>
                  <param defaultValue="false" id="NAMING.NTEST.IGNORE_CASE_MEMBER" inputType="checkbox" label="Ignore case"/>
               </group>
               <group collapsible="false" id="NAMING.NTEST.tab.LOCAL_LEVEL" label="Local class">
                  <param defaultValue="Test(s|Case)?$" id="NAMING.NTEST.LOCAL_REGULAR_EXPRESSION" inputType="text" label="regular expression of local class"/>
                  <param defaultValue="true" id="NAMING.NTEST.LOCAL_CHECK_PACKAGE" inputType="checkbox" label="check local class."/>
                  <param defaultValue="false" id="NAMING.NTEST.NEGATE_LOCAL" inputType="checkbox" label="Negate regular expression"/>
                  <param defaultValue="false" id="NAMING.NTEST.IGNORE_CASE_LOCAL" inputType="checkbox" label="Ignore case"/>
               </group>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.PKG" header="Use a naming convention for &quot;package&quot; names" id="PKG" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Package ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="Package ''{0}'' matches user-specified regular expression ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.PKG.IGNORE_CASE" name="IGNORE_CASE" value="Ignore case"/>
               <oldparam id="NAMING.PKG.NEGATE" name="NEGATE" value="Negate regular expression"/>
               <oldparam id="NAMING.PKG.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression"/>
            </oldparameters>
            <extras>
               <arg name="default_reg_exp" value="^[a-z]([a-z]|[0-9]|\.|_)+$"/>
            </extras>
            <parameters>
               <param defaultValue="^[a-z]([a-z]|[0-9]|\.|_)+$" id="NAMING.PKG.REGULAR_EXPRESSION" inputType="text" label="regular expression"/>
               <param defaultValue="false" id="NAMING.PKG.NEGATE" inputType="checkbox" label="Negate regular expression"/>
               <param defaultValue="false" id="NAMING.PKG.IGNORE_CASE" inputType="checkbox" label="Ignore case"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.SINGLETON" header="Use a naming convention for singleton classes" id="SINGLETON" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Name of singleton class ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="The class ''{0}'' was probably intended to be a singleton but contains a non-&quot;private&quot; constructor."/>
               <msg index="3" value="The class ''{0}'' was probably intended to be a singleton but does not contain a &quot;static&quot; accessor method that returns an instance of the class."/>
               <msg index="4" value="The class ''{0}'' is a singleton, but the method ''{1}()'' to get the singleton instance is not &quot;synchronized&quot;."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.SINGLETON.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression"/>
               <oldparam id="NAMING.SINGLETON.CHECK_SYNCHRONIZED" name="CHECK_SYNCHRONIZED" value="Check that the method to get the singleton instance is &quot;synchronized&quot; for classes which match the singleton pattern"/>
            </oldparameters>
            <parameters>
               <param defaultValue="^.+Singleton$" id="NAMING.SINGLETON.REGULAR_EXPRESSION" inputType="text" label="regular expression"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.THAC" header="Use a naming convention for tag handlers and associated classes" id="THAC" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Type name ''{0}'' does not match user-specified regular expression ''{1}''."/>
               <msg index="2" value="Type name ''{0}'' matches user-specified regular expression ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.THAC.IGNORE_CASE" name="IGNORE_CASE" value="Ignore case"/>
               <oldparam id="NAMING.THAC.TYPE_OF_CLASS" name="TYPE_OF_CLASS" value="Type of Class"/>
               <oldparam id="NAMING.THAC.CONVENTION" name="CONVENTION" value="Naming Convention (Regular Expression)"/>
               <oldparam id="NAMING.THAC.NEGATE" name="NEGATE" value="Negate regular expression"/>
               <oldparam id="NAMING.THAC.CONVENTIONS_TABLE" name="CONVENTIONS_TABLE" value="Naming Conventions Table"/>
            </oldparameters>
            <parameters>
               <complexParamTable canAddRow="false" canEditRow="false" canRemoveRow="false" canSetOrdering="false" id="NAMING.THAC.CONVENTIONS_TABLE" label="Naming Conventions Table" reader="SATable">
                  <columns>
                     <column columnType="text" editable="false" id="NAMING__THAC__CONVENTIONS_TABLE__COLUMN1" label="Type of Class" required="true"/>
                     <column columnType="text" editable="true" id="NAMING__THAC__CONVENTIONS_TABLE__COLUMN2" label="Naming Convention (Regular Expression)" required="true"/>
                  </columns>
                  <predefinedRows>
                     <row id="1">
                        <column refColumnId="NAMING__THAC__CONVENTIONS_TABLE__COLUMN1" value="tag extra info"/>
                        <column refColumnId="NAMING__THAC__CONVENTIONS_TABLE__COLUMN2" value="^.*TEI$"/>
                     </row>
                     <row id="2">
                        <column refColumnId="NAMING__THAC__CONVENTIONS_TABLE__COLUMN1" value="tag library validator"/>
                        <column refColumnId="NAMING__THAC__CONVENTIONS_TABLE__COLUMN2" value="^.*TLV$"/>
                     </row>
                     <row id="3">
                        <column refColumnId="NAMING__THAC__CONVENTIONS_TABLE__COLUMN1" value="tag"/>
                        <column refColumnId="NAMING__THAC__CONVENTIONS_TABLE__COLUMN2" value="^.*Tag$"/>
                     </row>
                  </predefinedRows>
               </complexParamTable>
               <param defaultValue="false" id="NAMING.THAC.NEGATE" inputType="checkbox" label="Negate regular expression"/>
               <param defaultValue="false" id="NAMING.THAC.IGNORE_CASE" inputType="checkbox" label="Ignore case"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.UHN" header="Use Hungarian notation for variables" id="UHN" scope="LINE" severity="4" since="5.0">
            <messages>
               <msg index="1" value="Variable ''{0}'' does not begin with ''{1}''."/>
               <msg index="2" value="Variable ''{0}'' does not end with ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="NAMING.UHN.CHECK" name="CHECK" value="check"/>
               <oldparam id="NAMING.UHN.HUNGARIAN_TABLE" name="HUNGARIAN_TABLE" value="Hungarian notation table"/>
               <oldparam id="NAMING.UHN.NOTATION" name="NOTATION" value="Hungarian notation"/>
               <oldparam id="NAMING.UHN.PRE_OR_POST" name="PRE_OR_POST" value="prefix/postfix"/>
               <oldparam id="NAMING.UHN.SCOPE" name="SCOPE" value="Scope"/>
               <oldparam id="NAMING.UHN.CASE" name="CASE" value="case sensitive"/>
               <oldparam id="NAMING.UHN.TYPE" name="TYPE" value="Type"/>
            </oldparameters>
            <parameters>
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="NAMING.UHN.HUNGARIAN_TABLE" label="Hungarian notation table" reader="SATable">
                  <columns>
                     <column acceptedValuesForCombobox="all variable|field|static field|non-static field|parameter|local variable" columnType="combo" defaultValue="all variable" editable="true" id="NAMING__UHN__HUNGARIAN_TABLE__COLUMN1" label="Scope" required="true"/>
                     <column columnType="text" editable="true" id="NAMING__UHN__HUNGARIAN_TABLE__COLUMN2" label="Type" required="true" textSize="smallPlus"/>
                     <column columnType="text" editable="true" id="NAMING__UHN__HUNGARIAN_TABLE__COLUMN3" label="Hungarian notation" required="true" textSize="smallPlus"/>
                     <column acceptedValuesForCombobox="prefix|postfix" columnType="combo" defaultValue="postfix" editable="true" id="NAMING__UHN__HUNGARIAN_TABLE__COLUMN4" label="prefix/postfix" required="true"/>
                     <column columnType="checkbox" defaultValue="true" editable="true" id="NAMING__UHN__HUNGARIAN_TABLE__COLUMN5" label="case sensitive" required="true"/>
                  </columns>
                  <predefinedRows>
                     <row id="1">
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN1" value="all variable"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN2" value="int"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN3" value="int"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN4" value="postfix"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN5" value="false"/>
                     </row>
                     <row id="2">
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN1" value="all variable"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN2" value="boolean"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN3" value="boolean"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN4" value="postfix"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN5" value="false"/>
                     </row>
                     <row id="3">
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN1" value="all variable"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN2" value="byte"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN3" value="byte"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN4" value="postfix"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN5" value="false"/>
                     </row>
                     <row id="4">
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN1" value="all variable"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN2" value="char"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN3" value="char"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN4" value="postfix"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN5" value="false"/>
                     </row>
                     <row id="5">
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN1" value="all variable"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN2" value="short"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN3" value="short"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN4" value="postfix"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN5" value="false"/>
                     </row>
                     <row id="6">
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN1" value="all variable"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN2" value="long"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN3" value="long"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN4" value="postfix"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN5" value="false"/>
                     </row>
                     <row id="7">
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN1" value="all variable"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN2" value="float"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN3" value="float"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN4" value="postfix"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN5" value="false"/>
                     </row>
                     <row id="8">
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN1" value="all variable"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN2" value="double"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN3" value="double"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN4" value="postfix"/>
                        <column refColumnId="NAMING__UHN__HUNGARIAN_TABLE__COLUMN5" value="false"/>
                     </row>
                  </predefinedRows>
               </complexParamTable>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.USF" header="Do not use lowercase letters in &quot;final&quot; &quot;static&quot; field names." id="USF" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="&quot;final&quot; &quot;static&quot; field ''{0}'' is not all uppercase."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.NAMING.UUVN" header="Do not use variables with identical names or names that differ only in case" id="UUVN" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="There is another variable in the scope that has the same name as ''{0}'' or differs only in case"/>
            </messages>
         </rule>
      </category>
      <category description="JavaBeans" name="BEAN">
         <rule class="com.parasoft.jtest.standards.rules.builtin.BEAN.BLNC" header="Use appropriate signatures for listener method names in JavaBean classes" id="BLNC" scope="METHOD" severity="3" since="5.0">
            <messages>
               <msg index="1" value="Listener method name is not ''{0}''."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.BEAN.NFM" header="Define get and set methods for each instance field" id="NFM" scope="LINE" severity="4" since="5.0">
            <messages>
               <msg index="1" value="Missing ''{0}()'' method for field ''{1}''."/>
               <msg index="2" value="''{0}()'' is not a &quot;public&quot; instance method for field ''{1}''."/>
               <msg index="3" value="''{0}()'' return type is not as same as field ''{1}'' type."/>
               <msg index="4" value="''{0}()'' return type is not &quot;void&quot;."/>
               <msg index="5" value="''{0}()'' parameter type is not as same as field ''{1}'' type."/>
            </messages>
            <oldparameters>
               <oldparam id="BEAN.NFM.IGNORE_LIST" name="IGNORE_LIST" value="Ignore fields with names:"/>
            </oldparameters>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
            </references>
            <parameters>
               <param defaultValue="" id="BEAN.NFM.IGNORE_LIST" inputType="stringList" label="Ignore fields with names:" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.BEAN.SERIALIZABLE" header="Ensure that JavaBean classes implement 'java.io.Serializable'" id="SERIALIZABLE" scope="LINE" severity="3" since="5.0">
            <messages>
               <msg index="1" value="Bean class does not implement 'java.io.Serializable': ''{0}''"/>
            </messages>
         </rule>
      </category>
      <category description="Unused Code" name="UC">
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.SNE" header="Avoid empty &quot;synchronized&quot; statements." id="SNE" scope="line" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Avoid empty synchronized statement."/>
            </messages>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/585.html" name="CWE"/>
            </references>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.AMAMI" header="Do not override &quot;abstract&quot; methods of a parent class with &quot;abstract&quot; methods." id="AMAMI" scope="LINE" severity="3">
            <messages>
               <msg index="1" value="Avoid overriding &quot;abstract&quot; method of parent class with &quot;abstract&quot; method"/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.ARTD" header="Avoid redundant throw clauses" id="ARTD" scope="LINE" severity="4">
            <messages>
               <msg index="1" value="Exception ''{0}'' is redundant in the body of method ''{1}''"/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.AURCO" header="Avoid collection objects that are never read" id="AURCO" scope="CLASS" severity="3">
            <messages>
               <msg index="1" value="''{0}'' field ''{1}'' is never read."/>
               <msg index="2" value="''{0}'' variable ''{1}'' is never read."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.AAI" header="Avoid unnecessary modifiers in an &quot;interface&quot;" id="AAI" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Unnecessary {0} in {1} declaration: {2}."/>
            </messages>
            <oldparameters>
               <oldparam id="UC.AAI.CHECK_DECL" name="CHECK_DECL" value="Check for &quot;abstract&quot; in interface declaration"/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="UC.AAI.CHECK_DECL" inputType="checkbox" label="Check for &quot;abstract&quot; in interface declaration"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.ACC" header="Remove commented out Java code." id="ACC" scope="LINE" severity="3" since="8.2">
            <messages>
               <msg index="1" value="Comment contains Java code: {0}"/>
            </messages>
            <oldparameters>
               <oldparam id="UC.ACC.IGNORE_TODO" name="IGNORE_TODO" value="Ignore comments prefaced by &quot;TODO&quot;"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="UC.ACC.IGNORE_TODO" inputType="checkbox" label="Ignore comments prefaced by &quot;TODO&quot;"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.AEEO" header="Ensure that classes do not explicitly extend 'java.lang.Object'" id="AEEO" scope="CLASS" severity="3" since="5.1">
            <messages>
               <msg index="1" value="Class ''{0}'' is explicitly extending 'java.lang.Object'."/>
               <msg index="2" value="Class ''{0}'' does not explicitly extend 'java.lang.Object'."/>
            </messages>
            <oldparameters>
               <oldparam id="UC.AEEO.ENFORCE_OR_AVOID" name="ENFORCE_OR_AVOID" value="Avoid or enforce explicitly extending 'Object'?"/>
               <oldparam id="UC.AEEO.ENFORCE" name="ENFORCE" value="Enforce"/>
               <oldparam id="UC.AEEO.AVOID" name="AVOID" value="Avoid"/>
            </oldparameters>
            <parameters>
               <radioGroup id="UC.AEEO.ENFORCE_OR_AVOID" label="Avoid or enforce explicitly extending 'Object'?" prevType="MultipleChoice" showLabel="true">
                  <radioItem defaultValue="checked" label="Avoid" value="0"/>
                  <radioItem label="Enforce" value="1"/>
               </radioGroup>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.AESTAT" header="Avoid empty static and non-static initializers." id="AESTAT" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Avoid empty static initializer."/>
               <msg index="2" value="Avoid empty non-static initializer."/>
            </messages>
            <oldparameters>
               <oldparam id="UC.AESTAT.CHECK_STATIC" name="CHECK_STATIC" value="Check static initializers"/>
               <oldparam id="UC.AESTAT.CHECK_NON_STATIC" name="CHECK_NON_STATIC" value="Check non-static initializers"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="UC.AESTAT.CHECK_STATIC" inputType="checkbox" label="Check static initializers"/>
               <param defaultValue="false" id="UC.AESTAT.CHECK_NON_STATIC" inputType="checkbox" label="Check non-static initializers"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.AURV" header="Avoid local variables that are never read" id="AURV" scope="LINE" severity="3" since="8.1">
            <messages>
               <msg index="1" value="Variable ''{0}'' is never used."/>
               <msg index="2" value="Variable ''{0}'' is assigned but never read."/>
            </messages>
            <oldparameters>
               <oldparam id="UC.AURV.UC.AVNR" name="UC.AVNR" value="Check for variables which are assigned but never read."/>
               <oldparam id="UC.AURV.UC.AUV" name="UC.AUV" value="Check for variables which are never used."/>
            </oldparameters>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/563.html" name="CWE"/>
            </references>
            <parameters>
               <param defaultValue="true" id="UC.AURV.UC.AUV" inputType="checkbox" label="Check for variables which are never used."/>
               <param defaultValue="true" id="UC.AURV.UC.AVNR" inputType="checkbox" label="Check for variables which are assigned but never read."/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.DIEB" header="Avoid duplicate code in 'if' branches." id="DIEB" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="Branch contains duplicated code from branch at line ''{0}''."/>
            </messages>
            <oldparameters>
               <oldparam id="UC.DIEB.CHECK_EMPTY" name="CHECK_EMPTY" value="Check empty branches"/>
               <oldparam id="UC.DIEB.CHECK_NESTED" name="CHECK_NESTED" value="Check nested branches"/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="UC.DIEB.CHECK_EMPTY" inputType="checkbox" label="Check empty branches"/>
               <param defaultValue="true" id="UC.DIEB.CHECK_NESTED" inputType="checkbox" label="Check nested branches"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.PIMPORT" header="Do not import classes from the package that contains the current class" id="PIMPORT" scope="LINE" severity="4">
            <messages>
               <msg index="1" value="Imported class ''{0}'' is from the package that contains the current class."/>
               <msg index="2" value="Imported package is the same as the package that contains the current class."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.SO" header="Avoid methods that only call the overridden implementation (superclass implementation)" id="SO" scope="METHOD" severity="4">
            <messages>
               <msg index="1" value="Method ''{0}'' only calls the overridden implementation."/>
               <msg index="2" value="The implementation of method ''{0}'' is identical to the overridden implementation."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.FCSF" header="Avoid redundant 'finalize()' methods which only call the superclass' 'finalize()' method" id="FCSF" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="This 'finalize()' method does nothing except call the superclass' 'finalize()' method."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.PF" header="Avoid unused &quot;private&quot; fields" id="PF" scope="CLASS" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Unused &quot;private&quot; field: {0}."/>
               <msg index="2" value="&quot;Private&quot; field is never set to a non-null value: {0}."/>
            </messages>
            <oldparameters>
               <oldparam id="UC.PF.CHECK_INIT_NULL" name="CHECK_INIT_NULL" value="Check for fields which are never set to a non-null value."/>
               <oldparam id="UC.PF.IGNORE_FINAL" name="IGNORE_FINAL" value="Ignore &quot;final&quot; fields"/>
            </oldparameters>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/563.html" name="CWE"/>
            </references>
            <parameters>
               <param defaultValue="true" id="UC.PF.IGNORE_FINAL" inputType="checkbox" label="Ignore &quot;final&quot; fields"/>
               <param defaultValue="false" id="UC.PF.CHECK_INIT_NULL" inputType="checkbox" label="Check for fields which are never set to a non-null value."/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.RSKE" header="Avoid redundant 'static' keywords in enum type declarations" id="RSKE" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="This 'static' keyword is unnecessary."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.UCATCH" header="Use a caught exception in the &quot;catch&quot; block" id="UCATCH" scope="LINE" severity="3" since="5.0">
            <messages>
               <msg index="1" value="Caught exception ''{0}'' is not used in &quot;catch&quot; block."/>
            </messages>
            <oldparameters>
               <oldparam id="UC.UCATCH.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="Comment to suppress the error(in regular expression):"/>
               <oldparam id="UC.UCATCH.IGNORE_VARIABLES" name="IGNORE_VARIABLES" value="Ignore exceptions with names matching the following regular expression(s):"/>
            </oldparameters>
            <parameters>
               <param defaultValue="ignore%5Cs%2Bexception" id="UC.UCATCH.REGULAR_EXPRESSION" inputType="stringList" label="Comment to suppress the error(in regular expression):" prevType="StringList"/>
               <param defaultValue="^ignore$" id="UC.UCATCH.IGNORE_VARIABLES" inputType="stringList" label="Ignore exceptions with names matching the following regular expression(s):" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.UCIF" header="Avoid unnecessary 'if' statements." id="UCIF" scope="LINE" severity="3">
            <messages>
               <msg index="1" value="Unconditional &quot;if&quot; statement."/>
               <msg index="2" value="Unconditionally true &quot;if&quot; statement."/>
               <msg index="3" value="Unconditionally false &quot;if&quot; statement."/>
            </messages>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/563.html" name="CWE"/>
               <reference href="http://cwe.mitre.org/data/definitions/570.html" name="CWE"/>
               <reference href="http://cwe.mitre.org/data/definitions/571.html" name="CWE"/>
            </references>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.UES" header="Avoid unnecessary &quot;else&quot; statements." id="UES" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="This &quot;else&quot; statement is unnecessary."/>
            </messages>
            <oldparameters>
               <oldparam id="UC.UES.IGNORE_ELSE_IF" name="IGNORE_ELSE_IF" value="Ignore &quot;else if&quot; statements"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="UC.UES.IGNORE_ELSE_IF" inputType="checkbox" label="Ignore &quot;else if&quot; statements"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.UP" header="Avoid unused parameters" id="UP" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Unused parameter: {0}."/>
               <msg index="2" value="Unused parameter: {1}."/>
               <msg index="3" value="Unused parameter: {2}."/>
            </messages>
            <oldparameters>
               <param name="CHECK_PROTECTED" value="Check &quot;protected&quot; methods."/>
               <param name="CHECK_PUBLIC" value="Check &quot;public&quot; methods."/>
               <param name="CHECK_PACKAGE" value="Check package-private methods."/>
               <param name="CHECK_PRIVATE" value="Check &quot;private&quot; methods."/>
               <param name="CHECK_READ" value="Check that the parameter is read for parameters with primitive types."/>
               <param name="CHECK_EMPTY" value="Check &quot;empty&quot; methods."/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="UC.UP.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods."/>
               <param defaultValue="false" id="UC.UP.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods."/>
               <param defaultValue="true" id="UC.UP.CHECK_PACKAGE" inputType="checkbox" label="Check package-private methods."/>
               <param defaultValue="true" id="UC.UP.CHECK_PRIVATE" inputType="checkbox" label="Check &quot;private&quot; methods."/>
               <param defaultValue="false" id="UC.UP.CHECK_READ" inputType="checkbox" label="Check that the parameter is read for parameters with primitive types."/>
               <param defaultValue="false" id="UC.UP.CHECK_EMPTY" inputType="checkbox" label="Check &quot;empty&quot; methods."/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.UIMPORT" header="Avoid unused &quot;import&quot; statements" id="UIMPORT" scope="FILE" severity="2">
            <messages>
               <msg index="1" value="Unused import statement ''{0}''."/>
            </messages>
            <oldparameters>
               <oldparam id="UC.UIMPORT.COUNT_JAVADOC" name="COUNT_JAVADOC" value="Ignore &quot;import&quot; statements if the &quot;import&quot; statement is used in the Javadoc."/>
               <oldparam id="UC.UIMPORT.UIMPORT2" name="UIMPORT2" value="Ignore unused &quot;import&quot; statements if the fully-qualified type name is used."/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="UC.UIMPORT.UC.UIMPORT2" inputType="checkbox" label="Ignore unused &quot;import&quot; statements if the fully-qualified type name is used."/>
               <param defaultValue="true" id="UC.UIMPORT.COUNT_JAVADOC" inputType="checkbox" label="Ignore &quot;import&quot; statements if the &quot;import&quot; statement is used in the Javadoc."/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.UPC" header="Avoid unused &quot;private&quot; classes or interfaces" id="UPC" scope="CLASS" severity="3" since="5.0">
            <messages>
               <msg index="1" value="Unused &quot;private&quot; {0}: {1}."/>
            </messages>
            <oldparameters>
               <oldparam id="UC.UPC.ANNOTATION" name="ANNOTATION" value="annotation"/>
            </oldparameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.PM" header="Avoid unused &quot;private&quot; methods" id="PM" scope="CLASS" severity="3">
            <messages>
               <msg index="1" value="Unused &quot;private&quot; method: {0}."/>
            </messages>
            <oldparameters>
               <oldparam id="UC.PM.IGNORE_LIST" name="IGNORE_LIST" value="Ignore methods with names (in regular expression):"/>
               <oldparam id="UC.PM.IGNORE_JCONTRACT" name="IGNORE_JCONTRACT" value="Ignore methods which are used within a Jcontract tag"/>
            </oldparameters>
            <parameters>
               <param defaultValue="" id="UC.PM.IGNORE_LIST" inputType="stringList" label="Ignore methods with names (in regular expression):" prevType="StringList"/>
               <param defaultValue="javafx.fxml.FXML" id="UC.PM.IGNORED_ANNOTATIONS" inputType="stringList" label="Ignore methods preceded by annotations with qualified names:" prevType="StringList"/>
               <param defaultValue="false" id="UC.PM.IGNORE_JCONTRACT" inputType="checkbox" label="Ignore methods which are used within a Jcontract tag"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.UC.EF" header="Avoid empty &quot;finalize()&quot; methods." id="EF" scope="LINE" severity="3">
            <messages>
               <msg index="1" value="Avoid empty 'finalize()' method"/>
            </messages>
         </rule>
      </category>
      <category description="JUnit Test Case" name="JUNIT">
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.IGNORE" header="Ensure that JUnit 5 test classes that use @Ignore are annotated with @ExtendWith(IgnoreCondition.class) or @EnableJUnit4MigrationSupport" id="IGNORE" severity="1" since="10.4.3">
            <messages>
               <msg index="1" value="The ''{0}'' method annotated with @Ignore is used in a JUnit 5 test class that does not support JUnit 4 annotations"/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.TDIR" header="Do not use the TemporaryFolder Rule in JUnit 5 tests" id="TDIR" severity="1" since="10.4.3">
            <messages>
               <msg index="1" value="Configure the test with the @TempDir annotation, because the TemporaryFolder Rule is not supported in JUnit 5"/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.RPL5" header="Do not use JUnit 4 annotations when migrating tests to JUnit 5" id="RPL5" severity="3" since="10.4.3">
            <messages>
               <msg index="1" value="The ''{0}'' annotation should be replaced by the ''{1}'' annotation when migrating to JUnit 5"/>
            </messages>
            <parameters>
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="JUNIT.RPL5.ANNOTATIONS_TABLE" label="Replace the following JUnit 4 annotations" reader="SATable">
                  <columns>
                     <column columnType="text" editable="true" id="JUNIT__RPL5__ANNOTATIONS_TABLE__COLUMN1" label="JUnit 4" required="true" textSize="large"/>
                     <column columnType="text" editable="true" id="JUNIT__RPL5__ANNOTATIONS_TABLE__COLUMN2" label="JUnit 5" required="true" textSize="large"/>
                  </columns>
                  <predefinedRows>
                     <row id="1">
                        <column refColumnId="JUNIT__RPL5__ANNOTATIONS_TABLE__COLUMN1" value="org.junit.Test"/>
                        <column refColumnId="JUNIT__RPL5__ANNOTATIONS_TABLE__COLUMN2" value="org.junit.jupiter.api.Test"/>
                     </row>
                     <row id="2">
                        <column refColumnId="JUNIT__RPL5__ANNOTATIONS_TABLE__COLUMN1" value="org.junit.Before"/>
                        <column refColumnId="JUNIT__RPL5__ANNOTATIONS_TABLE__COLUMN2" value="org.junit.jupiter.api.BeforeEach"/>
                     </row>
                     <row id="3">
                        <column refColumnId="JUNIT__RPL5__ANNOTATIONS_TABLE__COLUMN1" value="org.junit.BeforeClass"/>
                        <column refColumnId="JUNIT__RPL5__ANNOTATIONS_TABLE__COLUMN2" value="org.junit.jupiter.api.BeforeAll"/>
                     </row>
                     <row id="4">
                        <column refColumnId="JUNIT__RPL5__ANNOTATIONS_TABLE__COLUMN1" value="org.junit.After"/>
                        <column refColumnId="JUNIT__RPL5__ANNOTATIONS_TABLE__COLUMN2" value="org.junit.jupiter.api.AfterEach"/>
                     </row>
                     <row id="5">
                        <column refColumnId="JUNIT__RPL5__ANNOTATIONS_TABLE__COLUMN1" value="org.junit.AfterClass"/>
                        <column refColumnId="JUNIT__RPL5__ANNOTATIONS_TABLE__COLUMN2" value="org.junit.jupiter.api.AfterAll"/>
                     </row>
                     <row id="6">
                        <column refColumnId="JUNIT__RPL5__ANNOTATIONS_TABLE__COLUMN1" value="org.junit.Ignore"/>
                        <column refColumnId="JUNIT__RPL5__ANNOTATIONS_TABLE__COLUMN2" value="org.junit.jupiter.api.Disabled"/>
                     </row>
                  </predefinedRows>
               </complexParamTable>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.OSIC" header="Do not use the constructor to set up test cases." id="OSIC" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Constructor usage may obscure exception traces"/>
               <msg index="2" value="Constructor missing call to the 'super ()' constructor call"/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.TEST" header="Make sure all methods have at least one JUnit test method" id="TEST" scope="METHOD" severity="2" since="6.0">
            <messages>
               <msg index="1" value="No JUnit test method defined for ''{0}()''."/>
            </messages>
            <oldparameters>
               <oldparam id="JUNIT.TEST.IGNORE_CLASS" name="IGNORE_CLASS" value="Ignore class list(in regular expression)"/>
               <oldparam id="JUNIT.TEST.CHECK_PACKAGE_METHOD" name="CHECK_PACKAGE_METHOD" value="Check package-private methods"/>
               <oldparam id="JUNIT.TEST.CHECK_PUBLIC_METHOD" name="CHECK_PUBLIC_METHOD" value="Check &quot;public&quot; methods"/>
               <oldparam id="JUNIT.TEST.CHECK_PRIVATE_CLASS" name="CHECK_PRIVATE_CLASS" value="Check &quot;private&quot; classes"/>
               <oldparam id="JUNIT.TEST.CHECK_PROTECTED_CLASS" name="CHECK_PROTECTED_CLASS" value="Check &quot;protected&quot; classes"/>
               <oldparam id="JUNIT.TEST.TEST_CASE_PATTERN" name="TEST_CASE_PATTERN" value="Pattern for JUnit test class location"/>
               <oldparam id="JUNIT.TEST.CHECK_PROTECTED_METHOD" name="CHECK_PROTECTED_METHOD" value="Check &quot;protected&quot; methods"/>
               <oldparam id="JUNIT.TEST.CHECK_PUBLIC_CLASS" name="CHECK_PUBLIC_CLASS" value="Check &quot;public&quot; classes"/>
               <oldparam id="JUNIT.TEST.METHOD_TAB" name="METHOD_TAB" value="Method config"/>
               <oldparam id="JUNIT.TEST.CHECK_PRIVATE_METHOD" name="CHECK_PRIVATE_METHOD" value="Check &quot;private&quot; methods"/>
               <oldparam id="JUNIT.TEST.CHECK_PACKAGE_CLASS" name="CHECK_PACKAGE_CLASS" value="Check package-private classes"/>
               <oldparam id="JUNIT.TEST.IGNORE_METHOD" name="IGNORE_METHOD" value="Ignore method list(in regular expression)"/>
               <oldparam id="JUNIT.TEST.PATTERN_TAB" name="PATTERN_TAB" value="JUnit test class pattern"/>
               <oldparam id="JUNIT.TEST.CLASS_TAB" name="CLASS_TAB" value="Class config"/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="JUNIT.TEST.tab.PATTERN_TAB" label="JUnit test class pattern">
                  <param defaultValue="${project_name}/${source_folder}/${package_name}.${class_name}Test;${project_name}.jtest/${source_folder}/${package_name}.${class_name}Test;${project_name}.tests/${source_folder}/${package_name}.${class_name}Test" id="JUNIT.TEST.TEST_CASE_PATTERN" inputType="stringList" label="Pattern for JUnit test class location" prevType="StringList"/>
               </group>
               <group collapsible="false" id="JUNIT.TEST.tab.CLASS_TAB" label="Class config">
                  <param defaultValue="true" id="JUNIT.TEST.CHECK_PUBLIC_CLASS" inputType="checkbox" label="Check &quot;public&quot; classes"/>
                  <param defaultValue="false" id="JUNIT.TEST.CHECK_PROTECTED_CLASS" inputType="checkbox" label="Check &quot;protected&quot; classes"/>
                  <param defaultValue="false" id="JUNIT.TEST.CHECK_PACKAGE_CLASS" inputType="checkbox" label="Check package-private classes"/>
                  <param defaultValue="false" id="JUNIT.TEST.CHECK_PRIVATE_CLASS" inputType="checkbox" label="Check &quot;private&quot; classes"/>
                  <param defaultValue="" id="JUNIT.TEST.IGNORE_CLASS" inputType="stringList" label="Ignore class list(in regular expression)" prevType="StringList"/>
               </group>
               <group collapsible="false" id="JUNIT.TEST.tab.METHOD_TAB" label="Method config">
                  <param defaultValue="true" id="JUNIT.TEST.CHECK_PUBLIC_METHOD" inputType="checkbox" label="Check &quot;public&quot; methods"/>
                  <param defaultValue="true" id="JUNIT.TEST.CHECK_PROTECTED_METHOD" inputType="checkbox" label="Check &quot;protected&quot; methods"/>
                  <param defaultValue="false" id="JUNIT.TEST.CHECK_PACKAGE_METHOD" inputType="checkbox" label="Check package-private methods"/>
                  <param defaultValue="false" id="JUNIT.TEST.CHECK_PRIVATE_METHOD" inputType="checkbox" label="Check &quot;private&quot; methods"/>
                  <param defaultValue="^main$;^toString$;^get.+$;^set.+$;" id="JUNIT.TEST.IGNORE_METHOD" inputType="stringList" label="Ignore method list(in regular expression)" prevType="StringList"/>
               </group>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.UPJT" header="Include an appropriate Javadoc tag in the Javadoc for JUnit test methods" id="UPJT" scope="LINE" severity="3" since="7.5">
            <messages>
               <msg index="1" value="Test method ''{0}'' does not contain any of the required tags in its Javadoc."/>
               <msg index="2" value="Test method ''{0}'' does not have any Javadoc."/>
               <msg index="3" value="The Javadoc for the test method ''{0}'' has one of the required Javadoc tags, but it is not followed by a token."/>
            </messages>
            <oldparameters>
               <oldparam id="JUNIT.UPJT.REQUIRE_TOKEN" name="REQUIRE_TOKEN" value="Javadoc tag must be followed by a token."/>
               <oldparam id="JUNIT.UPJT.REQUIRED_TAGS" name="REQUIRED_TAGS" value="Include one of the following tags in the Javadoc for each JUnit test method:"/>
               <oldparam id="JUNIT.UPJT.CASE_SENSITIVE" name="CASE_SENSITIVE" value="Make tag checking case sensitive."/>
            </oldparameters>
            <parameters>
               <param defaultValue="@pr;@fr" id="JUNIT.UPJT.REQUIRED_TAGS" inputType="stringList" label="Include one of the following tags in the Javadoc for each JUnit test method:" prevType="StringList"/>
               <param defaultValue="true" id="JUNIT.UPJT.REQUIRE_TOKEN" inputType="checkbox" label="Javadoc tag must be followed by a token."/>
               <param defaultValue="false" id="JUNIT.UPJT.CASE_SENSITIVE" inputType="checkbox" label="Make tag checking case sensitive."/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.SUITE" header="Make 'suite()' methods &quot;public&quot; and &quot;static&quot;" id="SUITE" scope="METHOD" severity="1" since="5.0">
            <messages>
               <msg index="1" value="Method ''{0}'' is not &quot;public&quot; &quot;static&quot;."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.ASSERT" header="Include a message string in JUnit assertions" id="ASSERT" scope="LINE" severity="3" since="5.0">
            <messages>
               <msg index="1" value="No error message in ''{0}()'' in method ''{1}()''."/>
            </messages>
            <oldparameters>
               <oldparam id="JUNIT.ASSERT.IGNORE_ASSERT_EQUALS" name="IGNORE_ASSERT_EQUALS" value="Ignore 'assertEquals()'"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="JUNIT.ASSERT.IGNORE_ASSERT_EQUALS" inputType="checkbox" label="Ignore 'assertEquals()'"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.UPSS" header="Use the correct signature for the 'suite()' method in JUnit test classes." id="UPSS" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Possible typo implementing method ''suite()'': ''{0}()'' should be ''suite()''."/>
               <msg index="2" value="'suite()' method should be &quot;public&quot;."/>
               <msg index="3" value="'suite()' method should be &quot;static&quot;."/>
               <msg index="4" value="'suite()' method should have no parameters."/>
               <msg index="5" value="'suite()' method should have the return type &quot;junit.framework.Test&quot;."/>
            </messages>
            <oldparameters>
               <oldparam id="JUNIT.UPSS.TYPO" name="TYPO" value="Check that the method name does not contain a typo"/>
               <oldparam id="JUNIT.UPSS.PUBLIC" name="PUBLIC" value="Check that the method is declared &quot;public&quot;"/>
               <oldparam id="JUNIT.UPSS.STATIC" name="STATIC" value="Check that the method is declared &quot;static&quot;"/>
               <oldparam id="JUNIT.UPSS.NO_PARAMS" name="NO_PARAMS" value="Check that the method has no parameters"/>
               <oldparam id="JUNIT.UPSS.RETURN_TYPE" name="RETURN_TYPE" value="Check that the return type is &quot;junit.framework.Test&quot;"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="JUNIT.UPSS.TYPO" inputType="checkbox" label="Check that the method name does not contain a typo"/>
               <param defaultValue="true" id="JUNIT.UPSS.PUBLIC" inputType="checkbox" label="Check that the method is declared &quot;public&quot;"/>
               <param defaultValue="true" id="JUNIT.UPSS.STATIC" inputType="checkbox" label="Check that the method is declared &quot;static&quot;"/>
               <param defaultValue="true" id="JUNIT.UPSS.NO_PARAMS" inputType="checkbox" label="Check that the method has no parameters"/>
               <param defaultValue="true" id="JUNIT.UPSS.RETURN_TYPE" inputType="checkbox" label="Check that the return type is &quot;junit.framework.Test&quot;"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.SIFN" header="Set all fields which are initialized in the 'setUp()' method to &quot;null&quot; in the 'tearDown()' method." id="SIFN" scope="LINE" severity="3" since="8.1">
            <messages>
               <msg index="1" value="The field ''{0}'' is initialized in the ''{1}()'' method but never set to &quot;null&quot; in the tear-down method."/>
               <msg index="2" value="The field ''{0}'' is initialized in the ''{1}()'' method, but there is no tear-down method in the class ''{2}''."/>
            </messages>
            <oldparameters>
               <oldparam id="JUNIT.SIFN.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
            </oldparameters>
            <parameters>
               <param defaultValue="5" id="JUNIT.SIFN.MAX_LEVEL" inputType="integer" label="Maximum level of checking allowed" min="1"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.AST" header="Do not include assertion statements in threads other than the main thread." id="AST" scope="LINE" severity="1" since="8.2">
            <messages>
               <msg index="1" value="This call to ''{0}()'' is in a thread other than the main thread, which may cause any exceptions which are thrown to be hidden."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.CSUTD" header="Ensure that 'setUp()' and 'tearDown()' methods are implemented correctly." id="CSUTD" scope="CLASS" severity="3" since="8.4">
            <messages>
               <msg index="1" value="This call to 'super.setUp()' should be placed first in the 'setUp()' method."/>
               <msg index="2" value="Avoid catching exceptions thrown by 'super.setUp()'; thrown exceptions should cause the 'setUp()' method to fail."/>
               <msg index="3" value="This call to 'super.tearDown()' should be placed in a &quot;finally&quot; block."/>
               <msg index="4" value="The body of this 'tearDown()' method should be enclosed by a &quot;try&quot;/&quot;finally&quot; statement with a call to 'super.tearDown()' in the &quot;finally&quot; block."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.ASAT" header="Prefer assertSame and assertNotSame over assertTrue and assertFalse" id="ASAT" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="Consider using assertSame() or assertNotSame() here."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.ANAT" header="Prefer assertNull and assertNotNull over assertTrue and assertFalse" id="ANAT" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="Consider using assertNull() or assertNotNull() here."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.ANBA" header="Avoid negating boolean parameters to assertTrue() or assertFalse()" id="ANBA" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="Consider using {0}() here."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.CBA" header="Avoid calling 'assert' methods in catch blocks" id="CBA" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="''{0}'' called in catch block."/>
            </messages>
            <oldparameters>
               <oldparam id="JUNIT.CBA.CHECK_JUNIT_3" name="CHECK_JUNIT_3" value="Check JUnit 3 test methods"/>
               <oldparam id="JUNIT.CBA.CHECK_JUNIT_4" name="CHECK_JUNIT_4" value="Check JUnit 4 test methods"/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="JUNIT.CBA.CHECK_JUNIT_3" inputType="checkbox" label="Check JUnit 3 test methods"/>
               <param defaultValue="true" id="JUNIT.CBA.CHECK_JUNIT_4" inputType="checkbox" label="Check JUnit 4 test methods"/>
               <param defaultValue="true" id="JUNIT.CBA.CHECK_JUNIT_5" inputType="checkbox" label="Check JUnit 5 test methods"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.FAIL" header="Use the fail() method instead of forcing a failed condition using the assertTrue(false) or assertFalse(true) method" id="FAIL" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Use the fail() method instead of assertTrue(false) or assertFalse(true) "/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.SIA" header="Ensure JUnit test cases include assertion methods" id="SIA" scope="METHOD" severity="1" since="6.0">
            <messages>
               <msg index="1" value="Missing assertion method within the JUnit test case method ''{0}()''."/>
            </messages>
            <oldparameters>
               <oldparam id="JUNIT.SIA.MAX_LEVEL_ALLOWED" name="MAX_LEVEL_ALLOWED" value="Maximum level of checking allowed"/>
            </oldparameters>
            <parameters>
               <param defaultValue="2" id="JUNIT.SIA.MAX_LEVEL_ALLOWED" inputType="integer" label="Maximum level of checking allowed" min="1"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.AEAT" header="Prefer assertEquals and assertNotEquals over assertTrue and assertFalse" id="AEAT" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="Consider using assertEquals() or assertNotEquals() method."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.DIR" header="Place each test class in the same location as the class that it tests" id="DIR" scope="CLASS" severity="5" since="5.0">
            <messages>
               <msg index="1" value="Test class ''{0}'' is not in the same directory as class ''{1}''."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.ETCTA" header="Avoid extending 'TestCase' in test classes which contain the '@Test' annotation." id="ETCTA" scope="CLASS" severity="1" since="9.0">
            <messages>
               <msg index="1" value="The class ''{0}'' extends ''TestCase'' and uses the ''@Test'' annotation."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.TATC" header="Use '@Test' annotation instead of extending 'TestCase'" id="TATC" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="Class ''{0}'' extends ''TestCase''."/>
            </messages>
            <oldparameters>
               <oldparam id="JUNIT.TATC.CHECK_ORG_JUNIT" name="CHECK_ORG_JUNIT" value="Only check files which import from the 'org.junit' package"/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="JUNIT.TATC.CHECK_ORG_JUNIT" inputType="checkbox" label="Only check files which import from the 'org.junit' package"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.FICB" header="Do not invoke the 'fail()' method in a 'catch' block in a JUnit test method." id="FICB" severity="3" since="8.0">
            <messages>
               <msg index="1" value="''fail()'' method invoked in a ''catch'' block in a JUnit test method."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.OSUM" header="Ensure that a setup method is defined in the test class" id="OSUM" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Missing ''{0}'' method"/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.OTDM" header="Ensure that a cleanup method is defined in the test class" id="OTDM" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Missing ''{0}'' method"/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.AUL" header="Avoid using loops in JUnit tests" id="AUL" scope="LINE" severity="3" since="10.4.3">
            <messages>
               <msg index="1" value="Configure the test with the @RepeatedTest or @ParameterizedTest annotation to remove the loop."/>
               <msg index="2" value="Consider using @RepeatedTest or @ParameterizedTest from JUnit 5 to remove the loop."/>
            </messages>
         </rule>
      </category>
      <category description="Coding Conventions" name="CODSTA">
         <category description="Readability" name="READ">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.USN" header="Avoid literal constants" id="USN" scope="LINE" severity="2" since="4.5">
               <messages>
                  <msg index="1" value="Literal constant is used: {0}."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.USN.IGNORE_METHODS" name="IGNORE_METHODS" value="Ignore literal constants in the following types and/or methods (in form of\n&lt;regular expression for fully qualified type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,&lt;parameter2 fully qualified type&gt;)):"/>
                  <oldparam id="CODSTA.READ.USN.IGNORE_FINAL" name="IGNORE_FINAL" value="Ignore non-&quot;static&quot; &quot;final&quot; variables"/>
                  <oldparam id="CODSTA.READ.USN.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="literal constants allowed(in regular expression):"/>
                  <oldparam id="CODSTA.READ.USN.PASSED_TO_METHODS" name="PASSED_TO_METHODS" value="Ignore literal constants passed to the following methods:"/>
                  <oldparam id="CODSTA.READ.USN.METHOD" name="METHOD" value="Method (in regular expression)"/>
                  <oldparam id="CODSTA.READ.USN.TYPE" name="TYPE" value="Type (in regular expression)"/>
                  <oldparam id="CODSTA.READ.USN.BASIC_TAB" name="BASIC_TAB" value="Basic Settings"/>
                  <oldparam id="CODSTA.READ.USN.IGNORED_TAB" name="IGNORED_TAB" value="Ignored Types/Methods"/>
                  <oldparam id="CODSTA.READ.USN.IGNORED_PARAMS" name="IGNORED_PARAMS" value="Ignored Arguments"/>
                  <oldparam id="CODSTA.READ.USN.IGNORE_CASE" name="IGNORE_CASE" value="Ignore literal constants in &quot;switch&quot; cases"/>
                  <oldparam id="CODSTA.READ.USN.IGNORE_ANNOTATION" name="IGNORE_ANNOTATION" value="Ignore literal constants in annotations"/>
               </oldparameters>
               <parameters>
                  <group collapsible="false" id="CODSTA.READ.USN.tab.BASIC_TAB" label="Basic Settings">
                     <param defaultValue="false" id="CODSTA.READ.USN.IGNORE_FINAL" inputType="checkbox" label="Ignore non-&quot;static&quot; &quot;final&quot; variables"/>
                     <param defaultValue="true" id="CODSTA.READ.USN.IGNORE_ANNOTATION" inputType="checkbox" label="Ignore literal constants in annotations"/>
                     <param defaultValue="false" id="CODSTA.READ.USN.IGNORE_CASE" inputType="checkbox" label="Ignore literal constants in &quot;switch&quot; cases"/>
                     <param defaultValue="%5E%28%5C%2B%7C-%29%3F1%28%5BLl%5D%7C%28%5C.0%2B%29%3F%5BFfDd%5D%3F%29%3F%24;%5E%5C%2B%3F%5B2-9%5D%28%5BLl%5D%7C%28%5C.0%2B%29%3F%5BFfDd%5D%3F%29%3F%24;%5E%5C%2B%3F10%28%5BLl%5D%7C%28%5C.0%2B%29%3F%5BFfDd%5D%3F%29%3F%24;%5E%5C%2B%3F%280%29%2B%28%5BLl%5D%7C%28%5C.0%2B%29%3F%5BFfDd%5D%3F%29%3F%24" id="CODSTA.READ.USN.REGULAR_EXPRESSION" inputType="stringList" label="Literal constants allowed (in regular expression):" prevType="StringList"/>
                  </group>
                  <group collapsible="false" id="CODSTA.READ.USN.tab.IGNORED_TAB" label="Ignored Types/Methods">
                     <param defaultValue="hashCode()" description="Ignore literal constants in the following types and/or methods (in form of &lt;regular expression for fully qualified type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,&lt;parameter2 fully qualified type&gt;))" id="CODSTA.READ.USN.IGNORE_METHODS" inputType="stringList" label="Ignore literal constants in the following types and/or methods:" prevType="StringList"/>
                  </group>
                  <group collapsible="false" id="CODSTA.READ.USN.tab.IGNORED_PARAMS" label="Ignored Arguments">
                     <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CODSTA.READ.USN.PASSED_TO_METHODS" label="Ignore literal constants passed to the following methods:" reader="SATable">
                        <columns>
                           <column columnType="text" defaultValue="unknown" editable="true" id="CODSTA__READ__USN__PASSED_TO_METHODS__COLUMN1" label="Type (in regular expression)" required="true"/>
                           <column columnType="text" defaultValue="unknown" editable="true" id="CODSTA__READ__USN__PASSED_TO_METHODS__COLUMN2" label="Method (in regular expression)" required="true"/>
                        </columns>
                        <predefinedRows>
                           <row id="1">
                              <column refColumnId="CODSTA__READ__USN__PASSED_TO_METHODS__COLUMN1" value="^java\.awt\.Color$"/>
                              <column refColumnId="CODSTA__READ__USN__PASSED_TO_METHODS__COLUMN2" value=".*"/>
                           </row>
                        </predefinedRows>
                     </complexParamTable>
                  </group>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.ABUB" header="Do not rely on automatic boxing and unboxing of primitive types." id="ABUB" scope="LINE" severity="4" since="8.0">
               <messages>
                  <msg index="1" value="The primitive type ''{0}'' will require automatic boxing here."/>
                  <msg index="2" value="The non-primitive type ''{0}'' will require automatic unboxing here."/>
                  <msg index="3" value="The primitive type ''{0}'' may be assigned null here."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.ACCS" header="Do not use complicated conditional expressions in control structures" id="ACCS" scope="LINE" severity="3" since="5.0">
               <messages>
                  <msg index="1" value="More than {0} conditional expressions in &quot;{1}&quot; statement."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.ACCS.NUM_INPUT" name="NUM_INPUT" value="Maximum number of operators"/>
                  <oldparam id="CODSTA.READ.ACCS.CHECK_IF" name="CHECK_IF" value="Check &quot;if&quot; statements"/>
                  <oldparam id="CODSTA.READ.ACCS.CHECK_FOR" name="CHECK_FOR" value="Check &quot;for&quot; statements"/>
                  <oldparam id="CODSTA.READ.ACCS.CHECK_DO" name="CHECK_DO" value="Check &quot;do&quot; statements"/>
                  <oldparam id="CODSTA.READ.ACCS.CHECK_WHILE" name="CHECK_WHILE" value="Check &quot;while&quot; statements"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="2" id="CODSTA.READ.ACCS.NUM_INPUT" inputType="integer" label="Maximum number of operators" min="1"/>
                  <param defaultValue="true" id="CODSTA.READ.ACCS.CHECK_IF" inputType="checkbox" label="Check &quot;if&quot; statements"/>
                  <param defaultValue="false" id="CODSTA.READ.ACCS.CHECK_FOR" inputType="checkbox" label="Check &quot;for&quot; statements"/>
                  <param defaultValue="false" id="CODSTA.READ.ACCS.CHECK_DO" inputType="checkbox" label="Check &quot;do&quot; statements"/>
                  <param defaultValue="false" id="CODSTA.READ.ACCS.CHECK_WHILE" inputType="checkbox" label="Check &quot;while&quot; statements"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.AEFS" header="Avoid or enforce usage of enhanced &quot;for&quot; loops." id="AEFS" scope="LINE" severity="5" since="8.0">
               <messages>
                  <msg index="1" value="Enhanced &quot;for&quot; loop used."/>
                  <msg index="2" value="This loop may be converted to an enhanced &quot;for&quot; loop."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.AEFS.AVOID_OR_ENFORCE" name="AVOID_OR_ENFORCE" value="Avoid or enforce usage of enhanced &quot;for&quot; loops"/>
                  <oldparam id="CODSTA.READ.AEFS.AVOID_ENHANCED" name="AVOID_ENHANCED" value="Avoid enhanced &quot;for&quot; loops"/>
                  <oldparam id="CODSTA.READ.AEFS.ENFORCE_ENHANCED" name="ENFORCE_ENHANCED" value="Enforce enhanced &quot;for&quot; loops"/>
                  <oldparam id="CODSTA.READ.AEFS.CHECK_ITERATOR" name="CHECK_ITERATOR" value="Check Iterator loops"/>
                  <oldparam id="CODSTA.READ.AEFS.CHECK_COLLECTION" name="CHECK_COLLECTION" value="Check Collection loops"/>
                  <oldparam id="CODSTA.READ.AEFS.CHECK_ARRAY" name="CHECK_ARRAY" value="Check array loops"/>
                  <oldparam id="CODSTA.READ.AEFS.CHECK_RAW" name="CHECK_RAW" value="Check loops over raw types"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="CODSTA.READ.AEFS.AVOID_OR_ENFORCE" label="Avoid or enforce usage of enhanced &quot;for&quot; loops" prevType="MultipleChoice" showLabel="true">
                     <radioItem defaultValue="checked" label="Avoid enhanced &quot;for&quot; loops" value="0"/>
                     <radioItem label="Enforce enhanced &quot;for&quot; loops" value="1">
                        <param defaultValue="true" id="CODSTA.READ.AEFS.CHECK_ITERATOR" inputType="checkbox" label="Check Iterator loops"/>
                        <param defaultValue="true" id="CODSTA.READ.AEFS.CHECK_COLLECTION" inputType="checkbox" label="Check Collection loops"/>
                        <param defaultValue="true" id="CODSTA.READ.AEFS.CHECK_ARRAY" inputType="checkbox" label="Check array loops"/>
                        <param defaultValue="false" id="CODSTA.READ.AEFS.CHECK_RAW" inputType="checkbox" label="Check loops over raw types"/>
                     </radioItem>
                  </radioGroup>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.AFD" header="Access and set fields directly in the declaring type instead of using getter and setter methods." id="AFD" scope="LINE" severity="3" since="8.0">
               <messages>
                  <msg index="1" value="Access the field ''{0}'' directly instead of using the method ''{1}''."/>
                  <msg index="2" value="Set the field ''{0}'' directly instead of using the method ''{1}''."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.AFQN" header="Do not use fully qualified type names." id="AFQN" scope="LINE" severity="4" since="8.0">
               <messages>
                  <msg index="1" value="The fully qualified type name ''{0}'' is used here."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.AFQN.IGNORE_JAVADOC" name="IGNORE_JAVADOC" value="Ignore qualified names in Javadoc"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="CODSTA.READ.AFQN.IGNORE_JAVADOC" inputType="checkbox" label="Ignore qualified names in Javadoc"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.AIC" header="Avoid anonymous inner classes" id="AIC" scope="LINE" severity="3" since="8.2">
               <messages>
                  <msg index="1" value="Anonymous class: ''{0}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.AIC.IGNORE_NUM" name="IGNORE_NUM" value="Ignore classes with number of methods less than"/>
                  <oldparam id="CODSTA.READ.AIC.IGNORE_METHODS" name="IGNORE_METHODS" value="Ignore classes containing the following methods:"/>
                  <oldparam id="CODSTA.READ.AIC.IGNORE_METHODS_LIST" name="IGNORE_METHODS_LIST" value="Input method definition"/>
               </oldparameters>
               <parameters>
                  <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="CODSTA.READ.AIC.IGNORE_NUM" label="Ignore classes with number of methods less than" prevType="InputValueWithCheckBox" reader="SATable">
                     <columns>
                        <column columnType="checkbox" editable="true" id="CODSTA__READ__AIC__IGNORE_NUM__COLUMN1" label="" required="true"/>
                        <column columnType="text" editable="true" id="CODSTA__READ__AIC__IGNORE_NUM__COLUMN2" label="" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="CODSTA__READ__AIC__IGNORE_NUM__COLUMN1" value="false"/>
                           <column refColumnId="CODSTA__READ__AIC__IGNORE_NUM__COLUMN2" value="5"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
                  <param defaultValue="true" id="CODSTA.READ.AIC.IGNORE_METHODS" inputType="checkbox" label="Ignore classes containing the following methods:"/>
                  <param defaultValue="readResolve();actionPerformed(ActionEvent)" id="CODSTA.READ.AIC.IGNORE_METHODS_LIST" inputType="stringList" label="Input method definition" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.ANL" header="Avoid using negative logic in if-else statement" id="ANL" scope="LINE" severity="4" since="6.0">
               <messages>
                  <msg index="1" value="Negative logic is used in if-else logic, revising the logic is suggested."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.ANL.IGNORE_SPECIAL_CASES" name="IGNORE_SPECIAL_CASES" value="Ignore special cases (see rule description for definition)"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="CODSTA.READ.ANL.IGNORE_SPECIAL_CASES" inputType="checkbox" label="Ignore special cases (see rule description for definition)"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.ASIS" header="Avoid static import statements" id="ASIS" scope="LINE" severity="3" since="8.0">
               <messages>
                  <msg index="1" value="This static import should be eliminated."/>
                  <msg index="2" value="Multiple static imports from type ''{0}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.ASIS.ALLOWED_CLASSES" name="ALLOWED_CLASSES" value="Classes/interfaces to allow static imports from (Specify fully qualified names using regular expressions):"/>
                  <oldparam id="CODSTA.READ.ASIS.CHECK_EXPLICIT" name="CHECK_EXPLICIT" value="Check explicit static imports"/>
                  <oldparam id="CODSTA.READ.ASIS.CHECK_EXPLICIT_NUM" name="CHECK_EXPLICIT_NUM" value="Only check imports from the same type if there are more than"/>
                  <oldparam id="CODSTA.READ.ASIS.CHECK_WILDCARD" name="CHECK_WILDCARD" value="Check wildcard static imports"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="CODSTA.READ.ASIS.CHECK_EXPLICIT" inputType="checkbox" label="Check explicit static imports">
                     <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="CODSTA.READ.ASIS.CHECK_EXPLICIT_NUM" label="Only check imports from the same type if there are more than" prevType="InputValueWithCheckBox" reader="SATable">
                        <columns>
                           <column columnType="checkbox" editable="true" id="CODSTA__READ__ASIS__CHECK_EXPLICIT_NUM__COLUMN1" label="" required="true"/>
                           <column columnType="text" editable="true" id="CODSTA__READ__ASIS__CHECK_EXPLICIT_NUM__COLUMN2" label="" required="true"/>
                        </columns>
                        <predefinedRows>
                           <row id="1">
                              <column refColumnId="CODSTA__READ__ASIS__CHECK_EXPLICIT_NUM__COLUMN1" value="false"/>
                              <column refColumnId="CODSTA__READ__ASIS__CHECK_EXPLICIT_NUM__COLUMN2" value="3"/>
                           </row>
                        </predefinedRows>
                     </complexParamTable>
                  </param>
                  <param defaultValue="true" id="CODSTA.READ.ASIS.CHECK_WILDCARD" inputType="checkbox" label="Check wildcard static imports"/>
                  <param defaultValue="" id="CODSTA.READ.ASIS.ALLOWED_CLASSES" inputType="stringList" label="Classes/interfaces to allow static imports from (Specify fully qualified names using regular expressions):" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.AUTS" header="Avoid unnecessary calls to 'toString()'." id="AUTS" scope="LINE" severity="3" since="9.0">
               <messages>
                  <msg index="1" value="Unnecessary call to &quot;toString()&quot;."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.CEB" header="Comment empty blocks." id="CEB" scope="LINE" severity="3" since="8.0">
               <messages>
                  <msg index="1" value="This block should contain a comment explaining why it is empty."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.CEB.IGNORE_NON_PRIVATE_CONST" name="IGNORE_NON_PRIVATE_CONST" value="Ignore the bodies of non-&quot;public&quot; constructors"/>
                  <oldparam id="CODSTA.READ.CEB.IGNORE_IMPLEMENTING" name="IGNORE_IMPLEMENTING" value="Ignore the bodies of implementations of interface methods"/>
                  <oldparam id="CODSTA.READ.CEB.IGNORE_OVERRIDING" name="IGNORE_OVERRIDING" value="Ignore the bodies of overriding methods"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="CODSTA.READ.CEB.IGNORE_NON_PRIVATE_CONST" inputType="checkbox" label="Ignore the bodies of non-&quot;public&quot; constructors"/>
                  <param defaultValue="true" id="CODSTA.READ.CEB.IGNORE_IMPLEMENTING" inputType="checkbox" label="Ignore the bodies of implementations of interface methods"/>
                  <param defaultValue="false" id="CODSTA.READ.CEB.IGNORE_OVERRIDING" inputType="checkbox" label="Ignore the bodies of overriding methods"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.CCB" header="Comment the ends of control structures." id="CCB" scope="LINE" severity="3" since="8.0">
               <messages>
                  <msg index="1" value="This close brace does not have an end-of-line comment to indicate which statement it goes with."/>
                  <msg index="2" value="This end-of-line comment does not match the user-specified regular expression ''{0}''."/>
                  <msg index="3" value="This semicolon does not have an end-of-line comment to indicate which &quot;do&quot; statement it goes with."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.CCB.COMMENTS" name="COMMENTS" value="End-of-Line Comments (in Regular Expressions)"/>
                  <oldparam id="CODSTA.READ.CCB.IF_COMMENT" name="IF_COMMENT" value="Comment for end of &quot;if&quot; block"/>
                  <oldparam id="CODSTA.READ.CCB.ELSE_COMMENT" name="ELSE_COMMENT" value="Comment for end of &quot;else&quot; block"/>
                  <oldparam id="CODSTA.READ.CCB.SWITCH_COMMENT" name="SWITCH_COMMENT" value="Comment for end of &quot;switch&quot; block"/>
                  <oldparam id="CODSTA.READ.CCB.DO_COMMENT" name="DO_COMMENT" value="Comment for end of &quot;do&quot; statement"/>
                  <oldparam id="CODSTA.READ.CCB.FOR_COMMENT" name="FOR_COMMENT" value="Comment for end of &quot;for&quot; block"/>
                  <oldparam id="CODSTA.READ.CCB.WHILE_COMMENT" name="WHILE_COMMENT" value="Comment for end of &quot;while&quot; block"/>
               </oldparameters>
               <parameters>
                  <group collapsible="false" id="CODSTA.READ.CCB.group.0" label="End-of-Line Comments (in Regular Expressions)">
                     <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="CODSTA.READ.CCB.IF_COMMENT" label="Comment for end of &quot;if&quot; block" prevType="InputValueWithCheckBox" reader="SATable">
                        <columns>
                           <column columnType="checkbox" editable="true" id="CODSTA__READ__CCB__IF_COMMENT__COLUMN1" label="" required="true"/>
                           <column columnType="text" editable="true" id="CODSTA__READ__CCB__IF_COMMENT__COLUMN2" label="" required="true"/>
                        </columns>
                        <predefinedRows>
                           <row id="1">
                              <column refColumnId="CODSTA__READ__CCB__IF_COMMENT__COLUMN1" value="true"/>
                              <column refColumnId="CODSTA__READ__CCB__IF_COMMENT__COLUMN2" value="^end if"/>
                           </row>
                        </predefinedRows>
                     </complexParamTable>
                     <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="CODSTA.READ.CCB.ELSE_COMMENT" label="Comment for end of &quot;else&quot; block" prevType="InputValueWithCheckBox" reader="SATable">
                        <columns>
                           <column columnType="checkbox" editable="true" id="CODSTA__READ__CCB__ELSE_COMMENT__COLUMN1" label="" required="true"/>
                           <column columnType="text" editable="true" id="CODSTA__READ__CCB__ELSE_COMMENT__COLUMN2" label="" required="true"/>
                        </columns>
                        <predefinedRows>
                           <row id="1">
                              <column refColumnId="CODSTA__READ__CCB__ELSE_COMMENT__COLUMN1" value="true"/>
                              <column refColumnId="CODSTA__READ__CCB__ELSE_COMMENT__COLUMN2" value="^end else"/>
                           </row>
                        </predefinedRows>
                     </complexParamTable>
                     <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="CODSTA.READ.CCB.SWITCH_COMMENT" label="Comment for end of &quot;switch&quot; block" prevType="InputValueWithCheckBox" reader="SATable">
                        <columns>
                           <column columnType="checkbox" editable="true" id="CODSTA__READ__CCB__SWITCH_COMMENT__COLUMN1" label="" required="true"/>
                           <column columnType="text" editable="true" id="CODSTA__READ__CCB__SWITCH_COMMENT__COLUMN2" label="" required="true"/>
                        </columns>
                        <predefinedRows>
                           <row id="1">
                              <column refColumnId="CODSTA__READ__CCB__SWITCH_COMMENT__COLUMN1" value="true"/>
                              <column refColumnId="CODSTA__READ__CCB__SWITCH_COMMENT__COLUMN2" value="^end switch"/>
                           </row>
                        </predefinedRows>
                     </complexParamTable>
                     <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="CODSTA.READ.CCB.DO_COMMENT" label="Comment for end of &quot;do&quot; statement" prevType="InputValueWithCheckBox" reader="SATable">
                        <columns>
                           <column columnType="checkbox" editable="true" id="CODSTA__READ__CCB__DO_COMMENT__COLUMN1" label="" required="true"/>
                           <column columnType="text" editable="true" id="CODSTA__READ__CCB__DO_COMMENT__COLUMN2" label="" required="true"/>
                        </columns>
                        <predefinedRows>
                           <row id="1">
                              <column refColumnId="CODSTA__READ__CCB__DO_COMMENT__COLUMN1" value="true"/>
                              <column refColumnId="CODSTA__READ__CCB__DO_COMMENT__COLUMN2" value="^end do"/>
                           </row>
                        </predefinedRows>
                     </complexParamTable>
                     <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="CODSTA.READ.CCB.FOR_COMMENT" label="Comment for end of &quot;for&quot; block" prevType="InputValueWithCheckBox" reader="SATable">
                        <columns>
                           <column columnType="checkbox" editable="true" id="CODSTA__READ__CCB__FOR_COMMENT__COLUMN1" label="" required="true"/>
                           <column columnType="text" editable="true" id="CODSTA__READ__CCB__FOR_COMMENT__COLUMN2" label="" required="true"/>
                        </columns>
                        <predefinedRows>
                           <row id="1">
                              <column refColumnId="CODSTA__READ__CCB__FOR_COMMENT__COLUMN1" value="true"/>
                              <column refColumnId="CODSTA__READ__CCB__FOR_COMMENT__COLUMN2" value="^end for"/>
                           </row>
                        </predefinedRows>
                     </complexParamTable>
                     <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="CODSTA.READ.CCB.WHILE_COMMENT" label="Comment for end of &quot;while&quot; block" prevType="InputValueWithCheckBox" reader="SATable">
                        <columns>
                           <column columnType="checkbox" editable="true" id="CODSTA__READ__CCB__WHILE_COMMENT__COLUMN1" label="" required="true"/>
                           <column columnType="text" editable="true" id="CODSTA__READ__CCB__WHILE_COMMENT__COLUMN2" label="" required="true"/>
                        </columns>
                        <predefinedRows>
                           <row id="1">
                              <column refColumnId="CODSTA__READ__CCB__WHILE_COMMENT__COLUMN1" value="true"/>
                              <column refColumnId="CODSTA__READ__CCB__WHILE_COMMENT__COLUMN2" value="^end while"/>
                           </row>
                        </predefinedRows>
                     </complexParamTable>
                  </group>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.CLV" header="Comment local variables." id="CLV" scope="LINE" severity="5" since="8.0">
               <messages>
                  <msg index="1" value="The declaration of the local variable ''{0}'' is not followed by a comment."/>
                  <msg index="2" value="The declaration of the local variable ''{0}'' is not preceded by a comment."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.CLV.POSITION" name="POSITION" value="Comment Positioning"/>
                  <oldparam id="CODSTA.READ.CLV.BEFORE" name="BEFORE" value="Before declaration"/>
                  <oldparam id="CODSTA.READ.CLV.AFTER" name="AFTER" value="After declaration"/>
                  <oldparam id="CODSTA.READ.CLV.EXCLUDED_TYPES" name="EXCLUDED_TYPES" value="Excluded Variable Types (Specify fully qualified names)"/>
                  <oldparam id="CODSTA.READ.CLV.EXCLUDED_NAMES" name="EXCLUDED_NAMES" value="Excluded Variable Names (Specify using a regular expression)"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="CODSTA.READ.CLV.POSITION" label="Comment Positioning" prevType="MultipleChoice" showLabel="true">
                     <radioItem label="Before declaration" value="0"/>
                     <radioItem defaultValue="checked" label="After declaration" value="1"/>
                  </radioGroup>
                  <param defaultValue="" id="CODSTA.READ.CLV.EXCLUDED_TYPES" inputType="stringList" label="Excluded Variable Types (Specify fully qualified names)" prevType="StringList"/>
                  <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="CODSTA.READ.CLV.EXCLUDED_NAMES" label="Excluded Variable Names (Specify using a regular expression)" prevType="InputValueWithCheckBox" reader="SATable">
                     <columns>
                        <column columnType="checkbox" editable="true" id="CODSTA__READ__CLV__EXCLUDED_NAMES__COLUMN1" label="" required="true"/>
                        <column columnType="text" editable="true" id="CODSTA__READ__CLV__EXCLUDED_NAMES__COLUMN2" label="" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="CODSTA__READ__CLV__EXCLUDED_NAMES__COLUMN1" value="true"/>
                           <column refColumnId="CODSTA__READ__CLV__EXCLUDED_NAMES__COLUMN2" value="^[a-zA-Z]$"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.CTA" header="Always call 'Collection.toArray()' with an empty constant array argument." id="CTA" scope="LINE" severity="5" since="8.4">
               <messages>
                  <msg index="1" value="Use empty array constant for &quot;{0}.toArray()&quot; call."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.CTA.IGNORE_NEW_ARRAY" name="IGNORE_NEW_ARRAY" value="Ignore new empty array creation"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="CODSTA.READ.CTA.IGNORE_NEW_ARRAY" inputType="checkbox" label="Ignore new empty array creation"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.CX" header="Enforce or avoid usage of conditional operators" id="CX" scope="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="&quot;if-else&quot; statement could be simplied by using the conditional operator (? :)."/>
                  <msg index="2" value="Conditional operator (? :) is used."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.CX.AVOID" name="AVOID" value="Avoid usage of conditional operators"/>
                  <oldparam id="CODSTA.READ.CX.CHECK_ASSIGNMENT" name="CHECK_ASSIGNMENT" value="Use conditional operator instead of 'if (cond) a = b; else a = c;'"/>
                  <oldparam id="CODSTA.READ.CX.ENFORCE" name="ENFORCE" value="Enforce usage of conditional operators"/>
                  <oldparam id="CODSTA.READ.CX.SCOPE" name="SCOPE" value="Option:"/>
                  <oldparam id="CODSTA.READ.CX.CHECK_RETURN" name="CHECK_RETURN" value="Use conditional operator instead of 'if (cond) return a; else return b;'"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="CODSTA.READ.CX.SCOPE" label="Option:" prevType="MultipleChoice" showLabel="true">
                     <radioItem defaultValue="checked" label="Enforce usage of conditional operators" value="0">
                        <param defaultValue="true" id="CODSTA.READ.CX.CHECK_ASSIGNMENT" inputType="checkbox" label="Use conditional operator instead of 'if (cond) a = b; else a = c;'"/>
                        <param defaultValue="true" id="CODSTA.READ.CX.CHECK_RETURN" inputType="checkbox" label="Use conditional operator instead of 'if (cond) return a; else return b;'"/>
                     </radioItem>
                     <radioItem label="Avoid usage of conditional operators" value="1"/>
                  </radioGroup>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.DUN" header="Do not use too many negation operators '!' in a single method" id="DUN" scope="LINE" severity="4" since="4.5">
               <messages>
                  <msg index="1" value="Method ''{0}()'' uses the negation operator too frequently: {1}."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.DUN.MAX_NEGATION_OP" name="MAX_NEGATION_OP" value="Maximum negation operator in method"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="2" id="CODSTA.READ.DUN.MAX_NEGATION_OP" inputType="integer" label="Maximum negation operator in method" min="0"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.DVCU" header="Declare variables as close as possible to where they are used" id="DVCU" scope="LINE" severity="4" since="5.1">
               <messages>
                  <msg index="1" value="Variable ''{0}'' is not declared in this &quot;{1}&quot; block."/>
                  <msg index="2" value="Variable ''{0}'' is not declared in the initializer of this &quot;for&quot; statement."/>
                  <msg index="3" value="Variable ''{0}'' is not used until later."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.ECSC" header="Explicitly call one of the superclass' constructors from all constructors" id="ECSC" scope="LINE" severity="3" since="8.2">
               <messages>
                  <msg index="1" value="This constructor for the class &quot;{0}&quot; does not explicitly call a constructor of the superclass."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.ECSC.IGNORE_ONLY_NO_ARG" name="IGNORE_ONLY_NO_ARG" value="ignore superclasses with only a no argument constructor"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="CODSTA.READ.ECSC.IGNORE_ONLY_NO_ARG" inputType="checkbox" label="ignore superclasses with only a no argument constructor"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.FF" header="Declare &quot;private&quot; constant fields &quot;final&quot;." id="FF" scope="CLASS" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="Constant value should be declared &quot;final&quot;: {0}."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.FF.IGNORE_MUTABLE" name="IGNORE_MUTABLE" value="Ignore fields with mutable types"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="false" id="CODSTA.READ.FF.IGNORE_MUTABLE" inputType="checkbox" label="Ignore fields with mutable types"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.FLV" header="Declare constant local variables &quot;final&quot;." id="FLV" scope="LINE" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="Local constant not declared &quot;final&quot;: {0}."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.FLV.IGNORE_MUTABLE" name="IGNORE_MUTABLE" value="Ignore mutable types"/>
                  <oldparam id="CODSTA.READ.FLV.ALL_TYPES" name="ALL_TYPES" value="All types"/>
                  <oldparam id="CODSTA.READ.FLV.PRIMITIVE_ONLY" name="PRIMITIVE_ONLY" value="Primitive types only"/>
                  <oldparam id="CODSTA.READ.FLV.TYPES_TO_CHECK_LABEL" name="TYPES_TO_CHECK_LABEL" value="Types of variables to check"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="CODSTA.READ.FLV.TYPES_TO_CHECK" label="Types of variables to check" prevType="MultipleChoice" showLabel="true">
                     <radioItem defaultValue="checked" label="Primitive types only" value="0"/>
                     <radioItem label="All types" value="1">
                        <param defaultValue="false" id="CODSTA.READ.FLV.IGNORE_MUTABLE" inputType="checkbox" label="Ignore mutable types"/>
                     </radioItem>
                  </radioGroup>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.HBE" header="Avoid using Hexadecimal binary exponents" id="HBE" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Hexadecimal binary exponent: ''{0}''."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.LONG" header="Avoid having a lower-case &quot;l&quot; or the number &quot;1&quot; at the end of a &quot;long&quot; integer constant" id="LONG" scope="LINE" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="Lowercase ''l'' in a &quot;long&quot; constant: {0}."/>
                  <msg index="2" value="&quot;Long&quot; constant ends in the number &quot;1&quot;: {0}."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.LONG.FLAG_END_IN_1" name="FLAG_END_IN_1" value="Flag constants which end in the number &quot;1&quot; where a &quot;long&quot; integer is expected"/>
                  <oldparam id="CODSTA.READ.LONG.FLAG_LOWER_CASE" name="FLAG_LOWER_CASE" value="Flag &quot;long&quot; integer constants which end in a lower case ''l''"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="CODSTA.READ.LONG.FLAG_LOWER_CASE" inputType="checkbox" label="Flag &quot;long&quot; integer constants which end in a lower case ''l''"/>
                  <param defaultValue="false" id="CODSTA.READ.LONG.FLAG_END_IN_1" inputType="checkbox" label="Flag constants which end in the number &quot;1&quot; where a &quot;long&quot; integer is expected"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.MTBS" header="Minimize &quot;try&quot; block size" id="MTBS" scope="LINE" severity="4" since="8.4">
               <messages>
                  <msg index="1" value="&quot;try&quot; block contains excess code which does not throw exceptions."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.MTBS.PERCENT_THROW" name="PERCENT_THROW" value="Flag &quot;try&quot; blocks where percent of statements throwing exceptions is less than"/>
                  <oldparam id="CODSTA.READ.MTBS.MIN_STATEMENTS" name="MIN_STATEMENTS" value="Ignore &quot;try&quot; blocks with number of statements less than"/>
                  <oldparam id="CODSTA.READ.MTBS.IGNORE_LOOP" name="IGNORE_LOOP" value="Ignore &quot;try&quot; blocks with exceptions thrown inside loop bodies"/>
                  <oldparam id="CODSTA.READ.MTBS.IGNORE_COND" name="IGNORE_COND" value="Ignore &quot;try&quot; blocks with exceptions thrown inside conditionals"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="25" id="CODSTA.READ.MTBS.PERCENT_THROW" inputType="integer" label="Flag &quot;try&quot; blocks where percent of statements throwing exceptions is less than" max="100" min="0"/>
                  <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="CODSTA.READ.MTBS.MIN_STATEMENTS" label="Ignore &quot;try&quot; blocks with number of statements less than" prevType="InputValueWithCheckBox" reader="SATable">
                     <columns>
                        <column columnType="checkbox" editable="true" id="CODSTA__READ__MTBS__MIN_STATEMENTS__COLUMN1" label="" required="true"/>
                        <column columnType="text" editable="true" id="CODSTA__READ__MTBS__MIN_STATEMENTS__COLUMN2" label="" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="CODSTA__READ__MTBS__MIN_STATEMENTS__COLUMN1" value="true"/>
                           <column refColumnId="CODSTA__READ__MTBS__MIN_STATEMENTS__COLUMN2" value="20"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
                  <param defaultValue="false" id="CODSTA.READ.MTBS.IGNORE_LOOP" inputType="checkbox" label="Ignore &quot;try&quot; blocks with exceptions thrown inside loop bodies"/>
                  <param defaultValue="false" id="CODSTA.READ.MTBS.IGNORE_COND" inputType="checkbox" label="Ignore &quot;try&quot; blocks with exceptions thrown inside conditionals"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.MVOS" header="Do not declare multiple variables in one statement" id="MVOS" scope="LINE" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="Multiple variables are declared in a single declaration statement: ''{0}''."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.NEA" header="Avoid nested assignments or assignments embedded in other expressions" id="NEA" scope="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="Avoid nested assignment."/>
                  <msg index="2" value="Avoid assignment embedded in other expression statements."/>
                  <msg index="3" value="Avoid assignment embedded in non-simple statements."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.NEA.CHECK_NESTED" name="CHECK_NESTED" value="Check nested assignments"/>
                  <oldparam id="CODSTA.READ.NEA.CHECK_EMBEDDED" name="CHECK_EMBEDDED" value="Check assignments embedded in other expression statements"/>
                  <oldparam id="CODSTA.READ.NEA.CHECK_NON_SIMPLE" name="CHECK_NON_SIMPLE" value="Check assignments embedded in non-simple statements"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="CODSTA.READ.NEA.CHECK_NESTED" inputType="checkbox" label="Check nested assignments"/>
                  <param defaultValue="false" id="CODSTA.READ.NEA.CHECK_EMBEDDED" inputType="checkbox" label="Check assignments embedded in other expression statements"/>
                  <param defaultValue="false" id="CODSTA.READ.NEA.CHECK_NON_SIMPLE" inputType="checkbox" label="Check assignments embedded in non-simple statements"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.NMUC" header="Declare never-modified collections as &quot;unmodifiable&quot; for clarity." id="NMUC" scope="LINE" severity="4" since="8.4">
               <messages>
                  <msg index="1" value="Collection ''{0}'' is never modified after initialization, declare as &quot;unmodifiable&quot;."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.PCIF" header="Declare &quot;for&quot; loops with an initializer, conditional, and updater statements" id="PCIF" scope="LINE" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="Missing conditional expression in &quot;for&quot; loop."/>
                  <msg index="2" value="Missing updater expression in &quot;for&quot; loop."/>
                  <msg index="3" value="Missing initializer expression in &quot;for&quot; loop."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.PCIF.CHECK_INITIALIZER" name="CHECK_INITIALIZER" value="Check initializer"/>
                  <oldparam id="CODSTA.READ.PCIF.CHECK_CONDITIONAL" name="CHECK_CONDITIONAL" value="Check conditional"/>
                  <oldparam id="CODSTA.READ.PCIF.CHECK_UPDATER" name="CHECK_UPDATER" value="Check updater"/>
                  <oldparam id="CODSTA.READ.PCIF.IGNORE_ENUMERATION" name="IGNORE_ENUMERATION" value="Ignore &quot;for&quot; loops with 'Enumeration' or 'Iterator' method &quot;has...&quot; as condition."/>
                  <oldparam id="CODSTA.READ.PCIF.IGNORE_INFINITE_LOOP" name="IGNORE_INFINITE_LOOP" value="Ignore infinite &quot;for&quot; loops in form of 'for (;;)'"/>
               </oldparameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/833.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="false" id="CODSTA.READ.PCIF.CHECK_INITIALIZER" inputType="checkbox" label="Check initializer"/>
                  <param defaultValue="true" id="CODSTA.READ.PCIF.CHECK_CONDITIONAL" inputType="checkbox" label="Check conditional"/>
                  <param defaultValue="true" id="CODSTA.READ.PCIF.CHECK_UPDATER" inputType="checkbox" label="Check updater"/>
                  <param defaultValue="true" id="CODSTA.READ.PCIF.IGNORE_ENUMERATION" inputType="checkbox" label="Ignore &quot;for&quot; loops with 'Enumeration' or 'Iterator' method &quot;has...&quot; as condition."/>
                  <param defaultValue="false" id="CODSTA.READ.PCIF.IGNORE_INFINITE_LOOP" inputType="checkbox" label="Ignore infinite &quot;for&quot; loops in form of 'for (;;)'"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.PDBB" header="Put declarations only at the beginning of blocks" id="PDBB" scope="LINE" severity="4" since="5.0">
               <messages>
                  <msg index="1" value="Variable ''{0}'' is not declared at the beginning of the block."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.PFL" header="Enforce use of &quot;for&quot; or &quot;while&quot; loops" id="PFL" scope="LINE" severity="5" since="4.5">
               <messages>
                  <msg index="1" value="Consider using a &quot;for&quot; loop here."/>
                  <msg index="2" value="Consider using a &quot;while&quot; loop here."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.PFL.CHECK_FOR_WHILE" name="CHECK_FOR_WHILE" value="What to enforce"/>
                  <oldparam id="CODSTA.READ.PFL.ENFORCE_FOR" name="ENFORCE_FOR" value="Enforce &quot;for&quot; loops"/>
                  <oldparam id="CODSTA.READ.PFL.ENFORCE_WHILE" name="ENFORCE_WHILE" value="Enforce &quot;while&quot; loops"/>
                  <oldparam id="CODSTA.READ.PFL.IGNORE_ITERATOR" name="IGNORE_ITERATOR" value="Ignore &quot;while&quot; loops with an 'Iterator.hasNext()' condition"/>
                  <oldparam id="CODSTA.READ.PFL.IGNORE_UPDATER" name="IGNORE_UPDATER" value="Ignore &quot;for&quot; loops with an updater"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="CODSTA.READ.PFL.CHECK_FOR_WHILE" label="What to enforce" prevType="MultipleChoice" showLabel="true">
                     <radioItem defaultValue="checked" label="Enforce &quot;for&quot; loops" value="0">
                        <param defaultValue="false" id="CODSTA.READ.PFL.IGNORE_ITERATOR" inputType="checkbox" label="Ignore &quot;while&quot; loops with an 'Iterator.hasNext()' condition"/>
                     </radioItem>
                     <radioItem label="Enforce &quot;while&quot; loops" value="1">
                        <param defaultValue="false" id="CODSTA.READ.PFL.IGNORE_UPDATER" inputType="checkbox" label="Ignore &quot;for&quot; loops with an updater"/>
                     </radioItem>
                  </radioGroup>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.SIE" header="Use 'isEmpty()' for Collections and Maps instead of comparing 'size()' to 0" id="SIE" scope="LINE" severity="3" since="9.0">
               <messages>
                  <msg index="1" value="Consider using ''{0}.isEmpty()'' here."/>
                  <msg index="2" value="Consider using ''!{0}.isEmpty()'' here."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.UATS" header="Avoid or enforce the use of &quot;this&quot; and &quot;super&quot; expressions" id="UATS" scope="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="Avoid using unnecessary &quot;{0}&quot; expressions."/>
                  <msg index="2" value="&quot;{0}&quot; expression is needed."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.UATS.RULE_TO_FOLLOW" name="RULE_TO_FOLLOW" value="Rule"/>
                  <oldparam id="CODSTA.READ.UATS.WHAT_TO_CHECK" name="WHAT_TO_CHECK" value="What to Check"/>
                  <oldparam id="CODSTA.READ.UATS.AVOID" name="AVOID" value="Avoid"/>
                  <oldparam id="CODSTA.READ.UATS.ENFORCE" name="ENFORCE" value="Enforce"/>
                  <oldparam id="CODSTA.READ.UATS.CHECK_SUPER" name="CHECK_SUPER" value="Usage of &quot;super&quot;"/>
                  <oldparam id="CODSTA.READ.UATS.ENFORCE_OR_AVOID" name="ENFORCE_OR_AVOID" value="Avoid or Enforce"/>
                  <oldparam id="CODSTA.READ.UATS.CHECK_THIS" name="CHECK_THIS" value="Usage of &quot;this&quot;"/>
               </oldparameters>
               <parameters>
                  <group collapsible="false" id="CODSTA.READ.UATS.group.1" label="Rule">
                     <radioGroup id="CODSTA.READ.UATS.ENFORCE_OR_AVOID" label="Avoid or Enforce" prevType="MultipleChoice" showLabel="true">
                        <radioItem defaultValue="checked" label="Avoid" value="0"/>
                        <radioItem label="Enforce" value="1"/>
                     </radioGroup>
                  </group>
                  <group collapsible="false" id="CODSTA.READ.UATS.group.0" label="What to Check">
                     <param defaultValue="true" id="CODSTA.READ.UATS.CHECK_SUPER" inputType="checkbox" label="Usage of &quot;super&quot;"/>
                     <param defaultValue="true" id="CODSTA.READ.UATS.CHECK_THIS" inputType="checkbox" label="Usage of &quot;this&quot;"/>
                  </group>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.UBL" header="Avoid create integer values from binary notation using Integer.parseInt() methods" id="UBL" scope="LINE" severity="4" since="9.4">
               <messages>
                  <msg index="1" value="Use binary literals instead of assignment ''{0}''."/>
                  <msg index="2" value="Change ''{0}'' statement to binary literals if it is possible."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.UBL.CHECK_ONLY_LITERALS" name="CHECK_ONLY_LITERALS" value="Show errors only when first parameter in methods Integer.parseInt() is string literals"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="false" id="CODSTA.READ.UBL.CHECK_ONLY_LITERALS" inputType="checkbox" label="Show errors only when first parameter in methods Integer.parseInt() is string literals"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.ULIT" header="Use underscore characters (_) in numerical literal" id="ULIT" scope="LINE" severity="3" since="9.4">
               <messages>
                  <msg index="1" value="Missing underscore characters (_) in ''{0}'' numeric literal."/>
                  <msg index="2" value="Wrong placed underscore characters (_) in ''{0}'' numeric literal."/>
                  <msg index="3" value="Avoid use underscore characters (_) for numeric literal with value less than ''{0}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.ULIT.CHECK_ONLY_INITIALIZE" name="CHECK_ONLY_INITIALIZE" value="Check only initialized variables"/>
                  <oldparam id="CODSTA.READ.ULIT.DENSITY" name="DENSITY" value="Density"/>
                  <oldparam id="CODSTA.READ.ULIT.MINIMAL_VALUE" name="MINIMAL_VALUE" value="Minimal value"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="100000" id="CODSTA.READ.ULIT.MINIMAL_VALUE" inputType="text" label="Minimal value"/>
                  <param defaultValue="3" id="CODSTA.READ.ULIT.DENSITY" inputType="text" label="Density"/>
                  <param defaultValue="false" id="CODSTA.READ.ULIT.CHECK_ONLY_INITIALIZE" inputType="checkbox" label="Check only initialized variables"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.VDT" header="Do not declare multiple variables of different types in one statement" id="VDT" scope="LINE" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="Multiple variables of different types are declared in one statement: ''{0}''."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.VIFS" header="Limit the number of initialization and update statements in &quot;for&quot; loops" id="VIFS" scope="LINE" severity="3" since="8.0">
               <messages>
                  <msg index="1" value="More than {0} initialization statements in this &quot;for&quot; loop."/>
                  <msg index="2" value="More than {0} update statements in this &quot;for&quot; loop."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.READ.VIFS.NUM_EXPRS" name="NUM_EXPRS" value="Maximum number of expressions to allow in the initialization and update:"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="3" id="CODSTA.READ.VIFS.NUM_EXPRS" inputType="integer" label="Maximum number of expressions to allow in the initialization and update:" min="1"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.READ.CID" header="Avoid using increment or decrement operators in nested expressions." id="CID" scop="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="Increment operator is embedded in another expression."/>
                  <msg index="2" value="Decrement operator is embedded in another expression."/>
               </messages>
            </rule>
         </category>
         <category description="Overriding and Implementing Methods" name="OIM">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.OTOSM" header="Override 'toString()'." id="OTOSM" scope="LINE" severity="4" since="4.5">
               <messages>
                  <msg index="1" value="Class ''{0}'' does not override ''toString()''."/>
                  <msg index="2" value="Class ''{0}'' overrides ''toString()'' with a stub implementation."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.OIM.OTOSM.WHAT_TO_FLAG" name="WHAT_TO_FLAG" value="Classes to Flag:"/>
                  <oldparam id="CODSTA.OIM.OTOSM.ALL_CLASSES" name="ALL_CLASSES" value="Flag all classes which do not override the 'toString()' method"/>
                  <oldparam id="CODSTA.OIM.OTOSM.ONLY_USED" name="ONLY_USED" value="Flag only classes for which the 'toString()' method is used"/>
                  <oldparam id="CODSTA.OIM.OTOSM.CHECK_STUB" name="CHECK_STUB" value="Flag classes which only provide a stub implementation of the 'toString()' method"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="CODSTA.OIM.OTOSM.WHAT_TO_FLAG" label="Classes to Flag:" prevType="MultipleChoice" showLabel="true">
                     <radioItem label="Flag all classes which do not override the 'toString()' method" value="0"/>
                     <radioItem defaultValue="checked" label="Flag only classes for which the 'toString()' method is used" value="1"/>
                  </radioGroup>
                  <param defaultValue="false" id="CODSTA.OIM.OTOSM.CHECK_STUB" inputType="checkbox" label="Flag classes which only provide a stub implementation of the 'toString()' method"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.OVERRIDE" header="Override 'Object.hashCode()' when you override 'Object.equals()' and vice versa" id="OVERRIDE" scope="CLASS" severity="1" since="4.5">
               <messages>
                  <msg index="1" value="Class overriding ''equals(Object)'' does not override ''hashCode()'': {0}."/>
                  <msg index="2" value="Class inherits overridden version of ''equals(Object)'' but does not override ''hashCode()'': {0}."/>
                  <msg index="3" value="Class overriding ''hashCode()'' does not override ''equals(Object)'': {0}."/>
                  <msg index="4" value="Class inherits overridden version of ''hashCode()'' but does not override ''equals(Object)'': {0}."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.OIM.OVERRIDE.CODSTA.OVERRIDE" name="CODSTA.OVERRIDE" value="Check that 'hashCode()' is overridden whenever 'equals()' is overridden."/>
                  <oldparam id="CODSTA.OIM.OVERRIDE.CODSTA.OVERRIDE2" name="CODSTA.OVERRIDE2" value="Check that 'equals()' is overridden whenever 'hashCode()' is overridden."/>
                  <oldparam id="CODSTA.OIM.OVERRIDE.CHECK_INHERITED" name="CHECK_INHERITED" value="Include methods inherited from &quot;abstract&quot; superclasses in the checking."/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/581.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="true" id="CODSTA.OIM.OVERRIDE.CODSTA.OVERRIDE" inputType="checkbox" label="Check that 'hashCode()' is overridden whenever 'equals()' is overridden."/>
                  <param defaultValue="true" id="CODSTA.OIM.OVERRIDE.CODSTA.OVERRIDE2" inputType="checkbox" label="Check that 'equals()' is overridden whenever 'hashCode()' is overridden."/>
                  <param defaultValue="false" id="CODSTA.OIM.OVERRIDE.CHECK_INHERITED" inputType="checkbox" label="Include methods inherited from &quot;abstract&quot; superclasses in the checking."/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.OVOTS" header="Do not override 'toString()' in enum types." id="OVOTS" scope="LINE" severity="3" since="8.0">
               <messages>
                  <msg index="1" value="''toString()'' overridden in the enum type ''{0}''."/>
               </messages>
            </rule>
         </category>
         <category description="Organization" name="ORG">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.TODOJAVA" header="Ensure that comments do not contain task tags." id="TODOJAVA" scope="LINE" severity="4" since="10.4.2">
               <messages>
                  <msg index="1" value="The code contains a &quot;{0}&quot; comment: &quot;{1}&quot;."/>
                  <msg index="2" value="The code contains a comment matching &quot;{0}&quot; (regular expression): &quot;{1}&quot;."/>
               </messages>
               <parameters>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="CODSTA.ORG.TODOJAVA.TABLE_HEADER" label="List of task tags:" reader="SATable">
                     <columns>
                        <column columnType="checkbox" defaultValue="true" editable="true" id="CODSTA__ORG__TODOJAVA__TABLE_HEADER__COLUMN1" label="Is reg expr" required="true"/>
                        <column columnType="text" editable="true" id="CODSTA__ORG__TODOJAVA__TABLE_HEADER__COLUMN2" label="Value" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="CODSTA__ORG__TODOJAVA__TABLE_HEADER__COLUMN1" value="false"/>
                           <column refColumnId="CODSTA__ORG__TODOJAVA__TABLE_HEADER__COLUMN2" value="TODO"/>
                        </row>
                        <row id="2">
                           <column refColumnId="CODSTA__ORG__TODOJAVA__TABLE_HEADER__COLUMN1" value="false"/>
                           <column refColumnId="CODSTA__ORG__TODOJAVA__TABLE_HEADER__COLUMN2" value="FIXME"/>
                        </row>
                        <row id="3">
                           <column refColumnId="CODSTA__ORG__TODOJAVA__TABLE_HEADER__COLUMN1" value="false"/>
                           <column refColumnId="CODSTA__ORG__TODOJAVA__TABLE_HEADER__COLUMN2" value="XXX"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.IMP" header="Avoid importing specific classes or packages" id="IMP" scope="LINE" severity="3" since="9.1">
               <messages>
                  <msg index="1" value="Disallowed import ''{0}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.ORG.IMP.TABLE_HEADER" name="TABLE_HEADER" value="List of import restrictions:"/>
                  <oldparam id="CODSTA.ORG.IMP.ALLOW_HEADER" name="ALLOW_HEADER" value="Allow"/>
                  <oldparam id="CODSTA.ORG.IMP.PACKAGE_NAME_HEADER" name="PACKAGE_NAME_HEADER" value="Package"/>
                  <oldparam id="CODSTA.ORG.IMP.IMPORT_NAME_HEADER" name="IMPORT_NAME_HEADER" value="Import declaration fully qualified name (RegExp)"/>
                  <oldparam id="CODSTA.ORG.IMP.FILTERS_LABEL" name="FILTERS_LABEL" value="Filters:"/>
                  <oldparam id="CODSTA.ORG.IMP.PACKAGE_FILTER" name="PACKAGE_FILTER" value="Package"/>
                  <oldparam id="CODSTA.ORG.IMP.IMPORT_DECLARATION_FILTER" name="IMPORT_DECLARATION_FILTER" value="Import declaration"/>
               </oldparameters>
               <parameters>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CODSTA.ORG.IMP.TABLE_HEADER" label="List of import restrictions:" reader="SATable">
                     <columns>
                        <column columnType="checkbox" defaultValue="true" editable="true" id="CODSTA__ORG__IMP__TABLE_HEADER__COLUMN1" label="Allow" required="true"/>
                        <column columnType="text" editable="true" id="CODSTA__ORG__IMP__TABLE_HEADER__COLUMN2" label="Package" required="true"/>
                        <column columnType="text" editable="true" id="CODSTA__ORG__IMP__TABLE_HEADER__COLUMN3" label="Import declaration fully qualified name (RegExp)" required="true"/>
                     </columns>
                     <!-- predefinedRows>
                                <row id="1">
                                    <column refColumnId="CODSTA__ORG__IMP__TABLE_HEADER__COLUMN1" value="true" />
                                    <column refColumnId="CODSTA__ORG__IMP__TABLE_HEADER__COLUMN2" value="" />
                                    <column refColumnId="CODSTA__ORG__IMP__TABLE_HEADER__COLUMN3" value="" />
                                </row>
                            </predefinedRows -->
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.FO" header="Order class elements appropriately" id="FO" scope="FILE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="Elements in ''{0}'' not ordered appropriately{1}: {2} at line {3} should be placed before {4} at line {5}."/>
                  <msg index="2" value="Elements in ''{0}'' not ordered appropriately{1}: {2} ''{3}'' at line {4} should be placed before {5} at line {6}."/>
                  <msg index="3" value="Elements in ''{0}'' not ordered appropriately{1}: {2} at line {3} should be placed before {4} ''{5}'' at line {6}."/>
                  <msg index="4" value="Elements in ''{0}'' not ordered appropriately{1}: {2} ''{3}'' at line {4} should be placed before {5} ''{6}'' at line {7}."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.ORG.FO.SORTING_PRIORITY_TABLE" name="SORTING_PRIORITY_TABLE" value="Sorting priority"/>
                  <oldparam id="CODSTA.ORG.FO.TYPE_STRING" name="TYPE_STRING" value="member type"/>
                  <oldparam id="CODSTA.ORG.FO.SORTING_PRIORITY" name="SORTING_PRIORITY" value="order"/>
                  <oldparam id="CODSTA.ORG.FO.FIELD_STRING" name="FIELD_STRING" value="field"/>
                  <oldparam id="CODSTA.ORG.FO.PACKAGE_STRING" name="PACKAGE_STRING" value="default"/>
                  <oldparam id="CODSTA.ORG.FO.CONSTRUCTOR_STRING" name="CONSTRUCTOR_STRING" value="constructor"/>
                  <oldparam id="CODSTA.ORG.FO.FINAL_NON_FINAL_TABLE" name="FINAL_NON_FINAL_TABLE" value="final/non-final sorting order"/>
                  <oldparam id="CODSTA.ORG.FO.MEMBER_TYPE_TABLE" name="MEMBER_TYPE_TABLE" value="Member type sorting order"/>
                  <oldparam id="CODSTA.ORG.FO.INITIALIZER_STRING" name="INITIALIZER_STRING" value="initializer"/>
                  <oldparam id="CODSTA.ORG.FO.ACCESSIBILITY_TAB" name="ACCESSIBILITY_TAB" value="accessibility order"/>
                  <oldparam id="CODSTA.ORG.FO.SORTING_IGNORE" name="SORTING_IGNORE" value="ignore"/>
                  <oldparam id="CODSTA.ORG.FO.ACCESSIBILITY_STRING" name="ACCESSIBILITY_STRING" value="accessibility"/>
                  <oldparam id="CODSTA.ORG.FO.STATIC_FIELD_STRING" name="STATIC_FIELD_STRING" value="static field"/>
                  <oldparam id="CODSTA.ORG.FO.ACCESSIBILITY_TABLE" name="ACCESSIBILITY_TABLE" value="Accessibility sorting order"/>
                  <oldparam id="CODSTA.ORG.FO.NON_FINAL_STRING" name="NON_FINAL_STRING" value="non-final"/>
                  <oldparam id="CODSTA.ORG.FO.MEMBER_TYPE_TAB" name="MEMBER_TYPE_TAB" value="member type order"/>
                  <oldparam id="CODSTA.ORG.FO.ACCESSIBILITY_COL" name="ACCESSIBILITY_COL" value="order"/>
                  <oldparam id="CODSTA.ORG.FO.LINK_TO_PREF" name="LINK_TO_PREF" value="Refer to sorting order preference in preferences page"/>
                  <oldparam id="CODSTA.ORG.FO.MEMBER_TYPE_STRING" name="MEMBER_TYPE_STRING" value="member type"/>
                  <oldparam id="CODSTA.ORG.FO.MEMBER_TYPE_COL" name="MEMBER_TYPE_COL" value="order"/>
                  <oldparam id="CODSTA.ORG.FO.IGNORE_MAIN" name="IGNORE_MAIN" value="Ignore 'main' method."/>
                  <oldparam id="CODSTA.ORG.FO.STATIC_INITIALIZER_STRING" name="STATIC_INITIALIZER_STRING" value="static initializer"/>
                  <oldparam id="CODSTA.ORG.FO.STATIC_METHOD_STRING" name="STATIC_METHOD_STRING" value="static method"/>
                  <oldparam id="CODSTA.ORG.FO.MEMBER_TYPE_CHECK_BOX" name="MEMBER_TYPE_CHECK_BOX" value="check"/>
                  <oldparam id="CODSTA.ORG.FO.FINAL_NON_FINAL_STRING" name="FINAL_NON_FINAL_STRING" value="final/non-final"/>
                  <oldparam id="CODSTA.ORG.FO.FINAL_NON_FINAL_TAB" name="FINAL_NON_FINAL_TAB" value="final/non-final order"/>
                  <oldparam id="CODSTA.ORG.FO.PRIORITY_TAB" name="PRIORITY_TAB" value="sorting priority"/>
                  <oldparam id="CODSTA.ORG.FO.METHOD_OR_ANNOTATION_MEMBER_TYPE_STRING" name="METHOD_OR_ANNOTATION_MEMBER_TYPE_STRING" value="method/annotation member type"/>
                  <oldparam id="CODSTA.ORG.FO.FINAL_NON_FINAL_COL" name="FINAL_NON_FINAL_COL" value="order"/>
                  <oldparam id="CODSTA.ORG.FO.MORE_THAN_ONE" name="MORE_THAN_ONE" value="Flag multiple errors if there is more than one violation."/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="CODSTA.ORG.FO.IGNORE_MAIN" inputType="checkbox" label="Ignore 'main' method."/>
                  <group collapsible="false" id="CODSTA.ORG.FO.tab.PRIORITY_TAB" label="Sorting priority">
                     <complexParamTable canAddRow="false" canEditRow="false" canRemoveRow="false" canSetOrdering="true" id="CODSTA.ORG.FO.PRIORITY_TAB" label="" reader="SATable">
                        <columns>
                           <column columnType="checkbox" editable="true" id="CODSTA__ORG__FO__PRIORITY_TAB__COLUMN1" label="ignore" required="true"/>
                           <column columnType="text" editable="false" id="CODSTA__ORG__FO__PRIORITY_TAB__COLUMN2" label="order" required="true"/>
                        </columns>
                        <predefinedRows>
                           <row id="1">
                              <column refColumnId="CODSTA__ORG__FO__PRIORITY_TAB__COLUMN1" value="false"/>
                              <column refColumnId="CODSTA__ORG__FO__PRIORITY_TAB__COLUMN2" value="member type"/>
                           </row>
                           <row id="2">
                              <column refColumnId="CODSTA__ORG__FO__PRIORITY_TAB__COLUMN1" value="false"/>
                              <column refColumnId="CODSTA__ORG__FO__PRIORITY_TAB__COLUMN2" value="accessibility"/>
                           </row>
                           <row id="3">
                              <column refColumnId="CODSTA__ORG__FO__PRIORITY_TAB__COLUMN1" value="false"/>
                              <column refColumnId="CODSTA__ORG__FO__PRIORITY_TAB__COLUMN2" value="final/non-final"/>
                           </row>
                        </predefinedRows>
                     </complexParamTable>
                  </group>
                  <group collapsible="false" id="CODSTA.ORG.FO.tab.MEMBER_TYPE_TAB" label="Member type sorting order">
                     <complexParamTable canAddRow="false" canEditRow="false" canRemoveRow="false" canSetOrdering="true" id="CODSTA.ORG.FO.MEMBER_TYPE_TAB" label="" reader="SATable">
                        <columns>
                           <column columnType="checkbox" editable="true" id="CODSTA__ORG__FO__MEMBER_TYPE_TAB__COLUMN1" label="check" required="true"/>
                           <column columnType="text" editable="false" id="CODSTA__ORG__FO__MEMBER_TYPE_TAB__COLUMN2" label="order" required="false"/>
                        </columns>
                        <predefinedRows>
                           <row id="1">
                              <column refColumnId="CODSTA__ORG__FO__MEMBER_TYPE_TAB__COLUMN1" value="true"/>
                              <column refColumnId="CODSTA__ORG__FO__MEMBER_TYPE_TAB__COLUMN2" value="member type"/>
                           </row>
                           <row id="2">
                              <column refColumnId="CODSTA__ORG__FO__MEMBER_TYPE_TAB__COLUMN1" value="true"/>
                              <column refColumnId="CODSTA__ORG__FO__MEMBER_TYPE_TAB__COLUMN2" value="static field"/>
                           </row>
                           <row id="3">
                              <column refColumnId="CODSTA__ORG__FO__MEMBER_TYPE_TAB__COLUMN1" value="true"/>
                              <column refColumnId="CODSTA__ORG__FO__MEMBER_TYPE_TAB__COLUMN2" value="static initializer"/>
                           </row>
                           <row id="4">
                              <column refColumnId="CODSTA__ORG__FO__MEMBER_TYPE_TAB__COLUMN1" value="true"/>
                              <column refColumnId="CODSTA__ORG__FO__MEMBER_TYPE_TAB__COLUMN2" value="static method"/>
                           </row>
                           <row id="5">
                              <column refColumnId="CODSTA__ORG__FO__MEMBER_TYPE_TAB__COLUMN1" value="true"/>
                              <column refColumnId="CODSTA__ORG__FO__MEMBER_TYPE_TAB__COLUMN2" value="initializer"/>
                           </row>
                           <row id="6">
                              <column refColumnId="CODSTA__ORG__FO__MEMBER_TYPE_TAB__COLUMN1" value="true"/>
                              <column refColumnId="CODSTA__ORG__FO__MEMBER_TYPE_TAB__COLUMN2" value="field"/>
                           </row>
                           <row id="7">
                              <column refColumnId="CODSTA__ORG__FO__MEMBER_TYPE_TAB__COLUMN1" value="true"/>
                              <column refColumnId="CODSTA__ORG__FO__MEMBER_TYPE_TAB__COLUMN2" value="constructor"/>
                           </row>
                           <row id="8">
                              <column refColumnId="CODSTA__ORG__FO__MEMBER_TYPE_TAB__COLUMN1" value="true"/>
                              <column refColumnId="CODSTA__ORG__FO__MEMBER_TYPE_TAB__COLUMN2" value="method/annotation member type"/>
                           </row>
                        </predefinedRows>
                     </complexParamTable>
                  </group>
                  <group collapsible="false" id="CODSTA.ORG.FO.tab.ACCESSIBILITY_TAB" label="Accessibility sorting order">
                     <complexParamTable canAddRow="false" canEditRow="false" canRemoveRow="false" canSetOrdering="true" id="CODSTA.ORG.FO.ACCESSIBILITY_TAB" label="" reader="SATable">
                        <columns>
                           <column columnType="text" editable="false" id="CODSTA__ORG__FO__ACCESSIBILITY_TAB__COLUMN1" label="order" required="true"/>
                        </columns>
                        <predefinedRows>
                           <row id="1">
                              <column refColumnId="CODSTA__ORG__FO__ACCESSIBILITY_TAB__COLUMN1" value="public"/>
                           </row>
                           <row id="2">
                              <column refColumnId="CODSTA__ORG__FO__ACCESSIBILITY_TAB__COLUMN1" value="protected"/>
                           </row>
                           <row id="3">
                              <column refColumnId="CODSTA__ORG__FO__ACCESSIBILITY_TAB__COLUMN1" value="default"/>
                           </row>
                           <row id="4">
                              <column refColumnId="CODSTA__ORG__FO__ACCESSIBILITY_TAB__COLUMN1" value="private"/>
                           </row>
                        </predefinedRows>
                     </complexParamTable>
                  </group>
                  <group collapsible="false" id="CODSTA.ORG.FO.tab.FINAL_NON_FINAL_TAB" label="Final/Non-final sorting order">
                     <complexParamTable canAddRow="false" canEditRow="false" canRemoveRow="false" canSetOrdering="true" id="CODSTA.ORG.FO.FINAL_NON_FINAL_TAB" label="" reader="SATable">
                        <columns>
                           <column columnType="text" editable="false" id="CODSTA__ORG__FO__FINAL_NON_FINAL_TAB__COLUMN1" label="order" required="true"/>
                        </columns>
                        <predefinedRows>
                           <row id="1">
                              <column refColumnId="CODSTA__ORG__FO__FINAL_NON_FINAL_TAB__COLUMN1" value="final"/>
                           </row>
                           <row id="2">
                              <column refColumnId="CODSTA__ORG__FO__FINAL_NON_FINAL_TAB__COLUMN1" value="non-final"/>
                           </row>
                        </predefinedRows>
                     </complexParamTable>
                  </group>
                  <param defaultValue="false" hidden="true" id="CODSTA.ORG.FO.LINK_TO_PREF" inputType="checkbox" label="Refer to sorting order preference in preferences page" prevType="LinkBox"/>
                  <param defaultValue="false" id="CODSTA.ORG.FO.MORE_THAN_ONE" inputType="checkbox" label="Flag multiple errors if there is more than one violation."/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.DINT" header="Do not make method calls to internal classes from non-internal classes." id="DINT" scope="LINE" severity="3" since="9.0">
               <messages>
                  <msg index="1" value="Method call ''{0}'' can not be completed, class ''{1}'' is an internal class."/>
                  <msg index="2" value="Can not declare variable ''{0}'' as class ''{1}'', it is an internal class."/>
                  <msg index="3" value="Can not reference class ''{0}'', it is an internal class."/>
                  <msg index="4" value="The ''{0}'' class extends or implements the following class or interface which is internal : ''{1}''"/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.ORG.DINT.NO_CHECK_PACKAGES" name="NO_CHECK_PACKAGES" value="Packages that should not be checked(Regular Expression)"/>
                  <oldparam id="CODSTA.ORG.DINT.INTERNAL_COMMENT" name="INTERNAL_COMMENT" value="Internal comment string"/>
                  <oldparam id="CODSTA.ORG.DINT.INTERNAL_PACKAGES" name="INTERNAL_PACKAGES" value="Internal packages(Regular Expression)"/>
               </oldparameters>
               <parameters>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="CODSTA.ORG.DINT.NO_CHECK_PACKAGES" label="Packages that should not be checked (in regular expressions)" reader="SATable">
                     <columns>
                        <column columnType="text" editable="true" id="CODSTA_ORG_DINT_NO_CHECK_PACKAGES_COLUMN1" label="" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="CODSTA_ORG_DINT_NO_CHECK_PACKAGES_COLUMN1" value=".*nocheck.*"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="CODSTA.ORG.DINT.INTERNAL_PACKAGES" label="Internal packages (in regular expressions)" reader="SATable">
                     <columns>
                        <column columnType="text" editable="true" id="CODSTA_ORG_DINT_INTERNAL_PACKAGES_COLUMN1" label="" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="CODSTA_ORG_DINT_INTERNAL_PACKAGES_COLUMN1" value=".*internal.*"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="CODSTA.ORG.DINT.INTERNAL_CLASS_ANNOTATIONS" label="Annotations to mark internal classes" reader="SATable">
                     <columns>
                        <column columnType="text" editable="true" id="CODSTA_ORG_DINT_INTERNAL_CLASS_ANNOTATIONS_COLUMN" label="Fully-qualified Name of Annotation" required="true" textSize="large"/>
                     </columns>
                  </complexParamTable>
                  <group collapsible="false" id="CODSTA.ORG.DINT.COMMENTS_GROUP" label="Marking internal classes in comments">
                     <param defaultValue="true" id="CODSTA.ORG.DINT.CHECK_SINGLE_LINE_COMMENTS" inputType="checkbox" label="Check single-line comments "/>
                     <param defaultValue="true" id="CODSTA.ORG.DINT.CHECK_CSTYLE_COMMENTS" inputType="checkbox" label="Check C-style comments"/>
                     <param defaultValue="internal" id="CODSTA.ORG.DINT.INTERNAL_COMMENT" inputType="text" label="String to mark internal classes in comments"/>
                  </group>
                  <group collapsible="false" id="CODSTA.ORG.DINT.JAVADOC_TAGS_GROUP" label="Marking internal classes in JavaDoc">
                     <param defaultValue="true" id="CODSTA.ORG.DINT.CHECK_JAVADOC_TAGS" inputType="checkbox" label="Check Javadoc tags"/>
                     <param defaultValue="@internal" id="CODSTA.ORG.DINT.INTERNAL_JAVADOC_TAG" inputType="text" label="Custom tag to mark internal classes in Javadoc"/>
                  </group>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.OGM" header="Organize methods by name" id="OGM" scope="METHOD" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="Same-named members ''{0}()'' are not grouped together."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.ORCU" header="Order compilation unit elements appropriately" id="ORCU" scope="FILE" severity="3" since="5.0">
               <messages>
                  <msg index="1" value="The file header should be placed before the &quot;package&quot; statement."/>
                  <msg index="2" value="The &quot;package&quot; statement should be placed after the file header."/>
                  <msg index="3" value="The &quot;import&quot; statements should be placed after the file header."/>
                  <msg index="4" value="A &quot;public&quot; type should be placed before a non-&quot;public&quot; type: {0}."/>
                  <msg index="5" value="A &quot;public&quot; type should be placed before a non-&quot;public&quot; type: {0}."/>
                  <msg index="6" value="Non-&quot;public&quot; types should be placed at the end of the source file."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.ORFIM" header="Place 'finalize()' methods between &quot;public&quot; and &quot;protected&quot; methods" id="ORFIM" scope="METHOD" severity="5" since="5.0">
               <messages>
                  <msg index="1" value="&quot;finalize()&quot; method should be placed before &quot;protected&quot; methods."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.ORIMP" header="Present &quot;import&quot; statements in alphabetical order" id="ORIMP" scope="FILE" severity="5" since="5.0">
               <messages>
                  <msg index="1" value="&quot;import&quot; not presented in alphabetical order: {0}."/>
                  <msg index="2" value="&quot;import&quot; not presented in sorting order from eclipse preference settings: {0}."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.ORG.ORIMP.ORDERING" name="ORDERING" value="Ordering"/>
                  <oldparam id="CODSTA.ORG.ORIMP.LINK_TO_PREFERENCE" name="LINK_TO_PREFERENCE" value="Use Eclipse preference settings"/>
                  <oldparam id="CODSTA.ORG.ORIMP.ALPHA_ORDER" name="ALPHA_ORDER" value="Alphabetical ordering"/>
                  <oldparam id="CODSTA.ORG.ORIMP.LOWER_CASE_FIRST" name="LOWER_CASE_FIRST" value="Lower case letters should come before upper case letters"/>
               </oldparameters>
               <parameters>
                  <!-- radioGroup id="CODSTA.ORG.ORIMP.ORDERING" showLabel="true" label="Ordering" prevType="MultipleChoice">
                            <radioItem value="0" label="Use Eclipse preference settings"/>
                            <radioItem value="1" label="Alphabetical ordering" defaultValue="checked"/>
                        </radioGroup-->
                  <param defaultValue="false" id="CODSTA.ORG.ORIMP.LOWER_CASE_FIRST" inputType="checkbox" label="Lower case letters should come before upper case letters"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.PML" header="Place the 'main()' method last" id="PML" scope="METHOD" severity="5" since="4.5">
               <messages>
                  <msg index="1" value="'main()' is not the last method defined."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.ASSERT" header="Do not use assertions in production code" id="ASSERT" scope="LINE" severity="3" since="10.4">
               <messages>
                  <msg index="1" value="'assert' statement should not be used in production code."/>
               </messages>
               <parameters>
                  <param defaultValue="true" id="CODSTA.ORG.ASSERT.PUBLIC_METHOD_ONLY" inputType="checkbox" label="Check only public methods"/>
               </parameters>
            </rule>
         </category>
         <category description="Error-Prone Coding" name="EPC">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.SCLONE" header="Call 'super.clone()' in all 'clone()' methods." id="SCLONE" severity="1" since="4.5">
               <messages>
                  <msg index="1" value="'clone()' method does not call 'super.clone()'"/>
               </messages>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/580.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.AGBPT" header="Avoid conversions from parameterized types to raw types" id="AGBPT" scope="LINE" severity="3" since="8.0">
               <messages>
                  <msg index="1" value="Do not assign an expression with a parameterized type to a variable with a non-parameterized type."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.COMT" header="Avoid using the conditional operator with mismatched numeric types." id="COMT" scope="LINE" severity="3" since="8.2">
               <messages>
                  <msg index="1" value="This conditional expression has operands of two different types: &quot;{0}&quot; and &quot;{1}&quot;."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.IBS" header="Use &quot;int&quot; instead of &quot;byte&quot; or &quot;short&quot; and &quot;double&quot; instead of &quot;float&quot; for variable declarations." id="IBS" scope="LINE" severity="5" since="8.2">
               <messages>
                  <msg index="1" value="Consider using the type &quot;{0}&quot; instead of &quot;{1}&quot; for this variable declaration."/>
                  <msg index="2" value="Consider using the type &quot;{0}&quot; instead of &quot;{1}&quot; for this parameter declaration."/>
                  <msg index="3" value="Consider using the type &quot;{0}&quot; instead of &quot;{1}&quot; for this field declaration."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.EPC.IBS.IGNORE_ARRAYS" name="IGNORE_ARRAYS" value="Ignore variables of array types"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="CODSTA.EPC.IBS.IGNORE_ARRAYS" inputType="checkbox" label="Ignore variables of array types"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.NCAC" header="Do not call an &quot;abstract&quot; method from a constructor in an &quot;abstract&quot; class" id="NCAC" scope="METHOD" severity="4" since="4.5">
               <messages>
                  <msg index="1" value="Called &quot;abstract&quot; method from constructor: ''{0}''."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.NCE" header="Do not catch exception types which are too general or are unchecked exceptions." id="NCE" scope="LINE" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="&quot;catch&quot; statement directly catches the general exception type ''{0}''."/>
                  <msg index="2" value="&quot;catch&quot; statement directly catches the unchecked exception type ''{0}''."/>
                  <msg index="3" value="&quot;catch&quot; statement catches general parent exception type: ''{0}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.EPC.NCE.GENERAL" name="GENERAL" value="Check for general exception types."/>
                  <oldparam id="CODSTA.EPC.NCE.UNCHECKED" name="UNCHECKED" value="Check for unchecked exception types."/>
                  <oldparam id="CODSTA.EPC.NCE.NUM_CHILDREN" name="NUM_CHILDREN" value="Check for parent exceptions caught where number of child exceptions thrown is less than"/>
                  <oldparam id="CODSTA.EPC.NCE.IGNORE_EXCEPTIONS" name="IGNORE_EXCEPTIONS" value="Ignore exceptions with names matching the following regular expression(s):"/>
               </oldparameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/396.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="true" id="CODSTA.EPC.NCE.GENERAL" inputType="checkbox" label="Check for general exception types."/>
                  <param defaultValue="false" id="CODSTA.EPC.NCE.UNCHECKED" inputType="checkbox" label="Check for unchecked exception types."/>
                  <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="CODSTA.EPC.NCE.NUM_CHILDREN" label="Check for parent exceptions caught where number of child exceptions thrown is less than" prevType="InputValueWithCheckBox" reader="SATable">
                     <columns>
                        <column columnType="checkbox" editable="true" id="CODSTA__EPC__NCE__NUM_CHILDREN__COLUMN1" label="" required="true"/>
                        <column columnType="text" editable="true" id="CODSTA__EPC__NCE__NUM_CHILDREN__COLUMN2" label="" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="CODSTA__EPC__NCE__NUM_CHILDREN__COLUMN1" value="true"/>
                           <column refColumnId="CODSTA__EPC__NCE__NUM_CHILDREN__COLUMN2" value="3"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
                  <param defaultValue="^ignore$" id="CODSTA.EPC.NCE.IGNORE_EXCEPTIONS" inputType="stringList" label="Ignore exceptions with names matching the following regular expression(s):" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.OVERLOAD" header="Use overloading judiciously." id="OVERLOAD" scope="METHOD" severity="4" since="4.5">
               <messages>
                  <msg index="1" value="Another overloaded method has the same number of parameters: ''{0}''."/>
                  <msg index="2" value="Another overloaded method has the same number and types of parameters as ''{0}''."/>
                  <msg index="3" value="The overloaded method ''{0}'' may be easily confused with the overloading ''{1}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.EPC.OVERLOAD.WHAT_TO_CHECK" name="WHAT_TO_CHECK" value="What to Flag"/>
                  <oldparam id="CODSTA.EPC.OVERLOAD.SAME_NUMBER" name="SAME_NUMBER" value="Flag any overloaded methods with the same number of parameters."/>
                  <oldparam id="CODSTA.EPC.OVERLOAD.FLAG_CONFUSING" name="FLAG_CONFUSING" value="Flag only certain cases where two overloadings can be easily confused."/>
                  <oldparam id="CODSTA.EPC.OVERLOAD.SAME_PARAMS" name="SAME_PARAMS" value="Flag overloaded methods if they have the same number and types of parameters."/>
                  <oldparam id="CODSTA.EPC.OVERLOAD.CASTS" name="CASTS" value="Flag overloaded methods where the same set of parameters can be passed to different overloadings using casts."/>
               </oldparameters>
               <parameters>
                  <radioGroup id="CODSTA.EPC.OVERLOAD.WHAT_TO_CHECK" label="What to Flag" prevType="MultipleChoice" showLabel="true">
                     <radioItem label="Flag any overloaded methods with the same number of parameters." value="0"/>
                     <radioItem defaultValue="checked" label="Flag only certain cases where two overloadings can be easily confused." value="1">
                        <param defaultValue="true" id="CODSTA.EPC.OVERLOAD.SAME_PARAMS" inputType="checkbox" label="Flag overloaded methods if they have the same number and types of parameters."/>
                        <param defaultValue="true" id="CODSTA.EPC.OVERLOAD.CASTS" inputType="checkbox" label="Flag overloaded methods where the same set of parameters can be passed to different overloadings using casts."/>
                     </radioItem>
                  </radioGroup>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.STA" header="Avoid using the same generic type variable for multiple method arguments." id="STA" scope="LINE" severity="3" since="9.0">
               <messages>
                  <msg index="1" value="Type argument ''{0}'' used multiple types in method ''{1}''."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.WSIM" header="Do not write to static fields from non-static methods" id="WSIM" scope="LINE" severity="5" since="8.0">
               <messages>
                  <msg index="1" value="The static field ''{0}'' is written to from the instance method ''{1}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.EPC.WSIM.WHAT_TO_CHECK" name="WHAT_TO_CHECK" value="Check for write accesses"/>
                  <oldparam id="CODSTA.EPC.WSIM.SAME_CLASS" name="SAME_CLASS" value="Only to static fields that are declared in the same class"/>
                  <oldparam id="CODSTA.EPC.WSIM.ANY_WRITE" name="ANY_WRITE" value="To any static fields"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="CODSTA.EPC.WSIM.WHAT_TO_CHECK" label="Check for write accesses" prevType="MultipleChoice" showLabel="true">
                     <radioItem defaultValue="checked" label="Only to static fields that are declared in the same class" value="0"/>
                     <radioItem label="To any static fields" value="1"/>
                  </radioGroup>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.MSF" header="Do not use too many non-&quot;final&quot; &quot;static&quot; fields" id="MSF" scope="CLASS" severity="5" since="4.5">
               <messages>
                  <msg index="1" value="More than {0} &quot;static&quot; fields: {1}."/>
                  <msg index="2" value="More than {0} &quot;static&quot; field: {1}."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.EPC.MSF.MAX_NON_FINAL_STATIC_FIELD" name="MAX_NON_FINAL_STATIC_FIELD" value="Maximum non-&quot;final&quot; &quot;static&quot; fields"/>
                  <oldparam id="CODSTA.EPC.MSF.IGNORE_TYPES" name="IGNORE_TYPES" value="Ignore the following types and their subtypes: (Specify fully qualified names)"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="2" id="CODSTA.EPC.MSF.MAX_NON_FINAL_STATIC_FIELD" inputType="integer" label="Maximum non-&quot;final&quot; &quot;static&quot; fields" min="0"/>
                  <param defaultValue="org.eclipse.osgi.util.NLS" id="CODSTA.EPC.MSF.IGNORE_TYPES" inputType="stringList" label="Ignore the following types and their subtypes: (Specify fully qualified names)" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.EPC.NCBAV" header="Do not perform bitwise and arithmetic operations on the same data" id="NCBAV" scope="LINE" severity="3" since="2021.1">
               <messages>
                  <msg index="1" value="The variable used in this statement is operated on using both bitwise and arithmetic operations."/>
               </messages>
            </rule>
         </category>
         <category description="Bad Practice" name="BP">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.ABCL" header="Avoid &quot;break&quot; and/or &quot;continue&quot; with labels" id="ABCL" scope="LINE" severity="4" since="6.0">
               <messages>
                  <msg index="1" value="Avoid &quot;break&quot; with label: ''{0}''."/>
                  <msg index="2" value="Avoid &quot;continue&quot; with label: ''{0}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.BP.ABCL.FLAG_CONTINUE" name="FLAG_CONTINUE" value="Flag &quot;continue&quot; with label."/>
                  <oldparam id="CODSTA.BP.ABCL.FLAG_BREAK" name="FLAG_BREAK" value="Flag &quot;break&quot; with label."/>
                  <oldparam id="CODSTA.BP.ABCL.FLAG_SWITCH_B" name="FLAG_SWITCH_B" value="Flag &quot;break&quot; in switch cases."/>
                  <oldparam id="CODSTA.BP.ABCL.FLAG_SWITCH_C" name="FLAG_SWITCH_C" value="Flag &quot;continue&quot; in switch cases."/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="CODSTA.BP.ABCL.FLAG_BREAK" inputType="checkbox" label="Flag &quot;break&quot; with label.">
                     <param defaultValue="true" id="CODSTA.BP.ABCL.FLAG_SWITCH_B" inputType="checkbox" label="Flag &quot;break&quot; in switch cases."/>
                  </param>
                  <param defaultValue="true" id="CODSTA.BP.ABCL.FLAG_CONTINUE" inputType="checkbox" label="Flag &quot;continue&quot; with label.">
                     <param defaultValue="true" id="CODSTA.BP.ABCL.FLAG_SWITCH_C" inputType="checkbox" label="Flag &quot;continue&quot; in switch cases."/>
                  </param>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.ARM" header="Avoid using reflection methods" id="ARM" scope="LINE" severity="4" since="9.0">
               <messages>
                  <msg index="1" value="Reflection method ''{0}'' called."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.BP.ARM.CHECKED_METHODS" name="CHECKED_METHODS" value="Check the following methods:"/>
                  <oldparam id="CODSTA.BP.ARM.TYPE" name="TYPE" value="Type (qualified name)"/>
                  <oldparam id="CODSTA.BP.ARM.METHOD" name="METHOD" value="Method name (regular expression)"/>
               </oldparameters>
               <parameters>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CODSTA.BP.ARM.CHECKED_METHODS" label="Check the following methods:" reader="SATable">
                     <columns>
                        <column columnType="text" defaultValue="unknown" editable="true" id="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" label="Type (qualified name)" required="true"/>
                        <column columnType="text" defaultValue="unknown" editable="true" id="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" label="Method name (regular expression)" required="true" textSize="large"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                           <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" value="get(Declared)?(Constructor|Field|Method)(s)?"/>
                        </row>
                        <row id="2">
                           <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                           <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" value="newInstance"/>
                        </row>
                        <row id="3">
                           <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Constructor"/>
                           <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" value="setAccessible"/>
                        </row>
                        <row id="4">
                           <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Constructor"/>
                           <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" value="newInstance"/>
                        </row>
                        <row id="5">
                           <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Method"/>
                           <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" value="invoke"/>
                        </row>
                        <row id="6">
                           <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Method"/>
                           <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" value="setAccessible"/>
                        </row>
                        <row id="7">
                           <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Field"/>
                           <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" value="set.*"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.AMRO" header="Avoid declaring methods that return 'Object'" id="AMRO" scope="LINE" severity="4" since="9.0">
               <messages>
                  <msg index="1" value="Method ''{0}'' returns Object."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.BP.AMRO.IGNORE_OVERRIDING" name="IGNORE_OVERRIDING" value="Ignore overriding methods"/>
                  <oldparam id="CODSTA.BP.AMRO.IGNORE_RETURN_OBJECT" name="IGNORE_RETURN_OBJECT" value="Ignore methods which only return 'Object' types"/>
                  <oldparam id="CODSTA.BP.AMRO.IGNORE_METHOD_STUBS" name="IGNORE_METHOD_STUBS" value="Ignore method stubs"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="CODSTA.BP.AMRO.IGNORE_OVERRIDING" inputType="checkbox" label="Ignore overriding methods"/>
                  <param defaultValue="true" id="CODSTA.BP.AMRO.IGNORE_RETURN_OBJECT" inputType="checkbox" label="Ignore methods which only return 'Object' types"/>
                  <param defaultValue="true" id="CODSTA.BP.AMRO.IGNORE_STUBS" inputType="checkbox" label="Ignore method stubs"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.ARN" header="Avoid returning &quot;null&quot; for arrays and certain types." id="ARN" scope="LINE" severity="2" since="4.5">
               <messages>
                  <msg index="1" value="Returning &quot;null&quot; from a method with an array return type."/>
                  <msg index="2" value="Returning &quot;null&quot; from a method with ''{0}'' return type.'."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.BP.ARN.REG_EXP" name="REG_EXP" value="Ignore methods with &quot;@return&quot; tags matching the following regular expression:"/>
                  <oldparam id="CODSTA.BP.ARN.CHECK_ARRAY" name="CHECK_ARRAY" value="Check arrays"/>
                  <oldparam id="CODSTA.BP.ARN.CHECK_EMPTY_ARRAY" name="CHECK_EMPTY_ARRAY" value="Only check methods that also return an empty array"/>
                  <oldparam id="CODSTA.BP.ARN.CHECK_TYPE" name="CHECK_TYPE" value="Check specific types"/>
                  <oldparam id="CODSTA.BP.ARN.CHECK_TYPE_LIST" name="CHECK_TYPE_LIST" value="Specify types as fully qualified name"/>
               </oldparameters>
               <parameters>
                  <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="CODSTA.BP.ARN.REG_EXP" label="Ignore methods with &quot;@return&quot; tags matching the following regular expression:" reader="SATable">
                     <columns>
                        <column columnType="checkbox" editable="true" id="CODSTA__BP__ARN__REQ__COLUMN1" label="" required="true"/>
                        <column columnType="text" editable="true" id="CODSTA__BP__ARN__REQ__COLUMN2" label="" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="CODSTA__BP__ARN__REQ__COLUMN1" value="true"/>
                           <column refColumnId="CODSTA__BP__ARN__REQ__COLUMN2" value="&lt;code&gt;null&lt;/code&gt;"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
                  <param defaultValue="true" id="CODSTA.BP.ARN.CHECK_ARRAY" inputType="checkbox" label="Check arrays"/>
                  <param defaultValue="false" id="CODSTA.BP.ARN.CHECK_TYPE" inputType="checkbox" label="Check specific types">
                     <param defaultValue="java.util.Collection;java.util.Enumeration;java.util.Iterator;java.util.Map" id="CODSTA.BP.ARN.CHECK_TYPE_LIST" inputType="stringList" label="Specify types as fully qualified name" prevType="StringList"/>
                  </param>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.AUML" header="Avoid using multiple loggers, use logging levels instead" id="AUML" scope="CLASS" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Class ''{0}'' defines multiple loggers: ''{1}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.BP.AUML.TYPES_TO_CHECK" name="TYPES_TO_CHECK" value="Logger Types to Check (Specify Fully Qualified Names):"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="CODSTA.BP.AUML.TYPES_TO_CHECK" inputType="stringList" label="Logger Types to Check (Specify Fully Qualified Names):" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.AWRT" header="Avoid using wildcards in method return types." id="AWRT" scope="LINE" severity="4" since="9.0">
               <messages>
                  <msg index="1" value="Return type of method ''{0}'' has a wildcard."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.BLK" header="Provide a '{}' block for conditional statements" id="BLK" scope="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="&quot;{0}&quot; statement without a &quot;'{' '}'&quot; block."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.BP.BLK.BLKELSE" name="BLKELSE" value="Check &quot;else&quot; statements"/>
                  <oldparam id="CODSTA.BP.BLK.BLKFOR" name="BLKFOR" value="Check &quot;for&quot; statements"/>
                  <oldparam id="CODSTA.BP.BLK.BLKWHL" name="BLKWHL" value="Check &quot;while&quot; statements"/>
                  <oldparam id="CODSTA.BP.BLK.BLKDOWHL" name="BLKDOWHL" value="Check &quot;do-while&quot; statements"/>
                  <oldparam id="CODSTA.BP.BLK.BLKIF" name="BLKIF" value="Check &quot;if&quot; statements"/>
               </oldparameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/483.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="true" id="CODSTA.BP.BLK.BLKIF" inputType="checkbox" label="Check &quot;if&quot; statements"/>
                  <param defaultValue="true" id="CODSTA.BP.BLK.BLKELSE" inputType="checkbox" label="Check &quot;else&quot; statements"/>
                  <param defaultValue="true" id="CODSTA.BP.BLK.BLKFOR" inputType="checkbox" label="Check &quot;for&quot; statements"/>
                  <param defaultValue="true" id="CODSTA.BP.BLK.BLKWHL" inputType="checkbox" label="Check &quot;while&quot; statements"/>
                  <param defaultValue="true" id="CODSTA.BP.BLK.BLKDOWHL" inputType="checkbox" label="Check &quot;do-while&quot; statements"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.CONTINUE" header="Do not use &quot;break&quot; and/or &quot;continue&quot; statements" id="CONTINUE" scope="LINE" severity="5" since="6.0">
               <messages>
                  <msg index="1" value="Avoid using &quot;break&quot; statement."/>
                  <msg index="2" value="Avoid using &quot;continue&quot; statement."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.BP.CONTINUE.FLAG_CONTINUE" name="FLAG_CONTINUE" value="Flag &quot;continue&quot; statements."/>
                  <oldparam id="CODSTA.BP.CONTINUE.FLAG_BREAK" name="FLAG_BREAK" value="Flag &quot;break&quot; statements."/>
               </oldparameters>
               <parameters>
                  <param defaultValue="false" id="CODSTA.BP.CONTINUE.FLAG_BREAK" inputType="checkbox" label="Flag &quot;break&quot; statements."/>
                  <param defaultValue="true" id="CODSTA.BP.CONTINUE.FLAG_CONTINUE" inputType="checkbox" label="Flag &quot;continue&quot; statements."/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.CS" header="Place constants on the appropriate side of comparisons" id="CS" scope="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="Constants should be placed on the left side of comparisons."/>
                  <msg index="2" value="Constants should be placed on the right side of comparisons."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.BP.CS.IGNORE_NULL" name="IGNORE_NULL" value="Allow the constant &quot;null&quot; on either side of a comparison."/>
                  <oldparam id="CODSTA.BP.CS.LEFT" name="LEFT" value="Left-hand side"/>
                  <oldparam id="CODSTA.BP.CS.RIGHT" name="RIGHT" value="Right-hand side"/>
                  <oldparam id="CODSTA.BP.CS.SIDE" name="SIDE" value="Placement of constants:"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="CODSTA.BP.CS.SIDE" label="Placement of constants:" prevType="MultipleChoice" showLabel="true">
                     <radioItem label="Left-hand side" value="0"/>
                     <radioItem defaultValue="checked" label="Right-hand side" value="1"/>
                  </radioGroup>
                  <param defaultValue="false" id="CODSTA.BP.CS.IGNORE_NULL" inputType="checkbox" label="Allow the constant &quot;null&quot; on either side of a comparison."/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.CMUTA" header="Avoid 'public' or 'protected' constructors for immutable classes" id="CMUTA" scope="LINE" severity="3" since="9.0">
               <messages>
                  <msg index="1" value="''{0}'' constructor declared."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.DLSF" header="Declare loggers as &quot;static final&quot; fields" id="DLSF" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="The logger ''{0}'' is not &quot;static&quot;."/>
                  <msg index="2" value="The logger ''{0}'' is not &quot;final&quot;."/>
                  <msg index="3" value="The logger ''{0}'' is not &quot;static final&quot;."/>
                  <msg index="4" value="The logger ''{0}'' is a local variable; loggers should be fields."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.BP.DLSF.TYPES_TO_CHECK" name="TYPES_TO_CHECK" value="Logger Types to Check (Specify Fully Qualified Names):"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="CODSTA.BP.DLSF.TYPES_TO_CHECK" inputType="stringList" label="Logger Types to Check (Specify Fully Qualified Names):" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.FPF" header="Declare all formal parameters as &quot;final&quot;" id="FPF" scope="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="Formal parameter ''{0}'' is not declared as final."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.BP.FPF.IGNORE_CATCH" name="IGNORE_CATCH" value="Ignore parameters which are declared in a &quot;catch&quot; block."/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="CODSTA.BP.FPF.IGNORE_CATCH" inputType="checkbox" label="Ignore parameters which are declared in a &quot;catch&quot; block."/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.FQNIC" header="Reference interface constants with their declaring interface names" id="FQNIC" scope="LINE" severity="4" since="8.0">
               <messages>
                  <msg index="1" value="Interface constant ''{0}'' is not referenced with its declaring interface name ''{1}''."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.HTV" header="Avoid using 'Hashtable' and 'Vector'" id="HTV" scope="LINE" severity="3" since="9.0">
               <messages>
                  <msg index="1" value="''{0}'' created here."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.BP.HTV.CHECK_HASHTABLE" name="CHECK_HASHTABLE" value="Check Hashtable"/>
                  <oldparam id="CODSTA.BP.HTV.CHECK_VECTOR" name="CHECK_VECTOR" value="Check Vector"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="CODSTA.BP.HTV.CHECK_HASHTABLE" inputType="checkbox" label="Check Hashtable"/>
                  <param defaultValue="true" id="CODSTA.BP.HTV.CHECK_VECTOR" inputType="checkbox" label="Check Vector"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.IMPTD" header="Avoid or enforce usage of '*' form of import statements" id="IMPTD" scope="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="&quot;import&quot; with star &quot;*&quot;, Single-type imports should be used instead."/>
                  <msg index="2" value="Single-type import is used, it should be replaced by wildcard &quot;*&quot; import."/>
                  <msg index="3" value="Less than {1} actually used from this wildcard import: {0}, use single type imports instead."/>
                  <msg index="4" value="More than {1} used from the same package: {0}, combine into a wildcard import instead."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.BP.IMPTD.USE_WILD_CARD" name="USE_WILD_CARD" value="Only use wild card when importing class."/>
                  <oldparam id="CODSTA.BP.IMPTD.CHECK_SCOPE" name="CHECK_SCOPE" value="Rule option:"/>
                  <oldparam id="CODSTA.BP.IMPTD.USE_CUSTOMIZED_SETTING" name="USE_CUSTOMIZED_SETTING" value="Use customized setting"/>
                  <oldparam id="CODSTA.BP.IMPTD.NO_WILD_CARD" name="NO_WILD_CARD" value="Do not use wild card when importing class."/>
                  <oldparam id="CODSTA.BP.IMPTD.WILD_CARD_THRESHOLD" name="WILD_CARD_THRESHOLD" value="Use single type import when number of used types of same package less than "/>
                  <oldparam id="CODSTA.BP.IMPTD.SINGLE_TYPE_THRESHOLD" name="SINGLE_TYPE_THRESHOLD" value="Use wild card import when number of imported types of same package greater than"/>
                  <oldparam id="CODSTA.BP.IMPTD.TYPE_IS" name="TYPE_IS" value=" type is"/>
                  <oldparam id="CODSTA.BP.IMPTD.TYPES_ARE" name="TYPES_ARE" value=" types are"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="CODSTA.BP.IMPTD.CHECK_SCOPE" label="Rule option:" prevType="MultipleChoice" showLabel="true">
                     <radioItem defaultValue="checked" label="Do not use wild card when importing class." value="0"/>
                     <radioItem label="Only use wild card when importing class." value="1"/>
                     <radioItem label="Use customized setting" value="2">
                        <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="CODSTA.BP.IMPTD.WILD_CARD_THRESHOLD" label="Use wild card import when number of imported types of same package greater than" prevType="InputValueWithCheckBox" reader="SATable">
                           <columns>
                              <column columnType="checkbox" editable="true" id="CODSTA__BP__IMPTD__WILD_CARD_THRESHOLD__COLUMN1" label="" required="true"/>
                              <column columnType="text" editable="true" id="CODSTA__BP__IMPTD__WILD_CARD_THRESHOLD__COLUMN2" label="" required="true"/>
                           </columns>
                           <predefinedRows>
                              <row id="1">
                                 <column refColumnId="CODSTA__BP__IMPTD__WILD_CARD_THRESHOLD__COLUMN1" value="true"/>
                                 <column refColumnId="CODSTA__BP__IMPTD__WILD_CARD_THRESHOLD__COLUMN2" value="2"/>
                              </row>
                           </predefinedRows>
                        </complexParamTable>
                        <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="CODSTA.BP.IMPTD.SINGLE_TYPE_THRESHOLD" label="Use single type import when number of used types of same package less than " prevType="InputValueWithCheckBox" reader="SATable">
                           <columns>
                              <column columnType="checkbox" editable="true" id="CODSTA__BP__IMPTD__SINGLE_TYPE_THRESHOLD__COLUMN1" label="" required="true"/>
                              <column columnType="text" editable="true" id="CODSTA__BP__IMPTD__SINGLE_TYPE_THRESHOLD__COLUMN2" label="" required="true"/>
                           </columns>
                           <predefinedRows>
                              <row id="1">
                                 <column refColumnId="CODSTA__BP__IMPTD__SINGLE_TYPE_THRESHOLD__COLUMN1" value="true"/>
                                 <column refColumnId="CODSTA__BP__IMPTD__SINGLE_TYPE_THRESHOLD__COLUMN2" value="20"/>
                              </row>
                           </predefinedRows>
                        </complexParamTable>
                     </radioItem>
                  </radioGroup>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.NRVA" header="Avoid passing non-reifiable types to varargs methods." id="NRVA" scope="LINE" severity="2" since="9.0">
               <messages>
                  <msg index="1" value="Argument to varargs method ''{0}'' is non-reifiable."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.NTX" header="Avoid declaring methods to throw general or unchecked Exception types" id="NTX" scope="LINE" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="Throwing explicit ''{0}'' object in ''{1}()''."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.BP.NTX.CHECKED_EXCEPTS" name="CHECKED_EXCEPTS" value="Exception types which should not be declared to be thrown (fully qualified names)"/>
                  <oldparam id="CODSTA.BP.NTX.SKIP_JUNIT" name="SKIP_JUNIT" value="Skip JUnit 'TestCase' classes."/>
                  <oldparam id="CODSTA.BP.NTX.SUBCLASSES" name="SUBCLASSES" value="Check for exceptions which are subclasses of 'Error' and 'RuntimeException'."/>
                  <oldparam id="CODSTA.BP.NTX.IGNORE_OVERRIDING" name="IGNORE_OVERRIDING" value="Ignore overriding methods."/>
                  <oldparam id="CODSTA.BP.NTX.IGNORE_PROPAGATED" name="IGNORE_PROPAGATED" value="Ignore methods which propagate exception types of called methods."/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/397.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="java.lang.Exception;java.lang.Error;java.lang.Throwable;java.lang.RuntimeException" id="CODSTA.BP.NTX.CHECKED_EXCEPTS" inputType="stringList" label="Exception types which should not be declared to be thrown (fully qualified names)" prevType="StringList"/>
                  <param defaultValue="false" id="CODSTA.BP.NTX.SUBCLASSES" inputType="checkbox" label="Check for exceptions which are subclasses of 'Error' and 'RuntimeException'."/>
                  <param defaultValue="false" id="CODSTA.BP.NTX.SKIP_JUNIT" inputType="checkbox" label="Skip JUnit classes."/>
                  <param defaultValue="true" id="CODSTA.BP.NTX.IGNORE_OVERRIDING" inputType="checkbox" label="Ignore overriding methods."/>
                  <param defaultValue="true" id="CODSTA.BP.NTX.IGNORE_PROPAGATED" inputType="checkbox" label="Ignore methods which propagate exception types of called methods."/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.OCMA" header="Ensure overloaded constructors and methods share the same accessibility" id="OCMA" scope="CLASS" severity="5" since="8.3">
               <messages>
                  <msg index="1" value="Overloaded constructors: ''{0}'' have different accessibilities."/>
                  <msg index="2" value="Overloaded methods: ''{0}'' have different accessibilities."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.BP.OCMA.CHECK_CONSTRUCTORS" name="CHECK_CONSTRUCTORS" value="Check constructors"/>
                  <oldparam id="CODSTA.BP.OCMA.CHECK_METHODS" name="CHECK_METHODS" value="Check methods"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="CODSTA.BP.OCMA.CHECK_CONSTRUCTORS" inputType="checkbox" label="Check constructors"/>
                  <param defaultValue="true" id="CODSTA.BP.OCMA.CHECK_METHODS" inputType="checkbox" label="Check methods"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.EXIT" header="Do not call methods which terminates Java Virtual Machine" id="EXIT" scope="LINE" severity="3" since="10.4">
               <messages>
                  <msg index="1" value="'System.exit()' called."/>
                  <msg index="2" value="'Runtime.exit()' called."/>
                  <msg index="3" value="'Runtime.halt()' called."/>
               </messages>
               <parameters>
                  <param defaultValue="true" id="CODSTA.BP.EXIT.IGNORE_IN_MAIN" inputType="checkbox" label="Ignore in the 'main()' method"/>
                  <param defaultValue="false" id="CODSTA.BP.EXIT.IGNORE_IF_COMMENT" inputType="checkbox" label="Ignore if the method call is followed by a comment on the same line"/>
                  <param defaultValue="false" id="CODSTA.BP.EXIT.IGNORE_IF_COMMENT_ABOVE" inputType="checkbox" label="Ignore if the line above the method call contains a comment"/>
               </parameters>
            </rule>
         </category>
         <category description="Poor Object Oriented Design" name="POD">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.ACIAP" header="Avoid constant interface anti-pattern" id="ACIAP" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Interface ''{0}'' contains only fields."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.ASM" header="Avoid &quot;static&quot; methods when the declaring class is a parameter type." id="ASM" scope="LINE" severity="3" since="8.1">
               <messages>
                  <msg index="1" value="The method ''{0}'' need not be declared &quot;static&quot; because it has a parameter of type ''{1}''."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.AUVT" header="Use less specific types to accomplish loose coupling" id="AUVT" scope="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="''{0}'' is declared as ''{1}'' but should be declared as one of the following types: {2}."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.POD.AUVT.CHECK_LIST" name="CHECK_LIST" value="java.util.List"/>
                  <oldparam id="CODSTA.POD.AUVT.CHECK_MAP" name="CHECK_MAP" value="java.util.Map"/>
                  <oldparam id="CODSTA.POD.AUVT.CHECK_SET" name="CHECK_SET" value="java.util.Set"/>
                  <oldparam id="CODSTA.POD.AUVT.CHECK_INPUTSTREAM" name="CHECK_INPUTSTREAM" value="java.io.InputStream"/>
                  <oldparam id="CODSTA.POD.AUVT.CHECK_OUTPUTSTREAM" name="CHECK_OUTPUTSTREAM" value="java.io.OutputStream"/>
                  <oldparam id="CODSTA.POD.AUVT.CHECK_READER" name="CHECK_READER" value="java.io.Reader"/>
                  <oldparam id="CODSTA.POD.AUVT.CHECK_WRITER" name="CHECK_WRITER" value="java.io.Writer"/>
                  <oldparam id="CODSTA.POD.AUVT.BASIC_TAB" name="BASIC_TAB" value="Basic settings"/>
                  <oldparam id="CODSTA.POD.AUVT.CHECK_SCOPE" name="CHECK_SCOPE" value="Variables to check:"/>
                  <oldparam id="CODSTA.POD.AUVT.TYPES_TAB" name="TYPES_TAB" value="Types"/>
                  <oldparam id="CODSTA.POD.AUVT.CHECK_TYPES" name="CHECK_TYPES" value="Types to check:"/>
                  <oldparam id="CODSTA.POD.AUVT.CHECK_ALL_TYPES" name="CHECK_ALL_TYPES" value="Consider all types"/>
                  <oldparam id="CODSTA.POD.AUVT.CHECK_SUBSET_TYPES" name="CHECK_SUBSET_TYPES" value="Limit analysis to:"/>
                  <oldparam id="CODSTA.POD.AUVT.CHECK_EXTRA_CLASS" name="CHECK_EXTRA_CLASS" value="Extra classes/interfaces to be promoted to:"/>
                  <oldparam id="CODSTA.POD.AUVT.EXCLUDED_TAB" name="EXCLUDED_TAB" value="Excluded types"/>
                  <oldparam id="CODSTA.POD.AUVT.IGNORE_CLASS_LIST" name="IGNORE_CLASS_LIST" value="Classes/interfaces to ignore:"/>
                  <oldparam id="CODSTA.POD.AUVT.CHECK_IMPLEMENT_INTERFACE" name="CHECK_IMPLEMENT_INTERFACE" value="Only check types which implement interfaces"/>
                  <oldparam id="CODSTA.POD.AUVT.CHECK_FIELDS" name="CHECK_FIELDS" value="private fields"/>
                  <oldparam id="CODSTA.POD.AUVT.CHECK_PARAMETERS" name="CHECK_PARAMETERS" value="parameters"/>
                  <oldparam id="CODSTA.POD.AUVT.CHECK_CAUGHT_EXCEPTIONS" name="CHECK_CAUGHT_EXCEPTIONS" value="caught exceptions"/>
                  <oldparam id="CODSTA.POD.AUVT.CHECK_LOCAL_VARIABLES" name="CHECK_LOCAL_VARIABLES" value="local variables"/>
               </oldparameters>
               <parameters>
                  <group collapsible="false" id="CODSTA.POD.AUVT.group.0" label="Variables to check:">
                     <param defaultValue="true" id="CODSTA.POD.AUVT.CHECK_FIELDS" inputType="checkbox" label="private fields"/>
                     <param defaultValue="true" id="CODSTA.POD.AUVT.CHECK_PARAMETERS" inputType="checkbox" label="parameters"/>
                     <param defaultValue="false" id="CODSTA.POD.AUVT.CHECK_CAUGHT_EXCEPTIONS" inputType="checkbox" label="caught exceptions"/>
                     <param defaultValue="true" id="CODSTA.POD.AUVT.CHECK_LOCAL_VARIABLES" inputType="checkbox" label="local variables"/>
                  </group>
                  <group collapsible="false" id="CODSTA.POD.AUVT.tab.BASIC_TAB" label="Basic settings">
                     <param defaultValue="false" id="CODSTA.POD.AUVT.CHECK_IMPLEMENT_INTERFACE" inputType="checkbox" label="Only check types which implement interfaces"/>
                  </group>
                  <group collapsible="false" id="CODSTA.POD.AUVT.tab.TYPES_TAB" label="Types">
                     <radioGroup id="CODSTA.POD.AUVT.CHECK_TYPES" label="Types to check:" prevType="MultipleChoice" showLabel="true">
                        <radioItem label="Consider all types" value="0"/>
                        <radioItem defaultValue="checked" label="Limit analysis to:" value="1">
                           <param defaultValue="true" id="CODSTA.POD.AUVT.CHECK_LIST" inputType="checkbox" label="java.util.List"/>
                           <param defaultValue="true" id="CODSTA.POD.AUVT.CHECK_SET" inputType="checkbox" label="java.util.Set"/>
                           <param defaultValue="true" id="CODSTA.POD.AUVT.CHECK_MAP" inputType="checkbox" label="java.util.Map"/>
                           <param defaultValue="false" id="CODSTA.POD.AUVT.CHECK_INPUTSTREAM" inputType="checkbox" label="java.io.InputStream"/>
                           <param defaultValue="false" id="CODSTA.POD.AUVT.CHECK_OUTPUTSTREAM" inputType="checkbox" label="java.io.OutputStream"/>
                           <param defaultValue="false" id="CODSTA.POD.AUVT.CHECK_READER" inputType="checkbox" label="java.io.Reader"/>
                           <param defaultValue="false" id="CODSTA.POD.AUVT.CHECK_WRITER" inputType="checkbox" label="java.io.Writer"/>
                           <param defaultValue="" id="CODSTA.POD.AUVT.CHECK_EXTRA_CLASS" inputType="stringList" label="Extra classes/interfaces to be promoted to:" prevType="StringList"/>
                        </radioItem>
                     </radioGroup>
                  </group>
                  <group collapsible="false" id="CODSTA.POD.AUVT.tab.EXCLUDED_TAB" label="Excluded types">
                     <param defaultValue="java.util.Properties;java.lang.String;java.lang.Object;java.util.Stack" id="CODSTA.POD.AUVT.IGNORE_CLASS_LIST" inputType="stringList" label="Classes/interfaces to ignore:" prevType="StringList"/>
                  </group>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.CHAIN" header="Use chain constructors in classes with multiple constructors." id="CHAIN" scope="CLASS" severity="3" since="5.0">
               <messages>
                  <msg index="1" value="{0} has multiple constructors and should use chain constructors."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.POD.CHAIN.IGNORE_TYPES" name="IGNORE_TYPES" value="Ignore subtypes of the following types (Specify fully qualified type names):"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="java.lang.Exception" id="CODSTA.POD.CHAIN.IGNORE_TYPES" inputType="stringList" label="Ignore subtypes of the following types (Specify fully qualified type names):" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.CIOC" header="Avoid chains of &quot;instanceof&quot; comparisons." id="CIOC" scope="LINE" severity="3" since="8.2">
               <messages>
                  <msg index="1" value="This &quot;if&quot; statement uses a chain of &quot;instanceof&quot; comparisons to determine which action to take."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.POD.CIOC.MAX_INSTANCE_OF" name="MAX_INSTANCE_OF" value="Maximum number of &quot;instanceof&quot; comparisons allowed in an &quot;if-else if-...-else&quot; statement"/>
                  <oldparam id="CODSTA.POD.CIOC.COMMON_SUPERCLASS" name="COMMON_SUPERCLASS" value="Only flag a violation when the types in the comparisons have a common supertype"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="2" id="CODSTA.POD.CIOC.MAX_INSTANCE_OF" inputType="integer" label="Maximum number of &quot;instanceof&quot; comparisons allowed in an &quot;if-else if-...-else&quot; statement" min="1"/>
                  <param defaultValue="true" id="CODSTA.POD.CIOC.COMMON_SUPERCLASS" inputType="checkbox" label="Only flag a violation when the types in the comparisons have a common supertype"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.IASM" header="Do not access static members indirectly" id="IASM" scope="LINE" severity="3" since="8.0">
               <messages>
                  <msg index="1" value="Indirect access to static member ''{0}'' of the type ''{1}''."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.ISACF" header="Do not define constants in interfaces." id="ISACF" scope="CLASS" severity="4" since="4.5">
               <messages>
                  <msg index="1" value="Constant declared in an &quot;interface&quot;: ''{0}''."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.SMC" header="Avoid &quot;switch&quot; statements with too many or too few &quot;case&quot; statements" id="SMC" scope="LINE" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="&quot;switch&quot; statement with too few cases: {0}."/>
                  <msg index="2" value="&quot;switch&quot; statement with too many cases: {0}."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.POD.SMC.MIN_CASES" name="MIN_CASES" value="Minimum &quot;switch&quot; cases"/>
                  <oldparam id="CODSTA.POD.SMC.MAX_CASES" name="MAX_CASES" value="Maximum &quot;switch&quot; cases"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="0" id="CODSTA.POD.SMC.MIN_CASES" inputType="integer" label="Minimum &quot;switch&quot; cases" min="0"/>
                  <param defaultValue="10" id="CODSTA.POD.SMC.MAX_CASES" inputType="integer" label="Maximum &quot;switch&quot; cases" min="0"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.UET" header="Use &quot;enum&quot; types instead of a series of &quot;static final&quot; constants." id="UET" scope="LINE" severity="3" since="8.1">
               <messages>
                  <msg index="1" value="The constant ''{0}'' and the {1} constants that follow can possibly be refactored into an &quot;enum&quot; type."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.POD.UET.CONSECUTIVE_CONSTS" name="CONSECUTIVE_CONSTS" value="Minimum Number of Consecutive Constants to be Flagged"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="4" id="CODSTA.POD.UET.CONSECUTIVE_CONSTS" inputType="integer" label="Minimum Number of Consecutive Constants to be Flagged" min="2"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.UPT" header="Enforce or avoid the use of parameterized types" id="UPT" scope="LINE" severity="3" since="8.0">
               <messages>
                  <msg index="1" value="Consider changing the raw type ''{0}'' to a parameterized type."/>
                  <msg index="2" value="Consider changing the parameterized type ''{0}'' to the raw type ''{1}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="CODSTA.POD.UPT.AVOID" name="AVOID" value="Avoid"/>
                  <oldparam id="CODSTA.POD.UPT.ENFORCE" name="ENFORCE" value="Enforce"/>
                  <oldparam id="CODSTA.POD.UPT.ENFORCE_AVOID" name="ENFORCE_AVOID" value="Enforce or avoid?"/>
                  <oldparam id="CODSTA.POD.UPT.TYPES_TO_CHECK" name="TYPES_TO_CHECK" value="Types to check"/>
                  <oldparam id="CODSTA.POD.UPT.CHECK_COLLECTIONS" name="CHECK_COLLECTIONS" value="Check Collections"/>
                  <oldparam id="CODSTA.POD.UPT.CHECK_MAPS" name="CHECK_MAPS" value="Check Maps"/>
                  <oldparam id="CODSTA.POD.UPT.CHECK_ITERATORS" name="CHECK_ITERATORS" value="Check Iterators"/>
                  <oldparam id="CODSTA.POD.UPT.LOCATIONS_TO_CHECK" name="LOCATIONS_TO_CHECK" value="Locations to check"/>
                  <oldparam id="CODSTA.POD.UPT.CHECK_FIELDS" name="CHECK_FIELDS" value="Check fields"/>
                  <oldparam id="CODSTA.POD.UPT.CHECK_PARAMETERS" name="CHECK_PARAMETERS" value="Check parameters"/>
                  <oldparam id="CODSTA.POD.UPT.CHECK_LOCAL_VARIABLES" name="CHECK_LOCAL_VARIABLES" value="Check local variables"/>
                  <oldparam id="CODSTA.POD.UPT.CHECK_METHOD_RETURN_TYPES" name="CHECK_METHOD_RETURN_TYPES" value="Check method return types"/>
                  <oldparam id="CODSTA.POD.UPT.CHECKED_LIST" name="CHECKED_LIST" value="Additional types to check: (specify fully qualified name)"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="CODSTA.POD.UPT.ENFORCE_AVOID" label="Enforce or avoid?" prevType="MultipleChoice" showLabel="true">
                     <radioItem defaultValue="checked" label="Enforce" value="0"/>
                     <radioItem label="Avoid" value="1"/>
                  </radioGroup>
                  <group collapsible="false" id="CODSTA.POD.UPT.group.1" label="Locations to check">
                     <param defaultValue="true" id="CODSTA.POD.UPT.CHECK_FIELDS" inputType="checkbox" label="Check fields"/>
                     <param defaultValue="true" id="CODSTA.POD.UPT.CHECK_PARAMETERS" inputType="checkbox" label="Check parameters"/>
                     <param defaultValue="true" id="CODSTA.POD.UPT.CHECK_LOCAL_VARIABLES" inputType="checkbox" label="Check local variables"/>
                     <param defaultValue="true" id="CODSTA.POD.UPT.CHECK_METHOD_RETURN_TYPES" inputType="checkbox" label="Check method return types"/>
                  </group>
                  <group collapsible="false" id="CODSTA.POD.UPT.group.0" label="Types to check">
                     <param defaultValue="true" id="CODSTA.POD.UPT.CHECK_COLLECTIONS" inputType="checkbox" label="Check Collections"/>
                     <param defaultValue="true" id="CODSTA.POD.UPT.CHECK_MAPS" inputType="checkbox" label="Check Maps"/>
                     <param defaultValue="true" id="CODSTA.POD.UPT.CHECK_ITERATORS" inputType="checkbox" label="Check Iterators"/>
                     <param defaultValue="" id="CODSTA.POD.UPT.CHECKED_LIST" inputType="stringList" label="Additional types to check: (specify fully qualified name)" prevType="StringList"/>
                  </group>
               </parameters>
            </rule>
         </category>
      </category>
      <category description="Threads &amp; Synchronization" name="TRS">
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.CLQ" header="Use ConcurrentLinkedQueue instead of Vector and synchronizedList when possible" id="CLQ" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="Use ConcurrentLinkedQueue instead of Vector."/>
               <msg index="2" value="Use ConcurrentLinkedQueue instead of synchronizedList."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.SOBC" header="Do not synchronize on a collection view if the backing collection is accessible" id="SOBC" scope="LINE" severity="4" since="10.4">
            <messages>
               <msg index="1" value="Do not synchronize on the collection view ''{0}''"/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.SSUG" header="Make the get method for a field synchronized if the set method is synchronized" id="SSUG" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="There is a synchronized set method for the field ''{0}'', so this get method should also be synchronized."/>
            </messages>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
            </references>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.WOS" header="Do not make the &quot;writeObject()&quot; method synchronized if no other method is synchronized" id="WOS" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="This &quot;writeObject()&quot; method is the only synchronized method in this class."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.SOL" header="Do not perform synchronization using the &quot;synchronized&quot; keyword on implementations of &quot;java.util.concurrent.locks.Lock&quot;" id="SOL" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Use the 'lock()' and 'unlock()' methods instead of the &quot;synchronized&quot; keyword with &quot;Lock&quot; objects."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.UWIL" header="Call 'wait()' and 'await()' only inside a loop that tests the liveness condition" id="UWIL" scope="LINE" severity="1" since="4.5">
            <messages>
               <msg index="1" value="Called ''{0}'' without an enclosing loop to test the liveness condition."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.MRUN" header="Give subclasses of Thread a 'run()' method so they can run as separate threads" id="MRUN" scope="CLASS" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Subclass of Thread needs a 'run()' method."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.WOC" header="Use the correct method calls on &quot;java.util.concurrent.locks.Condition&quot; objects" id="WOC" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="You may have intended to use the ''{0}()'' method instead of ''{1}()'' on this &quot;Condition&quot; object."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.CSFS" header="Do not cause deadlocks by calling a &quot;synchronized&quot; method from a &quot;synchronized&quot; method" id="CSFS" scope="LINE" severity="1" since="4.5">
            <messages>
               <msg index="1" value="Calling &quot;synchronized&quot; method from a &quot;synchronized&quot; method."/>
            </messages>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               <reference href="http://cwe.mitre.org/data/definitions/833.html" name="CWE"/>
            </references>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.DCL" header="Avoid unsafe implementations of the &quot;double-checked locking&quot; pattern." id="DCL" scope="LINE" severity="2" since="6.0">
            <messages>
               <msg index="1" value="The &quot;double-checked locking&quot; pattern is used; this pattern can cause unexpected problems when compiler optimizations are performed."/>
            </messages>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               <reference href="http://cwe.mitre.org/data/definitions/609.html" name="CWE"/>
            </references>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.ILI" header="Make lazy initializations thread-safe" id="ILI" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Lazy initialization is not thread-safe: {0}."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.UT" header="Do not start a thread without specifying a 'run()' method" id="UT" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="This method call may start a thread which does not specify a 'run()' method."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.NAME" header="Ensure threads are named." id="NAME" scope="CLASS" severity="3" since="8.4">
            <messages>
               <msg index="1" value="Thread ''{0}'' initialized without a name."/>
               <msg index="2" value="Constructor ''{0}'' does not initialize thread name."/>
               <msg index="3" value="''{0}'' initialized without a name."/>
               <msg index="4" value="Thread initialized with constant name."/>
               <msg index="5" value="Constructor initializes thread with constant name."/>
            </messages>
            <oldparameters>
               <oldparam id="TRS.NAME.NO_CONSTANT_NAMES" name="NO_CONSTANT_NAMES" value="Do not allow constant String literals for thread names."/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="TRS.NAME.NO_CONSTANT_NAMES" inputType="checkbox" label="Do not allow constant String literals for thread names."/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.IRUN" header="Do not call the 'run()' method directly on classes extending 'java.lang.Thread' or implementing 'java.lang.Runnable'." id="IRUN" scope="LINE" severity="1" since="6.0">
            <messages>
               <msg index="1" value="''{0}'', which extends 'java.lang.Thread', calls method 'run()'."/>
               <msg index="2" value="''{0}'', which implements 'java.lang.Runnable' calls method 'run()'."/>
            </messages>
            <oldparameters>
               <oldparam id="TRS.IRUN.CHECK_RUNNABLE" name="CHECK_RUNNABLE" value="Check classes implementing 'java.lang.Runnable'"/>
            </oldparameters>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/572.html" name="CWE"/>
            </references>
            <parameters>
               <param defaultValue="false" id="TRS.IRUN.CHECK_RUNNABLE" inputType="checkbox" label="Check classes implementing 'java.lang.Runnable'"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.UCM" header="Use unsynchronized Collections/Maps only when safe." id="UCM" scope="LINE" severity="3" since="8.4">
            <messages>
               <msg index="1" value="Field ''{0}'' initialized to unsynchronized value."/>
            </messages>
            <oldparameters>
               <oldparam id="TRS.UCM.IGNORE_NON_STATIC" name="IGNORE_NON_STATIC" value="Ignore non-static fields."/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="TRS.UCM.IGNORE_IMMUTABLE" inputType="checkbox" label="Ignore immutable collections."/>
               <param defaultValue="true" id="TRS.UCM.IGNORE_NON_STATIC" inputType="checkbox" label="Ignore non-static fields."/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.MRAV" header="Access related Atomic variables in a synchronized block." id="MRAV" scope="LINE" severity="4" since="8.4">
            <messages>
               <msg index="1" value="Atomic variables: ''{0}'' are not accessed in a synchronized block."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.USL" header="Use the same locking object to access variables." id="USL" scope="LINE" severity="3" since="8.4">
            <messages>
               <msg index="1" value="''{0}'' usually locked by: ''{1}'' but is locked by: ''{2}''."/>
               <msg index="2" value="''{0}'' usually locked by: ''{1}'' but is accessed unlocked''."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.AIL" header="Do not use Atomic variables when always accessed in synchronized manner." id="AIL" scope="LINE" severity="4" since="8.4">
            <messages>
               <msg index="1" value="Atomic variable: ''{0}'' always accessed in synchronized manner."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.RLF" header="Release Locks in a &quot;finally&quot; block." id="RLF" scope="LINE" severity="1" since="8.4">
            <messages>
               <msg index="1" value="Lock ''{0}'' not released from &quot;finally&quot; block."/>
            </messages>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               <reference href="http://cwe.mitre.org/data/definitions/832.html" name="CWE"/>
               <reference href="http://cwe.mitre.org/data/definitions/833.html" name="CWE"/>
            </references>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.CIET" header="Do not catch InterruptedException except in classes extending Thread." id="CIET" scope="LINE" severity="4" since="8.4">
            <messages>
               <msg index="1" value="Catching InterruptedException in class: ''{0}'', which does not extend Thread."/>
            </messages>
            <oldparameters>
               <oldparam id="TRS.CIET.ALLOW_RETHROW" name="ALLOW_RETHROW" value="Allow rethrowing an exception of any type."/>
               <oldparam id="TRS.CIET.ALLOW_LOGGING" name="ALLOW_LOGGING" value="Allow logging without rethrowing or resetting status."/>
               <oldparam id="TRS.CIET.LOGGER_LIST" name="LOGGER_LIST" value="Specify loggers with fully qualified name."/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="TRS.CIET.ALLOW_RETHROW" inputType="checkbox" label="Allow rethrowing an exception of any type."/>
               <param defaultValue="false" id="TRS.CIET.ALLOW_LOGGING" inputType="checkbox" label="Allow logging without rethrowing or resetting status.">
                  <param defaultValue="java.util.logging.Logger" id="TRS.CIET.LOGGER_LIST" inputType="stringList" label="Specify loggers with fully qualified name." prevType="StringList"/>
               </param>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.GSD" header="Do not use &quot;getState&quot; except for debugging purposes." id="GSD" scope="LINE" severity="4" since="8.4">
            <messages>
               <msg index="1" value="Thread ''{0}'' calls &quot;getState&quot; here."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.ATI" header="Avoid accidental use of &quot;Thread.interrupted()&quot;." id="ATI" scope="LINE" severity="3" since="8.4">
            <messages>
               <msg index="1" value="Thread ''{0}'' calls &quot;interrupted&quot; here."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.CSTART" header="Do not call the &quot;start&quot; method of threads from inside a constructor." id="CSTART" scope="LINE" severity="2" since="6.0">
            <messages>
               <msg index="1" value="&quot;start&quot; method called from inside constructor ''{0}''."/>
            </messages>
            <oldparameters>
               <oldparam id="TRS.CSTART.CHECK_TYPES" name="CHECK_TYPES" value="Check the following constructors:"/>
               <oldparam id="TRS.CSTART.CHECK_THREAD" name="CHECK_THREAD" value="Check only classes extending Thread"/>
               <oldparam id="TRS.CSTART.CHECK_ALL" name="CHECK_ALL" value="Check all classes"/>
            </oldparameters>
            <parameters>
               <radioGroup id="TRS.CSTART.CHECK_TYPES" label="Check the following constructors:" prevType="MultipleChoice" showLabel="true">
                  <radioItem defaultValue="checked" label="Check only classes extending Thread" value="0"/>
                  <radioItem label="Check all classes" value="1"/>
               </radioGroup>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.CHM" header="Use ConcurrentHashMap instead of Hashtable and &quot;synchronizedMap&quot; wrapped HashMap when possible." id="CHM" scope="LINE" severity="5" since="8.4">
            <messages>
               <msg index="1" value="Hashtable ''{0}'' may have improved performance as a ConcurrentHashMap."/>
               <msg index="2" value="&quot;synchronizedMap&quot; ''{0}'' may have improved performance as a ConcurrentHashMap."/>
            </messages>
            <oldparameters>
               <oldparam id="TRS.CHM.CHECK_HASHTABLE" name="CHECK_HASHTABLE" value="Check Hashtable"/>
               <oldparam id="TRS.CHM.CHECK_HASHMAP" name="CHECK_HASHMAP" value="Check HashMap wrapped with &quot;synchronizedMap&quot;"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="TRS.CHM.CHECK_HASHTABLE" inputType="checkbox" label="Check Hashtable"/>
               <param defaultValue="false" id="TRS.CHM.CHECK_HASHMAP" inputType="checkbox" label="Check HashMap wrapped with &quot;synchronizedMap&quot;"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.UACS" header="Avoid unsynchronized accesses of &quot;Collections.synchronized&quot; wrapped Collections." id="UACS" scope="LINE" severity="3" since="8.4">
            <messages>
               <msg index="1" value="Collection ''{0}'' accessed here, should access through wrapped Collection."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.CMA" header="Avoid compound synchronized collection accesses which violate atomicity." id="CMA" scope="LINE" severity="3" since="8.4">
            <messages>
               <msg index="1" value="Method ''{0}'' performs compound action on &quot;synchronized&quot; collection ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="TRS.CMA.CHECK_LEGACY" name="CHECK_LEGACY" value="Check legacy synchronized &quot;Hashtable&quot; and &quot;Vector&quot;"/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="TRS.CMA.CHECK_LEGACY" inputType="checkbox" label="Check legacy synchronized &quot;Hashtable&quot; and &quot;Vector&quot;"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.RUN" header="Use synchronization on methods that implement 'Runnable.run()'." id="RUN" scope="LINE" severity="5" since="4.5">
            <messages>
               <msg index="1" value="'Runnable.run()' method should be synchronized if it cannot be safely executed concurrently."/>
            </messages>
            <oldparameters>
               <oldparam id="TRS.RUN.IGNORE_CONCURRENCY_TAG" name="IGNORE_CONCURRENCY_TAG" value="Ignore methods with &quot;@concurrency&quot; tag values of &quot;concurrent&quot; or &quot;sequential&quot;"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="TRS.RUN.IGNORE_CONCURRENCY_TAG" inputType="checkbox" label="Ignore methods with &quot;@concurrency&quot; tag values of &quot;concurrent&quot; or &quot;sequential&quot;"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.OSNS" header="Avoid overriding synchronized methods with non-synchronized methods." id="OSNS" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="Non-synchronized method ''{0}'' overrides a synchronized method."/>
            </messages>
            <oldparameters>
               <oldparam id="TRS.OSNS.IGNORE_CALL_OVERRIDDEN" name="IGNORE_CALL_OVERRIDDEN" value="Ignore methods which call the method they override"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="TRS.OSNS.IGNORE_CALL_OVERRIDDEN" inputType="checkbox" label="Ignore methods which call the method they override"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.IRET" header="Implement Runnable instead of extending Thread." id="IRET" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="''{0}'' extends Thread."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.ISTART" header="Do not call the 'start()' method directly on Thread class instances " id="ISTART" scope="LINE" severity="4" since="10.4">
            <messages>
               <msg index="1" value="A call to the Thread.start() method."/>
            </messages>
            <parameters>
               <param defaultValue="true" id="TRS.ISTART.CHECK_ONLY_IN_LOOPS" inputType="checkbox" label="Ignore method calls outside of loops"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.SGC" header="Do not synchronize on the class object returned by the 'getClass' method" id="SGC" scope="LINE" severity="3" since="10.4">
            <messages>
               <msg index="1" value="This 'synchronized' block synchronizes on the class object returned by the 'getClass()' method."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.SSCI" header="Manually synchronize on 'synchronized' collections when iterating over them." id="SSCI" scope="LINE" severity="1" since="9.0">
            <messages>
               <msg index="1" value="Iteration over ''{0}'' should be synchronized on ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="TRS.SSCI.CHECK_LEGACY" name="CHECK_LEGACY" value="Check Hashtable and Vector"/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="TRS.SSCI.CHECK_LEGACY" inputType="checkbox" label="Check Hashtable and Vector"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.SSDF" header="Synchronize access to &quot;static&quot; SimpleDataFormats" id="SSDF" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="SimpleDateFormat ''{0}'' may be accessed in an unsynchronized manner."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.LORD" header="Ensure that nested locks are ordered correctly" id="LORD" scope="LINE" severity="2" since="9.0">
            <messages>
               <msg index="1" value="Lock ''{0}'' should not be wrapped by lock ''{1}''."/>
            </messages>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/832.html" name="CWE"/>
            </references>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.CDF" header="Avoid invoking methods using &quot;static&quot; 'Calendar', 'DateFormat', or 'SimpleDateFormat'." id="CDF" scope="LINE" severity="3" since="8.2">
            <messages>
               <msg index="1" value="Method ''{0}()'' is called by &quot;static&quot; field of ''{1}''."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.CTRE" header="Do not let &quot;this&quot; reference escape during construction." id="CTRE" scope="LINE" severity="3" since="8.4">
            <messages>
               <msg index="1" value="Method invocation ''{0}'' publishes an inner class in constructor ''{1}''."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.DOPQ" header="Do not use DiscardOldestPolicy with PriorityBlockingQueue" id="DOPQ" scope="LINE" severity="3" since="8.4">
            <messages>
               <msg index="1" value="''{0}'' discards highest priority task from priority queue."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.IASF" header="Inspect accesses to &quot;static&quot; fields which may require synchronization" id="IASF" scope="LINE" severity="3" since="8.3">
            <messages>
               <msg index="1" value="This code may not be thread-safe; setting and accessing the field ''{0}'' may require synchronization."/>
            </messages>
            <oldparameters>
               <oldparam id="TRS.IASF.CHECK_LOCALS" name="CHECK_LOCALS" value="Check non-static instance fields"/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="TRS.IASF.CHECK_LOCALS" inputType="checkbox" label="Check non-static instance fields"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.SCS" header="Do not synchronize on constant Strings." id="SCS" scope="LINE" severity="1" since="8.2">
            <messages>
               <msg index="1" value="Synchronizing on a constant String can lead to deadlocks."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.SNSM" header="Do not mix &quot;static&quot; and non-&quot;static&quot; &quot;synchronized&quot; methods." id="SNSM" scope="LINE" severity="2" since="8.4">
            <messages>
               <msg index="1" value="Class ''{0}'' contains ''{1}'' static and ''{2}'' non-static synchronized methods which use different lock objects."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.SOPF" header="Do not synchronize on &quot;public&quot; fields since doing so may cause deadlocks" id="SOPF" scope="LINE" severity="2" since="8.3">
            <messages>
               <msg index="1" value="Synchronization on the &quot;{0}&quot; field &quot;{1}&quot;."/>
            </messages>
            <oldparameters>
               <oldparam id="TRS.SOPF.CHECK_ACCESSIBILITY" name="CHECK_ACCESSIBILITY" value="Check fields with the following accessibilities:"/>
               <oldparam id="TRS.SOPF.CHECK_PUBLIC" name="CHECK_PUBLIC" value="Check &quot;public&quot; fields"/>
               <oldparam id="TRS.SOPF.CHECK_NON_PRIVATE" name="CHECK_NON_PRIVATE" value="Check non-&quot;private&quot; fields"/>
            </oldparameters>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
            </references>
            <parameters>
               <radioGroup id="TRS.SOPF.CHECK_ACCESSIBILITY" label="Check fields with the following accessibilities:" prevType="MultipleChoice" showLabel="true">
                  <radioItem defaultValue="checked" label="Check &quot;public&quot; fields" value="0"/>
                  <radioItem label="Check non-&quot;private&quot; fields" value="1"/>
               </radioGroup>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.STR" header="Do not perform synchronization nor call semaphore methods on an Object's 'this' reference" id="STR" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="The semaphore method ''{0}'' is invoked on the ''this'' reference; this may break multithread correctness."/>
               <msg index="2" value="This 'synchronized' block performs synchronization on the 'this' reference; this may break multithread correctness."/>
            </messages>
            <oldparameters>
               <oldparam id="TRS.STR.CHECK_SYNCHRONIZE" name="CHECK_SYNCHRONIZE" value="Check synchronize on 'this'"/>
               <oldparam id="TRS.STR.CHECK_METHODS" name="CHECK_METHODS" value="Check 'wait()', 'notify()', and 'notifyAll()' calls on 'this'"/>
            </oldparameters>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/833.html" name="CWE"/>
            </references>
            <parameters>
               <param defaultValue="true" id="TRS.STR.CHECK_SYNCHRONIZE" inputType="checkbox" label="Check synchronize on 'this'"/>
               <param defaultValue="true" id="TRS.STR.CHECK_METHODS" inputType="checkbox" label="Check 'wait()', 'notify()', and 'notifyAll()' calls on 'this'"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.ANF" header="Do not use 'notify()'; use 'notifyAll()' instead so that all waiting threads will be notified." id="ANF" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="'notify()' is called in the method: 'notifyThread'"/>
            </messages>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
            </references>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.UWNA" header="Use 'wait()' and 'notifyAll()' instead of polling loops." id="UWNA" scope="CLASS" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Found 'sleep()' in a loop.  You may want to use 'wait()' and 'notifyAll()' instead"/>
            </messages>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/833.html" name="CWE"/>
            </references>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.NSYN" header="Ensure 'wait()', 'notify()' and 'notifyAll()' are invoked on an object that is clearly synchronized in its enclosing mod scope." id="NSYN" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="''{0}()'' might throw ''IllegalMonitorStateException'' as it's not enclosed in corresponding &quot;synchronized&quot; block or method."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.TSHL" header="Do not call 'Thread.sleep()' while holding a lock since doing so can cause poor performance and deadlocks." id="TSHL" scope="LINE" severity="2" since="8.1">
            <messages>
               <msg index="1" value="'Thread.sleep()' called from a &quot;synchronized&quot; block.  It may be better to use 'wait()' instead."/>
               <msg index="2" value="'Thread.sleep()' called from a &quot;synchronized&quot; method.  It may be better to use 'wait()' instead."/>
            </messages>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               <reference href="http://cwe.mitre.org/data/definitions/833.html" name="CWE"/>
            </references>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.AUTG" header="Do not use variables of the unsafe type 'java.lang.ThreadGroup'" id="AUTG" scope="LINE" severity="2" since="4.5">
            <messages>
               <msg index="1" value="Use of the unsafe type ''java.lang.ThreadGroup'' : {0}."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.THRD" header="Avoid calling unsafe deprecated methods of 'Thread' and 'Runtime'." id="THRD" scope="LINE" severity="2" since="4.5">
            <messages>
               <msg index="1" value="Unsafe method ''{0}'' was called."/>
               <msg index="2" value="''{0}'' should not be used because it only exists for use with the deadlock-prone ''suspend()'' method."/>
               <msg index="3" value="Deadlock-prone method ''{0}'' was called."/>
               <msg index="4" value="Deprecated method ''{0}'' was called"/>
            </messages>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
            </references>
         </rule>
      </category>
      <category description="Design by Contract" name="DBC">
         <rule class="com.parasoft.jtest.standards.rules.builtin.DBC.CPT" header="Do not include a postcondition saying that &quot;$result!=null&quot; in methods which can return null" id="CPT" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="This method's postcondition says that it cannot return null, but it contains the statement &quot;return null;&quot;."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.DBC.IGM" header="Provide an '@invariant' contract for all getter methods" id="IGM" scope="LINE" severity="3" since="7.5">
            <messages>
               <msg index="1" value="getter method without an '@invariant' contract: {0}()."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.DBC.IPAN" header="Include a '@pre != null' tag for each parameter that is dereferenced before being checked for null." id="IPAN" scope="LINE" severity="3" since="8.4">
            <messages>
               <msg index="1" value="Parameter ''{0}'' dereferenced before being checked for null."/>
            </messages>
            <oldparameters>
               <oldparam id="DBC.IPAN.CHECK_PUBLIC" name="CHECK_PUBLIC" value="Check &quot;public&quot; methods"/>
               <oldparam id="DBC.IPAN.CHECK_PRIVATE" name="CHECK_PRIVATE" value="Check &quot;private&quot; methods"/>
               <oldparam id="DBC.IPAN.CHECK_PROTECTED" name="CHECK_PROTECTED" value="Check &quot;protected&quot; methods"/>
               <oldparam id="DBC.IPAN.CHECK_PACKAGE" name="CHECK_PACKAGE" value="Check &quot;package-private&quot; methods"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="DBC.IPAN.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods"/>
               <param defaultValue="true" id="DBC.IPAN.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods"/>
               <param defaultValue="true" id="DBC.IPAN.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; methods"/>
               <param defaultValue="false" id="DBC.IPAN.CHECK_PRIVATE" inputType="checkbox" label="Check &quot;private&quot; methods"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.DBC.SYNTAX" header="Use correct syntax in the DbC contracts" id="SYNTAX" scope="CLASS" severity="3" since="4.5">
            <messages>
               <msg index="1" value="invalid &quot;@concurrency&quot; tag."/>
               <msg index="2" value="&quot;@concurrency&quot; tag only applies to methods."/>
               <msg index="3" value="use &quot;@concurrency guarded&quot; tag for &quot;synchronized&quot; method: {0}."/>
               <msg index="4" value="&quot;@concurrency guarded&quot; tag is used on a method without synchronization."/>
               <msg index="5" value="methods should only have one &quot;@concurrency&quot; tag&quot;."/>
               <msg index="6" value="exception name is missing in &quot;@throws&quot; tag."/>
               <msg index="7" value="&quot;@throws&quot; tag is not followed by the name of an exception class: {0}."/>
               <msg index="8" value="&quot;@verbose&quot; tag is not followed by the verbose statement."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.DBC.IMNR" header="Do not invoke a method on a reference that is not guaranteed to be non-null" id="IMNR" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="The return value of ''{0}()'' is not guaranteed by a DbC annotation to be non-null."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.DBC.RCC" header="Avoid rechecking @pre and @post conditions" id="RCC" scope="LINE" severity="3" since="8.4">
            <messages>
               <msg index="1" value="Parameter ''{0}'' checked for null, but @pre condition declares it to not be."/>
               <msg index="2" value="Return value ''{0}'' of method ''{1}'' checked for null, but @post condition declares it to not be."/>
            </messages>
            <oldparameters>
               <oldparam id="DBC.RCC.CHECK_PRE" name="CHECK_PRE" value="Check @pre conditions"/>
               <oldparam id="DBC.RCC.CHECK_POST" name="CHECK_POST" value="Check @post conditions"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="DBC.RCC.CHECK_PRE" inputType="checkbox" label="Check @pre conditions"/>
               <param defaultValue="true" id="DBC.RCC.CHECK_POST" inputType="checkbox" label="Check @post conditions"/>
            </parameters>
         </rule>
      </category>
      <category description="Java Database Connectivity" name="JDBC">
         <rule class="com.parasoft.jtest.standards.rules.builtin.JDBC.BRSA" header="Ensure index is valid in JDBC method invocation." id="BRSA" scope="LINE" severity="1" since="8.0">
            <messages>
               <msg index="1" value="''{0}'' is not a valid index value for this method call."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JDBC.RRWD" header="Close JDBC resources in &quot;finally&quot; blocks" id="RRWD" scope="LINE" severity="1" since="4.5">
            <messages>
               <msg index="1" value="JDBC resource ''{0}'' is not closed in a &quot;finally&quot; block."/>
            </messages>
            <oldparameters>
               <oldparam id="JDBC.RRWD.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
               <oldparam id="JDBC.RRWD.ADDITIONAL_CLOSE_METHODS" name="ADDITIONAL_CLOSE_METHODS" value="Additional JDBC resource closing methods (in regular expression)"/>
               <oldparam id="JDBC.RRWD.METHOD" name="METHOD" value="Method name"/>
               <oldparam id="JDBC.RRWD.TYPE" name="TYPE" value="Declaring type"/>
               <oldparam id="JDBC.RRWD.SKIP_LIST" name="SKIP_LIST" value="Ignore JDBC connection is created by the following types:"/>
            </oldparameters>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE"/>
               <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE"/>
            </references>
            <parameters>
               <param defaultValue="org.springframework.jdbc.core.JdbcTemplate" id="JDBC.RRWD.SKIP_LIST" inputType="stringList" label="Ignore JDBC connection is created by the following types:" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JDBC.CDBC" header="Close JDBC connections in &quot;finally&quot; blocks" id="CDBC" scope="LINE" severity="1" since="4.5">
            <messages>
               <msg index="1" value="JDBC connection ''{0}'' is not closed in a &quot;finally&quot; block."/>
            </messages>
            <oldparameters>
               <oldparam id="JDBC.CDBC.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
               <oldparam id="JDBC.CDBC.ADDITIONAL_CLOSE_METHODS" name="ADDITIONAL_CLOSE_METHODS" value="Additional JDBC connection closing methods (in regular expression)"/>
               <oldparam id="JDBC.CDBC.METHOD" name="METHOD" value="Method name"/>
               <oldparam id="JDBC.CDBC.TYPE" name="TYPE" value="Declaring type"/>
               <oldparam id="JDBC.CDBC.SKIP_LIST" name="SKIP_LIST" value="Ignore JDBC connection is created by the following types:"/>
            </oldparameters>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE"/>
               <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE"/>
            </references>
            <parameters>
               <!--param id="JDBC.CDBC.ADDITIONAL_CLOSE_METHODS" inputType="bigtext" defaultValue="" label="Additional JDBC connection closing methods (in regular expression)"/-->
               <!--  complexParamTable id="JDBC.CDBC.ADDITIONAL_CLOSE_METHODS" reader="SATable" label="Additional JDBC connection closing methods (in regular expression)" canAddRow="true" canRemoveRow="true" canEditRow="true" canSetOrdering="true">
                        <columns>
                            <column id="JDBC__CDBC__ADDITIONAL_CLOSE_METHODS__COLUMN1" label="Declaring type" columnType="text" defaultValue=".*" editable="true" required="true" />
                            <column id="JDBC__CDBC__ADDITIONAL_CLOSE_METHODS__COLUMN2" label="Method name" columnType="text" defaultValue=".*" editable="true" required="true" />
                        </columns>
                    </complexParamTable>-->
               <param defaultValue="org.springframework.jdbc.core.JdbcTemplate" id="JDBC.CDBC.SKIP_LIST" inputType="stringList" label="Ignore JDBC connection is created by the following types:" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JDBC.COCO" header="Close JDBC objects in the correct order." id="COCO" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Possible incorrect order: {0} ''{1}'' closed after {2} ''{3}''."/>
            </messages>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE"/>
               <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE"/>
            </references>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JDBC.UPSC" header="Use &quot;PreparedStatements&quot; correctly." id="UPSC" scope="LINE" severity="1" since="8.2">
            <messages>
               <msg index="1" value="The query String for this &quot;PreparedStatement&quot; contains {0} ?''s, but there are {1} calls to ''set'' methods."/>
               <msg index="2" value="The query String for this &quot;PreparedStatement&quot; contains {0} ?''s, but there is {1} call to ''set'' method."/>
               <msg index="3" value="''set'' methods are called in the incorrect order: ''set'' method with argument {0} comes after ''set'' method with argument {1}."/>
               <msg index="4" value="Invalid argument: the first argument to the ''{0}()'' method must be &gt;= 1."/>
               <msg index="5" value="Invalid argument: the first argument to ''{0}()'' is {1}, but there are only {2} ?''s in the corresponding query String."/>
               <msg index="6" value="Misuse &quot;PreparedStatement&quot;: missing '?' in query string."/>
            </messages>
            <oldparameters>
               <oldparam id="JDBC.UPSC.WRONG_ORDER" name="WRONG_ORDER" value="Check that 'set' methods are called in the correct order"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="JDBC.UPSC.WRONG_ORDER" inputType="checkbox" label="Check that 'set' methods are called in the correct order"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JDBC.URSF" header="Use instance of RowSetFactory to create a RowSet object" id="URSF" scope="LINE" severity="3" since="9.4">
            <messages>
               <msg index="1" value="Creating a RowSet object not using instance of RowSetFactory."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JDBC.ODBIL" header="Do not open or close JDBC connections in loops" id="ODBIL" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="The method ''{0}'' opens a JDBC connection and is called in a loop."/>
               <msg index="2" value="The method ''{0}'' closes a JDBC connection and is called in a loop."/>
            </messages>
            <oldparameters>
               <oldparam id="JDBC.ODBIL.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
               <oldparam id="JDBC.ODBIL.ADDITIONAL_CLOSE_METHODS" name="ADDITIONAL_CLOSE_METHODS" value="Additional JDBC connection closing methods (in regular expression)"/>
               <oldparam id="JDBC.ODBIL.ADDITIONAL_OPEN_METHODS" name="ADDITIONAL_OPEN_METHODS" value="Additional JDBC connection opening methods (in regular expression)"/>
               <oldparam id="JDBC.ODBIL.METHOD" name="METHOD" value="Method name"/>
               <oldparam id="JDBC.ODBIL.TYPE" name="TYPE" value="Declaring type"/>
            </oldparameters>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE"/>
               <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE"/>
            </references>
            <parameters>
               <param defaultValue="1" id="JDBC.ODBIL.MAX_LEVEL" inputType="integer" label="Maximum level of checking allowed" min="0"/>
               <!--param id="JDBC.ODBIL.ADDITIONAL_OPEN_METHODS" inputType="bigtext" defaultValue="" label="Additional JDBC connection opening methods (in regular expression)"/-->
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="JDBC.ODBIL.ADDITIONAL_OPEN_METHODS" label="Additional JDBC connection opening methods (in regular expression)" reader="SATable">
                  <columns>
                     <column columnType="text" defaultValue=".*" editable="true" id="JDBC__ODBIL__ADDITIONAL_OPEN_METHODS__COLUMN1" label="Declaring type" required="true"/>
                     <column columnType="text" defaultValue=".*" editable="true" id="JDBC__ODBIL__ADDITIONAL_OPEN_METHODS__COLUMN2" label="Method name" required="true"/>
                  </columns>
               </complexParamTable>
               <!--param id="JDBC.ODBIL.ADDITIONAL_CLOSE_METHODS" inputType="bigtext" defaultValue="" label="Additional JDBC connection closing methods (in regular expression)"/-->
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="JDBC.ODBIL.ADDITIONAL_CLOSE_METHODS" label="Additional JDBC connection closing methods (in regular expression)" reader="SATable">
                  <columns>
                     <column columnType="text" defaultValue=".*" editable="true" id="JDBC__ODBIL__ADDITIONAL_CLOSE_METHODS__COLUMN1" label="Declaring type" required="true"/>
                     <column columnType="text" defaultValue=".*" editable="true" id="JDBC__ODBIL__ADDITIONAL_CLOSE_METHODS__COLUMN2" label="Method name" required="true"/>
                  </columns>
               </complexParamTable>
            </parameters>
         </rule>
      </category>
      <category description="Exceptions" name="EXCEPT">
         <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.TSCE" header="Exception messages must meet minimum character requirement" id="TSCE" scope="LINE" severity="3" since="9.5">
            <messages>
               <msg index="1" value="Exception message is missing."/>
               <msg index="2" value="Exception message is too short."/>
            </messages>
            <oldparameters>
               <oldparam id="EXCEPT.TSCE.MIN_NUM_EXCEPTION_MSG_LENGHTS" name="MIN_NUM_EXCEPTION_MSG_LENGHTS" value="Minimum characters of exception message:"/>
               <oldparam id="EXCEPT.TSCE.SET_AGGRESIVE_MODE_ON" name="SET_AGGRESIVE_MODE_ON" value="Aggressively report violations"/>
               <oldparam id="EXCEPT.TSCE.SET_USER_LIST_MODE_ON" name="SET_USER_LIST_MODE_ON" value="Enabled"/>
               <oldparam id="EXCEPT.TSCE.MODE_CHOICE" name="MODE_CHOICE" value="Mode:"/>
               <oldparam id="EXCEPT.TSCE.USER_ACCEPT_EXCEPTIONS_LIST" name="USER_ACCEPT_EXCEPTIONS_LIST" value="Acceptance list:"/>
               <oldparam id="EXCEPT.TSCE.USER_REJECT_EXCEPTIONS_LIST" name="USER_REJECT_EXCEPTIONS_LIST" value="Rejection list (regular expressions):"/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="EXCEPT.TSCE.group.0" label="Message length">
                  <param defaultValue="35" id="EXCEPT.TSCE.MIN_NUM_EXCEPTION_MSG_LENGHTS" inputType="integer" label="Minimum characters of exception message:" min="1"/>
                  <param defaultValue="false" id="EXCEPT.TSCE.SET_AGGRESIVE_MODE_ON" inputType="checkbox" label="Aggressively report violations"/>
               </group>
               <group collapsible="false" id="EXCEPT.TSCE.group.1" label="User defined lists">
                  <param defaultValue="false" id="EXCEPT.TSCE.SET_USER_LIST_MODE_ON" inputType="checkbox" label="Enabled">
                     <radioGroup id="EXCEPT.TSCE.MODE_CHOICE" label="Mode:" prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Accept mode" value="0"/>
                        <radioItem label="Reject mode" value="1"/>
                     </radioGroup>
                     <!--param id="EXCEPT.TSCE.USER_ACCEPT_EXCEPTIONS_LIST" inputType="bigtext" defaultValue="" label="Acceptance list:"/-->
                     <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="EXCEPT.TSCE.USER_ACCEPT_EXCEPTIONS_LIST" label="Acceptance list:" reader="SATable">
                        <columns>
                           <column columnType="text" defaultValue="java.lang.Exception" editable="true" id="EXCEPT__TSCE__USER_ACCEPT_EXCEPTIONS_LIST__COLUMN1" label="Exception type (regular expression)" required="true"/>
                           <column columnType="text" defaultValue="1" editable="true" id="EXCEPT__TSCE__USER_ACCEPT_EXCEPTIONS_LIST__COLUMN2" label="Index of message parameter in class constructor" required="true"/>
                        </columns>
                     </complexParamTable>
                     <param defaultValue="" id="EXCEPT.TSCE.USER_REJECT_EXCEPTIONS_LIST" inputType="stringList" label="Rejection list (regular expressions):" prevType="StringList"/>
                  </param>
               </group>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.CATO" header="Catch all &quot;Throwable&quot; objects which may be thrown in the body of certain methods." id="CATO" scope="LINE" severity="2" since="8.1">
            <messages>
               <msg index="1" value="The method ''{0}()'' does not contain a &quot;try&quot;/&quot;catch&quot; block which catches all possible &quot;Throwable&quot; objects."/>
            </messages>
            <oldparameters>
               <oldparam id="EXCEPT.CATO.CHECKED_METHOD_TABLE" name="CHECKED_METHOD_TABLE" value="Methods to be Checked"/>
               <oldparam id="EXCEPT.CATO.METHOD_SIGNATURE" name="METHOD_SIGNATURE" value="Method Name and Parameters (Specify fully qualified type names)"/>
               <oldparam id="EXCEPT.CATO.TYPE" name="TYPE" value="Type (Fully Qualified Name)"/>
            </oldparameters>
            <parameters>
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="EXCEPT.CATO.CHECKED_METHOD_TABLE" label="Methods to be Checked" reader="SATable">
                  <columns>
                     <column columnType="text" editable="true" id="EXCEPT__CATO__CHECKED_METHOD_TABLE__COLUMN1" label="Type (Fully Qualified Name)" required="true"/>
                     <column columnType="text" editable="true" id="EXCEPT__CATO__CHECKED_METHOD_TABLE__COLUMN2" label="Method Name and Parameters (Specify fully qualified type names)" required="true"/>
                  </columns>
                  <predefinedRows>
                     <row id="1">
                        <column refColumnId="EXCEPT__CATO__CHECKED_METHOD_TABLE__COLUMN1" value="java.lang.Runnable"/>
                        <column refColumnId="EXCEPT__CATO__CHECKED_METHOD_TABLE__COLUMN2" value="run()"/>
                     </row>
                  </predefinedRows>
               </complexParamTable>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.AEFC" header="Do not abuse exceptions as flow control statements." id="AEFC" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Avoid using throw clause as flow control statement."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.CDUPL" header="Avoid catch clauses with the same content" id="CDUPL" scope="LINE" severity="3" since="9.4">
            <messages>
               <msg index="1" value="Two or more of catch blocks has the same content."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.CLFIN" header="Avoid using finally block for closing resource only" id="CLFIN" scope="LINE" severity="3" since="9.4">
            <messages>
               <msg index="1" value="The resource is closed in a finally block instead of a try-with-resources statement."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.CTE" header="Always chain thrown exceptions" id="CTE" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="Thrown exception is not chained."/>
            </messages>
            <oldparameters>
               <oldparam id="EXCEPT.CTE.CHECK_CONSTRUCTOR" name="CHECK_CONSTRUCTOR" value="Check only thrown exceptions with a chain constructor"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="EXCEPT.CTE.CHECK_CONSTRUCTOR" inputType="checkbox" label="Check only thrown exceptions with a chain constructor"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.EPNFC" header="Do not throw exceptions from constructors of &quot;public&quot; non-&quot;final&quot; classes." id="EPNFC" scope="LINE" severity="3" since="8.4">
            <messages>
               <msg index="1" value="Constructor ''{0}'' throws ''{1}''."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.HCB" header="Do not hide 'catch' blocks." id="HCB" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="This catch block will be never be reached."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.NCNPE" header="Do not catch 'NullPointerException'" id="NCNPE" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Avoid catching 'NullPointerException'"/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.NTERR" header="Do not throw exception types which are too general or are unchecked exceptions." id="NTERR" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Avoid throwing ''{0}''."/>
            </messages>
            <oldparameters>
               <oldparam id="EXCEPT.NTERR.CHECKED_EXCEPTS" name="CHECKED_EXCEPTS" value="Exception types which should not be thrown (fully qualified names)"/>
            </oldparameters>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               <reference href="http://cwe.mitre.org/data/definitions/397.html" name="CWE"/>
            </references>
            <parameters>
               <param defaultValue="java.lang.Exception;java.lang.Error;java.lang.Throwable;java.lang.RuntimeException" id="EXCEPT.NTERR.CHECKED_EXCEPTS" inputType="stringList" label="Exception types which should not be thrown (fully qualified names)" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.NFE" header="Ensure that the 'parse' methods of the numeric classes do not throw unhandled &quot;NumberFormatExceptions&quot;." id="NFE" scope="LINE" severity="3" since="8.2">
            <messages>
               <msg index="1" value="The method ''{0}()'' may throw a &quot;NumberFormatException&quot; that is neither caught nor declared to be thrown."/>
            </messages>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
            </references>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.RTERR" header="Rethrow certain exceptions if they are caught." id="RTERR" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="This catch block catches the exception ''{0}'' of type ''{1}'' but does not rethrow it."/>
               <msg index="2" value="This catch block catches the error ''{0}'' of type ''{1}'' but does not rethrow it."/>
            </messages>
            <oldparameters>
               <oldparam id="EXCEPT.RTERR.CHECKED_EXCEPTS" name="CHECKED_EXCEPTS" value="Exception/Error types which must be rethrown in &quot;catch&quot; blocks (fully qualified names)"/>
            </oldparameters>
            <parameters>
               <param defaultValue="java.lang.Error" id="EXCEPT.RTERR.CHECKED_EXCEPTS" inputType="stringList" label="Exception/Error types which must be rethrown in &quot;catch&quot; blocks (fully qualified names)" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.NTNPE" header="Do not throw 'NullPointerException'." id="NTNPE" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Avoid throwing 'NullPointerException'"/>
            </messages>
         </rule>
      </category>
      <category description="Serialization" name="SERIAL">
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.SNNAC" header="Avoid serializable classes that extend a superclass without a zero-argument constructor" id="SNNAC" scope="CLASS" severity="1" since="6.0">
            <messages>
               <msg index="1" value="Superclass ''{0}'' does not have a zero-argument constructor and might cause a serialization failure."/>
               <msg index="2" value="Superclasses {0}, do not have a zero-argument constructor and might cause a serialization failure."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.NSFSC" header="Ensure Serializable classes are correct" id="NSFSC" scope="CLASS" severity="2" since="6.0">
            <messages>
               <msg index="1" value="Possible Serializable error at {0}, current class field ''{1}'' is not completely-Serializable, see rule description for completely-Serializable."/>
               <msg index="2" value="Possible Serializable error at {0}, current class field ''{1}'' does not implement 'java.io.Serializable'."/>
               <msg index="3" value="Possible Serializable error at {0}, inherited field {1} is not completely-Serializable, see rule description for completely-Serializable."/>
               <msg index="4" value="Possible Serializable error at {0}, inherited fields {1} are not completely-Serializable, see rule description for completely-Serializable."/>
               <msg index="5" value="Possible Serializable error at {0}, inherited field {1} does not implement 'java.io.Serializable'."/>
               <msg index="6" value="Possible Serializable error at {0}, inherited fields {1} do not implement 'java.io.Serializable'."/>
               <msg index="7" value="Possible Serializable error at {0}, superclass {1} does not implement 'java.io.Serializable'."/>
               <msg index="8" value="Possible Serializable error at {0}, superclasses {1} do not implement 'java.io.Serializable'."/>
               <msg index="9" value="Possible Serializable error at {0}, current class field ''{1}'' may contain elements which are not Serializable."/>
            </messages>
            <oldparameters>
               <oldparam id="SERIAL.NSFSC.IGNORE_NO_SOURCE" name="IGNORE_NO_SOURCE" value="Ignore classes whose source codes could not be found"/>
               <oldparam id="SERIAL.NSFSC.FLAG_EVEN_NO_FIELD" name="FLAG_EVEN_NO_FIELD" value="Check classes even if they are expected to have no field to be serialized under current implementation."/>
               <oldparam id="SERIAL.NSFSC.CHECK_ONLY_EXPLICIT" name="CHECK_ONLY_EXPLICIT" value="Check only classes that are explicitly stated as serializable"/>
               <oldparam id="SERIAL.NSFSC.REMOTE" name="REMOTE" value="remote"/>
               <oldparam id="SERIAL.NSFSC.SKIP_CLASSES" name="SKIP_CLASSES" value="Class to be skipped"/>
               <oldparam id="SERIAL.NSFSC.LOCAL" name="LOCAL" value="local"/>
               <oldparam id="SERIAL.NSFSC.PREFIX" name="PREFIX" value="prefix"/>
               <oldparam id="SERIAL.NSFSC.POSTFIX" name="POSTFIX" value="postfix"/>
               <oldparam id="SERIAL.NSFSC.FLAG_NON_SERIALIZABLE_SUPERCLASS" name="FLAG_NON_SERIALIZABLE_SUPERCLASS" value="Check non-serializable superclasses as well"/>
               <oldparam id="SERIAL.NSFSC.CHECK_MAPS_AND_COLLECTIONS" name="CHECK_MAPS_AND_COLLECTIONS" value="Check for Maps and Collections which may contain elements which are not serializable"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="SERIAL.NSFSC.CHECK_ONLY_EXPLICIT" inputType="checkbox" label="Check only classes that are explicitly stated as serializable"/>
               <param defaultValue="true" id="SERIAL.NSFSC.FLAG_NON_SERIALIZABLE_SUPERCLASS" inputType="checkbox" label="Check non-serializable superclasses as well"/>
               <param defaultValue="false" id="SERIAL.NSFSC.FLAG_EVEN_NO_FIELD" inputType="checkbox" label="Check classes even if they are expected to have no field to be serialized under current implementation."/>
               <param defaultValue="true" id="SERIAL.NSFSC.IGNORE_NO_SOURCE" inputType="checkbox" label="Ignore classes whose source codes could not be found"/>
               <param defaultValue="false" id="SERIAL.NSFSC.CHECK_MAPS_AND_COLLECTIONS" inputType="checkbox" label="Check for Maps and Collections which may contain elements which are not serializable"/>
               <param defaultValue="" id="SERIAL.NSFSC.SKIP_CLASSES" inputType="stringList" label="Class to be skipped" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.RWAF" header="Ensure that all fields are assigned by the 'readObject()' method and written out by the 'writeObject()' method" id="RWAF" scope="LINE" severity="3" since="8.1">
            <messages>
               <msg index="1" value="The ''{0}'' field is not read by the ''readObject()'' method."/>
               <msg index="2" value="The ''{0}'' field is not written out by the ''writeObject()'' method."/>
            </messages>
            <oldparameters>
               <oldparam id="SERIAL.RWAF.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
            </oldparameters>
            <parameters>
               <param defaultValue="5" id="SERIAL.RWAF.MAX_LEVEL" inputType="integer" label="Maximum level of checking allowed" min="0"/>
               <param defaultValue="true" id="SERIAL.RWAF.CHECK_WRITE" inputType="checkbox" label="Check 'writeObject' methods" min="0"/>
               <param defaultValue="true" id="SERIAL.RWAF.CHECK_READ" inputType="checkbox" label="Check 'readObject' methods" min="0"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.RRSC" header="Define a &quot;readResolve&quot; method for all instances of Serializable types." id="RRSC" scope="LINE" severity="3" since="8.1">
            <messages>
               <msg index="1" value="The class ''{0}'' implements ''Serializable'' but does not define a &quot;readResolve()&quot; method."/>
               <msg index="2" value="The &quot;readResolve()&quot; method of the class ''{0}'' may have a return value other than the Serializable instance."/>
               <msg index="3" value="The &quot;readResolve()&quot; method of the class ''{0}'' does not have the correct signature."/>
            </messages>
            <oldparameters>
               <oldparam id="SERIAL.RRSC.CHECK_PUBLIC" name="CHECK_PUBLIC" value="a &quot;public&quot; constructor"/>
               <oldparam id="SERIAL.RRSC.CHECK_PROTECTED" name="CHECK_PROTECTED" value="a &quot;protected&quot; constructor"/>
               <oldparam id="SERIAL.RRSC.CHECK_PACKAGE_PRIVATE" name="CHECK_PACKAGE_PRIVATE" value="a &quot;package-private&quot; constructor"/>
               <oldparam id="SERIAL.RRSC.CHECK_PRIVATE" name="CHECK_PRIVATE" value="a &quot;private&quot; constructor"/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="SERIAL.RRSC.group.0" label="Check classes with:">
                  <param defaultValue="false" id="SERIAL.RRSC.CHECK_PUBLIC" inputType="checkbox" label="a &quot;public&quot; constructor"/>
                  <param defaultValue="false" id="SERIAL.RRSC.CHECK_PROTECTED" inputType="checkbox" label="a &quot;protected&quot; constructor"/>
                  <param defaultValue="false" id="SERIAL.RRSC.CHECK_PACKAGE_PRIVATE" inputType="checkbox" label="a &quot;package-private&quot; constructor"/>
                  <param defaultValue="true" id="SERIAL.RRSC.CHECK_PRIVATE" inputType="checkbox" label="a &quot;private&quot; constructor"/>
               </group>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.SNSO" header="Do not store non-serializable objects as HttpSession attributes" id="SNSO" scope="LINE" severity="1" since="8.4">
            <messages>
               <msg index="1" value="Argument ''{0}'' to method &quot;setAttribute&quot; is non-serializable."/>
            </messages>
            <oldparameters>
               <oldparam id="SERIAL.SNSO.IGNORE_NULL" name="IGNORE_NULL" value="Ignore &quot;null&quot; values"/>
               <oldparam id="SERIAL.SNSO.CHECK_ABSTRACT" name="CHECK_ABSTRACT" value="Check abstract classes"/>
               <oldparam id="SERIAL.SNSO.CHECK_INTERFACE" name="CHECK_INTERFACE" value="Check interfaces"/>
               <oldparam id="SERIAL.SNSO.CHECK_COLLECTION" name="CHECK_COLLECTION" value="Check Collections"/>
               <oldparam id="SERIAL.SNSO.CHECK_MAP" name="CHECK_MAP" value="Check Maps"/>
            </oldparameters>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/579.html" name="CWE"/>
            </references>
            <parameters>
               <param defaultValue="true" id="SERIAL.SNSO.IGNORE_NULL" inputType="checkbox" label="Ignore &quot;null&quot; values"/>
               <param defaultValue="true" id="SERIAL.SNSO.CHECK_ABSTRACT" inputType="checkbox" label="Check abstract classes"/>
               <param defaultValue="true" id="SERIAL.SNSO.CHECK_INTERFACE" inputType="checkbox" label="Check interfaces"/>
               <param defaultValue="false" id="SERIAL.SNSO.CHECK_COLLECTION" inputType="checkbox" label="Check Collections"/>
               <param defaultValue="false" id="SERIAL.SNSO.CHECK_MAP" inputType="checkbox" label="Check Maps"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.OC" header="Ensure outer class is serializable if its inner class is serializable" id="OC" scope="LINE" severity="1" since="8.2">
            <messages>
               <msg index="1" value="Outer class ''{0}'' is not serializable."/>
            </messages>
            <oldparameters>
               <oldparam id="SERIAL.OC.CHECK_INDIRECT" name="CHECK_INDIRECT" value="Check inner classes indirectly implementing Serializable"/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="SERIAL.OC.CHECK_INDIRECT" inputType="checkbox" label="Check inner classes indirectly implementing Serializable"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.DUID" header="Create a 'serialVersionUID' for all 'Serializable' classes." id="DUID" scope="CLASS" severity="3" since="4.5">
            <messages>
               <msg index="1" value="No 'serialVersionUID' declared in class ''{0}''."/>
               <msg index="2" value="'serialVersionUID' must be declared &quot;static final long&quot;, otherwise it will not be used."/>
               <msg index="3" value="'serialVersionUID' should be declared &quot;private&quot;."/>
            </messages>
            <oldparameters>
               <oldparam id="SERIAL.DUID.CHECK_PRIVATE" name="CHECK_PRIVATE" value="Check if serialVersionUID is &quot;private&quot;"/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="SERIAL.DUID.CHECK_PRIVATE" inputType="checkbox" label="Check if serialVersionUID is &quot;private&quot;"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.SPF" header="Declare 'serialPersistentFields' &quot;private static final&quot;" id="SPF" scope="LINE" severity="2" since="8.4">
            <messages>
               <msg index="1" value="&quot;serialPersistentFields&quot; of class ''{0}'' should be declared &quot;private static final&quot;."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.SRLZ" header="Do not declare SerialVersionUID in classes that do not implement Serializable" id="SRLZ" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="serialVersionUID declared, but class does not implement Serializable."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.SCBNP" header="Always declare writeObject and readObject methods for Serializable subclasses of non-Serializable parents" id="SCBNP" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="Class has a non-serializable parent but implements Serializable without specifying readObject or WriteObject methods."/>
               <msg index="2" value="Class has a non-serializable parent but implements Serializable without specifying readObject method."/>
               <msg index="3" value="Class has a non-serializable parent but implements Serializable without specifying WriteObject method."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.EZEE" header="Implement Externalizable instead of Serializable" id="EZEE" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="{0} implements Serializable instead of Externalizable."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.IRX" header="Avoid re-initializing fields in the 'readExternal()' method of 'Externalizable' classes" id="IRX" scope="LINE" severity="3" since="8.4">
            <messages>
               <msg index="1" value="Fields are re-initialized in 'readExternal()'."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.VOBD" header="Validate objects before deserialization" id="VOBD" scope="LINE" severity="3" since="10.4.3">
            <messages>
               <msg index="1" value="The object read from the ObjectInputStream is not validated before deserialization"/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.ROWO" header="Ensure that the 'readObject()' and 'writeObject()' methods have the correct signature." id="ROWO" scope="LINE" severity="1" since="8.2">
            <messages>
               <msg index="1" value="This ''readObject()'' method does not have the signature &quot;private void readObject(ObjectInputStream) throws IOException, ClassNotFoundException&quot;"/>
               <msg index="2" value="This ''writeObject()'' method does not have the signature &quot;private void writeObject(ObjectOutputStream) throws IOException&quot;"/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.FT" header="Avoid declaring &quot;transient&quot; fields in non-serializable classes" id="FT" scope="LINE" severity="3" since="8.2">
            <messages>
               <msg index="1" value="field ''{0}'' is &quot;transient&quot;"/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.SROS" header="Do not declare the 'readObject()' method as &quot;synchronized&quot;" id="SROS" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Method readObject()  is synchronized."/>
            </messages>
         </rule>
      </category>
      <category description="Garbage Collection" name="GC">
         <rule class="com.parasoft.jtest.standards.rules.builtin.GC.FCF" header="Call 'super.finalize()' from 'finalize()'." id="FCF" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Missing call to ''super.finalize()'' in ''finalize()''."/>
            </messages>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/568.html" name="CWE"/>
            </references>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GC.FM" header="Do not use 'finalize()' methods to unregister listeners." id="FM" scope="LINE" severity="1" since="4.5">
            <messages>
               <msg index="1" value="Attempting to remove listener in 'finalize()' method."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GC.NCF" header="Do not call 'finalize()' explicitly." id="NCF" scope="LINE" severity="1" since="4.5">
            <messages>
               <msg index="1" value="'finalize()' called explicitly."/>
            </messages>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/586.html" name="CWE"/>
            </references>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GC.MML" header="Be cautious when calling methods which may cause memory leaks" id="MML" scope="LINE" severity="2" since="8.2">
            <messages>
               <msg index="1" value="The ''{0}()'' method is known to cause memory leaks.  Inspect its usage to make sure memory leaks are not possible in this case."/>
            </messages>
            <oldparameters>
               <oldparam id="GC.MML.TYPE_AND_METHOD" name="TYPE_AND_METHOD" value="Methods Which May Cause Memory Leaks"/>
               <oldparam id="GC.MML.DECLARING_CLASS" name="DECLARING_CLASS" value="Declaring Type (Fully Qualified Name)"/>
               <oldparam id="GC.MML.METHOD_SIG" name="METHOD_SIG" value="Method Signature (&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,\n&lt;parameter2 fully qualified type&gt;,...))"/>
            </oldparameters>
            <parameters>
               <!--param id="GC.MML.TYPE_AND_METHOD" inputType="bigtext" defaultValue="java.lang.String&lt;#&gt;split(java.lang.String)#split(java.lang.String,int)#substring(int)#substring(int,int);java.util.StringTokenizer&lt;#&gt;nextElement()#nextToken()#nextToken(java.lang.String);java.util.regex.Matcher&lt;#&gt;group()#group(int)" label="Methods Which May Cause Memory Leaks" prevType="DuoList"/-->
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="GC.MML.TYPE_AND_METHOD" label="Methods Which May Cause Memory Leaks" prevType="DuoList" reader="SADuoList">
                  <columns>
                     <column columnType="text" editable="true" id="GC__MML__TYPE_AND_METHOD__COLUMN1" label="Declaring Type (Fully Qualified Name)" required="true" textSize="large"/>
                  </columns>
                  <predefinedRows>
                     <row id="1">
                        <column refColumnId="GC__MML__TYPE_AND_METHOD__COLUMN1" value="java.lang.String"/>
                     </row>
                     <row id="2">
                        <column refColumnId="GC__MML__TYPE_AND_METHOD__COLUMN1" value="java.util.StringTokenizer"/>
                     </row>
                     <row id="3">
                        <column refColumnId="GC__MML__TYPE_AND_METHOD__COLUMN1" value="java.util.regex.Matcher"/>
                     </row>
                  </predefinedRows>
                  <childTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="GC__MML__TYPE_AND_METHOD__CHILDTABLE1" label="">
                     <columns>
                        <column columnType="text" description="&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,&lt;parameter2 fully qualified type&gt;,...)" editable="true" id="GC__MML__TYPE_AND_METHOD__COLUMN2" label="Method Signature" required="true"/>
                     </columns>
                     <predefinedRows refParentRowId="1">
                        <row id="1">
                           <column refColumnId="GC__MML__TYPE_AND_METHOD__COLUMN2" value="split(java.lang.String)"/>
                        </row>
                        <row id="2">
                           <column refColumnId="GC__MML__TYPE_AND_METHOD__COLUMN2" value="split(java.lang.String,int)"/>
                        </row>
                        <row id="3">
                           <column refColumnId="GC__MML__TYPE_AND_METHOD__COLUMN2" value="substring(int)"/>
                        </row>
                        <row id="4">
                           <column refColumnId="GC__MML__TYPE_AND_METHOD__COLUMN2" value="substring(int,int)"/>
                        </row>
                     </predefinedRows>
                     <predefinedRows refParentRowId="2">
                        <row id="1">
                           <column refColumnId="GC__MML__TYPE_AND_METHOD__COLUMN2" value="nextElement()"/>
                        </row>
                        <row id="2">
                           <column refColumnId="GC__MML__TYPE_AND_METHOD__COLUMN2" value="nextToken()"/>
                        </row>
                        <row id="3">
                           <column refColumnId="GC__MML__TYPE_AND_METHOD__COLUMN2" value="nextToken(java.lang.String)"/>
                        </row>
                     </predefinedRows>
                     <predefinedRows refParentRowId="3">
                        <row id="1">
                           <column refColumnId="GC__MML__TYPE_AND_METHOD__COLUMN2" value="group()"/>
                        </row>
                        <row id="2">
                           <column refColumnId="GC__MML__TYPE_AND_METHOD__COLUMN2" value="group(int)"/>
                        </row>
                     </predefinedRows>
                  </childTable>
               </complexParamTable>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GC.RCO" header="Reuse immutable constant objects to conserve memory" id="RCO" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Define and reuse a constant for immutable object: ''{0}''."/>
               <msg index="2" value="Define a constant for this array if its members are not going to be updated: ''{0}''."/>
            </messages>
            <oldparameters>
               <oldparam id="GC.RCO.IGNORE_ANON" name="IGNORE_ANON" value="Ignore anonymous class objects."/>
               <oldparam id="GC.RCO.IGNORE_CLASSES" name="IGNORE_CLASSES" value="Ignore classes (in regular expression)"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="GC.RCO.IGNORE_ANON" inputType="checkbox" label="Ignore anonymous class objects."/>
               <param defaultValue="^java.io.InputStream$;^java.io.OutputStream$" id="GC.RCO.IGNORE_CLASSES" inputType="stringList" label="Ignore classes (in regular expression)" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GC.STV" header="Avoid &quot;static&quot; collections or maps; they can grow without bounds." id="STV" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Found &quot;static&quot; variable of type &quot;Map&quot; or &quot;Collection&quot;: ''{0}''."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GC.IFF" header="Call 'super.finalize()' in the &quot;finally&quot; block of 'finalize()' methods." id="IFF" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Missing &quot;finally&quot; block that invokes 'super.finalize()'."/>
               <msg index="2" value="'finalize()' method's &quot;finally&quot; block does not call 'super.finalize()'."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GC.OSTM" header="Prevent potential memory leaks in ObjectOutputStreams by calling 'reset()'." id="OSTM" scope="LINE" severity="2" since="4.5">
            <messages>
               <msg index="1" value="The call to 'writeObject()' on the ''{0}'' variable is not followed by a call to 'reset()' or 'close()'."/>
            </messages>
         </rule>
      </category>
      <category description="Portability" name="PORT">
         <rule class="com.parasoft.jtest.standards.rules.builtin.PORT.ENV" header="Do not use the non-portable 'System.getenv()' method." id="ENV" scope="LINE" severity="1" since="4.5">
            <messages>
               <msg index="1" value="Non-portable method ''System.getenv()'' called to get the environment variable ''{0}''."/>
               <msg index="2" value="Non-portable method 'System.getenv()' called."/>
            </messages>
            <oldparameters>
               <oldparam id="PORT.ENV.IGNORE_1_5" name="IGNORE_1_5" value="Ignore code which uses JDK 1.5 or later"/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="PORT.ENV.IGNORE_1_5" inputType="checkbox" label="Ignore code which uses JDK 1.5 or later"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.PORT.HCNA" header="Do not hard-code IP addresses and port numbers." id="HCNA" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="Hard-coded IP address ''{0}''."/>
               <msg index="2" value="Hard-coded port number ''{0}''."/>
            </messages>
            <oldparameters>
               <oldparam id="PORT.HCNA.IP" name="IP" value="Do not hard-code IP addresses"/>
               <oldparam id="PORT.HCNA.PORT" name="PORT" value="Do not hard-code port numbers"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="PORT.HCNA.IP" inputType="checkbox" label="Do not hard-code IP addresses"/>
               <param defaultValue="true" id="PORT.HCNA.PORT" inputType="checkbox" label="Do not hard-code port numbers"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.PORT.DNHCP" header="Do not hard code an absolute pathname when calling a constructor from the 'File' class" id="DNHCP" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Hard coded pathname passed to a 'File' constructor."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.PORT.PSC" header="Use &quot;File.pathSeparator&quot; or &quot;File.pathSeparatorChar&quot; instead of the corresponding literals" id="PSC" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="The literal {0} used instead of &quot;{1}&quot;."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.PORT.EXEC" header="Do not use &quot;Runtime.exec()&quot;." id="EXEC" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Non-portable 'Runtime.exec()' used"/>
            </messages>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               <reference href="http://cwe.mitre.org/data/definitions/511.html" name="CWE"/>
            </references>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.PORT.NATV" header="Do not use user-defined &quot;native&quot; methods." id="NATV" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="User-defined &quot;native&quot; method: {0}."/>
            </messages>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               <reference href="http://cwe.mitre.org/data/definitions/111.html" name="CWE"/>
            </references>
         </rule>
      </category>
      <category description="Security" name="SECURITY">
         <category description="Backdoor Vulnerabilities" name="BV">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.NSF" header="Do not call 'Socket.setSocketImplFactory()' or 'URL.setURLStreamHandlerFactory()' in a web component." id="NSF" scope="LINE" severity="3" since="7.5">
               <messages>
                  <msg index="1" value="Call to ''{0}()'' in a web component."/>
                  <msg index="2" value="Method ''{0}'' indirectly calls set factory method in a web component."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.BV.NSF.DEPTH" name="DEPTH" value="Maximum depth to look for set factory calls"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="2" id="SECURITY.BV.NSF.DEPTH" inputType="integer" label="Maximum depth to look for set factory calls" max="5" min="1"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.ADT" header="Inspect usage of 'Date', 'Time' objects and 'System.currentTimeMillis()' method invocations" id="ADT" scope="LINE" severity="5" since="6.0">
               <messages>
                  <msg index="1" value="Inspect usage of the ''{0}'' object ''{1}''."/>
                  <msg index="2" value="Inspect that 'System.currentTimeMillis()' is used securely."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.BV.ADT.CHECK_SUB_CLASS" name="CHECK_SUB_CLASS" value="Flag classes that extend the checked classes above"/>
                  <oldparam id="SECURITY.BV.ADT.CHECK_SQL_TIME" name="CHECK_SQL_TIME" value="Flag 'java.sql.Time' Objects"/>
                  <oldparam id="SECURITY.BV.ADT.SAFE_LIST" name="SAFE_LIST" value="Classes to be ignored (fully qualified name, &quot;java.sql.Date&quot; instead of &quot;Date&quot; for example.)"/>
                  <oldparam id="SECURITY.BV.ADT.CHECK_CURRENT_MILLIS" name="CHECK_CURRENT_MILLIS" value="Flag 'System.currentTimeMillis()' invocations."/>
                  <oldparam id="SECURITY.BV.ADT.CHECK_UTIL_DATE" name="CHECK_UTIL_DATE" value="Flag 'java.util.Date' Objects"/>
                  <oldparam id="SECURITY.BV.ADT.CHECK_SQL_DATE" name="CHECK_SQL_DATE" value="Flag 'java.sql.Date' Objects"/>
               </oldparameters>
               <parameters>
                  <group collapsible="false" id="SECURITY.BV.ADT.group.0" label="Date and time object">
                     <param defaultValue="true" id="SECURITY.BV.ADT.CHECK_SQL_TIME" inputType="checkbox" label="Flag 'java.sql.Time' Objects"/>
                     <param defaultValue="true" id="SECURITY.BV.ADT.CHECK_SQL_DATE" inputType="checkbox" label="Flag 'java.sql.Date' Objects"/>
                     <param defaultValue="true" id="SECURITY.BV.ADT.CHECK_UTIL_DATE" inputType="checkbox" label="Flag 'java.util.Date' Objects"/>
                     <param defaultValue="false" id="SECURITY.BV.ADT.CHECK_SUB_CLASS" inputType="checkbox" label="Flag classes that extend the checked classes above"/>
                  </group>
                  <group collapsible="false" id="SECURITY.BV.ADT.group.1" label="Current time method invocation">
                     <param defaultValue="true" id="SECURITY.BV.ADT.CHECK_CURRENT_MILLIS" inputType="checkbox" label="Flag 'System.currentTimeMillis()' invocations."/>
                  </group>
                  <param defaultValue="" id="SECURITY.BV.ADT.SAFE_LIST" inputType="stringList" label="Classes to be ignored (fully qualified name, &quot;java.sql.Date&quot; instead of &quot;Date&quot; for example.)" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.AUG" header="Inspect usage of 'getName()' from 'java.lang.Class' object." id="AUG" scope="LINE" severity="5" since="6.0">
               <messages>
                  <msg index="1" value="Inspect usage of &quot;Class.getName()&quot; to ensure it is not used to compare classes."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.BV.AUG.IGNORE_LOGGER" name="IGNORE_LOGGER" value="Ignore calls passed to logging methods"/>
                  <oldparam id="SECURITY.BV.AUG.IGNORE_PRINT" name="IGNORE_PRINT" value="Ignore calls passed to &quot;print&quot; methods"/>
                  <oldparam id="SECURITY.BV.AUG.IGNORE_THROW" name="IGNORE_THROW" value="Ignore calls passed to throw statements"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="false" id="SECURITY.BV.AUG.IGNORE_LOGGER" inputType="checkbox" label="Ignore calls passed to logging methods"/>
                  <param defaultValue="false" id="SECURITY.BV.AUG.IGNORE_PRINT" inputType="checkbox" label="Ignore calls passed to &quot;print&quot; methods"/>
                  <param defaultValue="false" id="SECURITY.BV.AUG.IGNORE_THROW" inputType="checkbox" label="Ignore calls passed to throw statements"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.PCFM" header="Wrap &quot;privileged&quot; method invocations in &quot;final&quot; methods." id="PCFM" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Method ''{0}'' calls ''{1}'' and should be declared &quot;final&quot;."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.BV.PCFM.CHECKED_METHODS" name="CHECKED_METHODS" value="Check the following method invocations:"/>
                  <oldparam id="SECURITY.BV.PCFM.TYPE" name="TYPE" value="Type (regular expression)"/>
                  <oldparam id="SECURITY.BV.PCFM.METHOD" name="METHOD" value="Method name (regular expression)"/>
               </oldparameters>
               <parameters>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="SECURITY.BV.PCFM.CHECKED_METHODS" label="Check the following method invocations:" reader="SATable">
                     <columns>
                        <column columnType="text" editable="true" id="SECURITY__BV__PCFM__CHECKED_METHODS__COLUMN1" label="Type (regular expression)" required="true"/>
                        <column columnType="text" editable="true" id="SECURITY__BV__PCFM__CHECKED_METHODS__COLUMN2" label="Method name (regular expression)" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="SECURITY__BV__PCFM__CHECKED_METHODS__COLUMN1" value="^java\.security\.AccessController$"/>
                           <column refColumnId="SECURITY__BV__PCFM__CHECKED_METHODS__COLUMN2" value="^doPrivileged$"/>
                        </row>
                        <row id="2">
                           <column refColumnId="SECURITY__BV__PCFM__CHECKED_METHODS__COLUMN1" value="^java\.lang\.SecurityManager$"/>
                           <column refColumnId="SECURITY__BV__PCFM__CHECKED_METHODS__COLUMN2" value=".*"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.PCPM" header="Wrap &quot;privileged&quot; method invocations in &quot;private&quot; methods." id="PCPM" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Method ''{0}'' calls ''{1}'' and should be declared &quot;private&quot;."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.BV.PCPM.CHECKED_METHODS" name="CHECKED_METHODS" value="Check the following method invocations:"/>
                  <oldparam id="SECURITY.BV.PCPM.TYPE" name="TYPE" value="Type (regular expression)"/>
                  <oldparam id="SECURITY.BV.PCPM.METHOD" name="METHOD" value="Method name (regular expression)"/>
               </oldparameters>
               <parameters>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="SECURITY.BV.PCPM.CHECKED_METHODS" label="Check the following method invocations:" reader="SATable">
                     <columns>
                        <column columnType="text" editable="true" id="SECURITY__BV__PCPM__CHECKED_METHODS__COLUMN1" label="Type (regular expression)" required="true"/>
                        <column columnType="text" editable="true" id="SECURITY__BV__PCPM__CHECKED_METHODS__COLUMN2" label="Method name (regular expression)" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="SECURITY__BV__PCPM__CHECKED_METHODS__COLUMN1" value="^java\.security\.AccessController$"/>
                           <column refColumnId="SECURITY__BV__PCPM__CHECKED_METHODS__COLUMN2" value="^doPrivileged$"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.PDLC" header="Avoid using dynamically loaded classes in &quot;privileged&quot; code blocks." id="PDLC" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Method ''{0}'' may dynamically load an untrusted class."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.BV.PDLC.CHECK_PA" name="CHECK_PA" value="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                  <oldparam id="SECURITY.BV.PDLC.CHECK_PEA" name="CHECK_PEA" value="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               </references>
               <parameters>
                  <param defaultValue="true" id="SECURITY.BV.PDLC.CHECK_PA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                  <param defaultValue="true" id="SECURITY.BV.PDLC.CHECK_PEA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.SYSP" header="Do not access or set System properties." id="SYSP" scope="LINE" severity="2" since="6.0">
               <messages>
                  <msg index="1" value="{0} the System property &quot;{1}&quot;."/>
                  <msg index="2" value="{0} a System property."/>
                  <msg index="3" value="{0} the System properties."/>
               </messages>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/15.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.ENFL" header="Ensure all sensitive method invocations are logged" id="ENFL" scope="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="''{0}'' is invoked without being logged in the previous statement."/>
                  <msg index="2" value="''{0}'' is invoked without being logged in the next statement."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.BV.ENFL.LOG_TAG" name="LOG_TAG" value="Loggers"/>
                  <oldparam id="SECURITY.BV.ENFL.PRE_LOG_METHODS" name="PRE_LOG_METHODS" value="Method invocations that need logging in previous statement"/>
                  <oldparam id="SECURITY.BV.ENFL.LOG_METHOD_EXPRESSIONS" name="LOG_METHOD_EXPRESSIONS" value="Logging method name in regular expression"/>
                  <oldparam id="SECURITY.BV.ENFL.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                  <oldparam id="SECURITY.BV.ENFL.POST_LOG_TAG" name="POST_LOG_TAG" value="Next statement"/>
                  <oldparam id="SECURITY.BV.ENFL.METHOD" name="METHOD" value="Method"/>
                  <oldparam id="SECURITY.BV.ENFL.PRE_LOG_TAG" name="PRE_LOG_TAG" value="Previous statement"/>
                  <oldparam id="SECURITY.BV.ENFL.POST_LOG_METHODS" name="POST_LOG_METHODS" value="Method invocations that need logging in next statement"/>
                  <oldparam id="SECURITY.BV.ENFL.TYPE" name="TYPE" value="Type"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               </references>
               <parameters>
                  <group collapsible="false" id="SECURITY.BV.ENFL.tab.PRE_LOG_TAG" label="Previous statement">
                     <!--param id="SECURITY.BV.ENFL.PRE_LOG_METHODS" inputType="bigtext" defaultValue="true;javax.security.auth.login.LoginContext;false;login;false;true;javax.security.auth.Subject;false;doAs;false;true;javax.security.auth.Subject;false;doAsPrivileged;false" label="Method invocations that need logging in previous statement"/-->
                     <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="SECURITY.BV.ENFL.PRE_LOG_METHODS" label="Method invocations that need logging in previous statement" reader="SATable">
                        <columns>
                           <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" label="Type" required="true"/>
                           <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" label="Method" required="true"/>
                        </columns>
                        <predefinedRows>
                           <row id="1">
                              <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" value="javax.security.auth.login.LoginContext"/>
                              <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" value="login"/>
                           </row>
                           <row id="2">
                              <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" value="javax.security.auth.Subject"/>
                              <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" value="doAs"/>
                           </row>
                           <row id="3">
                              <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" value="javax.security.auth.Subject"/>
                              <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" value="doAsPrivileged"/>
                           </row>
                        </predefinedRows>
                     </complexParamTable>
                  </group>
                  <group collapsible="false" id="SECURITY.BV.ENFL.tab.POST_LOG_TAG" label="Next statement">
                     <!--param id="SECURITY.BV.ENFL.POST_LOG_METHODS" inputType="bigtext" defaultValue="true;javax.security.auth.login.LoginContext;false;logout;false" label="Method invocations that need logging in next statement"/-->
                     <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="SECURITY.BV.ENFL.POST_LOG_METHODS" label="Method invocations that need logging in next statement" reader="SATable">
                        <columns>
                           <column columnType="text" defaultValue="unknown" editable="false" id="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN1" label="Type" required="true"/>
                           <column columnType="text" defaultValue="unknown" editable="false" id="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN2" label="Method" required="true"/>
                        </columns>
                        <predefinedRows>
                           <row id="1">
                              <column refColumnId="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN1" value="javax.security.auth.login.LoginContext"/>
                              <column refColumnId="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN2" value="logout"/>
                           </row>
                        </predefinedRows>
                     </complexParamTable>
                  </group>
                  <group collapsible="false" id="SECURITY.BV.ENFL.tab.LOG_TAG" label="Loggers">
                     <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="SECURITY.BV.ENFL.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                     <param defaultValue="^log$" id="SECURITY.BV.ENFL.LOG_METHOD_EXPRESSIONS" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                  </group>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.ACL" header="Do not access the class loader in a web component." id="ACL" scope="LINE" severity="3" since="7.5">
               <messages>
                  <msg index="1" value="Call to ''{0}'' in a web component."/>
                  <msg index="2" value="Method ''{0}'' indirectly calls &quot;getClassLoader()&quot; in a web component."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.BV.ACL.DEPTH" name="DEPTH" value="Maximum depth to look for &quot;getClassLoader()&quot; calls"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="2" id="SECURITY.BV.ACL.DEPTH" inputType="integer" label="Maximum depth to look for &quot;getClassLoader()&quot; calls" max="5" min="1"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.CQRO" header="Use &quot;read-only&quot; AccessMode for Castor queries" id="CQRO" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Query ''{0}'' calls &quot;execute()&quot; with no AccessMode."/>
                  <msg index="2" value="Query ''{0}'' calls &quot;execute()&quot; with AccessMode ''{1}''."/>
               </messages>
            </rule>
         </category>
         <category description="Deadlocks and Race Conditions" name="DRC">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.DRC.THR" header="Do not use threads in web components." id="THR" scope="LINE" severity="3" since="7.5">
               <messages>
                  <msg index="1" value="Thread created in a web component."/>
                  <msg index="2" value="Method ''{0}'' indirectly creates Thread in a web component."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.DRC.THR.DEPTH" name="DEPTH" value="Maximum depth to look for Thread usage"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/383.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="2" id="SECURITY.DRC.THR.DEPTH" inputType="integer" label="Maximum depth to look for Thread usage" max="5" min="1"/>
               </parameters>
            </rule>
         </category>
         <category description="Erratic Application Behavior" name="EAB">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.ACWC" header="Avoid calling specified methods from web components and EJBs" id="ACWC" scope="LINE" severity="4" since="8.4">
               <messages>
                  <msg index="1" value="Method ''{0}'' called."/>
                  <msg index="2" value="Method ''{0}'' called indirectly from ''{1}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.EAB.ACWC.WEB_COMPONENT" name="WEB_COMPONENT" value="Web components"/>
                  <oldparam id="SECURITY.EAB.ACWC.CHECK_WEB_COMPONENT" name="CHECK_WEB_COMPONENT" value="Check web components"/>
                  <oldparam id="SECURITY.EAB.ACWC.WEB_COMPONENT_TABLE" name="WEB_COMPONENT_TABLE" value="Check the following:"/>
                  <oldparam id="SECURITY.EAB.ACWC.EJB" name="EJB" value="EJBs"/>
                  <oldparam id="SECURITY.EAB.ACWC.CHECK_EJB" name="CHECK_EJB" value="Check EJBs"/>
                  <oldparam id="SECURITY.EAB.ACWC.EJB_TABLE" name="EJB_TABLE" value="Check the following:"/>
                  <oldparam id="SECURITY.EAB.ACWC.PACKAGE" name="PACKAGE" value="Package"/>
                  <oldparam id="SECURITY.EAB.ACWC.TYPE" name="TYPE" value="Type to check"/>
                  <oldparam id="SECURITY.EAB.ACWC.METHOD" name="METHOD" value="Method to flag (Type#Name)"/>
                  <oldparam id="SECURITY.EAB.ACWC.DEPTH" name="DEPTH" value="Maximum depth to check [1-5]"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="2" id="SECURITY.EAB.ACWC.DEPTH" inputType="integer" label="Maximum depth to check [1-5]" max="5" min="1"/>
                  <group collapsible="false" id="SECURITY.EAB.ACWC.tab.WEB_COMPONENT" label="Web components">
                     <param defaultValue="true" id="SECURITY.EAB.ACWC.CHECK_WEB_COMPONENT" inputType="checkbox" label="Check web components">
                        <!--param id="SECURITY.EAB.ACWC.WEB_COMPONENT_TABLE" inputType="bigtext" defaultValue="" label="Check the following:"/-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="SECURITY.EAB.ACWC.WEB_COMPONENT_TABLE" label="Check the following:" reader="SATable">
                           <columns>
                              <column columnType="text" editable="true" id="SECURITY__EAB__ACWC__WEB_COMPONENT_TABLE__COLUMN1" label="Package" required="true" textSize="smallPlus"/>
                              <column columnType="text" editable="true" id="SECURITY__EAB__ACWC__WEB_COMPONENT_TABLE__COLUMN2" label="Type to check" required="true" textSize="smallPlus"/>
                              <column columnType="text" editable="true" id="SECURITY__EAB__ACWC__WEB_COMPONENT_TABLE__COLUMN3" label="Method to flag (Type#Name)" required="true" textSize="smallPlus"/>
                           </columns>
                        </complexParamTable>
                     </param>
                  </group>
                  <group collapsible="false" id="SECURITY.EAB.ACWC.tab.EJB" label="EJBs">
                     <param defaultValue="true" id="SECURITY.EAB.ACWC.CHECK_EJB" inputType="checkbox" label="Check EJBs">
                        <!--param id="SECURITY.EAB.ACWC.EJB_TABLE" inputType="bigtext" defaultValue="" label="Check the following:"/-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="SECURITY.EAB.ACWC.EJB_TABLE" label="Check the following:" reader="SATable">
                           <columns>
                              <column columnType="text" editable="true" id="SECURITY__EAB__ACWC__EJB_TABLE__COLUMN1" label="Method to flag (Type#Name)" required="true" textSize="large"/>
                           </columns>
                        </complexParamTable>
                     </param>
                  </group>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.CPCL" header="Enforce returning a defensive copy in 'clone()' methods" id="CPCL" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Field ''{0}'' is not initialized as a defensive copy."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.SPFF" header="Inspect 'static' fields which may have intended to be declared 'static final'." id="SPFF" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Field ''{0}'' may have been intended to be &quot;static final&quot;."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.EAB.SPFF.ACCESSIBILITY" name="ACCESSIBILITY" value="Check fields of accessibility"/>
                  <oldparam id="SECURITY.EAB.SPFF.PUBLIC_FIELD" name="PUBLIC_FIELD" value="public"/>
                  <oldparam id="SECURITY.EAB.SPFF.PROTECTED_FIELD" name="PROTECTED_FIELD" value="protected"/>
                  <oldparam id="SECURITY.EAB.SPFF.PACKAGE_FIELD" name="PACKAGE_FIELD" value="package-private"/>
                  <oldparam id="SECURITY.EAB.SPFF.PRIVATE_FIELD" name="PRIVATE_FIELD" value="private"/>
                  <oldparam id="SECURITY.EAB.SPFF.CHECK_SCOPE" name="CHECK_SCOPE" value="Check fields of type"/>
                  <oldparam id="SECURITY.EAB.SPFF.PRIMITIVE_CHECK" name="PRIMITIVE_CHECK" value="primitive type"/>
                  <oldparam id="SECURITY.EAB.SPFF.PRIMITIVE_WRAPPER_CHECK" name="PRIMITIVE_WRAPPER_CHECK" value="primitive wrapper type"/>
                  <oldparam id="SECURITY.EAB.SPFF.STRING_CHECK" name="STRING_CHECK" value="java.lang.String"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/500.html" name="CWE"/>
               </references>
               <parameters>
                  <group collapsible="false" id="SECURITY.EAB.SPFF.group.1" label="Check fields of accessibility">
                     <param defaultValue="true" id="SECURITY.EAB.SPFF.PUBLIC_FIELD" inputType="checkbox" label="public"/>
                     <param defaultValue="false" id="SECURITY.EAB.SPFF.PROTECTED_FIELD" inputType="checkbox" label="protected"/>
                     <param defaultValue="false" id="SECURITY.EAB.SPFF.PACKAGE_FIELD" inputType="checkbox" label="package-private"/>
                     <param defaultValue="false" id="SECURITY.EAB.SPFF.PRIVATE_FIELD" inputType="checkbox" label="private"/>
                  </group>
                  <group collapsible="false" id="SECURITY.EAB.SPFF.group.0" label="Check fields of type">
                     <param defaultValue="true" id="SECURITY.EAB.SPFF.PRIMITIVE_CHECK" inputType="checkbox" label="primitive type"/>
                     <param defaultValue="true" id="SECURITY.EAB.SPFF.PRIMITIVE_WRAPPER_CHECK" inputType="checkbox" label="primitive wrapper type"/>
                     <param defaultValue="true" id="SECURITY.EAB.SPFF.STRING_CHECK" inputType="checkbox" label="java.lang.String"/>
                  </group>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.SF" header="Do not declare &quot;static&quot; fields in web components." id="SF" scope="LINE" severity="3" since="7.5">
               <messages>
                  <msg index="1" value="&quot;static&quot; field declared in a web component: ''{0}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.EAB.SF.IGNORED_TYPES" name="IGNORED_TYPES" value="Ignore fields of the following types:"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="java.util.logging.Logger;org.apache.commons.logging.Log" id="SECURITY.EAB.SF.IGNORED_TYPES" inputType="stringList" label="Ignore fields of the following types:" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.CBA" header="Do not pass byte arrays to ObjectOutputStream in the 'writeObject()' method" id="CBA" scope="METHOD" severity="3" since="5.1">
               <messages>
                  <msg index="1" value="byte array ''{0}'' should not be passed to write(byte[]) without cloning it first."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.OROM" header="Implement 'readObject()' and 'writeObject()' for all 'Serializable' classes." id="OROM" scope="CLASS" severity="5" since="4.5">
               <messages>
                  <msg index="1" value="Serializable class ''{0}'' does not implement 'readObject()'."/>
                  <msg index="2" value="Serializable class ''{0}'' implements 'readObject()', but this method is not 'final'."/>
                  <msg index="3" value="Serializable class ''{0}'' does not implement 'writeObject()'."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.EAB.OROM.MUST_BE_FINAL" name="MUST_BE_FINAL" value="Make sure the 'readObject()' method is 'final'."/>
                  <oldparam id="SECURITY.EAB.OROM.CHECK_FOR_READ" name="CHECK_FOR_READ" value="Check that the 'readObject()' method is implemented in all serializable classes."/>
                  <oldparam id="SECURITY.EAB.OROM.CHECK_FOR_WRITE" name="CHECK_FOR_WRITE" value="Check that the 'writeObject()' method is implemented in all serializable classes."/>
                  <oldparam id="SECURITY.EAB.OROM.IGNORE_TYPES" name="IGNORE_TYPES" value="Ignore types extending or implementing the following types (Specify fully qualified names):"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="SECURITY.EAB.OROM.CHECK_FOR_READ" inputType="checkbox" label="Check that the 'readObject()' method is implemented in all serializable classes.">
                     <param defaultValue="false" id="SECURITY.EAB.OROM.MUST_BE_FINAL" inputType="checkbox" label="Make sure the 'readObject()' method is 'final'."/>
                  </param>
                  <param defaultValue="false" id="SECURITY.EAB.OROM.CHECK_FOR_WRITE" inputType="checkbox" label="Check that the 'writeObject()' method is implemented in all serializable classes."/>
                  <param defaultValue="" id="SECURITY.EAB.OROM.IGNORE_TYPES" inputType="stringList" label="Ignore types extending or implementing the following types (Specify fully qualified names):" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.MPT" header="Do not pass user-given mutable objects directly to certain types" id="MPT" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="New instance of type ''{0}'' is passed mutable parameter ''{1}'' directly."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.EAB.MPT.CHECK_PROTECTED" name="CHECK_PROTECTED" value="Check &quot;protected&quot; methods"/>
                  <oldparam id="SECURITY.EAB.MPT.CHECK_PUBLIC" name="CHECK_PUBLIC" value="Check &quot;public&quot; methods"/>
                  <oldparam id="SECURITY.EAB.MPT.CHECK_PACKAGE" name="CHECK_PACKAGE" value="Check &quot;package-private&quot; methods"/>
                  <oldparam id="SECURITY.EAB.MPT.CHECK_ARRAYS" name="CHECK_ARRAYS" value="Check arrays"/>
                  <oldparam id="SECURITY.EAB.MPT.CHECK_MUTABLE_TYPES" name="CHECK_MUTABLE_TYPES" value="Check mutable types"/>
                  <oldparam id="SECURITY.EAB.MPT.CHECKED_CONSTRUCTORS" name="CHECKED_CONSTRUCTORS" value="Check for values passed to new instances of the following types:"/>
                  <oldparam id="SECURITY.EAB.MPT.TYPES_TO_CHECK" name="TYPES_TO_CHECK" value="Types to check"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="SECURITY.EAB.MPT.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods"/>
                  <param defaultValue="false" id="SECURITY.EAB.MPT.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods"/>
                  <param defaultValue="false" id="SECURITY.EAB.MPT.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; methods"/>
                  <group collapsible="false" id="SECURITY.EAB.MPT.group.0" label="Types to check">
                     <param defaultValue="true" id="SECURITY.EAB.MPT.CHECK_ARRAYS" inputType="checkbox" label="Check arrays"/>
                     <param defaultValue="true" id="SECURITY.EAB.MPT.CHECK_MUTABLE_TYPES" inputType="checkbox" label="Check mutable types"/>
                  </group>
                  <param defaultValue="java\.security\.PrivilegedAction;java\.security\.PrivilegedExceptionAction" id="SECURITY.EAB.MPT.CHECKED_CONSTRUCTORS" inputType="stringList" label="Check for values passed to new instances of the following types:" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.SMO" header="Do not store user-given mutable objects directly into variables" id="SMO" scope="LINE" severity="3" since="8.0">
               <messages>
                  <msg index="1" value="This assignment may store the original parameter ''{0}'' rather than a copy of the parameter into the field ''{1}''."/>
                  <msg index="2" value="This assignment may store the original parameter ''{0}'' rather than a copy of the parameter into the variable ''{1}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.EAB.SMO.CHECK_PROTECTED" name="CHECK_PROTECTED" value="Check &quot;protected&quot; methods"/>
                  <oldparam id="SECURITY.EAB.SMO.CHECK_PUBLIC" name="CHECK_PUBLIC" value="Check &quot;public&quot; methods"/>
                  <oldparam id="SECURITY.EAB.SMO.CHECK_PACKAGE" name="CHECK_PACKAGE" value="Check &quot;package-private&quot; methods"/>
                  <oldparam id="SECURITY.EAB.SMO.CHECK_ARRAYS" name="CHECK_ARRAYS" value="Check arrays"/>
                  <oldparam id="SECURITY.EAB.SMO.CHECK_MUTABLE_TYPES" name="CHECK_MUTABLE_TYPES" value="Check mutable types"/>
                  <oldparam id="SECURITY.EAB.SMO.TYPES_TO_CHECK" name="TYPES_TO_CHECK" value="Types to check"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="SECURITY.EAB.SMO.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods"/>
                  <param defaultValue="false" id="SECURITY.EAB.SMO.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods"/>
                  <param defaultValue="false" id="SECURITY.EAB.SMO.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; methods"/>
                  <group collapsible="false" id="SECURITY.EAB.SMO.group.0" label="Types to check">
                     <param defaultValue="true" id="SECURITY.EAB.SMO.CHECK_ARRAYS" inputType="checkbox" label="Check arrays"/>
                     <param defaultValue="true" id="SECURITY.EAB.SMO.CHECK_MUTABLE_TYPES" inputType="checkbox" label="Check mutable types"/>
                  </group>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.LDP" header="Limit the number of &quot;AccessController.doPrivileged&quot; calls per class." id="LDP" scope="LINE" severity="4" since="8.4">
               <messages>
                  <msg index="1" value="Class ''{0}'' has greater than ''{1}'' calls to &quot;AccessController.doPrivileged&quot;."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.EAB.LDP.MAX_CALLS" name="MAX_CALLS" value="Limit the number of 'AccessController.doPrivileged' calls per class to"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/250.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="3" id="SECURITY.EAB.LDP.MAX_CALLS" inputType="integer" label="Limit the number of 'AccessController.doPrivileged' calls per class to" min="0"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.PCL" header="Limit the number of lines in &quot;privileged&quot; code blocks." id="PCL" scope="LINE" severity="4" since="8.4">
               <messages>
                  <msg index="1" value="&quot;run()&quot; method of class ''{0}'' has greater than ''{1}'' lines."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.EAB.PCL.CHECK_PA" name="CHECK_PA" value="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                  <oldparam id="SECURITY.EAB.PCL.CHECK_PEA" name="CHECK_PEA" value="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                  <oldparam id="SECURITY.EAB.PCL.NUMBER_LINES" name="NUMBER_LINES" value="Limit number of lines in &quot;run()&quot; method to"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/250.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="true" id="SECURITY.EAB.PCL.CHECK_PA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                  <param defaultValue="true" id="SECURITY.EAB.PCL.CHECK_PEA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                  <param defaultValue="10" id="SECURITY.EAB.PCL.NUMBER_LINES" inputType="integer" label="Limit number of lines in &quot;run()&quot; method to" min="1"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.AWT" header="Do not use AWT classes in Web components." id="AWT" scope="LINE" severity="1" since="7.5">
               <messages>
                  <msg index="1" value="Call to AWT method ''{0}'' in a web component."/>
                  <msg index="2" value="Method ''{0}'' indirectly calls an AWT method in a web component."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.EAB.AWT.DEPTH" name="DEPTH" value="Maximum depth to look for calls to AWT methods"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="2" id="SECURITY.EAB.AWT.DEPTH" inputType="integer" label="Maximum depth to look for calls to AWT methods" max="5" min="1"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.JVM" header="Do not stop the JVM in a web component." id="JVM" scope="LINE" severity="1" since="7.5">
               <messages>
                  <msg index="1" value="Call to ''System.{0}()'' in a web component."/>
                  <msg index="2" value="Method ''{0}'' indirectly calls &quot;System.exit()&quot; in a web component."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.EAB.JVM.DEPTH" name="DEPTH" value="Maximum depth to look for &quot;System.exit()&quot; calls"/>
               </oldparameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/382.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="2" id="SECURITY.EAB.JVM.DEPTH" inputType="integer" label="Maximum depth to look for &quot;System.exit()&quot; calls" max="5" min="1"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.SIS" header="Do not change the input streams of 'java.lang.System' in a web component." id="SIS" scope="LINE" severity="3" since="7.5">
               <messages>
                  <msg index="1" value="Call to ''System.{0}()'' in a web component."/>
                  <msg index="2" value="Method ''{0}'' indirectly calls &quot;System.setIn()&quot; in a web component."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.EAB.SIS.DEPTH" name="DEPTH" value="Maximum depth to look for &quot;System.setIn()&quot; calls"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="2" id="SECURITY.EAB.SIS.DEPTH" inputType="integer" label="Maximum depth to look for &quot;System.setIn()&quot; calls" max="5" min="1"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.CMP" header="Do not compare Class objects by name." id="CMP" scope="LINE" severity="1" since="4.5">
               <messages>
                  <msg index="1" value="Class object comparison by name."/>
               </messages>
            </rule>
         </category>
         <category description="Exposing Sensitive Data" name="ESD">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.PLC" header="Avoid storing sensitive data in plaintext in a cookie" id="PLC" scope="LINE" severity="1" since="9.2">
               <messages>
                  <msg index="1" value="Do not store important to safety data in cookie."/>
                  <msg index="2" value="Do not store sensitive data in plaintext in cookie."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.ESD.PLC.TABLE_HEADER" name="TABLE_HEADER" value="List of RegExp to check key in cookie"/>
                  <oldparam id="SECURITY.ESD.PLC.CHECK_VALUES_HEADER" name="CHECK_VALUES_HEADER" value="Check values"/>
                  <oldparam id="SECURITY.ESD.PLC.NAME_HEADER" name="NAME_HEADER" value="Key in cookie (RegExp)"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010"/>
                  <reference href="http://cwe.mitre.org/data/definitions/315.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE"/>
               </references>
               <parameters>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="SECURITY.ESD.PLC.TABLE_HEADER" label="List of RegExp to check key in cookie" reader="SATable">
                     <columns>
                        <column columnType="checkbox" defaultValue="true" editable="true" id="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" label="Check values" required="true"/>
                        <column columnType="text" editable="true" id="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" label="Key in cookie (RegExp)" required="true" textSize="large"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" value="false"/>
                           <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" value=".*(pass|role).*"/>
                        </row>
                        <row id="2">
                           <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" value="true"/>
                           <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" value=".*(user|login|account).*"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.SIO" header="Avoid calling print methods of 'System.err' or 'System.out'" id="SIO" scope="LINE" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="Make sure ''{0}'' is not a leftover debug statement."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.ESD.SIO.METHOD_SKIP_LIST" name="METHOD_SKIP_LIST" value="Methods to be excluded from this rule"/>
               </oldparameters>
               <references>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010"/>
               </references>
               <parameters>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="SECURITY.ESD.SIO.SCANNED_CLASS_TABLE" label="Include classes" reader="SATable">
                     <columns>
                        <column columnType="checkbox" defaultValue="true" editable="true" id="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN1" label="Base class/ interface" required="true"/>
                        <column columnType="text" editable="true" id="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN2" label="Class/interface name (regular expression)" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN1" value="true"/>
                           <column refColumnId="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN2" value=".*"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
                  <param defaultValue="main;show;verbose" id="SECURITY.ESD.SIO.METHOD_SKIP_LIST" inputType="stringList" label="Exclude methods" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.CSD" header="Clear sensitive data after use." id="CSD" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="''{0}'' is assigned sensitive data but never cleared."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.RA" header="Avoid methods that might expose internal representations by returning arrays or other mutable fields" id="RA" scope="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="Exposing the internal representation of ''{0}'' through the array ''{1}''."/>
                  <msg index="2" value="Exposing the internal representation of ''{0}'' through the mutable field ''{1}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.ESD.RA.CHECK_ARRAYS" name="CHECK_ARRAYS" value="Check arrays"/>
                  <oldparam id="SECURITY.ESD.RA.CHECK_MUTABLE_TYPES" name="CHECK_MUTABLE_TYPES" value="Check mutable types"/>
               </oldparameters>
               <references>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A4" name="OWASP-2010"/>
                  <reference href="http://cwe.mitre.org/data/definitions/495.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="true" id="SECURITY.ESD.RA.CHECK_ARRAYS" inputType="checkbox" label="Check arrays"/>
                  <param defaultValue="false" id="SECURITY.ESD.RA.CHECK_MUTABLE_TYPES" inputType="checkbox" label="Check mutable types"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.SIF" header="Inspect instance fields of serializable objects to make sure they will not expose sensitive information" id="SIF" scope="LINE" severity="1" since="6.0">
               <messages>
                  <msg index="1" value="Inspect field ''{0}'' to ensure it will not expose sensitive data."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.ESD.SIF.IGNORE_FINAL" name="IGNORE_FINAL" value="Ignore &quot;final&quot; fields"/>
               </oldparameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/499.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="false" id="SECURITY.ESD.SIF.IGNORE_FINAL" inputType="checkbox" label="Ignore &quot;final&quot; fields"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.SDM" header="Store sensitive data in mutable objects." id="SDM" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="''{0}'' returns a String, should use &quot;getPassword()&quot; instead."/>
                  <msg index="2" value="String initialized with password here, should leave as &quot;char[]&quot;."/>
                  <msg index="3" value="String initialized with password ''{0}'' here, should leave as &quot;char[]&quot;."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.ESD.SDM.CHECK_JPASSWORDFIELD_STRING" name="CHECK_JPASSWORDFIELD_STRING" value="Check JPasswordField methods which return a String value"/>
                  <oldparam id="SECURITY.ESD.SDM.CHECK_STRING_INITIALIZE" name="CHECK_STRING_INITIALIZE" value="Check Strings initialized with a &quot;char[]&quot; password"/>
                  <oldparam id="SECURITY.ESD.SDM.CHECKED_METHODS" name="CHECKED_METHODS" value="Methods returning &quot;char[]&quot; password:"/>
                  <oldparam id="SECURITY.ESD.SDM.TYPE" name="TYPE" value="Type (qualified name)"/>
                  <oldparam id="SECURITY.ESD.SDM.METHOD" name="METHOD" value="Method (regular expression)"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="SECURITY.ESD.SDM.CHECK_JPASSWORDFIELD_STRING" inputType="checkbox" label="Check JPasswordField methods which return a String value"/>
                  <param defaultValue="true" id="SECURITY.ESD.SDM.CHECK_STRING_INITIALIZE" inputType="checkbox" label="Check Strings initialized with a &quot;char[]&quot; password">
                     <!-- param id="SECURITY.ESD.SDM.CHECKED_METHODS" inputType="bigtext" defaultValue="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;table version=&quot;1.0&quot;&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.io.Console&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;^readPassword$&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;javax.swing.JPasswordField&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;^getPassword$&quot;/&gt;&lt;/row&gt;&lt;/table&gt;" label="Methods returning &quot;char[]&quot; password:"/-->
                     <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="SECURITY.ESD.SDM.CHECKED_METHODS" label="Methods returning &quot;char[]&quot; password:" reader="SATable">
                        <columns>
                           <column columnType="text" editable="true" id="SECURITY__ESD__SDM__CHECKED_METHODS__COLUMN1" label="Type (qualified name)" required="true"/>
                           <column columnType="text" editable="true" id="SECURITY__ESD__SDM__CHECKED_METHODS__COLUMN2" label="Method (regular expression)" required="true"/>
                        </columns>
                        <predefinedRows>
                           <row id="1">
                              <column refColumnId="SECURITY__ESD__SDM__CHECKED_METHODS__COLUMN1" value="java.io.Console"/>
                              <column refColumnId="SECURITY__ESD__SDM__CHECKED_METHODS__COLUMN2" value="^readPassword$"/>
                           </row>
                           <row id="2">
                              <column refColumnId="SECURITY__ESD__SDM__CHECKED_METHODS__COLUMN1" value="javax.swing.JPasswordField"/>
                              <column refColumnId="SECURITY__ESD__SDM__CHECKED_METHODS__COLUMN2" value="^getPassword$"/>
                           </row>
                        </predefinedRows>
                     </complexParamTable>
                  </param>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.TSPF" header="Avoid &quot;transient&quot; fields in serialPersistentFields array." id="TSPF" scope="LINE" severity="2" since="8.4">
               <messages>
                  <msg index="1" value="Referenced field ''{0}'' of serialPersistentFields array is &quot;transient&quot;."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.PEO" header="Do not pass exception messages into output in order to prevent the application from leaking sensitive information" id="PEO" scope="LINE" severity="1" since="6.0">
               <messages>
                  <msg index="1" value="Print method ''{0}()'' is not allowed in a &quot;catch&quot; block."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.ESD.PEO.PRINT_METHOD_EXPRESSION" name="PRINT_METHOD_EXPRESSION" value="Print methods (Specify names in regular expressions)"/>
                  <oldparam id="SECURITY.ESD.PEO.EXCEPTIONS" name="EXCEPTIONS" value="Exceptions (Specify types and method names in regular expressions)"/>
                  <oldparam id="SECURITY.ESD.PEO.TYPE" name="TYPE" value="Type"/>
                  <oldparam id="SECURITY.ESD.PEO.METHOD" name="METHOD" value="Method"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="" name="OWASP-2007"/>
                  <reference href="http://cwe.mitre.org/data/definitions/209.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/497.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue=".*print.*;.*Print.*" id="SECURITY.ESD.PEO.PRINT_METHOD_EXPRESSION" inputType="stringList" label="Print methods (Specify names in regular expressions)" prevType="StringList"/>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="SECURITY.ESD.PEO.EXCEPTIONS" label="Exceptions (Specify types and method names in regular expressions)" reader="SATable">
                     <columns>
                        <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" label="Type" required="true"/>
                        <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" label="Method" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" value="^java\.util\.logging\.Logger$"/>
                           <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" value="^.*$"/>
                        </row>
                        <row id="2">
                           <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" value="^org\.apache\.log4j\.Logger$"/>
                           <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" value="^.*$"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.SPI" header="Do not interrogate or modify security policy information in a web component" id="SPI" scope="LINE" severity="1" since="7.5">
               <messages>
                  <msg index="1" value="Call to ''Policy.{0}()'' in a web component."/>
                  <msg index="2" value="Method ''{0}'' indirectly calls &quot;getPolicy()&quot; or &quot;setPolicy()&quot; in a web component."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.ESD.SPI.DEPTH" name="DEPTH" value="Maximum depth to look for Policy usage"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               </references>
               <parameters>
                  <param defaultValue="2" id="SECURITY.ESD.SPI.DEPTH" inputType="integer" label="Maximum depth to look for Policy usage" max="5" min="1"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.ACW" header="Avoid writing to Consoles" id="ACW" scope="LINE" severity="5" since="9.0">
               <messages>
                  <msg index="1" value="Method ''{0}'' writes to Console ''{1}''."/>
                  <msg index="2" value="Method ''{0}'' writes to Console."/>
               </messages>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/497.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.SNFD" header="Do not expose data with a 'FileNotFound' exception" id="SNFD" scope="LINE" severity="3" since="9.0">
               <messages>
                  <msg index="1" value="Method call to ''{0}'' may expose data with a 'FileNotFound' exception."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.CONSEN" header="Do not log confidential or sensitive information" id="CONSEN" scope="LINE" severity="1" since="9.0">
               <messages>
                  <msg index="1" value="''{0}'' should not be used by a logger, it can expose confidential info."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.ESD.CONSEN.SUSPICIOUS_WORDS" name="SUSPICIOUS_WORDS" value="Regular expressions representing sensive data:"/>
                  <oldparam id="SECURITY.ESD.CONSEN.LOG_METHOD_EXPRESSIONS" name="LOG_METHOD_EXPRESSIONS" value="Logging method name in regular expression"/>
                  <oldparam id="SECURITY.ESD.CONSEN.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/533.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/534.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue=".*ssn.*@delim@.*pass.*" id="SECURITY.ESD.CONSEN.SUSPICIOUS_WORDS" inputType="stringList" label="Regular expressions representing sensive data:" prevType="StringList"/>
                  <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="SECURITY.ESD.CONSEN.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                  <param defaultValue=".*log.*" id="SECURITY.ESD.CONSEN.LOG_METHOD_EXPRESSIONS" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.TFP" header="Declare &quot;transient&quot; fields &quot;private&quot;." id="TFP" scope="LINE" severity="1" since="9.0">
               <messages>
                  <msg index="1" value="&quot;transient&quot; field ''{0}'' should be declared private"/>
               </messages>
            </rule>
         </category>
         <category description="Input-Based Attacks" name="IBA">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.SC" header="Disable LDAP deserialization" id="SC" scope="LINE" severity="2" since="10.4.2">
               <messages>
                  <msg index="1" value="The SearchControls object allows deserialization"/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.EDPM" header="Encapsulate constructor arguments with a validation function" id="EDPM" scope="METHOD" severity="2" since="10.2">
               <messages>
                  <msg index="1" value="The constructor for &quot;{0}&quot; returns dangerous data and its arguments should be encapsulated by a validation method."/>
               </messages>
               <parameters>
                  <param defaultValue="" id="SECURITY.IBA.EDPM.DANGEROUS_TYPES_LIST" inputType="stringList" label="User-defined types to be inspected (in regular expressions)\n[qualified name of declaring type]"/>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="SECURITY.IBA.EDPM.ENCAPSULATE_METHOD_LIST" label="Validation method names (in regular expressions)\n[qualified name of declaring type and method name]" reader="SATable">
                     <columns>
                        <column columnType="text" editable="true" id="SECURITY__IBA__EDPM__ENCAPSULATE_METHOD_LIST__COLUMN1" label="Additional dangerous types" required="true"/>
                        <column columnType="text" editable="true" id="SECURITY__IBA__EDPM__ENCAPSULATE_METHOD_LIST__COLUMN2" label="Validation Methods" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="SECURITY__IBA__EDPM__ENCAPSULATE_METHOD_LIST__COLUMN1" value=".*"/>
                           <column refColumnId="SECURITY__IBA__EDPM__ENCAPSULATE_METHOD_LIST__COLUMN2" value="validate.*"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </parameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/15.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.XPIJ" header="Avoid XPath injection when evaluating XPath queries" id="XPIJ" scope="LINE" severity="1" since="8.4">
               <messages>
                  <msg index="1" value="Avoid using variable ''{0}'' in XPath query."/>
                  <msg index="2" value="'XPathVariableResolver' is not set in XPath variable ''{0}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.IBA.XPIJ.CHECK_VAR_RESOLVER" name="CHECK_VAR_RESOLVER" value="Check if 'XPathVariableResolver' is not set in XPath objects"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="SECURITY.IBA.XPIJ.CHECK_VAR_RESOLVER" inputType="checkbox" label="Check if 'XPathVariableResolver' is not set in XPath objects"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.AUSS" header="Avoid using &quot;SELECT *&quot; in SQL queries." id="AUSS" scope="LINE" severity="1" since="8.0">
               <messages>
                  <msg index="1" value="This String contains &quot;SELECT *&quot;, make sure it is not being used in a database query."/>
               </messages>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/566.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.RUIM" header="Ensure proper session expiration" id="RUIM" scope="LINE" severity="1" since="10.4.2">
               <messages>
                  <msg index="1" value="The session expiration time used in this metod call is obtained form a servlet request"/>
                  <msg index="2" value="The negative timeout value used in this metod call prevents session expiration"/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.CDBV" header="Canonicalize all data before validation." id="CDBV" scope="LINE" severity="1" since="8.0">
               <messages>
                  <msg index="1" value="The data in ''{0}'' may not have been canonicalized before being validated."/>
                  <msg index="2" value="The return value of this call to ''{0}'' may not have been canonicalized before being validated."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.IBA.CDBV.CANON_METHS" name="CANON_METHS" value="Canonicalization method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                  <oldparam id="SECURITY.IBA.CDBV.VALID_METHS" name="VALID_METHS" value="Validation method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                  <oldparam id="SECURITY.IBA.CDBV.VALID_CLASSES" name="VALID_CLASSES" value="Only check calls within the following classes\n[regular expressions for fully qualified class name]"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A1" name="OWASP-2010"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A2" name="OWASP-2010"/>
                  <reference href="http://cwe.mitre.org/data/definitions/79.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue=".*#canonicalize" description="Canonicalization method names (in regular expressions) [qualified name of declaring type#method name]" id="SECURITY.IBA.CDBV.CANON_METHS" inputType="stringList" label="Canonicalization method names (in regular expressions)" prevType="StringList"/>
                  <param defaultValue=".*#^validate" description="Validation method names (in regular expressions) [qualified name of declaring type#method name]" id="SECURITY.IBA.CDBV.VALID_METHS" inputType="stringList" label="Validation method names (in regular expressions)" prevType="StringList"/>
                  <param defaultValue=".*" description="Only check calls within the following classes [regular expressions for fully qualified class name]" id="SECURITY.IBA.CDBV.VALID_CLASSES" inputType="stringList" label="Only check calls within the following classes" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.NATIW" header="Use wrapper methods to secure native methods" id="NATIW" scope="LINE" severity="3" since="9.0">
               <messages>
                  <msg index="1" value="{0} should only be accessed using a wrapper method."/>
               </messages>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/111.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.VRD" header="Encapsulate all redirect and forward URLs with a validation function" id="VRD" scope="LINE" severity="2" since="9.0">
               <messages>
                  <msg index="1" value="No validation check in redirect URL."/>
                  <msg index="2" value="No validation check in forward URL."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.IBA.VRD.VALIDATE_METHODS" name="VALIDATE_METHODS" value="Validation methods (in regular expressions)\n[qualified name of declaring type#method name]"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A10" name="OWASP-2010"/>
                  <reference href="http://cwe.mitre.org/data/definitions/601.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="" description="Validation methods (in regular expressions) [qualified name of declaring type#method name]" id="SECURITY.IBA.VRD.VALIDATE_METHODS" inputType="stringList" label="Validation methods (in regular expressions)" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.AUXD" header="Avoid parsing untrusted data with XMLDecoder" id="AUXD" scope="LINE" severity="2" since="10.4.2">
               <messages>
                  <msg index="1" value="The XMLDecoder class is used."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.DXXE" header="Disable XML external entity injection." id="DXXE" scope="LINE" severity="2" since="10.4.2">
               <messages>
                  <msg index="1" value="XXE injection has not been disabled."/>
                  <msg index="2" value="XXE injection has not been disabled. Ensure your parser version allows you to configure the required options."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.ATF" header="Avoid temporary files" id="ATF" scope="LINE" severity="3" since="9.0">
               <messages>
                  <msg index="1" value="A temporary file has been created"/>
               </messages>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.UPS" header="Use 'prepareCall' or 'prepareStatement' instead of 'createStatement'" id="UPS" scope="LINe" severity="1" since="8.0">
               <messages>
                  <msg index="1" value="Consider using 'prepareCall()' or 'prepareStatement()' to prevent SQL injection vulnerabilities"/>
               </messages>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A1" name="OWASP-2010"/>
                  <reference href="http://cwe.mitre.org/data/definitions/89.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.AEAF" header="Do not extend from the Struts classes 'ActionForm' and 'DynaActionForm'." id="AEAF" scope="LINE" severity="1" since="8.0">
               <messages>
                  <msg index="1" value="Consider extending 'DynaValidatorForm' or 'DynaValidatorActionForm'"/>
                  <msg index="2" value="Consider extending 'ValidatorForm' or 'ValidatorActionForm'"/>
               </messages>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/104.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/89.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.CSVFV" header="Always call 'super.validate()' from validation methods in 'ActionForm' classes." id="CSVFV" scope="LINE" severity="1" since="8.0">
               <messages>
                  <msg index="1" value="This validation method does not call 'super.validate()'."/>
               </messages>
            </rule>
         </category>
         <category description="Unsafe Error Handling and Logging" name="UEHL">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.UEHL.LGE" header="Ensure all exceptions are either logged with a standard logger or rethrown" id="LGE" scope="LINE" severity="2" since="6.0">
               <messages>
                  <msg index="1" value="The exception is not logged in the &quot;catch&quot; clause."/>
                  <msg index="2" value="The exception is neither logged nor rethrown in the &quot;catch&quot; clause."/>
                  <msg index="3" value="The exception is neither logged nor rethrown in the &quot;catch&quot; clause. Add a comment to the clause if this is expected."/>
                  <msg index="4" value="The ''{0}'' exception is not passed to the logging method called in the &quot;catch&quot; clause."/>
                  <msg index="5" value="The information passed from the ''{0}'' exception to the logging method may be incomplete."/>
                  <msg index="6" value="The ''{0}'' exception is not rethrown in the &quot;catch&quot; block or passed to the new exception as an argument."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.UEHL.LGE.FLAG_LEVEL" name="FLAG_LEVEL" value="Catch clause should contain:"/>
                  <oldparam id="SECURITY.UEHL.LGE.FLAG_IF_NO_LOG" name="FLAG_IF_NO_LOG" value="Logging method."/>
                  <oldparam id="SECURITY.UEHL.LGE.FLAG_IF_NO_LOG_AND_THROW" name="FLAG_IF_NO_LOG_AND_THROW" value="Logging method or exception rethrow statement."/>
                  <oldparam id="SECURITY.UEHL.LGE.FLAG_IF_NO_LOG_AND_THROW_AND_COMMENT" name="FLAG_IF_NO_LOG_AND_THROW_AND_COMMENT" value="Logging method, comment or exception rethrow statement."/>
                  <oldparam id="SECURITY.UEHL.LGE.LOG_METHOD_EXPRESSION" name="LOG_METHOD_EXPRESSION" value="Logging method name in regular expression"/>
                  <oldparam id="SECURITY.UEHL.LGE.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                  <oldparam id="SECURITY.UEHL.LGE.CHECK_EXCEPT_LOGGED" name="CHECK_EXCEPT_LOGGED" value="Check that the exception is passed into the logging method call"/>
                  <oldparam id="SECURITY.UEHL.LGE.IGNORE_LIST" name="IGNORE_LIST" value="Ignore exception variables matching the following regular expression(s):"/>
                  <oldparam id="SECURITY.UEHL.LGE.LOGGERS_TAB" name="LOGGERS_TAB" value="Loggers"/>
                  <oldparam id="SECURITY.UEHL.LGE.IGNORE_LIST_TAB" name="IGNORE_LIST_TAB" value="Ignore List"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="" name="OWASP-2007"/>
                  <reference href="http://cwe.mitre.org/data/definitions/390.html" name="CWE"/>
               </references>
               <parameters>
                  <group collapsible="false" id="SECURITY.UEHL.LGE.tab.LOGGERS_TAB" label="Loggers">
                     <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger;org.apache.logging.log4j.Logger;org.slf4j.Logger" id="SECURITY.UEHL.LGE.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                     <param defaultValue="^log.*" id="SECURITY.UEHL.LGE.LOG_METHOD_EXPRESSION" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                  </group>
                  <group collapsible="false" id="SECURITY.UEHL.LGE.tab.IGNORE_LIST_TAB" label="Ignore List">
                     <param defaultValue="^ignore$" id="SECURITY.UEHL.LGE.IGNORE_LIST" inputType="stringList" label="Ignore exception variables matching the following regular expression(s):" prevType="StringList"/>
                  </group>
                  <radioGroup id="SECURITY.UEHL.LGE.FLAG_LEVEL" label="Catch clause should contain:" prevType="MultipleChoice" showLabel="true">
                     <radioItem label="Logging method." value="0"/>
                     <radioItem defaultValue="checked" label="Logging method or &quot;throw&quot; exception statement." value="1"/>
                     <radioItem label="Logging method, comment, or &quot;throw&quot; exception statement." value="2"/>
                  </radioGroup>
                  <param defaultValue="false" id="SECURITY.UEHL.LGE.CHECK_EXCEPT_LOGGED" inputType="checkbox" label="Check if the exception is passed into the logging method call"/>
                  <param defaultValue="false" id="SECURITY.UEHL.LGE.CHECK_EXCEPT_FULL_PASSED" inputType="checkbox" label="Check if the exception passed to the logging method is complete"/>
                  <param defaultValue="false" id="SECURITY.UEHL.LGE.CHECK_EXCEPT_THROW" inputType="checkbox" label="Check if the caught exception is passed to a new exception or rethrown"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.UEHL.DCEMSL" header="Avoid untrusted input when logging messages with Seam Logging API" id="DCEMSL" scope="LINE" severity="1" since="10.4.3">
               <messages>
                  <msg index="1" value="The ''{0}'' method called on the object of the Log class takes a dangerous argument."/>
               </messages>
               <parameters>
                  <param defaultValue="false" id="SECURITY.UEHL.DCEMSL.CLASS_FIELDS_ARE_SAFE" inputType="checkbox" label="Consider class fields to be secure"/>
               </parameters>
            </rule>
         </category>
         <category description="Weak Security Controls" name="WSC">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.FOLLOW" header="Ensure that file target paths retrieved by resolving symbolic links are safe" id="FOLLOW" scope="LINE" severity="5" since="2020.2">
               <messages>
                  <msg index="1" value="Verify that the path retrieved by using FileVisitOption.FOLLOW_LINKS is within the intended control sphere"/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.LNK" header="Validate shortcut target paths before use" id="LNK" scope="LINE" severity="4" since="2020.2">
               <messages>
                  <msg index="1" value="The value returned by resolveTarget() is not validated"/>
               </messages>
               <parameters>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="SECURITY.WSC.LNK.VALIDATE_METHODS" label="Validating methods" reader="SATable">
                     <columns>
                        <column columnType="text" editable="true" id="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN1" label="Type (qualified name in regular expressions)" required="true"/>
                        <column columnType="text" editable="true" id="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN2" label="Method name (in regular expressions)" required="true"/>
                        <column columnType="checkbox" editable="true" id="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN3" label="Verify that resolveTarget() is checked by this method" required="true"/>
                        <column columnType="checkbox" editable="true" id="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN4" label="Verify that resolveTarget() is declared in this method" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN1" value=".*"/>
                           <column refColumnId="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN2" value=".*[vV]alidate.*"/>
                           <column refColumnId="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN3" value="true"/>
                           <column refColumnId="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN4" value="true"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.JXCORS" header="Restrict cross-origin resource sharing to secure origins" id="JXCORS" scope="LINE" severity="4" since="2020.1">
               <messages>
                  <msg index="1" value="The &quot;Access-Control-Allow-Origin&quot; header is set to allow unrestricted access to cross-origin resources"/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MCNC" header="Make your classes noncloneable" id="MCNC" scope="LINE" severity="5" since="4.5">
               <messages>
                  <msg index="1" value="'clone()' method is missing"/>
                  <msg index="2" value="'clone()' method is not &quot;final&quot;"/>
                  <msg index="3" value="java.lang.CloneNotSupportedException is not thrown"/>
                  <msg index="4" value="'clone()' method has parameter"/>
               </messages>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PBRTE" header="Always specify absolute paths to execute commands" id="PBRTE" scope="LINE" severity="1" since="10.4.3">
               <messages>
                  <msg index="1" value="The specified command is not an absolute path with separators"/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.DMDS" header="Avoid using the DriverManagerDataSource class in production code" id="DMDS" scope="LINE" severity="1" since="10.4.2">
               <messages>
                  <msg index="1" value="The DriverManagerDataSource class is not a pooled data source and should not be used in production code."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.BUSSB" header="Prevent external processes from blocking on output or error streams" id="BUSSB" scope="LINE" severity="3" since="10.4.3">
               <messages>
                  <msg index="1" value="The error stream of the process is not emptied or redirected"/>
                  <msg index="2" value="The output stream of the process is not emptied or redirected"/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AISSAJAVA" header="Avoid using insecure cryptographic algorithms for data encryption with Spring" id="AISSAJAVA" scope="LINE" severity="1" since="10.4.2">
               <messages>
                  <msg index="1" value="The cryptographic class is insecure."/>
                  <msg index="2" value="The cryptographic algorithm used in the constructor of MessageDigestPasswordEncoder is insecure."/>
               </messages>
               <parameters>
                  <!-- <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_ENCODERS" inputType="stringList" defaultValue="org.springframework.security.crypto.password.LdapShaPasswordEncoder;org.springframework.security.crypto.password.Md5PasswordEncoder;org.springframework.security.crypto.password.Md4PasswordEncoder;org.springframework.security.crypto.password.NoOpPasswordEncoder;org.springframework.security.authentication.encoding.LdapShaPasswordEncoder;org.springframework.security.authentication.encoding.Md5PasswordEncoder;org.springframework.security.authentication.encoding.Md4PasswordEncoder" label="Insecure classes that should not be used for encryption" prevType="StringList"/>
                        <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_NAMES" inputType="stringList" defaultValue="MD2;MD5;SHA-1" label="Insecure algorithms in the MessageDigestPasswordEncoder class" prevType="StringList"/>-->
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_ENCODERS" label="Insecure classes that should not be used for encryption" reader="SATable">
                     <columns>
                        <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" label="Fully Qualified Name of Insecure Class" required="true" textSize="large"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.LdapShaPasswordEncoder"/>
                        </row>
                        <row id="2">
                           <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md5PasswordEncoder"/>
                        </row>
                        <row id="3">
                           <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md4PasswordEncoder"/>
                        </row>
                        <row id="4">
                           <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.NoOpPasswordEncoder"/>
                        </row>
                        <row id="5">
                           <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.LdapShaPasswordEncoder"/>
                        </row>
                        <row id="6">
                           <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>
                        </row>
                        <row id="7">
                           <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md4PasswordEncoder"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_NAMES" label="Insecure algorithms in the MessageDigestPasswordEncoder class" reader="SATable">
                     <columns>
                        <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" label="Name of Insecure Algorithm" required="true" textSize="large"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD2"/>
                        </row>
                        <row id="2">
                           <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD5"/>
                        </row>
                        <row id="3">
                           <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="SHA-1"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.EWSSEC" header="Avoid debug information from Spring Security framework to logs" id="EWSSEC" scope="LINE" severity="1" since="10.4.2">
               <messages>
                  <msg index="1" value="Debug features is activated in @EnableWebSecurity annotation"/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MDSALT" header="Use hash functions with a salt" id="MDSALT" scope="LINE" severity="1" since="10.4.2">
               <messages>
                  <msg index="1" value="A salt is not added to the digest"/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PBFA" header="Ensure sufficient protection against multiple failed authentication attempts" id="PBFA" scope="LINE" severity="5" type="global">
               <messages>
                  <msg index="1" value="This class uses the object of the AuthenticationFailureBadCredentialsEvent class. Ensure that sufficient protection against multiple failed authentication attempts is implemented."/>
                  <msg index="2" value="Ensure that the implementation of the 'onAuthenticationFailure()' method provides sufficient protection against multiple failed authentication attempts."/>
                  <msg index="3" value="Ensure that the implementation of the 'configure()' method provides sufficient protection against multiple failed authentication attempts."/>
                  <msg index="4" value="Ensure that the application code includes sufficient protection against multiple failed authentication attempts."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HV" header="Ensure the HostnameVerifier.verify() method validates the certificate" id="HV" scope="LINE" severity="1" since="10.4.2">
               <messages>
                  <msg index="1" value="The certificate is not validated, because the 'verify' method always returns 'true'"/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MCMDU" header="MessageDigest objects must process the data with the 'update' method" id="MCMDU" scope="LINE" severity="1" since="10.4.2">
               <messages>
                  <msg index="1" value="The 'update' method is not called on the ''{0}'' variable after the message digest object is obtained"/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SIKG" header="Initialize KeyGenerator instances " id="SIKG" scope="LINE" severity="1" since="10.4.2">
               <messages>
                  <msg index="1" value="The ''{0}'' object of the KeyGenerator class is created but not initialized"/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HGRSI" header="Avoid using the 'getRequestedSessionId' method from the 'HttpServletRequest' class" id="HGRSI" scope="LINE" severity="4" since="10.4.2">
               <messages>
                  <msg index="1" value="The 'getRequestedSessionId' method may return untrusted data"/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HTTPRHA" header="Do not rely on IP addresses obtained from HTTP request headers for authentication" id="HTTPRHA" scope="LINE" severity="3" since="2020.1">
               <messages>
                  <msg index="1" value="The IP address retrieved from the HTTP request header is used for authentication"/>
                  <msg index="2" value="The IP address retrieved from the header using the 'getRemoteAddr()' method is used for authentication"/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ACMD" header="Avoid using custom MessageDigest implementations" id="ACMD" scope="LINE" severity="4" since="10.4.2">
               <messages>
                  <msg index="1" value="The class that extends MessageDigest may provide unsafe algorithms"/>
               </messages>
            </rule>
            <!-- rule id="MSMSL" class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MSMSL" severity="2" scope="LINE" since="10.4.2" header="HttpSecurity.sessionManagement().maximumSessions(1).maxSessionsPreventsLogin(true) must be set">
                    <messages>
                        <msg value="HttpSecurity.sessionManagement().maximumSessions(1).maxSessionsPreventsLogin(true) must be set" index="1"/>
                    </messages>
                </rule-->
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.APIBS" header="Inspect usage of standard API calls that bypass security" id="APIBS" scope="LINE" severity="3" since="9.0">
               <messages>
                  <msg index="1" value="API call ''{0}'' has potential to bypass security."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.APIBS.CHECKED_METHODS" name="CHECKED_METHODS" value="Check the following methods:"/>
                  <oldparam id="SECURITY.WSC.APIBS.TYPE" name="TYPE" value="Type (qualified name)"/>
                  <oldparam id="SECURITY.WSC.APIBS.METHOD" name="METHOD" value="Method name (regular expression)"/>
               </oldparameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/111.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/114.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/470.html" name="CWE"/>
               </references>
               <parameters>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="SECURITY.WSC.APIBS.CHECKED_METHODS" label="Check the following methods:" reader="SATable">
                     <columns>
                        <column columnType="text" editable="true" id="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" label="Type (qualified name)" required="true"/>
                        <column columnType="text" editable="true" id="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" label="Method name (regular expression)" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newInstance"/>
                        </row>
                        <row id="2">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getClassLoader"/>
                        </row>
                        <row id="3">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getClasses"/>
                        </row>
                        <row id="4">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getField[s]*"/>
                        </row>
                        <row id="5">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getMethod[s]*"/>
                        </row>
                        <row id="6">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getConstructor[s]*"/>
                        </row>
                        <row id="7">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getDeclaredClasses"/>
                        </row>
                        <row id="8">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getDeclaredField[s]*"/>
                        </row>
                        <row id="9">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getDeclaredMethod[s]*"/>
                        </row>
                        <row id="10">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getDeclaredConstructor[s]*"/>
                        </row>
                        <row id="11">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.ClassLoader"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getParent"/>
                        </row>
                        <row id="12">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.ClassLoader"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getSystemClassLoader"/>
                        </row>
                        <row id="13">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Thread"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getContextClassLoader"/>
                        </row>
                        <row id="14">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="forName"/>
                        </row>
                        <row id="15">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Package"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getPackage[s]*"/>
                        </row>
                        <row id="16">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Runtime"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="load"/>
                        </row>
                        <row id="17">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Runtime"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="loadLibrary"/>
                        </row>
                        <row id="18">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.System"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="load"/>
                        </row>
                        <row id="19">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.System"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="loadLibrary"/>
                        </row>
                        <row id="20">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.sql.DriverManager"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getConnection"/>
                        </row>
                        <row id="21">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.sql.DriverManager"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getDriver[s]*"/>
                        </row>
                        <row id="22">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.sql.DriverManager"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="deregisterDriver"/>
                        </row>
                        <row id="23">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.util.ResourceBundle"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getBundle"/>
                        </row>
                        <row id="24">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newInstance"/>
                        </row>
                        <row id="25">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Constructor"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newInstance"/>
                        </row>
                        <row id="26">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Field"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="get*"/>
                        </row>
                        <row id="27">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Field"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="set*"/>
                        </row>
                        <row id="28">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Method"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="invoke"/>
                        </row>
                        <row id="29">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.util.concurrent.atomic.AtomicIntegerFieldUpdater"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newUpdater"/>
                        </row>
                        <row id="30">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.util.concurrent.atomic.AtomicLongFieldUpdater"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newUpdater"/>
                        </row>
                        <row id="31">
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.util.concurrent.atomic.AtomicReferenceFieldUpdater"/>
                           <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newUpdater"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ARXML" header="Process XML and HTML with a library instead of raw text " id="ARXML" scope="LINE" severity="1" since="9.0">
               <messages>
                  <msg index="1" value="''{0}'' is processed using raw text instead of a library"/>
               </messages>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/80.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/81.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ASAPI" header="Prevent the scripting API from executing untrusted code" id="ASAPI" scope="LINE" severity="3" since="9.0">
               <messages>
                  <msg index="1" value="Ensure that the use of the scripting API does not allow untrusted dynamic code execution."/>
                  <msg index="2" value="The eval() method is called on the scriptEngine object and may execute untrusted dynamic code."/>
               </messages>
               <parameters>
                  <param defaultValue="true" id="SECURITY.WSC.ASAPI.REPORT_ON_EVAL" inputType="checkbox" label="Report violation on eval method invocation"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HCCK" header="Avoid using hard-coded cryptographic keys" id="HCCK" scope="LINE" severity="1" since="9.0">
               <messages>
                  <msg index="1" value="Hard-coded cryptographic key here."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.HCCK.MIN_LENGTH" name="MIN_LENGTH" value="Check keys whose length is greater than "/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010"/>
                  <reference href="http://cwe.mitre.org/data/definitions/321.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/506.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/759.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="9" id="SECURITY.WSC.HCCK.MIN_LENGTH" inputType="integer" label="Check keys whose length is greater than " min="9"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.INNER" header="Make all member classes &quot;private&quot;." id="INNER" scope="CLASS" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="Member class ''{0}'' is not &quot;private&quot;."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.INNER.IGNORE_STATIC" name="IGNORE_STATIC" value="Ignore &quot;static&quot; member classes"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="SECURITY.WSC.INNER.IGNORE_STATIC" inputType="checkbox" label="Ignore &quot;static&quot; member classes"/>
                  <param defaultValue="false" id="SECURITY.WSC.INNER.CHECK_INTERFACE" inputType="checkbox" label="Check member interfaces"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PPKG" header="Ensure that all Permissions, PrivilegedActions, and PrivilegedActionExceptions are declared in the same package" id="PPKG" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Class name ''{0}'' does not match user-specified regular expression ''{1}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.PPKG.PERMISSION_PKG" name="PERMISSION_PKG" value="'Permission' package name (Glob expression)"/>
                  <oldparam id="SECURITY.WSC.PPKG.ACTION_PKG" name="ACTION_PKG" value="'PrivilegedAction' package name (Glob expression)"/>
                  <oldparam id="SECURITY.WSC.PPKG.EXCEPTION_PKG" name="EXCEPTION_PKG" value="'PrivilegedActionException' package name (Glob expression)"/>
                  <oldparam id="SECURITY.WSC.PPKG.EMPTY_STRING_ERROR" name="EMPTY_STRING_ERROR" value="Package name should not be empty"/>
                  <!--  below params is deprecated and changed into table  -->
                  <oldparam defaultValue="true;" id="SECURITY.WSC.PPKG.PERMISSION_PKG" inputType="bigtext" label="'Permission' package name (Glob expression)" prevType="InputValueWithCheckBox"/>
                  <oldparam defaultValue="true;" id="SECURITY.WSC.PPKG.ACTION_PKG" inputType="bigtext" label="'PrivilegedAction' package name (Glob expression)" prevType="InputValueWithCheckBox"/>
                  <oldparam defaultValue="true;" id="SECURITY.WSC.PPKG.EXCEPTION_PKG" inputType="bigtext" label="'PrivilegedActionException' package name (Glob expression)" prevType="InputValueWithCheckBox"/>
               </oldparameters>
               <parameters>
                  <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="SECURITY.WSC.PPKG.PERMISSION_TABLE" label="" reader="SATable">
                     <columns>
                        <column columnType="checkbox" editable="true" id="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN1" label=""/>
                        <column columnType="text" editable="false" id="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN2" label="" textSize="large"/>
                        <column columnType="text" editable="true" id="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN3" label=""/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN1" value="true"/>
                           <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN2" value="'Permission' package name (Glob expression)"/>
                           <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN3" value=""/>
                        </row>
                        <row id="2">
                           <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN1" value="true"/>
                           <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN2" value="'PrivilegedAction' package name (Glob expression)"/>
                           <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN3" value=""/>
                        </row>
                        <row id="3">
                           <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN1" value="true"/>
                           <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN2" value="'PrivilegedActionException' package name (Glob expression)"/>
                           <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN3" value=""/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.STREP" header="Use library methods for string replacements of special characters in HTML and XML" id="STREP" scope="LINE" severity="3" since="9.0">
               <messages>
                  <msg index="1" value="String replacements of special characters found."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.STREP.IGNORE_CLASSES" name="IGNORE_CLASSES" value="Check these special character replacements:"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               </references>
               <parameters>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="SECURITY.WSC.STREP.REPLACEMENTS" label="Report the replace() method called with the following string parameters:" reader="SATable">
                     <columns>
                        <column columnType="text" editable="true" id="SECURITY__WSC__STREP__TABLE_HEADER__COLUMN1" label="Old string" required="true"/>
                        <column columnType="text" editable="true" id="SECURITY__WSC__STREP__TABLE_HEADER__COLUMN2" label="New string" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="SECURITY__WSC__STREP__TABLE_HEADER__COLUMN1" value="&quot;"/>
                           <column refColumnId="SECURITY__WSC__STREP__TABLE_HEADER__COLUMN2" value="&amp;quot;"/>
                        </row>
                        <row id="2">
                           <column refColumnId="SECURITY__WSC__STREP__TABLE_HEADER__COLUMN1" value="'"/>
                           <column refColumnId="SECURITY__WSC__STREP__TABLE_HEADER__COLUMN2" value="&amp;apos;"/>
                        </row>
                        <row id="3">
                           <column refColumnId="SECURITY__WSC__STREP__TABLE_HEADER__COLUMN1" value="&lt;"/>
                           <column refColumnId="SECURITY__WSC__STREP__TABLE_HEADER__COLUMN2" value="&amp;lt;"/>
                        </row>
                        <row id="4">
                           <column refColumnId="SECURITY__WSC__STREP__TABLE_HEADER__COLUMN1" value="&gt;"/>
                           <column refColumnId="SECURITY__WSC__STREP__TABLE_HEADER__COLUMN2" value="&amp;gt;"/>
                        </row>
                        <row id="5">
                           <column refColumnId="SECURITY__WSC__STREP__TABLE_HEADER__COLUMN1" value="&amp;"/>
                           <column refColumnId="SECURITY__WSC__STREP__TABLE_HEADER__COLUMN2" value="&amp;amp;"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.VJFS" header="Always verify JarFile signatures" id="VJFS" scope="LINE" severity="1" since="9.0">
               <messages>
                  <msg index="1" value="Consider using a JarFile constructor with verification enabled."/>
               </messages>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/347.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ZOIS" header="Inspect usage of scripting API" id="ZOIS" scope="LINE" severity="1" since="9.0">
               <messages>
                  <msg index="1" value="Scripting API usage."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ENPP" header="Ensure arguments passed to certain methods come from predefined methods list." id="ENPP" scope="LINE" severity="2" since="9.2">
               <messages>
                  <msg index="1" value="Argument number {0} passed to method ''{1}'' is not an allowed method call."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.ENPP.PAIRS_TABLE_HEADER" name="PAIRS_TABLE_HEADER" value="Methods and arguments configuration"/>
                  <oldparam id="SECURITY.WSC.ENPP.PAIRS_TABLE_1ST" name="PAIRS_TABLE_1ST" value="Method to be checked (&lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,...)"/>
                  <oldparam id="SECURITY.WSC.ENPP.PAIRS_TABLE_INDEX" name="PAIRS_TABLE_INDEX" value="Argument Index to Check (''0''-based)"/>
                  <oldparam id="SECURITY.WSC.ENPP.PAIRS_TABLE_2ND" name="PAIRS_TABLE_2ND" value="Allowed method name (in Regular Expressions)"/>
               </oldparameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/329.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/336.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/337.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE"/>
               </references>
               <parameters>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="SECURITY.WSC.ENPP.PAIRS_TABLE_HEADER" label="Methods and arguments configuration" reader="SATable">
                     <columns>
                        <column columnType="text" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" label="Method to be checked (&lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,...)" required="true"/>
                        <column columnType="text" defaultValue="0" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" label="Argument Index to Check (''0''-based)" required="true" textSize="small"/>
                        <column columnType="text" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" label="Allowed method name (in Regular Expressions)" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#SecureRandom(byte[])"/>
                           <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                           <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                        </row>
                        <row id="2">
                           <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#setSeed(byte[])"/>
                           <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                           <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                        </row>
                        <row id="3">
                           <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#setSeed(long)"/>
                           <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                           <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                        </row>
                        <row id="4">
                           <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="javax.crypto.spec.IvParameterSpec#IvParameterSpec(byte[])"/>
                           <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                           <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidIV"/>
                        </row>
                        <row id="5">
                           <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="javax.crypto.spec.IvParameterSpec#IvParameterSpec(byte[],int,int)"/>
                           <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                           <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidIV"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ACDP" header="Avoid using anonymous &quot;privileged&quot; classes when invoking &quot;AccessController.doPrivileged()&quot;." id="ACDP" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Anonymous subclass of ''{0}'' used in &quot;AccessController.doPrivileged()&quot; invocation."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.IDP" header="Avoid setting the write or execute file permissions to unintended users" id="IDP" scope="LINE" severity="5" since="2020.2">
               <messages>
                  <msg index="1" value="The ''{0}'' method is set to grant the {1} permissions to everybody."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AMA" header="Avoid constructors and overriding methods which are more accessible than those of their super classes" id="AMA" scope="METHOD" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="The constructor ''{0}'' is more accessible than the constructor in its superclass."/>
                  <msg index="2" value="The overriding method ''{0}'' is more accessible than the method in its superclass."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.AMA.CONSTRUCTOR_ACCESSIBILITY" name="CONSTRUCTOR_ACCESSIBILITY" value="Check constructors of accessibility"/>
                  <oldparam id="SECURITY.WSC.AMA.OVERRIDING_ACCESSIBILITY" name="OVERRIDING_ACCESSIBILITY" value="Check overriding methods of accessibility"/>
                  <oldparam id="SECURITY.WSC.AMA.PUBLIC_CONSTRUCTOR" name="PUBLIC_CONSTRUCTOR" value="public"/>
                  <oldparam id="SECURITY.WSC.AMA.PROTECTED_CONSTRUCTOR" name="PROTECTED_CONSTRUCTOR" value="protected"/>
                  <oldparam id="SECURITY.WSC.AMA.PUBLIC_OVERRIDING" name="PUBLIC_OVERRIDING" value="public"/>
                  <oldparam id="SECURITY.WSC.AMA.PROTECTED_OVERRIDING" name="PROTECTED_OVERRIDING" value="protected"/>
               </oldparameters>
               <parameters>
                  <group collapsible="false" id="SECURITY.WSC.AMA.group.1" label="Check constructors with access specifier">
                     <param defaultValue="true" id="SECURITY.WSC.AMA.PUBLIC_CONSTRUCTOR" inputType="checkbox" label="public"/>
                     <param defaultValue="false" id="SECURITY.WSC.AMA.PROTECTED_CONSTRUCTOR" inputType="checkbox" label="protected"/>
                  </group>
                  <group collapsible="false" id="SECURITY.WSC.AMA.group.0" label="Check overriding methods with access specifier">
                     <param defaultValue="true" id="SECURITY.WSC.AMA.PUBLIC_OVERRIDING" inputType="checkbox" label="public"/>
                     <param defaultValue="false" id="SECURITY.WSC.AMA.PROTECTED_OVERRIDING" inputType="checkbox" label="protected"/>
                     <param defaultValue="false" id="SECURITY.WSC.AMA.CHECK_HIDDEN" inputType="checkbox" label="static"/>
                  </group>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CFM" header="Only call &quot;final&quot; methods from specified code blocks in non-&quot;final&quot; classes." id="CFM" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Non-&quot;final&quot; method ''{0}'' is invoked in non-&quot;final&quot; class ''{1}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.CFM.WHAT_TO_CHECK" name="WHAT_TO_CHECK" value="Where to check for non-&quot;final&quot; method invocations"/>
                  <oldparam id="SECURITY.WSC.CFM.CHECK_METHODS" name="CHECK_METHODS" value="Check invocations made from within method declarations:"/>
                  <oldparam id="SECURITY.WSC.CFM.CHECKED_METHODS_TABLE" name="CHECKED_METHODS_TABLE" value="Check invocations made from within the following method declarations:"/>
                  <oldparam id="SECURITY.WSC.CFM.TYPE" name="TYPE" value="Type (qualified name)"/>
                  <oldparam id="SECURITY.WSC.CFM.METHOD" name="METHOD" value="Method (name)"/>
                  <oldparam id="SECURITY.WSC.CFM.CHECK_SYNCHRONIZED" name="CHECK_SYNCHRONIZED" value="Check invocations made from within &quot;synchronized&quot; blocks"/>
               </oldparameters>
               <parameters>
                  <group collapsible="false" id="SECURITY.WSC.CFM.group.0" label="Where to check for non-&quot;final&quot; method invocations">
                     <param defaultValue="true" id="SECURITY.WSC.CFM.CHECK_METHODS" inputType="checkbox" label="Check invocations made from within method declarations:">
                        <!-- param id="SECURITY.WSC.CFM.CHECKED_METHODS_TABLE" inputType="bigtext" defaultValue="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;table version=&quot;1.0&quot;&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.Object&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;clone&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.security.PrivilegedAction&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;run&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.security.PrivilegedExceptionAction&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;run&quot;/&gt;&lt;/row&gt;&lt;/table&gt;" label="Check invocations made from within the following method declarations:"/-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="SECURITY.WSC.CFM.CHECKED_METHODS_TABLE" label="Check invocations made from within the following method declarations:" reader="SATable">
                           <columns>
                              <column columnType="text" editable="true" id="SECURITY__WSC__CFM__CHECKED_METHODS_TABLE__COLUMN1" label="Type (qualified name)" required="true"/>
                              <column columnType="text" editable="true" id="SECURITY__WSC__CFM__CHECKED_METHODS_TABLE__COLUMN2" label="Method (name)" required="true"/>
                           </columns>
                           <predefinedRows>
                              <row id="1">
                                 <column refColumnId="SECURITY__WSC__CFM__CHECKED_METHODS_TABLE__COLUMN1" value="java.lang.Object"/>
                                 <column refColumnId="SECURITY__WSC__CFM__CHECKED_METHODS_TABLE__COLUMN2" value="clone"/>
                              </row>
                              <row id="2">
                                 <column refColumnId="SECURITY__WSC__CFM__CHECKED_METHODS_TABLE__COLUMN1" value="java.security.PrivilegedAction"/>
                                 <column refColumnId="SECURITY__WSC__CFM__CHECKED_METHODS_TABLE__COLUMN2" value="run"/>
                              </row>
                              <row id="3">
                                 <column refColumnId="SECURITY__WSC__CFM__CHECKED_METHODS_TABLE__COLUMN1" value="java.security.PrivilegedExceptionAction"/>
                                 <column refColumnId="SECURITY__WSC__CFM__CHECKED_METHODS_TABLE__COLUMN2" value="run"/>
                              </row>
                           </predefinedRows>
                        </complexParamTable>
                     </param>
                     <param defaultValue="true" id="SECURITY.WSC.CFM.CHECK_SYNCHRONIZED" inputType="checkbox" label="Check invocations made from within &quot;synchronized&quot; blocks"/>
                  </group>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CIFC" header="Only &quot;clone()&quot; instances of &quot;final&quot; classes." id="CIFC" scope="LINE" severity="3">
               <messages>
                  <msg index="1" value="''{0}'' of type ''{1}'' is not final."/>
                  <msg index="2" value="Array ''{0}'' contains type ''{1}'' which is not final."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CKTS" header="Avoid using cryptographic keys which are too short." id="CKTS" scope="LINE" severity="2" since="8.4">
               <messages>
                  <msg index="1" value="Key size ({0} bits) is below the recommended minimum key size ({1} bits) for the &quot;{2}&quot; algorithm."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.CKTS.MIN_LENGTH_TABLE" name="MIN_LENGTH_TABLE" value="Minimum Key Size for Each Algorithm"/>
                  <oldparam id="SECURITY.WSC.CKTS.ALGORITHM_NAME" name="ALGORITHM_NAME" value="Algorithm Name"/>
                  <oldparam id="SECURITY.WSC.CKTS.MINIMUM_KEY_SIZE" name="MINIMUM_KEY_SIZE" value="Minimum Key Size (in Bits)"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010"/>
               </references>
               <parameters>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="SECURITY.WSC.CKTS.MIN_LENGTH_TABLE" label="Minimum Key Size for Each Algorithm" reader="SATable">
                     <columns>
                        <column columnType="text" editable="true" id="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" label="Algorithm Name" required="true"/>
                        <column columnType="text" defaultValue="128" editable="true" id="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" label="Minimum Key Size (in Bits)" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" value="AES"/>
                           <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" value="128"/>
                        </row>
                        <row id="2">
                           <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" value="RSA"/>
                           <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" value="1024"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CLO" header="Do not override any 'ClassLoader' method except 'findClass()'" id="CLO" scope="LINE" severity="4" since="6.0">
               <messages>
                  <msg index="1" value="''{0}'' should not be overridden."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CMO" header="Do not pass mutable objects to 'ObjectOutputStream' in the 'writeObject()' method" id="CMO" scope="METHOD" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="Mutable field ''{0}'' is passed to 'writeObject(Object)' without cloning it first."/>
                  <msg index="2" value="Interface type field ''{0}'' is passed to 'writeObject(Object)' without cloning it first."/>
                  <msg index="3" value="Field ''{0}'' is passed to 'writeObject(Object)' without cloning it first."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.CMO.ALL" name="ALL" value="Any field."/>
                  <oldparam id="SECURITY.WSC.CMO.CHECK_SCOPE" name="CHECK_SCOPE" value="Flags 'writeObject(obj)' invocation when 'obj' is:"/>
                  <oldparam id="SECURITY.WSC.CMO.IMMUTABLE" name="IMMUTABLE" value="Field which declared type is mutable."/>
                  <oldparam id="SECURITY.WSC.CMO.IMMUTABLE_AND_INTERFACE" name="IMMUTABLE_AND_INTERFACE" value="Field which declared type is mutable or declared type is an interface."/>
               </oldparameters>
               <parameters>
                  <radioGroup id="SECURITY.WSC.CMO.CHECK_SCOPE" label="Flags 'writeObject(obj)' invocation when 'obj' is:" prevType="MultipleChoice" showLabel="true">
                     <radioItem defaultValue="checked" label="Field which declared type is mutable." value="0"/>
                     <radioItem label="Field which declared type is mutable or declared type is an interface." value="1"/>
                     <radioItem label="Any field." value="2"/>
                  </radioGroup>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HCCS" header="Avoid passing hardcoded usernames/passwords/URLs to database connection methods." id="HCCS" scope="LINE" severity="1" since="8.1">
               <messages>
                  <msg index="1" value="This call to ''{0}()'' may be dangerous because it passes in only hard-coded Strings."/>
                  <msg index="2" value="This call to ''{0}()'' may be dangerous because it uses a hard-coded password."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.HCCS.CONNECT_METHS" name="CONNECT_METHS" value="Additional Database Connection Methods \n(in form of &lt;qualified name of declaring type&gt;#&lt;method name&gt;)"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/259.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/547.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/798.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="" description="Additional Database Connection Methods (in form of &lt;qualified name of declaring type&gt;#&lt;method name&gt;)" id="SECURITY.WSC.HCCS.CONNECT_METHS" inputType="stringList" label="Additional Database Connection Methods" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ICA" header="Avoid using insecure algorithms for cryptography." id="ICA" scope="LINE" severity="1" since="8.3">
               <messages>
                  <msg index="1" value="The &quot;{0}&quot; algorithm is not an acceptable cryptography algorithm for the &quot;{1}&quot; class."/>
                  <msg index="2" value="The cryptography algorithm is used without padding."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.ICA.SUGGESTED_ALGS" name="SUGGESTED_ALGS" value="Safe Cryptography Algorithms"/>
                  <oldparam id="SECURITY.WSC.ICA.TYPE_NAME" name="TYPE_NAME" value="Fully Qualified Class Name"/>
                  <oldparam id="SECURITY.WSC.ICA.ALGORITHM_NAME" name="ALGORITHM_NAME" value="Algorithm Names (in regular expressions)"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010"/>
                  <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/328.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/780.html" name="CWE"/>
               </references>
               <parameters>
                  <!--param id="SECURITY.WSC.ICA.SUGGESTED_ALGS" inputType="bigtext" defaultValue="java.security.KeyPairGenerator&lt;#&gt;RSA;java.security.MessageDigest&lt;#&gt;SHA-256#SHA-384#SHA-512;javax.crypto.Cipher&lt;#&gt;3DES#AES#ARCFOUR/RC4#Blowfish#ECIES#RC4#RC5#RSA(.*)OAEPWith(.*)And(.*)Padding;javax.crypto.KeyGenerator&lt;#&gt;AES#ARCFOUR/RC4#Blowfish#HmacSHA256#HmacSHA384#HmacSHA512#RC2" label="Safe Cryptography Algorithms" prevType="DuoList"/-->
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="SECURITY.WSC.ICA.SUGGESTED_ALGS" label="Secure Cryptographic Algorithms" prevType="DuoList" reader="SADuoList">
                     <columns>
                        <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" label="Fully Qualified Class Name" required="true" textSize="large"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.KeyPairGenerator"/>
                        </row>
                        <row id="2">
                           <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.MessageDigest"/>
                        </row>
                        <row id="3">
                           <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.KeyGenerator"/>
                        </row>
                        <row id="4">
                           <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.Cipher"/>
                        </row>
                        <row id="5">
                           <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.net.ssl.SSLContext"/>
                        </row>
                     </predefinedRows>
                     <childTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="SECURITY.WSC.ICA.SUGGESTED_ALGS.CHILDTABLE1" label="">
                        <columns>
                           <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" label="Name of Secure Algorithm (in regular expressions)" required="true"/>
                        </columns>
                        <predefinedRows refParentRowId="1">
                           <row id="1">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA"/>
                           </row>
                        </predefinedRows>
                        <predefinedRows refParentRowId="2">
                           <row id="1">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-256"/>
                           </row>
                           <row id="2">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-384"/>
                           </row>
                           <row id="3">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-512"/>
                           </row>
                        </predefinedRows>
                        <predefinedRows refParentRowId="3">
                           <row id="1">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES"/>
                           </row>
                           <row id="2">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                           </row>
                           <row id="3">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                           </row>
                           <row id="4">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA256"/>
                           </row>
                           <row id="5">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA384"/>
                           </row>
                           <row id="6">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA512"/>
                           </row>
                           <row id="7">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC2"/>
                           </row>
                           <row id="8">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESede"/>
                           </row>
                        </predefinedRows>
                        <predefinedRows refParentRowId="4">
                           <row id="1">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="3DES"/>
                           </row>
                           <row id="2">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES/(.*)/PKCS5Padding"/>
                           </row>
                           <row id="3">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                           </row>
                           <row id="4">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                           </row>
                           <row id="5">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ECIES"/>
                           </row>
                           <row id="6">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC4"/>
                           </row>
                           <row id="7">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC5"/>
                           </row>
                           <row id="8">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA(.*)OAEPWith(.*)And(.*)Padding"/>
                           </row>
                           <row id="9">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESEDE/(.*)/PKCS5Padding"/>
                           </row>
                        </predefinedRows>
                        <predefinedRows refParentRowId="5">
                           <row id="1">
                              <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="TLSv1.2"/>
                           </row>
                        </predefinedRows>
                     </childTable>
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.IVR" header="Avoid non-random &quot;byte[]&quot; when using IvParameterSpec." id="IVR" scope="LINE" severity="2" since="8.4">
               <messages>
                  <msg index="1" value="IvParameterSpec instantiated with non-random value ''{0}''."/>
               </messages>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/329.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PAF" header="Declare subclasses of 'PrivilegedAction', 'PrivilegedExceptionAction', and 'PrivilegedActionException' &quot;final&quot;" id="PAF" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Class ''{0}'' extends ''{1}'' and should be declared &quot;final&quot;."/>
                  <msg index="2" value="Class ''{0}'' implements ''{1}'' and should be declared &quot;final&quot;."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.PAF.CHECK_PAE" name="CHECK_PAE" value="Check subclasses of &quot;java.security.PrivilegedActionException&quot;"/>
                  <oldparam id="SECURITY.WSC.PAF.CHECK_PA" name="CHECK_PA" value="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                  <oldparam id="SECURITY.WSC.PAF.CHECK_PEA" name="CHECK_PEA" value="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                  <oldparam id="SECURITY.WSC.PAF.IGNORE_ENCLOSED_FINAL" name="IGNORE_ENCLOSED_FINAL" value="Ignore subclasses which are enclosed by a &quot;final&quot; outer class"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="SECURITY.WSC.PAF.CHECK_PA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                  <param defaultValue="true" id="SECURITY.WSC.PAF.CHECK_PEA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                  <param defaultValue="true" id="SECURITY.WSC.PAF.CHECK_PAE" inputType="checkbox" label="Check subclasses of &quot;java.security.PrivilegedActionException&quot;"/>
                  <param defaultValue="true" id="SECURITY.WSC.PAF.IGNORE_ENCLOSED_FINAL" inputType="checkbox" label="Ignore subclasses which are enclosed by a &quot;final&quot; outer class"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PBPSF" header="Declare subclasses of 'Permission' and 'BasicPermission' &quot;final&quot;." id="PBPSF" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Class ''{0}'' extends ''{1}'' and should be declared &quot;final&quot;."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.PBPSF.CHECK_PERMISSION" name="CHECK_PERMISSION" value="Check subclasses of &quot;java.security.Permission&quot;"/>
                  <oldparam id="SECURITY.WSC.PBPSF.CHECK_BASICPERMISSION" name="CHECK_BASICPERMISSION" value="Check implementations of &quot;java.security.BasicPermission&quot;"/>
                  <oldparam id="SECURITY.WSC.PBPSF.IGNORE_ENCLOSED_FINAL" name="IGNORE_ENCLOSED_FINAL" value="Ignore subclasses which are enclosed by a &quot;final&quot; outer class"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="SECURITY.WSC.PBPSF.CHECK_PERMISSION" inputType="checkbox" label="Check subclasses of &quot;java.security.Permission&quot;"/>
                  <param defaultValue="true" id="SECURITY.WSC.PBPSF.CHECK_BASICPERMISSION" inputType="checkbox" label="Check implementations of &quot;java.security.BasicPermission&quot;"/>
                  <param defaultValue="true" id="SECURITY.WSC.PBPSF.IGNORE_ENCLOSED_FINAL" inputType="checkbox" label="Ignore subclasses which are enclosed by a &quot;final&quot; outer class"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PRMF" header="Declare the 'run()' method of 'PrivilegedAction' and 'PrivilegedExceptionAction' implementations &quot;final&quot;" id="PRMF" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="&quot;run()&quot; method of class ''{0}'' should be declared &quot;final&quot;."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.PRMF.CHECK_PA" name="CHECK_PA" value="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                  <oldparam id="SECURITY.WSC.PRMF.CHECK_PEA" name="CHECK_PEA" value="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                  <oldparam id="SECURITY.WSC.PRMF.IGNORE_FINAL_CLASS" name="IGNORE_FINAL_CLASS" value="Ignore &quot;final&quot; classes"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="SECURITY.WSC.PRMF.CHECK_PA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                  <param defaultValue="true" id="SECURITY.WSC.PRMF.CHECK_PEA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                  <param defaultValue="true" id="SECURITY.WSC.PRMF.IGNORE_FINAL_CLASS" inputType="checkbox" label="Ignore &quot;final&quot; classes"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PSFC" header="Do not declare fields as &quot;public&quot; &quot;static&quot; &quot;final&quot; 'Collection' or 'Map' objects." id="PSFC" scope="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="Field ''{0}'' is declared as a &quot;public static final&quot; ''{1}'' object."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.PSFC.CHECK_UNMODIFIABLE" name="CHECK_UNMODIFIABLE" value="Check &quot;unmodifiable&quot; Collections and Maps"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="false" id="SECURITY.WSC.PSFC.CHECK_UNMODIFIABLE" inputType="checkbox" label="Check &quot;unmodifiable&quot; Collections and Maps"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SCF" header="Enforce 'SecurityManager' checks before setting or getting fields" id="SCF" scope="METHOD" severity="1" since="8.4">
               <messages>
                  <msg index="1" value="Missing ''SecurityManager'' check before setting field in method ''{0}()''."/>
                  <msg index="2" value="Missing ''SecurityManager'' check before getting field in method ''{0}()''."/>
                  <msg index="3" value="Method ''{0}'' is not declared &quot;final&quot;."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.SCF.PARAM_LEVEL" name="PARAM_LEVEL" value="Maximum depth to look for 'SecurityManager' check"/>
                  <oldparam id="SECURITY.WSC.SCF.CHECK_NON_FINAL_METHOD" name="CHECK_NON_FINAL_METHOD" value="Ensure methods containing 'SecurityManager' checks are declared &quot;final&quot;"/>
                  <oldparam id="SECURITY.WSC.SCF.FINAL_CLASS" name="FINAL_CLASS" value="Check non-&quot;final&quot; classes only"/>
               </oldparameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/732.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="1" id="SECURITY.WSC.SCF.PARAM_LEVEL" inputType="integer" label="Maximum depth to look for 'SecurityManager' check" min="0"/>
                  <param defaultValue="true" id="SECURITY.WSC.SCF.CHECK_NON_FINAL_METHOD" inputType="checkbox" label="Ensure methods containing 'SecurityManager' checks are declared &quot;final&quot;">
                     <param defaultValue="true" id="SECURITY.WSC.SCF.FINAL_CLASS" inputType="checkbox" label="Check non-&quot;final&quot; classes only"/>
                  </param>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SCLONE" header="Enforce 'SecurityManager' checks in methods of 'Cloneable' classes" id="SCLONE" scope="METHOD" severity="1" since="8.4">
               <messages>
                  <msg index="1" value="Missing 'SecurityManager' check in clone() method."/>
                  <msg index="2" value="Missing 'SecurityManager' check in constructor."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.SCLONE.PARAM_LEVEL" name="PARAM_LEVEL" value="Maximum depth to look for 'SecurityManager' checks"/>
                  <oldparam id="SECURITY.WSC.SCLONE.SUPER_CLASS_CHECK" name="SUPER_CLASS_CHECK" value="Check indirect 'SecurityManager' checks in super constructor(s)"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="1" id="SECURITY.WSC.SCLONE.PARAM_LEVEL" inputType="integer" label="Maximum depth to look for 'SecurityManager' checks" min="0"/>
                  <param defaultValue="false" id="SECURITY.WSC.SCLONE.SUPER_CLASS_CHECK" inputType="checkbox" label="Check indirect 'SecurityManager' checks in super constructor(s)"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SCSER" header="Enforce 'SecurityManager' checks in methods of 'Serializable' classes" id="SCSER" scope="METHOD" severity="1" since="8.4">
               <messages>
                  <msg index="1" value="Missing 'SecurityManager' check in readObject() method."/>
                  <msg index="2" value="Missing 'SecurityManager' check in readObjectNoData() method."/>
                  <msg index="3" value="Missing 'SecurityManager' check in writeObject() method."/>
                  <msg index="4" value="Missing 'SecurityManager' check in constructor."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.SCSER.PARAM_LEVEL" name="PARAM_LEVEL" value="Maximum depth to look for 'SecurityManager' check"/>
                  <oldparam id="SECURITY.WSC.SCSER.SUPER_CLASS_CHECK" name="SUPER_CLASS_CHECK" value="Check indirect 'SecurityManager' checks in super constructor(s)"/>
               </oldparameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/732.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="1" id="SECURITY.WSC.SCSER.PARAM_LEVEL" inputType="integer" label="Maximum depth to look for 'SecurityManager' check" min="0"/>
                  <param defaultValue="false" id="SECURITY.WSC.SCSER.SUPER_CLASS_CHECK" inputType="checkbox" label="Check indirect 'SecurityManager' checks in super constructor(s)"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SCSM" header="Ensure 'SecurityManager' check in constructor of &quot;public&quot; non-&quot;final&quot; sensitive type" id="SCSM" scope="LINE" severity="1" since="8.4">
               <messages>
                  <msg index="1" value="Constructor ''{0}'' does not perform a SecurityManager check."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.SCSM.JAVA_OPTION" name="JAVA_OPTION" value="Use normal style or Java 6 style"/>
                  <oldparam id="SECURITY.WSC.SCSM.before6" name="before6" value="Ensure that the final constructor performs a SecurityManager check"/>
                  <oldparam id="SECURITY.WSC.SCSM.after6" name="after6" value="Enforce Java 6 style, requiring the 'SecurityManager' check to be first.  If Java 6 is not in use then nothing is flagged"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/732.html" name="CWE"/>
               </references>
               <parameters>
                  <radioGroup id="SECURITY.WSC.SCSM.JAVA_OPTION" label="Use normal style or Java 6 style" prevType="MultipleChoice" showLabel="true">
                     <radioItem defaultValue="checked" label="Ensure that the final constructor performs a SecurityManager check" value="0"/>
                     <radioItem label="Enforce Java 6 style, requiring the 'SecurityManager' check to be first.  If Java 6 is not in use then nothing is flagged" value="1"/>
                  </radioGroup>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SMSTR" header="Ensure 'SecurityManager' checks before 'Socket' transfers or retrievals" id="SMSTR" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Missing &quot;SecurityManager&quot; check before call to ''{0}''."/>
               </messages>
               <references>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AHCA" header="Avoid hard-coding the arguments to certain methods" id="AHCA" scope="LINE" severity="1" since="8.4">
               <messages>
                  <msg index="1" value="Argument # {0} to the method ''{1}()'' should not be hard-coded."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.AHCA.DANGEROUS_METHODS" name="DANGEROUS_METHODS" value="Methods to Check (Press &quot;Ctrl-Space&quot; for Content Assist)"/>
                  <oldparam id="SECURITY.WSC.AHCA.METHOD" name="METHOD" value="Method (Specify &lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,&lt;parameter2 fully qualified type&gt;,...)"/>
                  <oldparam id="SECURITY.WSC.AHCA.INDEX" name="INDEX" value="Argument Index to Check (&quot;0&quot;-based)"/>
               </oldparameters>
               <parameters>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="SECURITY.WSC.AHCA.DANGEROUS_METHODS" label="Methods to Check" reader="SATable">
                     <columns>
                        <column columnType="text" description="Specify &lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,&lt;parameter2 fully qualified type&gt;,...)" editable="true" id="SECURITY__WSC__AHCA__DANGEROUS_METHODS__COLUMN1" label="Method" required="true" textSize="large"/>
                        <column columnType="text" editable="true" id="SECURITY__WSC__AHCA__DANGEROUS_METHODS__COLUMN2" label="Argument Index to Check (&quot;0&quot;-based)" required="true" textSize="small"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="SECURITY__WSC__AHCA__DANGEROUS_METHODS__COLUMN1" value="org.owasp.esapi.Encryptor#hash(java.lang.String,java.lang.String)"/>
                           <column refColumnId="SECURITY__WSC__AHCA__DANGEROUS_METHODS__COLUMN2" value="1"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.BP" header="Allow only certain providers to be specified for the 'Security.addProvider()' method." id="BP" scope="LINE" severity="3" since="8.0">
               <messages>
                  <msg index="1" value="The provider type ''{0}'' is not in the user-specified list of approved providers."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.BP.APPROVED_PROVIDERS" name="APPROVED_PROVIDERS" value="Approved Provider Types (Specify fully qualified names in regular expressions.)"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="^sun\.security\.pkcs11\.SunPKCS11$;^com\.sun\.net\.ssl\.internal\.ssl\.Provider$;^com\.sun\.security\.sasl\.Provider$;^com\.sun\.rsajca\.Provider$;^sun\.security\.provider\.Sun$;^com\.sun\.crypto\.provider\.SunJCE$;^sun\.security\.jgss\.SunProvider$;^sun\.security\.rsa\.SunRsaSign$" id="SECURITY.WSC.BP.APPROVED_PROVIDERS" inputType="stringList" label="Approved Provider Types (Specify fully qualified names in regular expressions.)" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CACM" header="Keep all access control methods centralized to enforce consistency" id="CACM" scope="LINE" severity="1" since="6.0">
               <messages>
                  <msg index="1" value="''{0}()'' is not allowed to be invoked within ''{1}()'', it should only be invoked inside centralized access control method declarations."/>
                  <msg index="2" value="''{0}()'' is not allowed to be invoked unless enclosed by centralized access control methods."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.CACM.ENCLOSING_METHOD_LIST" name="ENCLOSING_METHOD_LIST" value="Centralized access control method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                  <oldparam id="SECURITY.WSC.CACM.DANGEROUS_METHOD_LIST" name="DANGEROUS_METHOD_LIST" value="Access control method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A6" name="OWASP-2010"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A8" name="OWASP-2010"/>
                  <reference href="http://cwe.mitre.org/data/definitions/732.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="javax.servlet.*ServletRequest.*#getRemoteUser.*;javax.servlet.*ServletRequest.*#isUserInRole.*;java.security.Principal#getUserPrincipal.*;javax.security.auth.Subject#doAs.*;javax.security.auth.Subject#getPrincipals.*;javax.security.auth.Subject#get.*Credentials.*;javax.security.auth.Subject#getSubject.*;" description="Access control method names (in regular expressions) [qualified name of declaring type#method name]" id="SECURITY.WSC.CACM.DANGEROUS_METHOD_LIST" inputType="stringList" label="Access control method names (in regular expressions)" prevType="StringList"/>
                  <param defaultValue=".*Servlet.*#doGet.*" description="Centralized access control method names (in regular expressions) [qualified name of declaring type#method name]" id="SECURITY.WSC.CACM.ENCLOSING_METHOD_LIST" inputType="stringList" label="Centralized access control method names (in regular expressions)" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CAM" header="Keep all authentication methods centralized to enforce consistency" id="CAM" scope="LINE" severity="1" since="6.0">
               <messages>
                  <msg index="1" value="''{0}()'' is not allowed to be invoked within ''{1}()'', it should only be invoked inside centralized authentication method declarations."/>
                  <msg index="2" value="''{0}()'' is not allowed to be invoked unless enclosed by centralized access control methods."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.CAM.ENCLOSING_METHOD_LIST" name="ENCLOSING_METHOD_LIST" value="Centralized authentication method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                  <oldparam id="SECURITY.WSC.CAM.DANGEROUS_METHOD_LIST" name="DANGEROUS_METHOD_LIST" value="Authentication method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A8" name="OWASP-2010"/>
                  <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="javax.security.auth.login.LoginContext#getSubject.*;javax.security.auth.login.LoginContext#login.*;" description="Authentication method names (in regular expressions) [qualified name of declaring type#method name]" id="SECURITY.WSC.CAM.DANGEROUS_METHOD_LIST" inputType="stringList" label="Authentication method names (in regular expressions)" prevType="StringList"/>
                  <param defaultValue=".*#login.*;" description="Centralized authentication method names (in regular expressions) [qualified name of declaring type#method name]" id="SECURITY.WSC.CAM.ENCLOSING_METHOD_LIST" inputType="stringList" label="Centralized authentication method names (in regular expressions)" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PAC" header="Call authentication methods to enforce consistency" id="PAC" scope="LINE" severity="1" since="6.0">
               <messages>
                  <msg index="1" value="''{0}()'' does not invoke authentication checking method."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.PAC.ENFORCED_METHOD_LIST" name="ENFORCED_METHOD_LIST" value="Centralized authentication method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                  <oldparam id="SECURITY.WSC.PAC.DANGEROUS_METHOD_LIST" name="DANGEROUS_METHOD_LIST" value="Authentication checking method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A1" name="OWASP-2010"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A2" name="OWASP-2010"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A4" name="OWASP-2010"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A5" name="OWASP-2010"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A8" name="OWASP-2010"/>
                  <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/352.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="" description="Authentication checking method names (in regular expressions) [qualified name of declaring type#method name]" id="SECURITY.WSC.PAC.DANGEROUS_METHOD_LIST" inputType="stringList" label="Authentication checking method names (in regular expressions)" prevType="StringList"/>
                  <param defaultValue="" description="Centralized authentication method names (in regular expressions) [qualified name of declaring type#method name]" id="SECURITY.WSC.PAC.ENFORCED_METHOD_LIST" inputType="stringList" label="Centralized authentication method names (in regular expressions)" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PACC" header="Call access control methods to enforce consistency" id="PACC" scope="LINE" severity="1" since="6.0">
               <messages>
                  <msg index="1" value="''{0}()'' does not invoke access control method."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.PACC.ENFORCED_METHOD_LIST" name="ENFORCED_METHOD_LIST" value="Centralized access control method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                  <oldparam id="SECURITY.WSC.PACC.DANGEROUS_METHOD_LIST" name="DANGEROUS_METHOD_LIST" value="Access checking method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A1" name="OWASP-2010"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A2" name="OWASP-2010"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A4" name="OWASP-2010"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A5" name="OWASP-2010"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A6" name="OWASP-2010"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A8" name="OWASP-2010"/>
                  <reference href="http://cwe.mitre.org/data/definitions/352.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/732.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="" description="Access checking method names (in regular expressions) [qualified name of declaring type#method name]" id="SECURITY.WSC.PACC.DANGEROUS_METHOD_LIST" inputType="stringList" label="Access checking method names (in regular expressions)" prevType="StringList"/>
                  <param defaultValue="" description="Centralized access control method names (in regular expressions) [qualified name of declaring type#method name]" id="SECURITY.WSC.PACC.ENFORCED_METHOD_LIST" inputType="stringList" label="Centralized access control method names (in regular expressions)" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.UWM" header="Use wrapper methods instead of calling dangerous or problematic methods directly (custom rule)" id="UWM" scope="LINE" severity="3" since="8.0">
               <messages>
                  <msg index="1" value="The method ''{0}()'' is called outside of its wrapper method."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.UWM.ORIGINAL" name="ORIGINAL" value="Dangerous/Problematic Method                                                "/>
                  <oldparam id="SECURITY.WSC.UWM.WRAPPER" name="WRAPPER" value="Wrapper Method                                                              "/>
                  <oldparam id="SECURITY.WSC.UWM.METHODS" name="METHODS" value="Methods which should be wrapped and their wrapper methods\n(Specify methods in the format &lt;fully qualified type name&gt;#&lt;method name&gt;\n The signature of the wrapper method must match that of the corresponding dangerous method\n for the quickfix to work.  See the rule documentation for other guidelines for the quickfix.)"/>
               </oldparameters>
               <parameters>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" description="Specify methods in the format &lt;fully qualified type name&gt;#&lt;method name&gt;" id="SECURITY.WSC.UWM.METHODS" label="Methods which should be wrapped and their wrapper methods" reader="SATable">
                     <columns>
                        <column columnType="text" editable="true" id="SECURITY__WSC__UWM__METHODS__COLUMN1" label="Dangerous/Problematic Method" required="true"/>
                        <column columnType="text" editable="true" id="SECURITY__WSC__UWM__METHODS__COLUMN2" label="Wrapper Method" required="true"/>
                     </columns>
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.UOSC" header="Use the ''getSecure()'' and ''setSecure()'' methods to enforce the use of secure cookies." id="UOSC" scope="LINE" severity="1" since="8.0">
               <messages>
                  <msg index="1" value="The ''Cookie'' variable ''{0}'' may be used without making sure that it is a secure cookie."/>
                  <msg index="2" value="Make sure that the appropriate version of library is used."/>
               </messages>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A5" name="OWASP-2010"/>
                  <reference href="http://cwe.mitre.org/data/definitions/614.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/352.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.VSI" header="Properly validate server identity" id="VSI" scope="LINE" severity="2" since="10.4.2">
               <messages>
                  <msg index="1" value="SMTP SSL does not check server identity."/>
                  <msg index="2" value="SMTP SSL does not check server identity. Ensure the library version allows you to configure the required options."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SS" header="Do not use sockets in web components." id="SS" scope="LINE" severity="3" since="7.5">
               <messages>
                  <msg index="1" value="''{0}'' used in a web component."/>
                  <msg index="2" value="Call to ''{0}'' indirectly uses a socket in a web component."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.SS.DEPTH" name="DEPTH" value="Maximum depth to look for socket usage"/>
                  <oldparam id="SECURITY.WSC.SS.CHECK_SOCKET" name="CHECK_SOCKET" value="Check Sockets"/>
                  <oldparam id="SECURITY.WSC.SS.CHECK_SERVERSOCKET" name="CHECK_SERVERSOCKET" value="Check ServerSockets"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               </references>
               <parameters>
                  <param defaultValue="2" id="SECURITY.WSC.SS.DEPTH" inputType="integer" label="Maximum depth to look for socket usage" max="5" min="1"/>
                  <param defaultValue="true" id="SECURITY.WSC.SS.CHECK_SOCKET" inputType="checkbox" label="Check Sockets"/>
                  <param defaultValue="true" id="SECURITY.WSC.SS.CHECK_SERVERSOCKET" inputType="checkbox" label="Check ServerSockets"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SSP" header="Do not call 'System.setProperty()' in a web component." id="SSP" scope="LINE" severity="1" since="7.5">
               <messages>
                  <msg index="1" value="Call to ''System.{0}()'' in a web component."/>
                  <msg index="2" value="Method ''{0}'' indirectly calls &quot;System.setProperty()&quot; in a web component."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.SSP.DEPTH" name="DEPTH" value="Maximum depth to look for &quot;System.setProperty()&quot; calls"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="2" id="SECURITY.WSC.SSP.DEPTH" inputType="integer" label="Maximum depth to look for &quot;System.setProperty()&quot; calls" max="5" min="1"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.DNSL" header="Avoid DNS lookups for decision making" id="DNSL" scope="LINE" severity="1" since="9.0">
               <messages>
                  <msg index="1" value="DNS lookup checked here."/>
               </messages>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/247.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/494.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ISL" header="Always call 'HttpSession.invalidate()' before 'LoginContext.login()'" id="ISL" scope="LINE" severity="1" since="9.0">
               <messages>
                  <msg index="1" value="Login without session invalidation."/>
               </messages>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/384.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.FIMU" header="Make immutable classes final" id="FIMU" scope="LINE" severity="4" since="9.0">
               <messages>
                  <msg index="1" value="The immutable class not declared 'final'"/>
                  <msg index="2" value="The ''{0}'' field of the immutable class is not declared 'final'"/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.FIMU.CHECK_FIELDS" name="CHECK_FIELDS" value="Ensure fields are final"/>
               </oldparameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/500.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="true" id="SECURITY.WSC.FIMU.CHECK_FIELDS" inputType="checkbox" label="Ensure fields are final"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.INIVF" header="Defend against partially initialized instances of non-final classes" id="INIVF" scope="LINE" severity="4" since="9.0">
               <messages>
                  <msg index="1" value="Flag not present."/>
                  <msg index="2" value="Flag not volatile."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.INIVF.VOLATILE_FLAG" name="VOLATILE_FLAG" value="Ensure flag is volatile"/>
                  <oldparam id="SECURITY.WSC.INIVF.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="Initializer flag should match this regular expression:"/>
               </oldparameters>
               <parameters>
                  <param defaultValue=".*init.*" id="SECURITY.WSC.INIVF.REGULAR_EXPRESSION" inputType="text" label="Initializer flag should match this regular expression:"/>
                  <param defaultValue="true" id="SECURITY.WSC.INIVF.VOLATILE_FLAG" inputType="checkbox" label="Ensure flag is volatile"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.FXMLP" header="Ensure that Secure Processing is used" id="FXMLP" scope="LINE" severity="1" since="9.0">
               <messages>
                  <msg index="1" value="Secure Processing not used."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.FXMLP.IGNORE_CLASSES" name="IGNORE_CLASSES" value="Check factory classes (in regular expression)"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="^javax.xml.parsers.DocumentBuilderFactory$;^javax.xml.transform.TransformerFactory$" id="SECURITY.WSC.FXMLP.IGNORE_CLASSES" inputType="stringList" label="Check factory classes (in regular expression)" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CAP" header="Always clone array parameters which are stored to fields" id="CAP" scope="LINE" severity="1" since="9.0">
               <messages>
                  <msg index="1" value="Array parameter ''{0}'' is not cloned before it is stored."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ACPST" header="Do not call the 'printStackTrace()' method of &quot;Throwable&quot; objects." id="ACPST" scope="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="The 'printStackTrace()' method of a &quot;Throwable&quot; object is called here."/>
               </messages>
               <oldparameters>
                  <oldparam id="SECURITY.WSC.ACPST.IGNORE_OVERRIDDEN" name="IGNORE_OVERRIDDEN" value="Ignore overridden versions of the 'printStackTrace()' methods"/>
                  <oldparam id="SECURITY.WSC.ACPST.IGNORE_OVERLOADED" name="IGNORE_OVERLOADED" value="Ignore overloaded versions of the 'printStackTrace()' method"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="" name="OWASP-2007"/>
                  <reference href="http://cwe.mitre.org/data/definitions/209.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="true" id="SECURITY.WSC.ACPST.IGNORE_OVERRIDDEN" inputType="checkbox" label="Ignore overridden methods"/>
                  <param defaultValue="true" id="SECURITY.WSC.ACPST.IGNORE_OVERLOADED" inputType="checkbox" label="Ignore overloaded methods"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SCHTTP" header="Mark cookies as HttpOnly" id="SCHTTP" scope="LINE" severity="2" since="10.4.2">
               <messages>
                  <msg index="1" value="The cookie is not marked as 'HttpOnly'."/>
                  <msg index="2" value="The cookie is not marked as 'HttpOnly'. Call setHttpOnly(true) on the cookie object (available since Java Servlet 3.0)."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AUNC" header="Avoid using the javax.crypto.NullCipher class in non-test classes." id="AUNC" scope="LINE" severity="2" since="10.4.2">
               <messages>
                  <msg index="1" value="The NullCipher class that does not encrypt the plaintext is used in a non-test class."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CLONE" header="Make your 'clone()' method &quot;final&quot; for security." id="CLONE" scope="LINE" severity="4" since="4.5">
               <messages>
                  <msg index="1" value="'clone()' method is not &quot;final&quot;."/>
               </messages>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/491.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.RDM" header="Inspect 'Random' objects or 'Math.random()' methods that could indicate areas where malicious code has been placed." id="RDM" scope="LINE" severity="5" since="6.0">
               <messages>
                  <msg index="1" value="Inspect usage of 'Random' object or method that might lead to unpredictable behavior"/>
               </messages>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/511.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SER" header="Make your classes nonserializeable." id="SER" scope="CLASS" severity="5" since="4.5">
               <messages>
                  <msg index="1" value="'writeObject()' method is missing"/>
                  <msg index="2" value="'writeObject()' method is not &quot;final&quot;."/>
                  <msg index="3" value="java.io.IOException is not thrown."/>
               </messages>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/499.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.USC" header="Use the SSL-enabled version of classes when possible." id="USC" scope="LINE" severity="3" since="7.5">
               <messages>
                  <msg index="1" value="Consider using the SSL-enabled type ''SSLServerSocketFactory'' for the {0} ''{1}''"/>
                  <msg index="2" value="Consider using the SSL-enabled type ''SSLSocketFactory'' for the {0} ''{1}''"/>
                  <msg index="3" value="Consider using the SSL-enabled type ''HttpsURLConnection'' for the {0} ''{1}''."/>
                  <msg index="4" value="Consider using the SSL-enabled type ''SslRMIClientSocketFactory'' for the {0} ''{1}''."/>
                  <msg index="5" value="Consider using the SSL-enabled type ''SslRMIServerSocketFactory'' for the {0} ''{1}''."/>
                  <msg index="6" value="Consider using the SSL-enabled type ''SSLSocket'' for the {0} ''{1}''."/>
                  <msg index="7" value="Consider using the SSL-enabled type ''SSLServerSocket'' for the {0} ''{1}''."/>
                  <msg index="8" value="Consider using the SSL-enabled type ''SSLPermission'' for the {0} ''{1}''."/>
               </messages>
               <references>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010"/>
                  <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/494.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SRD" header="Use 'java.security.SecureRandom' instead of 'java.util.Random' or 'Math.random()'." id="SRD" scope="LINE" severity="1" since="6.0">
               <messages>
                  <msg index="1" value="Avoid using the insecure ''{0}'' as a random number generator"/>
               </messages>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/330.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/338.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SSM" header="Ensure that an appropriate security manager is set" id="SSM" scope="LINe" severity="1" since="6.0">
               <messages>
                  <msg index="1" value="Security manager is missing, 'setSecurityManager' should be invoked"/>
               </messages>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010"/>
                  <reference href="http://cwe.mitre.org/data/definitions/180.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE"/>
               </references>
            </rule>
         </category>
      </category>
      <category description="Javadoc Comments" name="JAVADOC">
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.BT" header="Avoid unsupported '@' tags and other tags that should not be used in Javadoc comments" id="BT" scope="LINE" severity="4" since="4.5">
            <messages>
               <msg index="1" value="Unsupported Javadoc tag: {0}."/>
               <msg index="2" value="The ''{0}'' tag should not be used in a Javadoc comment."/>
            </messages>
            <oldparameters>
               <oldparam id="JAVADOC.BT.TAG_LIST" name="TAG_LIST" value="Allowed Javadoc tag list (in regular expressions)"/>
            </oldparameters>
            <parameters>
               <param defaultValue="@author;@version;@see;@param;@return;@exception;@throws;@deprecated;@since;@serial;@serialData;@serialField;@linkplain;@inheritDoc;@category;@cat;@list;@example;@tutorial;@index;@exclude;@hide;@docRoot;@obsolete;@todo;@internal;@beaninfo;@pre;@preconditions;@post;@postconditions;@concurrency;@assert;@verbose;@invariant;@date;@link;@pr;@generated" id="JAVADOC.BT.TAG_LIST" inputType="stringList" label="Allowed Javadoc tag list (in regular expressions)" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.JNJD" header="Do not insert non-Javadoc comments between Javadoc comments and declarations" id="JNJD" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Avoid inserting non-Javadoc comments between Javadoc comments and declarations."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.MAJDT" header="Use the '@author' Javadoc tag in declaration Javadoc comments" id="MAJDT" scope="CLASS" severity="4" since="4.5">
            <messages>
               <msg index="1" value="Missing ''@author'' Javadoc tag: {0}."/>
            </messages>
            <oldparameters>
               <oldparam id="JAVADOC.MAJDT.CHECK_TYPE" name="CHECK_TYPE" value="Check type declarations"/>
               <oldparam id="JAVADOC.MAJDT.CHECK_METHOD" name="CHECK_METHOD" value="Check method/annotation member type declarations"/>
               <oldparam id="JAVADOC.MAJDT.CHECK_FIELD" name="CHECK_FIELD" value="Check field declarations"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="JAVADOC.MAJDT.CHECK_TYPE" inputType="checkbox" label="Check type declarations"/>
               <param defaultValue="false" id="JAVADOC.MAJDT.CHECK_METHOD" inputType="checkbox" label="Check method/annotation member type declarations"/>
               <param defaultValue="false" id="JAVADOC.MAJDT.CHECK_FIELD" inputType="checkbox" label="Check field declarations"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.MDJT" header="Include a meaningful description in Javadoc tags." id="MDJT" scope="LINE" severity="3" since="8.2">
            <messages>
               <msg index="1" value="This '@return' tag does not contain a meaningful description of the method's return value."/>
               <msg index="2" value="This '@param' tag does not contain a meaningful description of the parameter."/>
               <msg index="3" value="This ''{0}'' tag should not be empty."/>
            </messages>
            <oldparameters>
               <oldparam id="JAVADOC.MDJT.CHECK" name="CHECK" value="Check the following:"/>
               <oldparam id="JAVADOC.MDJT.CHECK_PUBLIC" name="CHECK_PUBLIC" value="&quot;public&quot;"/>
               <oldparam id="JAVADOC.MDJT.CHECK_PROTECTED" name="CHECK_PROTECTED" value="&quot;protected&quot;"/>
               <oldparam id="JAVADOC.MDJT.CHECK_PACKAGE" name="CHECK_PACKAGE" value="&quot;package-private&quot;"/>
               <oldparam id="JAVADOC.MDJT.CHECK_PRIVATE" name="CHECK_PRIVATE" value="&quot;private&quot;"/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="JAVADOC.MDJT.group.0" label="Check the following:">
                  <param defaultValue="true" id="JAVADOC.MDJT.CHECK_PUBLIC" inputType="checkbox" label="&quot;public&quot;"/>
                  <param defaultValue="true" id="JAVADOC.MDJT.CHECK_PROTECTED" inputType="checkbox" label="&quot;protected&quot;"/>
                  <param defaultValue="true" id="JAVADOC.MDJT.CHECK_PACKAGE" inputType="checkbox" label="&quot;package-private&quot;"/>
                  <param defaultValue="false" id="JAVADOC.MDJT.CHECK_PRIVATE" inputType="checkbox" label="&quot;private&quot;"/>
               </group>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.ORDER" header="Order Javadoc tags appropriately" id="ORDER" scope="LINE" severity="3" since="5.0">
            <messages>
               <msg index="1" value="Invalid Javadoc tag order in ''{0}''."/>
               <msg index="2" value="''{0}'' tag should be placed before ''{1}'' tag in ''{2}()''."/>
            </messages>
            <oldparameters>
               <oldparam id="JAVADOC.ORDER.CHECK" name="CHECK" value="check"/>
               <oldparam id="JAVADOC.ORDER.TAG_ORDER" name="TAG_ORDER" value="Javadoc Tag Order"/>
               <oldparam id="JAVADOC.ORDER.ORDER_LIST" name="ORDER_LIST" value="Javadoc tag table"/>
               <oldparam id="JAVADOC.ORDER.IGNORE" name="IGNORE" value="Ignore tag"/>
            </oldparameters>
            <parameters>
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="JAVADOC.ORDER.ORDER_LIST" label="Javadoc tag table" reader="SATable">
                  <columns>
                     <column columnType="checkbox" editable="true" id="JAVADOC__ORDER__ORDER_LIST__COLUMN1" label="Ignore tag" required="true"/>
                     <column columnType="text" editable="true" id="JAVADOC__ORDER__ORDER_LIST__COLUMN2" label="Javadoc Tag Order" required="true"/>
                  </columns>
                  <predefinedRows>
                     <row id="1">
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@author"/>
                     </row>
                     <row id="2">
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@version"/>
                     </row>
                     <row id="3">
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@concurrency"/>
                     </row>
                     <row id="4">
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@param"/>
                     </row>
                     <row id="5">
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@return"/>
                     </row>
                     <row id="6">
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@exception"/>
                     </row>
                     <row id="7">
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@throws"/>
                     </row>
                     <row id="8">
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@see"/>
                     </row>
                     <row id="9">
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@since"/>
                     </row>
                     <row id="10">
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@serial"/>
                     </row>
                     <row id="11">
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@serialData"/>
                     </row>
                     <row id="12">
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@serialField"/>
                     </row>
                     <row id="13">
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                        <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@deprecated"/>
                     </row>
                  </predefinedRows>
               </complexParamTable>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.PJDC" header="Provide Javadoc comments and descriptions for types" id="PJDC" scope="CLASS" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Missing Javadoc comment for ''{0}''."/>
               <msg index="2" value="Missing description for ''{0}''."/>
            </messages>
            <oldparameters>
               <oldparam id="JAVADOC.PJDC.JAVADOC.PJDCC" name="JAVADOC.PJDCC" value="Check &quot;public&quot; types"/>
               <oldparam id="JAVADOC.PJDC.JAVADOC.PJDCC2" name="JAVADOC.PJDCC2" value="Check &quot;protected&quot; types"/>
               <oldparam id="JAVADOC.PJDC.JAVADOC.PJDCC3" name="JAVADOC.PJDCC3" value="Check &quot;package-private&quot; types"/>
               <oldparam id="JAVADOC.PJDC.JAVADOC.PJDCC4" name="JAVADOC.PJDCC4" value="Check &quot;private&quot; types"/>
               <oldparam id="JAVADOC.PJDC.JAVADOC.MCJCH" name="JAVADOC.MCJCH" value="Check if javadoc description is missing"/>
               <oldparam id="JAVADOC.PJDC.IGNORE_MEMBER_CLASS" name="IGNORE_MEMBER_CLASS" value="Ignore member types (inner types)"/>
               <oldparam id="JAVADOC.PJDC.ACCESSIBILITY" name="ACCESSIBILITY" value="Accessibility"/>
               <oldparam id="JAVADOC.PJDC.IGNORE_LIST" name="IGNORE_LIST" value="Ignore types with fully qualified names (in regular expression):"/>
               <oldparam id="JAVADOC.PJDC.SCOPE_OF_CHECKING" name="SCOPE_OF_CHECKING" value="Scope of checking"/>
               <oldparam id="JAVADOC.PJDC.IGNORE_LOCAL_CLASS" name="IGNORE_LOCAL_CLASS" value="Ignore local classes (classes declared inside method body)"/>
               <oldparam id="JAVADOC.PJDC.SPECIAL_CASE" name="SPECIAL_CASE" value="Special case"/>
               <oldparam id="JAVADOC.PJDC.CHECK_MISSING_JAVADOC" name="CHECK_MISSING_JAVADOC" value="Check if javadoc comment is missing"/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="JAVADOC.PJDC.group.0" label="Scope of checking">
                  <param defaultValue="true" id="JAVADOC.PJDC.CHECK_MISSING_JAVADOC" inputType="checkbox" label="Check if javadoc comment is missing"/>
                  <param defaultValue="false" id="JAVADOC.PJDC.JAVADOC.MCJCH" inputType="checkbox" label="Check if javadoc description is missing"/>
               </group>
               <group collapsible="false" id="JAVADOC.PJDC.group.1" label="Accessibility">
                  <param defaultValue="true" id="JAVADOC.PJDC.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; types"/>
                  <param defaultValue="false" id="JAVADOC.PJDC.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; types"/>
                  <param defaultValue="false" id="JAVADOC.PJDC.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; types"/>
                  <param defaultValue="false" id="JAVADOC.PJDC.CHECK_PRIVATE" inputType="checkbox" label="Check &quot;private&quot; types"/>
               </group>
               <group collapsible="false" id="JAVADOC.PJDC.group.2" label="Special case">
                  <param defaultValue="" id="JAVADOC.PJDC.IGNORE_LIST" inputType="stringList" label="Ignore types with fully qualified names (in regular expression):" prevType="StringList"/>
                  <param defaultValue="false" id="JAVADOC.PJDC.IGNORE_MEMBER_CLASS" inputType="checkbox" label="Ignore member types (inner types)"/>
                  <param defaultValue="false" id="JAVADOC.PJDC.IGNORE_LOCAL_CLASS" inputType="checkbox" label="Ignore local classes (classes declared inside method body)"/>
               </group>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.PJDF" header="Provide Javadoc comments and descriptions for fields" id="PJDF" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Missing Javadoc comment for ''{0}''."/>
               <msg index="2" value="Missing description for ''{0}''."/>
            </messages>
            <oldparameters>
               <oldparam id="JAVADOC.PJDF.JAVADOC.PJDCF" name="JAVADOC.PJDCF" value="Check &quot;public&quot; fields"/>
               <oldparam id="JAVADOC.PJDF.JAVADOC.PJDCF2" name="JAVADOC.PJDCF2" value="Check &quot;protected&quot; fields"/>
               <oldparam id="JAVADOC.PJDF.JAVADOC.PJDCF3" name="JAVADOC.PJDCF3" value="Check &quot;package-private&quot; fields"/>
               <oldparam id="JAVADOC.PJDF.JAVADOC.PJDCF4" name="JAVADOC.PJDCF4" value="Check &quot;private&quot; fields"/>
               <oldparam id="JAVADOC.PJDF.JAVADOC.MFJCH" name="JAVADOC.MFJCH" value="Check javadoc description is missing"/>
               <oldparam id="JAVADOC.PJDF.ACCESSIBILITY" name="ACCESSIBILITY" value="Accessibility"/>
               <oldparam id="JAVADOC.PJDF.IGNORE_LIST" name="IGNORE_LIST" value="Ignore fields with names (in regular expression):"/>
               <oldparam id="JAVADOC.PJDF.SCOPE_OF_CHECKING" name="SCOPE_OF_CHECKING" value="Scope of checking"/>
               <oldparam id="JAVADOC.PJDF.SPECIAL_CASE" name="SPECIAL_CASE" value="Special case"/>
               <oldparam id="JAVADOC.PJDF.CHECK_MISSING_JAVADOC" name="CHECK_MISSING_JAVADOC" value="Check if javadoc comment is missing"/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="JAVADOC.PJDF.group.2" label="Scope of checking">
                  <param defaultValue="true" id="JAVADOC.PJDF.CHECK_MISSING_JAVADOC" inputType="checkbox" label="Check if javadoc comment is missing"/>
                  <param defaultValue="false" id="JAVADOC.PJDF.JAVADOC.MFJCH" inputType="checkbox" label="Check javadoc description is missing"/>
               </group>
               <group collapsible="false" id="JAVADOC.PJDF.group.0" label="Accessibility">
                  <param defaultValue="true" id="JAVADOC.PJDF.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; fields"/>
                  <param defaultValue="false" id="JAVADOC.PJDF.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; fields"/>
                  <param defaultValue="false" id="JAVADOC.PJDF.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; fields"/>
                  <param defaultValue="false" id="JAVADOC.PJDF.CHECK_PRIVATE" inputType="checkbox" label="Check &quot;private&quot; fields"/>
               </group>
               <group collapsible="false" id="JAVADOC.PJDF.group.1" label="Special case">
                  <param defaultValue="" id="JAVADOC.PJDF.IGNORE_LIST" inputType="stringList" label="Ignore fields with names (in regular expression):" prevType="StringList"/>
               </group>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.SINGLE" header="Enforce restraint on number of lines used for Javadoc comments" id="SINGLE" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Javadoc comment is placed on a single line, which should be avoided."/>
               <msg index="2" value="Javadoc comment could be refitted to a single line."/>
            </messages>
            <oldparameters>
               <oldparam id="JAVADOC.SINGLE.CHECK_OPTION" name="CHECK_OPTION" value="Javadoc format option:"/>
               <oldparam id="JAVADOC.SINGLE.ENFORCE_SINGLE_LINE" name="ENFORCE_SINGLE_LINE" value="Always use single line for javadoc comments if they fit"/>
               <oldparam id="JAVADOC.SINGLE.AVOID_SINGLE_LINE" name="AVOID_SINGLE_LINE" value="Always use multiple lines for javadoc comments"/>
            </oldparameters>
            <parameters>
               <radioGroup id="JAVADOC.SINGLE.CHECK_OPTION" label="Javadoc format option:" prevType="MultipleChoice" showLabel="true">
                  <radioItem label="Always use multiple lines for javadoc comments" value="0"/>
                  <radioItem defaultValue="checked" label="Always use single line for javadoc comments if they fit" value="1"/>
               </radioGroup>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.SRRP" header="Specify 'RUNTIME' as the retention policy when using the '@Documented' annotation." id="SRRP" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="The '@Documented' annotation is used here without specifying 'RUNTIME' as the retention policy."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.TSOL" header="Ensure that certain Javadoc tags only span one line." id="TSOL" scope="LINE" severity="3" since="8.1">
            <messages>
               <msg index="1" value="This ''{0}'' tag spans multiple lines. Ensure that this is correct."/>
            </messages>
            <oldparameters>
               <oldparam id="JAVADOC.TSOL.TAG_LIST" name="TAG_LIST" value="Tags which should not span multiple lines"/>
            </oldparameters>
            <parameters>
               <param defaultValue="@author;@since" id="JAVADOC.TSOL.TAG_LIST" inputType="stringList" label="Tags which should not span multiple lines" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.CRN" header="Always include a description of whether or not a method can return null in the Javadoc." id="CRN" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="The method ''{0}'' does not have a Javadoc comment describing whether or not the method can return null."/>
               <msg index="2" value="The method ''{0}'' should include an ''@post'' or ''@return'' tag describing whether or not the method can return null."/>
               <msg index="3" value="The ''@post''/''@return'' tag(s) for the method ''{0}'' do not properly describe whether or not the method can return null."/>
            </messages>
            <oldparameters>
               <oldparam id="JAVADOC.CRN.ALLOW_OVERRIDE" name="ALLOW_OVERRIDE" value="Use parent method javadoc for @Override methods with no javadoc"/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="JAVADOC.CRN.ALLOW_OVERRIDE" inputType="checkbox" label="Use parent method javadoc for @Override methods with no javadoc"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.MRDC" header="Use the '@return' Javadoc tag in method Javadoc comments" id="MRDC" scope="METHOD" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Method ''{0}'' missing ''@return'' Javadoc tag."/>
            </messages>
            <oldparameters>
               <oldparam id="JAVADOC.MRDC.CHECK_PUBLIC" name="CHECK_PUBLIC" value="Check &quot;public&quot; methods"/>
               <oldparam id="JAVADOC.MRDC.CHECK_PROTECTED" name="CHECK_PROTECTED" value="Check &quot;protected&quot; methods"/>
               <oldparam id="JAVADOC.MRDC.CHECK_PACKAGE" name="CHECK_PACKAGE" value="Check &quot;package-private&quot; methods"/>
               <oldparam id="JAVADOC.MRDC.CHECK_PRIVATE" name="CHECK_PRIVATE" value="Check &quot;private&quot; methods"/>
               <oldparam id="JAVADOC.MRDC.INHERITED_TAG" name="INHERITED_TAG" value="Use these tags for overriding and implementing methods:"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="JAVADOC.MRDC.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods"/>
               <param defaultValue="true" id="JAVADOC.MRDC.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods"/>
               <param defaultValue="true" id="JAVADOC.MRDC.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; methods"/>
               <param defaultValue="false" id="JAVADOC.MRDC.sCHECK_PRIVATE" inputType="checkbox" label="Check &quot;private&quot; methods"/>
               <param defaultValue="@see,@inheritDoc" id="JAVADOC.MRDC.INHERITED_TAG" inputType="text" label="Use these tags for overriding and implementing methods:"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.DPMT" header="Avoid unused Javadoc tags" id="DPMT" scope="LINE" severity="3" since="5.0">
            <messages>
               <msg index="1" value="''{0}'' doesn''t match the return type of ''{1}''."/>
               <msg index="2" value="''{0}'' doesn''t match any Java element."/>
               <msg index="3" value="''{0}'' doesn''t match any parameter in ''{1}''."/>
               <msg index="4" value="''{0}'' doesn''t match any exception thrown by ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="JAVADOC.DPMT.CHECK_SEE" name="CHECK_SEE" value="Check unused @see and @link tags"/>
               <oldparam id="JAVADOC.DPMT.CHECK_THROWS" name="CHECK_THROWS" value="Check unused @throws and @exception tags"/>
               <oldparam id="JAVADOC.DPMT.CHECK_PARAM" name="CHECK_PARAM" value="Check unused @param tags"/>
               <oldparam id="JAVADOC.DPMT.IGNORE_RUNTIME_EXCEPTION" name="IGNORE_RUNTIME_EXCEPTION" value="Ignore @throws and @exception tags of 'RuntimeException'"/>
               <oldparam id="JAVADOC.DPMT.CHECK_RETURN" name="CHECK_RETURN" value="Check unused @return tags"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="JAVADOC.DPMT.CHECK_PARAM" inputType="checkbox" label="Check unused @param tags"/>
               <param defaultValue="true" id="JAVADOC.DPMT.CHECK_RETURN" inputType="checkbox" label="Check unused @return tags"/>
               <param defaultValue="true" id="JAVADOC.DPMT.CHECK_THROWS" inputType="checkbox" label="Check unused @throws and @exception tags">
                  <param defaultValue="true" id="JAVADOC.DPMT.IGNORE_RUNTIME_EXCEPTION" inputType="checkbox" label="Ignore @throws and @exception tags of 'RuntimeException'"/>
               </param>
               <param defaultValue="true" id="JAVADOC.DPMT.CHECK_SEE" inputType="checkbox" label="Check unused @see and @link tags"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.PJDM" header="Provide Javadoc comments and descriptions for methods" id="PJDM" scope="METHOD" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Missing Javadoc comment for method ''{0}()''."/>
               <msg index="2" value="Missing description for method ''{0}()''."/>
            </messages>
            <oldparameters>
               <oldparam id="JAVADOC.PJDM.JAVADOC.PJDCM" name="JAVADOC.PJDCM" value="Check &quot;public&quot; methods/annotation member types"/>
               <oldparam id="JAVADOC.PJDM.JAVADOC.PJDCM2" name="JAVADOC.PJDCM2" value="Check &quot;protected&quot; methods/annotation member types"/>
               <oldparam id="JAVADOC.PJDM.JAVADOC.PJDCM3" name="JAVADOC.PJDCM3" value="Check &quot;package-private&quot; methods/annotation member types"/>
               <oldparam id="JAVADOC.PJDM.JAVADOC.PJDCM4" name="JAVADOC.PJDCM4" value="Check &quot;private&quot; methods/annotation member types"/>
               <oldparam id="JAVADOC.PJDM.JAVADOC.MMJCH" name="JAVADOC.MMJCH" value="Check if javadoc description is missing"/>
               <oldparam id="JAVADOC.PJDM.IGNORE_SETTER_GETTER" name="IGNORE_SETTER_GETTER" value="Ignore setter and getter methods"/>
               <oldparam id="JAVADOC.PJDM.IGNORE_LOCAL_AND_ANONYMOUS_METHOD" name="IGNORE_LOCAL_AND_ANONYMOUS_METHOD" value="Ignore method declarations within local classes and anonymous classes"/>
               <oldparam id="JAVADOC.PJDM.ACCESSIBILITY" name="ACCESSIBILITY" value="Accessibility"/>
               <oldparam id="JAVADOC.PJDM.IGNORE_LIST" name="IGNORE_LIST" value="Ignore methods/annotation member types with names (in regular expression):"/>
               <oldparam id="JAVADOC.PJDM.SCOPE_OF_CHECKING" name="SCOPE_OF_CHECKING" value="Scope of checking"/>
               <oldparam id="JAVADOC.PJDM.IGNORE_INTERFACE_METHOD" name="IGNORE_INTERFACE_METHOD" value="Ignore method declarations within interfaces"/>
               <oldparam id="JAVADOC.PJDM.SPECIAL_CASE" name="SPECIAL_CASE" value="Special case"/>
               <oldparam id="JAVADOC.PJDM.IGNORE_ABSTRACT_METHOD" name="IGNORE_ABSTRACT_METHOD" value="Ignore &quot;abstract&quot; methods"/>
               <oldparam id="JAVADOC.PJDM.CHECK_MISSING_JAVADOC" name="CHECK_MISSING_JAVADOC" value="Check if javadoc comment is missing"/>
               <oldparam id="JAVADOC.PJDM.IGNORE_OVERRIDING_METHOD" name="IGNORE_OVERRIDING_METHOD" value="Ignore overriding methods"/>
               <oldparam id="JAVADOC.PJDM.IGNORE_PRIVATE_MEMBER_METHOD" name="IGNORE_PRIVATE_MEMBER_METHOD" value="Ignore method declarations within private member classes"/>
               <oldparam id="JAVADOC.PJDM.IGNORE_NOT_FROM_SOURCE" name="IGNORE_NOT_FROM_SOURCE" value="Ignore overriding methods where the source code for the overridden method is not available"/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="JAVADOC.PJDM.group.2" label="Scope of checking">
                  <param defaultValue="true" id="JAVADOC.PJDM.CHECK_MISSING_JAVADOC" inputType="checkbox" label="Check if javadoc comment is missing"/>
                  <param defaultValue="false" id="JAVADOC.PJDM.JAVADOC.MMJCH" inputType="checkbox" label="Check if javadoc description is missing"/>
               </group>
               <group collapsible="false" id="JAVADOC.PJDM.group.0" label="Accessibility">
                  <param defaultValue="true" id="JAVADOC.PJDM.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods/annotation member types"/>
                  <param defaultValue="false" id="JAVADOC.PJDM.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods/annotation member types"/>
                  <param defaultValue="false" id="JAVADOC.PJDM.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; methods/annotation member types"/>
                  <param defaultValue="false" id="JAVADOC.PJDM.CHECK_PRIVATE" inputType="checkbox" label="Check &quot;private&quot; methods/annotation member types"/>
               </group>
               <group collapsible="false" id="JAVADOC.PJDM.group.1" label="Special case">
                  <param defaultValue="^main$" id="JAVADOC.PJDM.IGNORE_LIST" inputType="stringList" label="Ignore methods/annotation member types with names (in regular expression):" prevType="StringList"/>
                  <param defaultValue="false" id="JAVADOC.PJDM.IGNORE_ABSTRACT_METHOD" inputType="checkbox" label="Ignore &quot;abstract&quot; methods"/>
                  <param defaultValue="false" id="JAVADOC.PJDM.IGNORE_INTERFACE_METHOD" inputType="checkbox" label="Ignore method declarations within interfaces"/>
                  <param defaultValue="false" id="JAVADOC.PJDM.IGNORE_OVERRIDING_METHOD" inputType="checkbox" label="Ignore overriding methods">
                     <param defaultValue="true" id="JAVADOC.PJDM.IGNORE_NOT_FROM_SOURCE" inputType="checkbox" label="Ignore overriding methods where the source code for the overridden method is not available"/>
                  </param>
                  <param defaultValue="true" id="JAVADOC.PJDM.IGNORE_SETTER_GETTER" inputType="checkbox" label="Ignore setter and getter methods"/>
                  <param defaultValue="true" id="JAVADOC.PJDM.IGNORE_LOCAL_AND_ANONYMOUS_METHOD" inputType="checkbox" label="Ignore method declarations within local classes and anonymous classes"/>
                  <param defaultValue="true" id="JAVADOC.PJDM.IGNORE_PRIVATE_MEMBER_METHOD" inputType="checkbox" label="Ignore method declarations within private member classes"/>
               </group>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.ECTF" header="Enforce custom Javadoc tags for fields" id="ECTF" scope="LINE" severity="4" since="8.0">
            <messages>
               <msg index="1" value="Missing Javadoc tag ''{0}'' for field declaration of {1}."/>
            </messages>
            <oldparameters>
               <oldparam id="JAVADOC.ECTF.CHECK_PROTECTED" name="CHECK_PROTECTED" value="Check &quot;protected&quot; field declarations"/>
               <oldparam id="JAVADOC.ECTF.ENFORCED_TAGS" name="ENFORCED_TAGS" value="Custom Javadoc tags to be enforced"/>
               <oldparam id="JAVADOC.ECTF.CHECK_PUBLIC" name="CHECK_PUBLIC" value="Check &quot;public&quot; field declarations"/>
               <oldparam id="JAVADOC.ECTF.CHECK_PACKAGE" name="CHECK_PACKAGE" value="Check &quot;package-private&quot; field declarations"/>
               <oldparam id="JAVADOC.ECTF.CHECK_PRIVATE" name="CHECK_PRIVATE" value="Check &quot;private&quot; field declarations"/>
               <oldparam id="JAVADOC.ECTF.INTERNAL_LINE" name="INTERNAL_LINE" value="With the following comment string"/>
               <oldparam id="JAVADOC.ECTF.INTERNAL_PKG" name="INTERNAL_PKG" value="Within the following packages(Regular Expression)"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="JAVADOC.ECTF.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; field declarations"/>
               <param defaultValue="false" id="JAVADOC.ECTF.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; field declarations"/>
               <param defaultValue="false" id="JAVADOC.ECTF.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; field declarations"/>
               <param defaultValue="false" id="JAVADOC.ECTF.CHECK_PRIVATE" inputType="checkbox" label="Check &quot;private&quot; field declarations"/>
               <group collapsible="false" id="JAVADOC.ECTF.group.0" label="Do not report violations for classes">
                  <param defaultValue="internal" id="JAVADOC.ECTF.INTERNAL_LINE" inputType="text" label="With the following comment string"/>
                  <param defaultValue=".*internal.*" id="JAVADOC.ECTF.INTERNAL_PKG" inputType="text" label="Within the following packages(Regular Expression)"/>
               </group>
               <param defaultValue="@since" id="JAVADOC.ECTF.ENFORCED_TAGS" inputType="stringList" label="Custom Javadoc tags to be enforced" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.THROW" header="Use the '@throws' or '@exception' Javadoc tag in methods" id="THROW" scope="METHOD" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Method ''{0}'' is missing ''@throws {1}'' in Javadoc comment."/>
            </messages>
            <oldparameters>
               <oldparam id="JAVADOC.THROW.CHECK_PUBLIC" name="CHECK_PUBLIC" value="Check &quot;public&quot; methods"/>
               <oldparam id="JAVADOC.THROW.CHECK_PRIVATE" name="CHECK_PRIVATE" value="Check &quot;private&quot; methods"/>
               <oldparam id="JAVADOC.THROW.CHECK_PROTECTED" name="CHECK_PROTECTED" value="Check &quot;protected&quot; methods"/>
               <oldparam id="JAVADOC.THROW.CHECK_PACKAGE" name="CHECK_PACKAGE" value="Check &quot;package-private&quot; methods"/>
               <oldparam id="JAVADOC.THROW.INHERITED_TAG" name="INHERITED_TAG" value="Use these tags for overriding and implementing methods:"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="JAVADOC.THROW.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods"/>
               <param defaultValue="false" id="JAVADOC.THROW.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods"/>
               <param defaultValue="false" id="JAVADOC.THROW.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; methods"/>
               <param defaultValue="false" id="JAVADOC.THROW.CHECK_PRIVATE" inputType="checkbox" label="Check &quot;private&quot; methods"/>
               <param defaultValue="@see,@inheritDoc" id="JAVADOC.THROW.INHERITED_TAG" inputType="text" label="Use these tags for overriding and implementing methods:"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.ECTT" header="Enforce custom Javadoc tags for types" id="ECTT" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Missing Javadoc tag ''{0}'' for class ''{1}''."/>
               <msg index="2" value="Missing Javadoc tag ''{0}'' for interface ''{1}''."/>
               <msg index="3" value="Missing Javadoc tag ''{0}'' for enum ''{1}''."/>
               <msg index="4" value="Missing Javadoc tag ''{0}'' for annotation ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="JAVADOC.ECTT.CHECK_PROTECTED" name="CHECK_PROTECTED" value="Check &quot;protected&quot; types"/>
               <oldparam id="JAVADOC.ECTT.ENFORCED_TAGS" name="ENFORCED_TAGS" value="Custom Javadoc tags to be enforced"/>
               <oldparam id="JAVADOC.ECTT.CHECK_PUBLIC" name="CHECK_PUBLIC" value="Check &quot;public&quot; types"/>
               <oldparam id="JAVADOC.ECTT.CHECK_PACKAGE" name="CHECK_PACKAGE" value="Check &quot;package-private&quot; types"/>
               <oldparam id="JAVADOC.ECTT.CHECK_PRIVATE" name="CHECK_PRIVATE" value="Check &quot;private&quot; types"/>
               <oldparam id="JAVADOC.ECTT.INTERNAL_LINE" name="INTERNAL_LINE" value="With the following comment string"/>
               <oldparam id="JAVADOC.ECTT.INTERNAL_PKG" name="INTERNAL_PKG" value="Within the following packages(Regular Expression)"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="JAVADOC.ECTT.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; types"/>
               <param defaultValue="false" id="JAVADOC.ECTT.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; types"/>
               <param defaultValue="false" id="JAVADOC.ECTT.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; types"/>
               <param defaultValue="false" id="JAVADOC.ECTT.CHECK_PRIVATE" inputType="checkbox" label="Check &quot;private&quot; types"/>
               <group collapsible="false" id="JAVADOC.ECTT.group.0" label="Do not report violations for classes">
                  <param defaultValue="internal" id="JAVADOC.ECTT.INTERNAL_LINE" inputType="text" label="With the following comment string"/>
                  <param defaultValue=".*internal.*" id="JAVADOC.ECTT.INTERNAL_PKG" inputType="text" label="Within the following packages(Regular Expression)"/>
               </group>
               <param defaultValue="@since" id="JAVADOC.ECTT.ENFORCED_TAGS" inputType="stringList" label="Custom Javadoc tags to be enforced" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.MISFORMAT" header="Avoid misformatted Javadoc tags" id="MISFORMAT" scope="METHOD" severity="3">
            <messages>
               <msg index="1" value="Probably ''{0}'' is misformatted Javadoc tag."/>
            </messages>
            <oldparameters>
               <oldparam id="JAVADOC.MISFORMAT.JAVADOC.MISFORMAT.PUBLIC" name="JAVADOC.MISFORMAT.PUBLIC" value="Check &quot;public&quot; methods"/>
               <oldparam id="JAVADOC.MISFORMAT.JAVADOC.MISFORMAT.PROTECTED" name="JAVADOC.MISFORMAT.PROTECTED" value="Check &quot;protected&quot; methods"/>
               <oldparam id="JAVADOC.MISFORMAT.JAVADOC.MISFORMAT.PACKAGE" name="JAVADOC.MISFORMAT.PACKAGE" value="Check &quot;package-private&quot; methods"/>
               <oldparam id="JAVADOC.MISFORMAT.JAVADOC.MISFORMAT.PRIVATE" name="JAVADOC.MISFORMAT.PRIVATE" value="Check &quot;private&quot; methods"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="JAVADOC.MISFORMAT.JAVADOC.MISFORMAT.PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods"/>
               <param defaultValue="true" id="JAVADOC.MISFORMAT.JAVADOC.MISFORMAT.PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods"/>
               <param defaultValue="true" id="JAVADOC.MISFORMAT.JAVADOC.MISFORMAT.PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; methods"/>
               <param defaultValue="false" id="JAVADOC.MISFORMAT.JAVADOC.MISFORMAT.PRIVATE" inputType="checkbox" label="Check &quot;private&quot; methods"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.SMJT" header="Use the '@concurrency' Javadoc tag on &quot;synchronized&quot; methods and blocks" id="SMJT" scope="METHOD" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Missing '@concurrency' Javadoc comment for &quot;synchronized&quot; method: {0}."/>
               <msg index="2" value="Missing '@concurrency' Javadoc comment for method with &quot;synchronized&quot; block: {0}."/>
            </messages>
            <oldparameters>
               <oldparam id="JAVADOC.SMJT.JAVADOC.SMJT" name="JAVADOC.SMJT" value="Check &quot;public&quot; methods"/>
               <oldparam id="JAVADOC.SMJT.JAVADOC.SMJT2" name="JAVADOC.SMJT2" value="Check &quot;protected&quot; methods"/>
               <oldparam id="JAVADOC.SMJT.JAVADOC.SMJT3" name="JAVADOC.SMJT3" value="Check &quot;package-private&quot; methods"/>
               <oldparam id="JAVADOC.SMJT.JAVADOC.SMJT4" name="JAVADOC.SMJT4" value="Check &quot;private&quot; methods"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="JAVADOC.SMJT.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods"/>
               <param defaultValue="true" id="JAVADOC.SMJT.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods"/>
               <param defaultValue="true" id="JAVADOC.SMJT.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; methods"/>
               <param defaultValue="false" id="JAVADOC.SMJT.CHECK_PRIVATE" inputType="checkbox" label="Check &quot;private&quot; methods"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.PARAM" header="Use the '@param' Javadoc tag for each parameter of methods" id="PARAM" scope="METHOD" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Method ''{0}'' is missing ''@param {1}'' in Javadoc comment."/>
            </messages>
            <oldparameters>
               <oldparam id="JAVADOC.PARAM.JAVADOC.PARAM" name="JAVADOC.PARAM" value="Check &quot;public&quot; methods"/>
               <oldparam id="JAVADOC.PARAM.JAVADOC.PARAM2" name="JAVADOC.PARAM2" value="Check &quot;protected&quot; methods"/>
               <oldparam id="JAVADOC.PARAM.JAVADOC.PARAM3" name="JAVADOC.PARAM3" value="Check &quot;package-private&quot; methods"/>
               <oldparam id="JAVADOC.PARAM.JAVADOC.PARAM4" name="JAVADOC.PARAM4" value="Check &quot;private&quot; methods"/>
               <oldparam id="JAVADOC.PARAM.INHERITED_TAG" name="INHERITED_TAG" value="Use these tags for overriding and implementing methods:"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="JAVADOC.PARAM.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods"/>
               <param defaultValue="true" id="JAVADOC.PARAM.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods"/>
               <param defaultValue="true" id="JAVADOC.PARAM.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; methods"/>
               <param defaultValue="false" id="JAVADOC.PARAM.CHECK_PRIVATE" inputType="checkbox" label="Check &quot;private&quot; methods"/>
               <param defaultValue="@see,@inheritDoc" id="JAVADOC.PARAM.INHERITED_TAG" inputType="text" label="Use these tags for overriding and implementing methods:"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.ECTM" header="Enforce custom Javadoc tags for methods/annotation member types" id="ECTM" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Missing Javadoc tag ''{0}'' for method ''{1}()''."/>
               <msg index="2" value="Missing Javadoc tag ''{0}'' for annotation member type ''{1}()''."/>
            </messages>
            <oldparameters>
               <oldparam id="JAVADOC.ECTM.CHECK_PROTECTED" name="CHECK_PROTECTED" value="Check &quot;protected&quot; methods/annotation member types"/>
               <oldparam id="JAVADOC.ECTM.ENFORCED_TAGS" name="ENFORCED_TAGS" value="Custom Javadoc tags to be enforced"/>
               <oldparam id="JAVADOC.ECTM.CHECK_PUBLIC" name="CHECK_PUBLIC" value="Check &quot;public&quot; methods/annotation member types"/>
               <oldparam id="JAVADOC.ECTM.CHECK_PACKAGE" name="CHECK_PACKAGE" value="Check &quot;package-private&quot; methods/annotation member types"/>
               <oldparam id="JAVADOC.ECTM.CHECK_PRIVATE" name="CHECK_PRIVATE" value="Check &quot;private&quot; methods/annotation member types"/>
               <oldparam id="JAVADOC.ECTM.INTERNAL_LINE" name="INTERNAL_LINE" value="With the following comment string"/>
               <oldparam id="JAVADOC.ECTM.INTERNAL_PKG" name="INTERNAL_PKG" value="Within the following packages(Regular Expression)"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="JAVADOC.ECTM.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods/annotation member types"/>
               <param defaultValue="false" id="JAVADOC.ECTM.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods/annotation member types"/>
               <param defaultValue="false" id="JAVADOC.ECTM.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; methods/annotation member types"/>
               <param defaultValue="false" id="JAVADOC.ECTM.CHECK_PRIVATE" inputType="checkbox" label="Check &quot;private&quot; methods/annotation member types"/>
               <group collapsible="false" id="JAVADOC.ECTM.group.0" label="Do not report violations for classes">
                  <param defaultValue="internal" id="JAVADOC.ECTM.INTERNAL_LINE" inputType="text" label="With the following comment string"/>
                  <param defaultValue=".*internal.*" id="JAVADOC.ECTM.INTERNAL_PKG" inputType="text" label="Within the following packages(Regular Expression)"/>
               </group>
               <param defaultValue="@since" id="JAVADOC.ECTM.ENFORCED_TAGS" inputType="stringList" label="Custom Javadoc tags to be enforced" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.SPELL" header="Avoid misspelling words in Javadoc comments and string literals." id="SPELL" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Misspelled word ''{0}''."/>
            </messages>
            <oldparameters>
               <oldparam id="JAVADOC.SPELL.MIN_SIZE" name="MIN_SIZE" value="Ignore length of word less than"/>
               <oldparam id="JAVADOC.SPELL.IGNORE_ALL_UPPER" name="IGNORE_ALL_UPPER" value="Ignore uppercase word"/>
               <oldparam id="JAVADOC.SPELL.IGNORE_STR_LITERAL" name="IGNORE_STR_LITERAL" value="Ignore words in string literal"/>
               <oldparam id="JAVADOC.SPELL.WORD_LIST" name="WORD_LIST" value="User-defined dictionary (share)"/>
            </oldparameters>
            <parameters>
               <param defaultValue="3" id="JAVADOC.SPELL.MIN_SIZE" inputType="integer" label="Ignore length of word less than" min="2"/>
               <param defaultValue="true" id="JAVADOC.SPELL.IGNORE_ALL_UPPER" inputType="checkbox" label="Ignore uppercase word"/>
               <param defaultValue="false" id="JAVADOC.SPELL.IGNORE_STR_LITERAL" inputType="checkbox" label="Ignore words in string literal"/>
               <param defaultValue="" id="JAVADOC.SPELL.WORD_LIST" inputType="stringList" label="User-defined dictionary (share)" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.TSMJT" header="Provide a Javadoc comment for 'toString()' methods." id="TSMJT" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Missing Javadoc for 'toString()'"/>
               <msg index="2" value="Missing Javadoc header for 'toString()'"/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.VMCR" header="Avoid using the '@return' Javadoc tag on &quot;void&quot; methods." id="VMCR" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="&quot;void&quot; method has ''@return'' tag: ''{0} ()''."/>
            </messages>
         </rule>
      </category>
      <category description="Formatting" name="FORMAT">
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.FCN" header="Place the type that has the same name as the file as the first type." id="FCN" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="The type has the same name as the file should be the first type."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.TC" header="Avoid using trailing comments." id="TC" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Do not use trailing comments."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.TNL" header="Make sure all files are terminated with a newline character." id="TNL" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="File should be terminated by a newline character."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SROP" header="Enforce number of space character(s) on each side of a relational operator" id="SROP" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="There is not {1} space after ''{0}''."/>
               <msg index="2" value="There is not {1} spaces after ''{0}''."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.SROP.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
               <oldparam id="FORMAT.SROP.SYMBOL_SPACE_AFTER" name="SYMBOL_SPACE_AFTER" value="Number of spaces after"/>
               <oldparam id="FORMAT.SROP.SYMBOL_SPACE_BEFORE" name="SYMBOL_SPACE_BEFORE" value="Number of spaces before"/>
            </oldparameters>
            <parameters>
               <param defaultValue="1" id="FORMAT.SROP.SYMBOL_SPACE_BEFORE" inputType="integer" label="Number of spaces before" min="0"/>
               <param defaultValue="1" id="FORMAT.SROP.SYMBOL_SPACE_AFTER" inputType="integer" label="Number of spaces after" min="0"/>
               <param defaultValue="false" hidden="true" id="FORMAT.SROP.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SBOP" header="Enforce number of space character(s) on each side of a bitwise operator" id="SBOP" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="There is not {1} space after ''{0}''."/>
               <msg index="2" value="There is not {1} spaces after ''{0}''."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.SBOP.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
               <oldparam id="FORMAT.SBOP.SYMBOL_SPACE_AFTER" name="SYMBOL_SPACE_AFTER" value="Number of spaces after"/>
               <oldparam id="FORMAT.SBOP.SYMBOL_SPACE_BEFORE" name="SYMBOL_SPACE_BEFORE" value="Number of spaces before"/>
            </oldparameters>
            <parameters>
               <param defaultValue="1" id="FORMAT.SBOP.SYMBOL_SPACE_BEFORE" inputType="integer" label="Number of spaces before" min="0"/>
               <param defaultValue="1" id="FORMAT.SBOP.SYMBOL_SPACE_AFTER" inputType="integer" label="Number of spaces after" min="0"/>
               <param defaultValue="false" hidden="true" id="FORMAT.SBOP.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SAUOP" header="Enforce number of space character(s) between a prefixed unary operator and its operand" id="SAUOP" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="There is not {0} space after unary operator ''{1}''."/>
               <msg index="2" value="There is not {0} spaces after unary operator ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.SAUOP.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
               <oldparam id="FORMAT.SAUOP.SYMBOL_SPACE_AFTER" name="SYMBOL_SPACE_AFTER" value="Number of spaces after"/>
            </oldparameters>
            <parameters>
               <param defaultValue="0" id="FORMAT.SAUOP.SYMBOL_SPACE_AFTER" inputType="integer" label="Number of spaces after" min="0"/>
               <param defaultValue="false" hidden="true" id="FORMAT.SAUOP.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.TE" header="Use the preferred formatting for conditional expressions" id="TE" scope="LINE" severity="3" since="5.0">
            <messages>
               <msg index="1" value="Invalid conditional expression format."/>
               <msg index="2" value="The condition in this conditional expression is not parenthesized."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.TE.FORMAT_TWO" name="FORMAT_TWO" value="expression1 ? expression2\n                     : expression3"/>
               <oldparam id="FORMAT.TE.FORMAT_ONE" name="FORMAT_ONE" value="expression1 ? expression2 : expression3"/>
               <oldparam id="FORMAT.TE.ENFORCED_FORMAT" name="ENFORCED_FORMAT" value="Enforced formats for conditional expressions"/>
               <oldparam id="FORMAT.TE.FORMAT_THREE" name="FORMAT_THREE" value="expression1\n? expression2\n: expression3"/>
               <oldparam id="FORMAT.TE.PARENTHESIZE" name="PARENTHESIZE" value="The condition must be parenthesized"/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="FORMAT.TE.group.0" label="Enforced formats for conditional expressions">
                  <param defaultValue="true" id="FORMAT.TE.FORMAT_ONE" inputType="checkbox" label="expression1 ? expression2 : expression3"/>
                  <param defaultValue="true" id="FORMAT.TE.FORMAT_TWO" inputType="checkbox" label="expression1 ? expression2\n: expression3"/>
                  <param defaultValue="true" id="FORMAT.TE.FORMAT_THREE" inputType="checkbox" label="expression1\n? expression2\n: expression3"/>
               </group>
               <param defaultValue="false" id="FORMAT.TE.PARENTHESIZE" inputType="checkbox" label="The condition must be parenthesized"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.FCB" header="Enforce the position of '{' brace" id="FCB" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Opening brace '''{''' is not on the same line as the {0}."/>
               <msg index="2" value="Opening brace '''{''' is not on the line following the {0} or is not indented exactly the same."/>
               <msg index="3" value="Opening brace '''{''' is not on the line following the {0} or does not have exactly one extra level of indentation."/>
               <msg index="4" value="Opening brace '''{''' does not follow coding convention.  It is not on the same line or the line following the {0} or does not have exactly one extra level of indentation."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.FCB.SAME_LINE" name="SAME_LINE" value="Same line"/>
               <oldparam id="FORMAT.FCB.ELSE" name="ELSE" value="&quot;else&quot; statement"/>
               <oldparam id="FORMAT.FCB.FINALLY" name="FINALLY" value="&quot;finally&quot; block"/>
               <oldparam id="FORMAT.FCB.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
               <oldparam id="FORMAT.FCB.WHILE" name="WHILE" value="&quot;while&quot; statement"/>
               <oldparam id="FORMAT.FCB.CLASS_DECL" name="CLASS_DECL" value="Class declaration"/>
               <oldparam id="FORMAT.FCB.ANNOTATION_DECL" name="ANNOTATION_DECL" value="Annotation type declaration"/>
               <oldparam id="FORMAT.FCB.IGNORE_IF_OPEN_AND_CLOSE_ON_SAME_LINE" name="IGNORE_IF_OPEN_AND_CLOSE_ON_SAME_LINE" value="Open and close braces on the same line are not considered a violation"/>
               <oldparam id="FORMAT.FCB.SWITCH" name="SWITCH" value="&quot;switch&quot; statement"/>
               <oldparam id="FORMAT.FCB.IF" name="IF" value="&quot;if&quot; statement"/>
               <oldparam id="FORMAT.FCB.NEXT_LINE" name="NEXT_LINE" value="Next line"/>
               <oldparam id="FORMAT.FCB.NEXT_LINE_ON_WRAP" name="NEXT_LINE_ON_WRAP" value="Next line on wrap"/>
               <oldparam id="FORMAT.FCB.IGNORE" name="IGNORE" value="Ignore"/>
               <oldparam id="FORMAT.FCB.DO" name="DO" value="&quot;do-while&quot; statement"/>
               <oldparam id="FORMAT.FCB.TRY" name="TRY" value="&quot;try&quot; statement"/>
               <oldparam id="FORMAT.FCB.IGNORE_IF_COMMENT_ABOVE_BRACE" name="IGNORE_IF_COMMENT_ABOVE_BRACE" value="Braces preceded by comments are not considered a violation"/>
               <oldparam id="FORMAT.FCB.ENUM_DECL" name="ENUM_DECL" value="Enum declaration"/>
               <oldparam id="FORMAT.FCB.CONSTRUCTOR_DECL" name="CONSTRUCTOR_DECL" value="Constructor declaration"/>
               <oldparam id="FORMAT.FCB.ENUM_CONSTANT" name="ENUM_CONSTANT" value="Enum constant body "/>
               <oldparam id="FORMAT.FCB.STATIC_INIT" name="STATIC_INIT" value="Static initializer"/>
               <oldparam id="FORMAT.FCB.CATCH" name="CATCH" value="&quot;catch&quot; clause"/>
               <oldparam id="FORMAT.FCB.NEXT_LINE_INDENT" name="NEXT_LINE_INDENT" value="Next line indented"/>
               <oldparam id="FORMAT.FCB.BLOCK_IN_CASE" name="BLOCK_IN_CASE" value="Block in  &quot;switch-case&quot;"/>
               <oldparam id="FORMAT.FCB.METHOD_DECL" name="METHOD_DECL" value="Method declaration"/>
               <oldparam id="FORMAT.FCB.FOR" name="FOR" value="&quot;for&quot; statement"/>
               <oldparam id="FORMAT.FCB.ARRAY" name="ARRAY" value="Array initializer"/>
               <oldparam id="FORMAT.FCB.BLOCK" name="BLOCK" value="Block"/>
               <oldparam id="FORMAT.FCB.ANONY_DECL" name="ANONY_DECL" value="Anonymous class declaration"/>
               <oldparam id="FORMAT.FCB.SYNC_STATEMENT" name="SYNC_STATEMENT" value="&quot;synchronized&quot; statement"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="FORMAT.FCB.IGNORE_IF_COMMENT_ABOVE_BRACE" inputType="checkbox" label="Braces preceded by comments are not considered a violation"/>
               <param defaultValue="true" id="FORMAT.FCB.IGNORE_IF_OPEN_AND_CLOSE_ON_SAME_LINE" inputType="checkbox" label="Open and close braces on the same line are not considered a violation"/>
               <radioGroup id="FORMAT.FCB.CLASS_DECL" label="Class declaration" prevType="ComboBox" showLabel="true">
                  <radioItem defaultValue="checked" label="Same line" value="0"/>
                  <radioItem label="Next line" value="1"/>
                  <radioItem label="Next line indented" value="2"/>
                  <radioItem label="Next line on wrap" value="3"/>
                  <radioItem label="Ignore" value="4"/>
               </radioGroup>
               <radioGroup id="FORMAT.FCB.ANONY_DECL" label="Anonymous class declaration" prevType="ComboBox" showLabel="true">
                  <radioItem defaultValue="checked" label="Same line" value="0"/>
                  <radioItem label="Next line" value="1"/>
                  <radioItem label="Next line indented" value="2"/>
                  <radioItem label="Next line on wrap" value="3"/>
                  <radioItem label="Ignore" value="4"/>
               </radioGroup>
               <radioGroup id="FORMAT.FCB.CONSTRUCTOR_DECL" label="Constructor declaration" prevType="ComboBox" showLabel="true">
                  <radioItem defaultValue="checked" label="Same line" value="0"/>
                  <radioItem label="Next line" value="1"/>
                  <radioItem label="Next line indented" value="2"/>
                  <radioItem label="Next line on wrap" value="3"/>
                  <radioItem label="Ignore" value="4"/>
               </radioGroup>
               <radioGroup id="FORMAT.FCB.ENUM_DECL" label="Enum declaration" prevType="ComboBox" showLabel="true">
                  <radioItem defaultValue="checked" label="Same line" value="0"/>
                  <radioItem label="Next line" value="1"/>
                  <radioItem label="Next line indented" value="2"/>
                  <radioItem label="Next line on wrap" value="3"/>
                  <radioItem label="Ignore" value="4"/>
               </radioGroup>
               <radioGroup id="FORMAT.FCB.ENUM_CONSTANT" label="Enum constant body " prevType="ComboBox" showLabel="true">
                  <radioItem defaultValue="checked" label="Same line" value="0"/>
                  <radioItem label="Next line" value="1"/>
                  <radioItem label="Next line indented" value="2"/>
                  <radioItem label="Next line on wrap" value="3"/>
                  <radioItem label="Ignore" value="4"/>
               </radioGroup>
               <radioGroup id="FORMAT.FCB.ANNOTATION_DECL" label="Annotation type declaration" prevType="ComboBox" showLabel="true">
                  <radioItem defaultValue="checked" label="Same line" value="0"/>
                  <radioItem label="Next line" value="1"/>
                  <radioItem label="Next line indented" value="2"/>
                  <radioItem label="Next line on wrap" value="3"/>
                  <radioItem label="Ignore" value="4"/>
               </radioGroup>
               <radioGroup id="FORMAT.FCB.METHOD_DECL" label="Method declaration" prevType="ComboBox" showLabel="true">
                  <radioItem defaultValue="checked" label="Same line" value="0"/>
                  <radioItem label="Next line" value="1"/>
                  <radioItem label="Next line indented" value="2"/>
                  <radioItem label="Next line on wrap" value="3"/>
                  <radioItem label="Ignore" value="4"/>
               </radioGroup>
               <radioGroup id="FORMAT.FCB.STATIC_INIT" label="Static initializer" prevType="ComboBox" showLabel="true">
                  <radioItem defaultValue="checked" label="Same line" value="0"/>
                  <radioItem label="Next line" value="1"/>
                  <radioItem label="Next line indented" value="2"/>
                  <radioItem label="Next line on wrap" value="3"/>
                  <radioItem label="Ignore" value="4"/>
               </radioGroup>
               <radioGroup id="FORMAT.FCB.ARRAY" label="Array initializer" prevType="ComboBox" showLabel="true">
                  <radioItem defaultValue="checked" label="Same line" value="0"/>
                  <radioItem label="Next line" value="1"/>
                  <radioItem label="Next line indented" value="2"/>
                  <radioItem label="Next line on wrap" value="3"/>
                  <radioItem label="Ignore" value="4"/>
               </radioGroup>
               <radioGroup id="FORMAT.FCB.BLOCK" label="Block" prevType="ComboBox" showLabel="true">
                  <radioItem defaultValue="checked" label="Same line" value="0"/>
                  <radioItem label="Next line" value="1"/>
                  <radioItem label="Next line indented" value="2"/>
                  <radioItem label="Next line on wrap" value="3"/>
                  <radioItem label="Ignore" value="4"/>
               </radioGroup>
               <radioGroup id="FORMAT.FCB.IF" label="&quot;if&quot; statement" prevType="ComboBox" showLabel="true">
                  <radioItem defaultValue="checked" label="Same line" value="0"/>
                  <radioItem label="Next line" value="1"/>
                  <radioItem label="Next line indented" value="2"/>
                  <radioItem label="Next line on wrap" value="3"/>
                  <radioItem label="Ignore" value="4"/>
               </radioGroup>
               <radioGroup id="FORMAT.FCB.ELSE" label="&quot;else&quot; statement" prevType="ComboBox" showLabel="true">
                  <radioItem defaultValue="checked" label="Same line" value="0"/>
                  <radioItem label="Next line" value="1"/>
                  <radioItem label="Next line indented" value="2"/>
                  <radioItem label="Next line on wrap" value="3"/>
                  <radioItem label="Ignore" value="4"/>
               </radioGroup>
               <radioGroup id="FORMAT.FCB.FOR" label="&quot;for&quot; statement" prevType="ComboBox" showLabel="true">
                  <radioItem defaultValue="checked" label="Same line" value="0"/>
                  <radioItem label="Next line" value="1"/>
                  <radioItem label="Next line indented" value="2"/>
                  <radioItem label="Next line on wrap" value="3"/>
                  <radioItem label="Ignore" value="4"/>
               </radioGroup>
               <radioGroup id="FORMAT.FCB.WHILE" label="&quot;while&quot; statement" prevType="ComboBox" showLabel="true">
                  <radioItem defaultValue="checked" label="Same line" value="0"/>
                  <radioItem label="Next line" value="1"/>
                  <radioItem label="Next line indented" value="2"/>
                  <radioItem label="Next line on wrap" value="3"/>
                  <radioItem label="Ignore" value="4"/>
               </radioGroup>
               <radioGroup id="FORMAT.FCB.DO" label="&quot;do-while&quot; statement" prevType="ComboBox" showLabel="true">
                  <radioItem defaultValue="checked" label="Same line" value="0"/>
                  <radioItem label="Next line" value="1"/>
                  <radioItem label="Next line indented" value="2"/>
                  <radioItem label="Next line on wrap" value="3"/>
                  <radioItem label="Ignore" value="4"/>
               </radioGroup>
               <radioGroup id="FORMAT.FCB.TRY" label="&quot;try&quot; statement" prevType="ComboBox" showLabel="true">
                  <radioItem defaultValue="checked" label="Same line" value="0"/>
                  <radioItem label="Next line" value="1"/>
                  <radioItem label="Next line indented" value="2"/>
                  <radioItem label="Next line on wrap" value="3"/>
                  <radioItem label="Ignore" value="4"/>
               </radioGroup>
               <radioGroup id="FORMAT.FCB.SYNC_STATEMENT" label="&quot;synchronized&quot; statement" prevType="ComboBox" showLabel="true">
                  <radioItem defaultValue="checked" label="Same line" value="0"/>
                  <radioItem label="Next line" value="1"/>
                  <radioItem label="Next line indented" value="2"/>
                  <radioItem label="Next line on wrap" value="3"/>
                  <radioItem label="Ignore" value="4"/>
               </radioGroup>
               <radioGroup id="FORMAT.FCB.CATCH" label="&quot;catch&quot; clause" prevType="ComboBox" showLabel="true">
                  <radioItem defaultValue="checked" label="Same line" value="0"/>
                  <radioItem label="Next line" value="1"/>
                  <radioItem label="Next line indented" value="2"/>
                  <radioItem label="Next line on wrap" value="3"/>
                  <radioItem label="Ignore" value="4"/>
               </radioGroup>
               <radioGroup id="FORMAT.FCB.FINALLY" label="&quot;finally&quot; block" prevType="ComboBox" showLabel="true">
                  <radioItem defaultValue="checked" label="Same line" value="0"/>
                  <radioItem label="Next line" value="1"/>
                  <radioItem label="Next line indented" value="2"/>
                  <radioItem label="Next line on wrap" value="3"/>
                  <radioItem label="Ignore" value="4"/>
               </radioGroup>
               <radioGroup id="FORMAT.FCB.SWITCH" label="&quot;switch&quot; statement" prevType="ComboBox" showLabel="true">
                  <radioItem defaultValue="checked" label="Same line" value="0"/>
                  <radioItem label="Next line" value="1"/>
                  <radioItem label="Next line indented" value="2"/>
                  <radioItem label="Next line on wrap" value="3"/>
                  <radioItem label="Ignore" value="4"/>
               </radioGroup>
               <radioGroup id="FORMAT.FCB.BLOCK_IN_CASE" label="Block in  &quot;switch-case&quot;" prevType="ComboBox" showLabel="true">
                  <radioItem defaultValue="checked" label="Same line" value="0"/>
                  <radioItem label="Next line" value="1"/>
                  <radioItem label="Next line indented" value="2"/>
                  <radioItem label="Next line on wrap" value="3"/>
                  <radioItem label="Ignore" value="4"/>
               </radioGroup>
               <param defaultValue="false" hidden="true" id="FORMAT.FCB.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.MSP" header="Place a single space character or no space character between a method name and the opening &quot;(&quot; parenthesis" id="MSP" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Method ''{0}'' does not have one space before the &quot;(&quot; parenthesis."/>
               <msg index="2" value="Method ''{0}'' has an extra space before the &quot;(&quot; parenthesis."/>
               <msg index="3" value="Method ''{0}'' has extra spaces before the &quot;(&quot; parenthesis."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.MSP.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
               <oldparam id="FORMAT.MSP.ONE_METHOD_SPACE" name="ONE_METHOD_SPACE" value="one space"/>
               <oldparam id="FORMAT.MSP.METHOD_SPACE" name="METHOD_SPACE" value="Check option"/>
               <oldparam id="FORMAT.MSP.NO_METHOD_SPACE" name="NO_METHOD_SPACE" value="no space"/>
            </oldparameters>
            <parameters>
               <radioGroup id="FORMAT.MSP.METHOD_SPACE" label="Check option" prevType="MultipleChoice" showLabel="true">
                  <radioItem label="one space" value="0"/>
                  <radioItem defaultValue="checked" label="no space" value="1"/>
               </radioGroup>
               <param defaultValue="false" hidden="true" id="FORMAT.MSP.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.U2BL" header="Enforce number of blank line(s) between major sections" id="U2BL" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Use {0} blank line before the package statements."/>
               <msg index="2" value="Use {0} blank lines before the package statements."/>
               <msg index="3" value="Use {0} blank line before the import statements (or corresponding import comments)."/>
               <msg index="4" value="Use {0} blank lines before the import statements (or corresponding import comments)."/>
               <msg index="5" value="Use {0} blank line before every top-level class (or corresponding Javadoc)."/>
               <msg index="6" value="Use {0} blank lines before every top-level class (or corresponding Javadoc)."/>
               <msg index="7" value="Use {0} blank line before every top-level interface (or corresponding Javadoc)."/>
               <msg index="8" value="Use {0} blank lines before every top-level interface (or corresponding Javadoc)."/>
               <msg index="9" value="Use {0} blank line before every field declaration (or corresponding Javadoc)."/>
               <msg index="10" value="Use {0} blank lines before every field declaration (or corresponding Javadoc)."/>
               <msg index="11" value="Use {0} blank line before every method declaration (or corresponding Javadoc)."/>
               <msg index="12" value="Use {0} blank lines before every method declaration (or corresponding Javadoc)."/>
               <msg index="13" value="Use {0} blank line before every member class (or corresponding Javadoc)."/>
               <msg index="14" value="Use {0} blank lines before every member class (or corresponding Javadoc)."/>
               <msg index="15" value="Use {0} blank line before every member interface (or corresponding Javadoc)."/>
               <msg index="16" value="Use {0} blank lines before every member interface (or corresponding Javadoc)."/>
               <msg index="17" value="Use {0} blank line before every declaration of the same kind (or corresponding Javadoc)."/>
               <msg index="18" value="Use {0} blank lines before every declaration of the same kind (or corresponding Javadoc)."/>
               <msg index="19" value="Use {0} blank line before every top-level enum declaration (or corresponding Javadoc)."/>
               <msg index="20" value="Use {0} blank lines before every top-level enum declaration (or corresponding Javadoc)."/>
               <msg index="21" value="Use {0} blank line before every top-level annotation declaration (or corresponding Javadoc)."/>
               <msg index="22" value="Use {0} blank lines before every top-level annotation declaration (or corresponding Javadoc)."/>
               <msg index="23" value="Use {0} blank line before every member enum declaration (or corresponding Javadoc)."/>
               <msg index="24" value="Use {0} blank lines before every member enum declaration (or corresponding Javadoc)."/>
               <msg index="25" value="Use {0} blank line before every member annotation declaration (or corresponding Javadoc)."/>
               <msg index="26" value="Use {0} blank lines before every member annotation declaration (or corresponding Javadoc)."/>
               <msg index="27" value="Use {0} blank line before every enum constant declaration (or corresponding Javadoc)."/>
               <msg index="28" value="Use {0} blank lines before every enum constant declaration (or corresponding Javadoc)."/>
               <msg index="29" value="Use {0} blank line before every annotation type member declaration (or corresponding Javadoc)."/>
               <msg index="30" value="Use {0} blank lines before every annotation type member declaration (or corresponding Javadoc)."/>
               <msg index="31" value="Use {0} blank line before each statement."/>
               <msg index="32" value="Use {0} blank lines before each statement."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.U2BL.IMPORT" name="IMPORT" value="import statements"/>
               <oldparam id="FORMAT.U2BL.BLANK_TABLE_IN_CLASS" name="BLANK_TABLE_IN_CLASS" value="Major sections in class declaration"/>
               <oldparam id="FORMAT.U2BL.FIELD_DECL" name="FIELD_DECL" value="field declarations"/>
               <oldparam id="FORMAT.U2BL.CLASS" name="CLASS" value="top-level classes"/>
               <oldparam id="FORMAT.U2BL.BLINE_IN_CLASS" name="BLINE_IN_CLASS" value="Blank lines in class declaration"/>
               <oldparam id="FORMAT.U2BL.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
               <oldparam id="FORMAT.U2BL.INNER_ENUM_DECL" name="INNER_ENUM_DECL" value="Member enum declarations"/>
               <oldparam id="FORMAT.U2BL.INNER_ANNOTATION_DECL" name="INNER_ANNOTATION_DECL" value="Member annotation declarations"/>
               <oldparam id="FORMAT.U2BL.INNER_INTERFACE_DECL" name="INNER_INTERFACE_DECL" value="Member interface declarations"/>
               <oldparam id="FORMAT.U2BL.PKG" name="PKG" value="package statement"/>
               <oldparam id="FORMAT.U2BL.BLANK_TABLE_IN_UNIT" name="BLANK_TABLE_IN_UNIT" value="Major sections in compilation unit"/>
               <oldparam id="FORMAT.U2BL.SECTION" name="SECTION" value="Section"/>
               <oldparam id="FORMAT.U2BL.ANNOTATION" name="ANNOTATION" value="top-level Annotation"/>
               <oldparam id="FORMAT.U2BL.BLANK_LINE" name="BLANK_LINE" value="Number of blank lines"/>
               <oldparam id="FORMAT.U2BL.ENUM_CONSTANT_DECL" name="ENUM_CONSTANT_DECL" value="Enum constant declarations"/>
               <oldparam id="FORMAT.U2BL.ANNOTATION_MEMBER_DECL" name="ANNOTATION_MEMBER_DECL" value="Annotation type member declarations"/>
               <oldparam id="FORMAT.U2BL.ENUM" name="ENUM" value="top-level Enum"/>
               <oldparam id="FORMAT.U2BL.INTERFACE" name="INTERFACE" value="top-level interfaces"/>
               <oldparam id="FORMAT.U2BL.SAME_DECL" name="SAME_DECL" value="Declarations of the same kind"/>
               <oldparam id="FORMAT.U2BL.METHOD_DECL" name="METHOD_DECL" value="method declarations"/>
               <oldparam id="FORMAT.U2BL.INNER_CLASS_DECL" name="INNER_CLASS_DECL" value="Member class declarations"/>
               <oldparam id="FORMAT.U2BL.BLINE_IN_UNIT" name="BLINE_IN_UNIT" value="Blank lines in compilation unit"/>
               <oldparam id="FORMAT.U2BL.CHECK_STATEMENTS" name="CHECK_STATEMENTS" value="Check amount of blank lines between consecutive statements:"/>
               <oldparam id="FORMAT.U2BL.ENFORCE" name="ENFORCE" value="Enforce section?"/>
               <oldparam id="FORMAT.U2BL.RECOGNIZE_NON_JAVADOC_COMMENTS" name="RECOGNIZE_NON_JAVADOC_COMMENTS" value="Recognize non javadoc comments"/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="FORMAT.U2BL.tab.BLINE_IN_UNIT" label="Blank lines in compilation unit">
                  <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="FORMAT.U2BL.BLANK_TABLE_IN_UNIT2" label="Major sections in compilation unit" reader="SATable">
                     <columns>
                        <column columnType="checkbox" editable="true" id="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN1" label="Enforce section?" required="true"/>
                        <column columnType="text" editable="false" id="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN2" label="Section" required="false"/>
                        <column columnType="text" editable="false" id="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN3" label="Section ID" required="true"/>
                        <column columnType="positiveNumber" editable="true" id="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN4" label="Number of blank lines" required="true" textSize="small"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN1" value="true"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN2" value="package statement"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN3" value="1"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN4" value="0"/>
                        </row>
                        <row id="2">
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN1" value="true"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN2" value="import statements"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN3" value="3"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN4" value="1"/>
                        </row>
                        <row id="3">
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN1" value="true"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN2" value="top-level classes"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN3" value="5"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN4" value="1"/>
                        </row>
                        <row id="4">
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN1" value="true"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN2" value="top-level interfaces"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN3" value="7"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN4" value="1"/>
                        </row>
                        <row id="5">
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN1" value="true"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN2" value="top-level Enum"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN3" value="19"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN4" value="1"/>
                        </row>
                        <row id="6">
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN1" value="true"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN2" value="top-level Annotation"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN3" value="21"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN4" value="1"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </group>
               <group collapsible="false" id="FORMAT.U2BL.tab.BLINE_IN_CLASS" label="Blank lines in class declaration">
                  <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="FORMAT.U2BL.BLANK_TABLE_IN_CLASS2" label="Major sections in class declaration" prevType="InputValueWithCheckBox" reader="SATable">
                     <columns>
                        <column columnType="checkbox" editable="true" id="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN1" label="Enforce section?" required="true"/>
                        <column columnType="text" editable="false" id="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN2" label="Section" required="true"/>
                        <column columnType="text" editable="false" id="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN3" label="Section ID" required="true"/>
                        <column columnType="positiveNumber" editable="true" id="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN4" label="Number of blank lines" required="true" textSize="small"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN1" value="true"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN2" value="field declarations"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN3" value="9"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN4" value="1"/>
                        </row>
                        <row id="2">
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN1" value="true"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN2" value="method declarations"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN3" value="11"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN4" value="1"/>
                        </row>
                        <row id="3">
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN1" value="true"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN2" value="Member class declarations"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN3" value="13"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN4" value="1"/>
                        </row>
                        <row id="4">
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN1" value="true"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN2" value="Member interface declarations"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN3" value="15"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN4" value="1"/>
                        </row>
                        <row id="5">
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN1" value="true"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN2" value="Declarations of the same kind"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN3" value="10"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN4" value="1"/>
                        </row>
                        <row id="6">
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN1" value="true"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN2" value="Enum constant declarations"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN3" value="27"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN4" value="1"/>
                        </row>
                        <row id="7">
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN1" value="true"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN2" value="Annotation type member declarations"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN3" value="29"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN4" value="1"/>
                        </row>
                        <row id="8">
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN1" value="true"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN2" value="Member enum declarations"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN3" value="23"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN4" value="1"/>
                        </row>
                        <row id="9">
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN1" value="true"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN2" value="Member annotation declarations"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN3" value="25"/>
                           <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN4" value="1"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </group>
               <param defaultValue="false" hidden="true" id="FORMAT.U2BL.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
               <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="FORMAT.U2BL.CHECK_STATEMENTS" label="Check amount of blank lines between consecutive statements:" prevType="InputValueWithCheckBox" reader="SATable">
                  <columns>
                     <column columnType="checkbox" editable="true" id="FORMAT__U2BL__CHECK_STATEMENTS__COLUMN1" label="" required="true"/>
                     <column columnType="text" editable="true" id="FORMAT__U2BL__CHECK_STATEMENTS__COLUMN2" label="" required="true"/>
                  </columns>
                  <predefinedRows>
                     <row id="1">
                        <column refColumnId="FORMAT__U2BL__CHECK_STATEMENTS__COLUMN1" value="false"/>
                        <column refColumnId="FORMAT__U2BL__CHECK_STATEMENTS__COLUMN2" value="1"/>
                     </row>
                  </predefinedRows>
               </complexParamTable>
               <param defaultValue="false" id="FORMAT.U2BL.RECOGNIZE_NON_JAVADOC_COMMENTS" inputType="checkbox" label="Recognize non javadoc comments"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.BLSIM" header="Enforce number of blank line(s) to separate &quot;imports&quot; from different packages" id="BLSIM" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="&quot;import {0}&quot; not separated by {1} blank line from previous &quot;import&quot; from a different package."/>
               <msg index="2" value="&quot;import {0}&quot; not separated by {1} blank lines from previous &quot;import&quot; from a different package."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.BLSIM.BLANK_LINE" name="BLANK_LINE" value="Number of blank lines"/>
               <oldparam id="FORMAT.BLSIM.IGNORE_SUBPACKAGE" name="IGNORE_SUBPACKAGE" value="Ignore adjacent imports if they are from subpackages of the same package"/>
            </oldparameters>
            <parameters>
               <param defaultValue="1" id="FORMAT.BLSIM.BLANK_LINE" inputType="integer" label="Number of blank lines" min="0"/>
               <param defaultValue="false" id="FORMAT.BLSIM.IGNORE_SUBPACKAGE" inputType="checkbox" label="Ignore adjacent imports if they are from subpackages of the same package"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.BLCD" header="Enforce number of blank line(s) before type declarations" id="BLCD" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Use {0} blank line before type declaration."/>
               <msg index="2" value="Use {0} blank lines before type declaration."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.BLCD.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
               <oldparam id="FORMAT.BLCD.BLANK_LINE" name="BLANK_LINE" value="Number of blank lines"/>
            </oldparameters>
            <parameters>
               <param defaultValue="2" id="FORMAT.BLCD.BLANK_LINE" inputType="integer" label="Number of blank lines" min="0"/>
               <param defaultValue="false" hidden="true" id="FORMAT.BLCD.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.LL" header="Limit the maximum length of a line" id="LL" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Line is longer than {1} characters: {0}."/>
               <msg index="2" value="Comment line is longer than {1} characters: {0}."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.LL.IGNORE_TRAILING_SPACE" name="IGNORE_TRAILING_SPACE" value="Ignore trailing spaces"/>
               <oldparam id="FORMAT.LL.LINK_TO_PREF" name="LINK_TO_PREF" value="Link to value in the preferences page"/>
               <oldparam id="FORMAT.LL.MAX_COMMENT_LEN" name="MAX_COMMENT_LEN" value="Maximum comment line width"/>
               <oldparam id="FORMAT.LL.MAX_LEN" name="MAX_LEN" value="Maximum line width"/>
               <oldparam id="FORMAT.LL.IGNORE_TRAILING_COMMENT" name="IGNORE_TRAILING_COMMENT" value="Ignore trailing comments"/>
               <oldparam id="FORMAT.LL.IGNORE_IMPORTS_PACKAGES" name="IGNORE_IMPORTS_PACKAGES" value="Ignore import statements and package declarations"/>
            </oldparameters>
            <parameters>
               <param defaultValue="80" id="FORMAT.LL.MAX_LEN" inputType="integer" label="Maximum line width" min="1"/>
               <param defaultValue="80" id="FORMAT.LL.MAX_COMMENT_LEN" inputType="integer" label="Maximum comment line width" min="1"/>
               <param defaultValue="4" id="FORMAT.LL.RECALCULATE_TABS" inputType="integer" label="Tab size" min="1" required="true"/>
               <param defaultValue="true" id="FORMAT.LL.IGNORE_TRAILING_SPACE" inputType="checkbox" label="Ignore trailing whitespaces"/>
               <param defaultValue="false" id="FORMAT.LL.IGNORE_TRAILING_COMMENT" inputType="checkbox" label="Ignore trailing comments"/>
               <param defaultValue="false" hidden="true" id="FORMAT.LL.LINK_TO_PREF" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
               <param defaultValue="true" id="FORMAT.LL.IGNORE_IMPORTS_PACKAGES" inputType="checkbox" label="Ignore import statements and package declarations"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SBUOP" header="Enforce number of space character(s) between a postfixed unary operator and its operand" id="SBUOP" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="There is not {0} space before unary operator ''{1}''."/>
               <msg index="2" value="There is not {0} spaces before unary operator ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.SBUOP.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
               <oldparam id="FORMAT.SBUOP.SYMBOL_SPACE_BEFORE" name="SYMBOL_SPACE_BEFORE" value="Number of spaces before"/>
            </oldparameters>
            <parameters>
               <param defaultValue="0" id="FORMAT.SBUOP.SYMBOL_SPACE_BEFORE" inputType="integer" label="Number of spaces before" min="0"/>
               <param defaultValue="false" hidden="true" id="FORMAT.SBUOP.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SAS" header="Enforce number of space character(s) after every semicolon" id="SAS" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Semicolon not followed by {0} space."/>
               <msg index="2" value="Semicolon not followed by {0} spaces."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.SAS.IGNORE_EMPTY_ITER" name="IGNORE_EMPTY_ITER" value="Ignore rule for the special case &quot;for(;;)&quot;."/>
               <oldparam id="FORMAT.SAS.SYMBOL_SPACE" name="SYMBOL_SPACE" value="Number of spaces"/>
            </oldparameters>
            <parameters>
               <param defaultValue="1" id="FORMAT.SAS.SYMBOL_SPACE" inputType="integer" label="Number of spaces" min="0"/>
               <param defaultValue="true" id="FORMAT.SAS.IGNORE_EMPTY_ITER" inputType="checkbox" label="Ignore rule for the special case &quot;for(;;)&quot;."/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SAP" header="Enforce number of space character(s) after the opening parenthesis &quot;(&quot; of a conditional statement" id="SAP" scope="LINE" severity="3" since="7.5">
            <messages>
               <msg index="1" value="Parenthesis not followed by {0} space."/>
               <msg index="2" value="Parenthesis not followed by {0} spaces."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.SAP.IGNORE_EMPTY_ITER" name="IGNORE_EMPTY_ITER" value="Ignore rule for the special case &quot;for(;;)&quot;."/>
               <oldparam id="FORMAT.SAP.SYMBOL_SPACE" name="SYMBOL_SPACE" value="Number of spaces"/>
            </oldparameters>
            <parameters>
               <param defaultValue="1" id="FORMAT.SAP.SYMBOL_SPACE" inputType="integer" label="Number of spaces" min="0"/>
               <param defaultValue="true" id="FORMAT.SAP.IGNORE_EMPTY_ITER" inputType="checkbox" label="Ignore rule for the special case &quot;for(;;)&quot;."/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.IND" header="Enforce number of space(s) for indentation" id="IND" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Indentation should be {0} spaces."/>
               <msg index="2" value="Keyword &quot;if&quot; should be placed on the same line as the preceding keyword &quot;else&quot;."/>
               <msg index="3" value="Indentation should be {0} (or {1}) spaces."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.IND.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
               <oldparam id="FORMAT.IND.SPLIT_INDENT_EXCEPTION" name="SPLIT_INDENT_EXCEPTION" value="Ignore parentheses for split line indentation"/>
               <oldparam id="FORMAT.IND.SPLIT_INDENT" name="SPLIT_INDENT" value="Additional levels of indentation for wrapped line continuations"/>
               <oldparam id="FORMAT.IND.INDENT" name="INDENT" value="Indentation size"/>
               <oldparam id="FORMAT.IND.SPLIT_INDENT_ENFORCEMENT" name="SPLIT_INDENT_ENFORCEMENT" value="Require additional level(s) of indentation for wrapped line continuations"/>
               <oldparam id="FORMAT.IND.ADD_EXTRA_LEVEL" name="ADD_EXTRA_LEVEL" value="Require an additional level of indentation for each &quot;(&quot; encountered in a wrapped line continuation"/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" hidden="true" id="FORMAT.IND.SPLIT_INDENT_EXCEPTION" inputType="checkbox" label="Ignore parentheses for split line indentation"/>
               <param defaultValue="4" id="FORMAT.IND.INDENT" inputType="integer" label="Indentation size" min="1"/>
               <param defaultValue="2" id="FORMAT.IND.SPLIT_INDENT" inputType="integer" label="Additional levels of indentation for wrapped line continuations" min="0"/>
               <param defaultValue="false" hidden="true" id="FORMAT.IND.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
               <param defaultValue="false" id="FORMAT.IND.SPLIT_INDENT_ENFORCEMENT" inputType="checkbox" label="Require additional level(s) of indentation for wrapped line continuations"/>
               <param defaultValue="true" id="FORMAT.IND.ADD_EXTRA_LEVEL" inputType="checkbox" label="Require an additional level of indentation for each &quot;(&quot; encountered in a wrapped line continuation"/>
               <param defaultValue="true" id="FORMAT.IND.IGNORE_ARRAY_DECL" inputType="checkbox" label="Ignore additional indentation caused by array declaration brackets."/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SAOP" header="Enforce number of space character(s) on each side of an assignment operator" id="SAOP" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="There is not {1} space after ''{0}''."/>
               <msg index="2" value="There is not {1} spaces after ''{0}''."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.SAOP.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
               <oldparam id="FORMAT.SAOP.SYMBOL_SPACE_AFTER" name="SYMBOL_SPACE_AFTER" value="Number of spaces after"/>
               <oldparam id="FORMAT.SAOP.SYMBOL_SPACE_BEFORE" name="SYMBOL_SPACE_BEFORE" value="Number of spaces before"/>
            </oldparameters>
            <parameters>
               <param defaultValue="1" id="FORMAT.SAOP.SYMBOL_SPACE_BEFORE" inputType="integer" label="Number of spaces before" min="0"/>
               <param defaultValue="1" id="FORMAT.SAOP.SYMBOL_SPACE_AFTER" inputType="integer" label="Number of spaces after" min="0"/>
               <param defaultValue="false" hidden="true" id="FORMAT.SAOP.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.CMS" header="Place a single space character or no space character after type casting" id="CMS" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="There is not one single space after type cast."/>
               <msg index="2" value="There is an extra space after type cast."/>
               <msg index="3" value="There are extra spaces after type cast."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.CMS.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
               <oldparam id="FORMAT.CMS.ONE_CAST_SPACE" name="ONE_CAST_SPACE" value="one space"/>
               <oldparam id="FORMAT.CMS.CAST_SPACE" name="CAST_SPACE" value="Check option"/>
               <oldparam id="FORMAT.CMS.NO_CAST_SPACE" name="NO_CAST_SPACE" value="no space"/>
            </oldparameters>
            <parameters>
               <radioGroup id="FORMAT.CMS.CAST_SPACE" label="Check option" prevType="MultipleChoice" showLabel="true">
                  <radioItem defaultValue="checked" label="one space" value="0"/>
                  <radioItem label="no space" value="1"/>
               </radioGroup>
               <param defaultValue="false" hidden="true" id="FORMAT.CMS.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SLOP" header="Enforce number of space character(s) on each side of a logical operator" id="SLOP" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="There is not {1} space after ''{0}''."/>
               <msg index="2" value="There is not {1} spaces after ''{0}''."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.SLOP.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
               <oldparam id="FORMAT.SLOP.SYMBOL_SPACE_AFTER" name="SYMBOL_SPACE_AFTER" value="Number of spaces after"/>
               <oldparam id="FORMAT.SLOP.SYMBOL_SPACE_BEFORE" name="SYMBOL_SPACE_BEFORE" value="Number of spaces before"/>
            </oldparameters>
            <parameters>
               <param defaultValue="1" id="FORMAT.SLOP.SYMBOL_SPACE_BEFORE" inputType="integer" label="Number of spaces before" min="0"/>
               <param defaultValue="1" id="FORMAT.SLOP.SYMBOL_SPACE_AFTER" inputType="integer" label="Number of spaces after" min="0"/>
               <param defaultValue="false" hidden="true" id="FORMAT.SLOP.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SAC" header="Enforce number of space character(s) after every comma" id="SAC" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Comma not followed by {0} space."/>
               <msg index="2" value="Comma not followed by {0} spaces."/>
               <msg index="3" value="Comma preceded by a space character."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.SAC.SYMBOL_SPACE" name="SYMBOL_SPACE" value="Number of spaces"/>
               <oldparam id="FORMAT.SAC.NO_SPACE_BEFORE" name="NO_SPACE_BEFORE" value="Commas must not be preceded by a space."/>
            </oldparameters>
            <parameters>
               <param defaultValue="1" id="FORMAT.SAC.SYMBOL_SPACE" inputType="integer" label="Number of spaces" min="0"/>
               <param defaultValue="false" id="FORMAT.SAC.NO_SPACE_BEFORE" inputType="checkbox" label="Commas must not be preceded by a space."/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SCOP" header="Enforce number of space character(s) before and after the &quot;?&quot; conditional operator" id="SCOP" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="There is not {1} space after ''{0}''."/>
               <msg index="2" value="There is not {1} spaces after ''{0}''."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.SCOP.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
               <oldparam id="FORMAT.SCOP.SYMBOL_SPACE_AFTER" name="SYMBOL_SPACE_AFTER" value="Number of spaces after"/>
               <oldparam id="FORMAT.SCOP.SYMBOL_SPACE_BEFORE" name="SYMBOL_SPACE_BEFORE" value="Number of spaces before"/>
            </oldparameters>
            <parameters>
               <param defaultValue="1" id="FORMAT.SCOP.SYMBOL_SPACE_BEFORE" inputType="integer" label="Number of spaces before" min="0"/>
               <param defaultValue="1" id="FORMAT.SCOP.SYMBOL_SPACE_AFTER" inputType="integer" label="Number of spaces after" min="0"/>
               <param defaultValue="false" hidden="true" id="FORMAT.SCOP.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.DUT" header="Use spaces instead of tabs (or tabs instead of spaces)" id="DUT" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="'Tab' character found on column {0}."/>
               <msg index="2" value="Set of {0} space characters used instead of a tab on column {1}."/>
               <msg index="3" value="Space character used instead of a tab on column {0}."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.DUT.SPACES_PER_TAB" name="SPACES_PER_TAB" value="Spaces per tab:"/>
               <oldparam id="FORMAT.DUT.USE_SPACES" name="USE_SPACES" value="Use spaces"/>
               <oldparam id="FORMAT.DUT.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page for &quot;Tab size&quot;"/>
               <oldparam id="FORMAT.DUT.SPACES_OR_TABS" name="SPACES_OR_TABS" value="Choose to use tabs or spaces:"/>
               <oldparam id="FORMAT.DUT.USE_TABS" name="USE_TABS" value="Use tabs"/>
            </oldparameters>
            <parameters>
               <radioGroup id="FORMAT.DUT.SPACES_OR_TABS" label="Choose to use tabs or spaces:" prevType="MultipleChoice" showLabel="true">
                  <radioItem defaultValue="checked" label="Use spaces" value="0"/>
                  <radioItem label="Use tabs" value="1"/>
               </radioGroup>
               <param defaultValue="false" hidden="true" id="FORMAT.DUT.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page for &quot;Tab size&quot;" prevType="LinkBox">
                  <param defaultValue="4" id="FORMAT.DUT.SPACES_PER_TAB" inputType="integer" label="Spaces per tab:" min="1"/>
               </param>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.APAREN" header="Use '()' to separate complex expressions" id="APAREN" scope="LINE" severity="3" since="5.0">
            <messages>
               <msg index="1" value="Missing '()' to separate complex expression."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.ASPACE" header="Ensure proper spacing in array references" id="ASPACE" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="Use correct spacing for array references."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.ASPACE.Number of Spaces" name="Number of Spaces" value="Number of spaces before open bracket"/>
            </oldparameters>
            <parameters>
               <param defaultValue="0" id="FORMAT.ASPACE.Number of Spaces" inputType="integer" label="Number of spaces before open bracket" min="0"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.ATS" header="Do not place empty whitespace at the end of a line" id="ATS" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Avoid trailing spaces."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.ATS.FLAG_EMPTY_LINE_WITH_SPACE" name="FLAG_EMPTY_LINE_WITH_SPACE" value="Flag empty line containing extra whitespaces"/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="FORMAT.ATS.FLAG_EMPTY_LINE_WITH_SPACE" inputType="checkbox" label="Flag empty line containing extra whitespaces"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.BLBC" header="Put a blank line before each C-style comment" id="BLBC" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Blank line missing before this C-style comment."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.CBRACE" header="Place a closing brace on its own line" id="CBRACE" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Closing brace should be in a line of its own."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.CBRACE.IGNORE_TWO_BRACE" name="IGNORE_TWO_BRACE" value="Ignore case &quot;} }&quot;"/>
               <oldparam id="FORMAT.CBRACE.IGNORE_BRACE_SEMI_COLON" name="IGNORE_BRACE_SEMI_COLON" value="Ignore case &quot;} ;&quot;"/>
               <oldparam id="FORMAT.CBRACE.IGNORE_FINALLY" name="IGNORE_FINALLY" value="Ignore case &quot;} finally {&quot;"/>
               <oldparam id="FORMAT.CBRACE.IGNORE_BRACE_C_COMMENT" name="IGNORE_BRACE_C_COMMENT" value="Ignore case &quot;} /*&quot;"/>
               <oldparam id="FORMAT.CBRACE.IGNORE_DO_WHILE" name="IGNORE_DO_WHILE" value="Ignore case &quot;} while();&quot;"/>
               <oldparam id="FORMAT.CBRACE.IGNORE_BRACE_S_COMMENT" name="IGNORE_BRACE_S_COMMENT" value="Ignore case &quot;} //&quot;"/>
               <oldparam id="FORMAT.CBRACE.IGNORE_ELSE" name="IGNORE_ELSE" value="Ignore case &quot;} else {&quot;"/>
               <oldparam id="FORMAT.CBRACE.IGNORE_CATCH" name="IGNORE_CATCH" value="Ignore case &quot;} catch {&quot;"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="FORMAT.CBRACE.IGNORE_ELSE" inputType="checkbox" label="Ignore case &quot;} else {&quot;"/>
               <param defaultValue="true" id="FORMAT.CBRACE.IGNORE_CATCH" inputType="checkbox" label="Ignore case &quot;} catch {&quot;"/>
               <param defaultValue="true" id="FORMAT.CBRACE.IGNORE_FINALLY" inputType="checkbox" label="Ignore case &quot;} finally {&quot;"/>
               <param defaultValue="true" id="FORMAT.CBRACE.IGNORE_DO_WHILE" inputType="checkbox" label="Ignore case &quot;} while();&quot;"/>
               <param defaultValue="true" id="FORMAT.CBRACE.IGNORE_TWO_BRACE" inputType="checkbox" label="Ignore case &quot;} }&quot;"/>
               <param defaultValue="true" id="FORMAT.CBRACE.IGNORE_BRACE_SEMI_COLON" inputType="checkbox" label="Ignore case &quot;} ;&quot;"/>
               <param defaultValue="true" id="FORMAT.CBRACE.IGNORE_BRACE_C_COMMENT" inputType="checkbox" label="Ignore case &quot;} /*&quot;"/>
               <param defaultValue="true" id="FORMAT.CBRACE.IGNORE_BRACE_S_COMMENT" inputType="checkbox" label="Ignore case &quot;} //&quot;"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.DOT" header="Do not leave spaces between qualified names and method invocations" id="DOT" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Avoid having space before or after the dot."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.IAD" header="Declare arrays with '[]' brackets after the array type and before the variable name(s)" id="IAD" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Place the '[]' after the array type, not after the variable: {0}."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.MO" header="Enforce the order of annotations and modifiers" id="MO" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="The ordering of the modifiers violates convention. They should be in order &quot;{0}&quot;."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.MO.MODIFIER_ORDER_LIST" name="MODIFIER_ORDER_LIST" value="Sort modifiers based on modifier types"/>
               <oldparam id="FORMAT.MO.BEFORE" name="BEFORE" value="Put all annotations before all other modifiers."/>
               <oldparam id="FORMAT.MO.ANNOTATION_ORDER" name="ANNOTATION_ORDER" value="Order of Annotations"/>
               <oldparam id="FORMAT.MO.AFTER" name="AFTER" value="Put all annotations after all other modifiers."/>
               <oldparam id="FORMAT.MO.MODIFIER" name="MODIFIER" value="Modifier order"/>
            </oldparameters>
            <parameters>
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="FORMAT.MO.MODIFIER_ORDER_LIST" label="Sort modifiers based on modifier types" reader="SATable">
                  <columns>
                     <column columnType="text" editable="true" id="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" label="Modifier order" required="true"/>
                  </columns>
                  <predefinedRows>
                     <row id="1">
                        <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="public"/>
                     </row>
                     <row id="2">
                        <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="protected"/>
                     </row>
                     <row id="3">
                        <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="private"/>
                     </row>
                     <row id="4">
                        <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="abstract"/>
                     </row>
                     <row id="5">
                        <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="static"/>
                     </row>
                     <row id="6">
                        <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="final"/>
                     </row>
                     <row id="7">
                        <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="transient"/>
                     </row>
                     <row id="8">
                        <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="volatile"/>
                     </row>
                     <row id="9">
                        <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="synchronized"/>
                     </row>
                     <row id="10">
                        <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="native"/>
                     </row>
                     <row id="11">
                        <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="strictfp"/>
                     </row>
                  </predefinedRows>
               </complexParamTable>
               <radioGroup id="FORMAT.MO.ANNOTATION_ORDER" label="Order of Annotations" prevType="MultipleChoice" showLabel="true">
                  <radioItem defaultValue="checked" label="Put all annotations before all other modifiers." value="0"/>
                  <radioItem label="Put all annotations after all other modifiers." value="1"/>
               </radioGroup>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.NSAB" header="Do not place statements on the same line as the '{' opening brace" id="NSAB" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Statement on the same line as the '{' opening brace."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.NSAB.IGNORE_ONE_LINE_BLOCK" name="IGNORE_ONE_LINE_BLOCK" value="Allow statements on the same line as the opening brace if the opening and closing braces appear on the same line."/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="FORMAT.NSAB.IGNORE_ONE_LINE_BLOCK" inputType="checkbox" label="Allow statements on the same line as the opening brace if the opening and closing braces appear on the same line."/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.OSPL" header="Write one statement per line" id="OSPL" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Multiple statements on one line."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SC" header="Enforce number of space character(s) between a conditional statement and the opening &quot;(&quot; parenthesis" id="SC" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Conditional statement does not have {0} space after &quot;{1}&quot;."/>
               <msg index="2" value="Conditional statement does not have {0} spaces after &quot;{1}&quot;."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.SC.SPACE_BEFORE" name="SPACE_BEFORE" value="Number of spaces"/>
            </oldparameters>
            <parameters>
               <param defaultValue="1" id="FORMAT.SC.SPACE_BEFORE" inputType="integer" label="Number of spaces" min="0"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.TCOMMA" header="Avoid or enforce the use of trailing commas in array initializers" id="TCOMMA" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Avoid trailing comma."/>
               <msg index="2" value="Missing trailing comma."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.TCOMMA.ENFORCE" name="ENFORCE" value="Enforce"/>
               <oldparam id="FORMAT.TCOMMA.DISALLOW" name="DISALLOW" value="Avoid"/>
               <oldparam id="FORMAT.TCOMMA.COMMA_OPTION" name="COMMA_OPTION" value="Enforce/Avoid trailing comma:"/>
            </oldparameters>
            <parameters>
               <radioGroup id="FORMAT.TCOMMA.COMMA_OPTION" label="Enforce/Avoid trailing comma:" prevType="MultipleChoice" showLabel="true">
                  <radioItem label="Enforce" value="0"/>
                  <radioItem defaultValue="checked" label="Avoid" value="1"/>
               </radioGroup>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.UP" header="Avoid unnecessary parentheses" id="UP" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Avoid unnecessary parentheses."/>
            </messages>
            <oldparameters>
               <oldparam id="FORMAT.UP.INLINE_CONDITIONAL" name="INLINE_CONDITIONAL" value="Check inline conditional expressions"/>
               <oldparam id="FORMAT.UP.NESTED_OPERATION" name="NESTED_OPERATION" value="Check nested operations"/>
               <oldparam id="FORMAT.UP.ORDER_OF_OPERATION" name="ORDER_OF_OPERATION" value="Check order of operation in expressions"/>
               <oldparam id="FORMAT.UP.CHECK_SCOPE" name="CHECK_SCOPE" value="Scope of checking:"/>
               <oldparam id="FORMAT.UP.ALL" name="ALL" value="All statements"/>
               <oldparam id="FORMAT.UP.RETURN_ONLY" name="RETURN_ONLY" value="Only return statements"/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="FORMAT.UP.INLINE_CONDITIONAL" inputType="checkbox" label="Check inline conditional expressions"/>
               <param defaultValue="true" id="FORMAT.UP.NESTED_OPERATION" inputType="checkbox" label="Check nested operations"/>
               <param defaultValue="false" id="FORMAT.UP.ORDER_OF_OPERATION" inputType="checkbox" label="Check order of operation in expressions"/>
               <radioGroup id="FORMAT.UP.CHECK_SCOPE" label="Scope of checking:" prevType="MultipleChoice" showLabel="true">
                  <radioItem label="Only return statements" value="0"/>
                  <radioItem defaultValue="checked" label="All statements" value="1"/>
               </radioGroup>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.MCH" header="Include a meaningful file header comment in every source file" id="MCH" scope="LINE" severity="2" since="10.4.3">
            <messages>
               <msg index="1" value="This source file does not include a file header comment."/>
               <msg index="2" value="The file header comment does not match the specified comment template."/>
               <msg index="3" value="The 'File header format' parameter is enabled, but the comment template is not defined."/>
            </messages>
            <parameters>
               <group collapsible="false" id="FORMAT.MCH.FILE_HEADER_LOCATION_GROUP" label="">
                  <radioGroup id="FORMAT.MCH.FILE_HEADER_LOCATION" label="File header location" showLabel="true">
                     <radioItem defaultValue="checked" label="before package declaration (if any)" value="0"/>
                     <radioItem label="after package declaration (if any)" value="1"/>
                  </radioGroup>
               </group>
               <group collapsible="false" id="FORMAT.MCH.FILE_HEADER_FORMAT" label="File header format">
                  <param defaultValue="true" id="FORMAT.MCH.MATCH_HEADER_WITH_TEMPLATE" inputType="checkbox" label="Match the file header with the following template (defined in regular expressions):"/>
                  <param defaultValue=".*" id="FORMAT.MCH.FILE_HEADER_TEMPLATE" inputType="stringList" label="" prevType="StringList"/>
                  <param defaultValue="false" id="FORMAT.MCH.MATCH_HEADER_CASE_SENSITIVE" inputType="checkbox" label="Match case sensitive"/>
                  <param defaultValue="true" id="FORMAT.MCH.FILE_HEADER_TRIM_LINES" inputType="checkbox" label="Trim header lines"/>
               </group>
               <group collapsible="false" id="FORMAT.MCH.FILE_HEADER_TYPES" label="Acceptable types of comments">
                  <param defaultValue="true" id="FORMAT.MCH.FILE_HEADER_TYPE_CSTYLE" inputType="checkbox" label="C-Style comments"/>
                  <param defaultValue="true" id="FORMAT.MCH.FILE_HEADER_TYPE_JAVADOC" inputType="checkbox" label="Javadoc comments"/>
                  <param defaultValue="false" id="FORMAT.MCH.FILE_HEADER_TYPE_SINGLELINE" inputType="checkbox" label="Single-line comments"/>
               </group>
            </parameters>
         </rule>
      </category>
      <category description="Possible Bugs" name="PB">
         <category description="Runtime Exceptions" name="RE">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.IIAE" header="Make sure the IllegalArgumentException message matches the code logic" id="IIAE" scope="LINE" severity="4" since="6.0">
               <messages>
                  <msg index="1" value="Unmatched variable name: ''{0}'' used in &quot;if&quot; expression but ''{1}'' used in exception message."/>
                  <msg index="2" value="Logic in &quot;if&quot; conditional expression does not match the ''IllegalArgumentException'' message."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.RE.IIAE.FLAG_UNMATCH_NAME" name="FLAG_UNMATCH_NAME" value="Flag if variable name used in exception message is different from the one in &quot;if&quot; conditional statement."/>
               </oldparameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CAI" header="Always check parameters before use in array access" id="CAI" scope="LINE" severity="3" since="9.0">
               <messages>
                  <msg index="1" value="Array ''{0}'' accessed with ''{1}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.RE.CAI.IGNORE_PRIVATE" name="IGNORE_PRIVATE" value="Ignore private methods"/>
               </oldparameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/129.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="true" id="PB.RE.CAI.IGNORE_PRIVATE" inputType="checkbox" label="Ignore private methods"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.NCMD" header="Ensure that dereferenced variables match variables which were previously checked for &quot;null&quot;" id="NCMD" scope="LINE" severity="3" since="8.3">
               <messages>
                  <msg index="1" value="The variable dereferenced here (&quot;{0}&quot;) does not match the variable which was just checked for &quot;null&quot; (&quot;{1}&quot;)."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.VRNULL" header="Avoid methods returning &quot;null&quot; value" id="VRNULL" scope="LINE" severity="4" since="8.2">
               <messages>
                  <msg index="1" value="Method ''{0}'' is not allowed to return &quot;null&quot; value."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.RE.VRNULL.CHECK_LIST" name="CHECK_LIST" value="Methods are not allowed to return &quot;null&quot; value"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="toString();clone()" id="PB.RE.VRNULL.CHECK_LIST" inputType="stringList" label="Methods are not allowed to return &quot;null&quot; value" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ACTI" header="Do not add a collection to itself" id="ACTI" scope="LINE" severity="1" since="8.0">
               <messages>
                  <msg index="1" value="The collection ''{0}'' is added to itself."/>
                  <msg index="2" value="The &quot;Map&quot; ''{0}'' is added as a key to itself."/>
                  <msg index="3" value="The &quot;Map&quot; ''{0}'' is added as a value to itself."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CTNSE" header="Ensure 'Iterator.next()' method implementations throw 'NoSuchElementException'" id="CTNSE" scope="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="This 'next()' method might not be able to throw 'NoSuchElementException'."/>
               </messages>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.IDRL" header="Check whether or not &quot;readLine()&quot; returned null before dereferencing the return value" id="IDRL" scope="LINE" severity="1" since="8.0">
               <messages>
                  <msg index="1" value="The result of a call to &quot;readLine()&quot; is dereferenced without first checking whether the result is null."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.PNPD" header="Avoid dereferencing null objects" id="PNPD" scope="LINE" severity="2" since="8.0">
               <messages>
                  <msg index="1" value="The object ''{0}'' may be set to null.  This method call may cause a NullPointerException."/>
                  <msg index="2" value="The throws clause throws null, which will cause a NullPointerException."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.IOSS" header="Use the &quot;fromIndex&quot; argument of 'indexOf()' when necessary." id="IOSS" scope="LINE" severity="3" since="8.1">
               <messages>
                  <msg index="1" value="It may be necessary to specify the &quot;fromIndex&quot; argument for this call to 'indexOf()' since it is passed in the second argument to 'substring()'."/>
                  <msg index="2" value="It may be necessary to specify the &quot;fromIndex&quot; argument for this call to 'indexOf()' since it may be passed in the second argument to 'substring()'."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CIOR" header="Check the return value of calls to 'String.indexOf()' before passing this value to other &quot;String&quot; methods." id="CIOR" scope="LINE" severity="3" since="8.2">
               <messages>
                  <msg index="1" value="The return value of this call to 'indexOf()' may not be checked before it is passed to another &quot;String&quot; method."/>
                  <msg index="2" value="The return value of this call to 'indexOf()' is not checked before it is passed to another &quot;String&quot; method."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ISEM" header="Do not call 'String.equals(constant)' or 'String.equalsIgnoreCase(constant)'" id="ISEM" scope="LINE" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="{0} is called, use {1} instead."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.RE.ISEM.CHECK_NON_STRING" name="CHECK_NON_STRING" value="Check non-String objects"/>
                  <oldparam id="PB.RE.ISEM.IGNORE_TYPES" name="IGNORE_TYPES" value="Ignore the following types and their subtypes (Specify fully qualified name)."/>
               </oldparameters>
               <parameters>
                  <param defaultValue="false" id="PB.RE.ISEM.CHECK_NON_STRING" inputType="checkbox" label="Check non-String objects"/>
                  <param defaultValue="java.util.Collection;java.util.Map" id="PB.RE.ISEM.IGNORE_TYPES" inputType="stringList" label="Ignore the following types and their subtypes (Specify fully qualified name)." prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AMFSL" header="Avoid modifying fixed-size Collections" id="AMFSL" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Modification of fixed-size Collection ''{0}'' will generate a runtime exception."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ASE" header="Avoid possible ArrayStoreExceptions" id="ASE" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Array ''{0}'' initialized to array type ''{1}'', but is assigned type ''{2}'' here."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AQA" header="Avoid calling the 'add()' method of a Queue" id="AQA" scope="LINE" severity="4" since="9.0">
               <messages>
                  <msg index="1" value="Queue ''{0}'' calls &quot;add()&quot; here."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.RE.AQA.CHECK_BOUNDED" name="CHECK_BOUNDED" value="Check only bounded Queues"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="PB.RE.AQA.CHECK_BOUNDED" inputType="checkbox" label="Check only bounded Queues"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.RCODE" header="When used HttpURLConnection always check return value from the getResponseCode() methods before call getInputStream()" id="RCODE" scope="LINE" severity="2" since="9.4">
               <messages>
                  <msg index="1" value="Value returned from the getResponseCode() method is not checked before calling getInputStream()."/>
               </messages>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.JLAY" header="Avoid using methods add() from JLayer class" id="JLAY" scope="LINE" severity="1" since="9.4">
               <messages>
                  <msg index="1" value="Do not use methods add() in JLayer objects because always throws runtime exception."/>
               </messages>
            </rule>
         </category>
         <category description="Logical Errors" name="LOGIC">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AULV" header="Avoid loop variables which are not used in the condition of the loop." id="AULV" scope="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="The loop variable ''{0}'' is not used in the condition of the loop."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.LOGIC.AULV.BREAK" name="BREAK" value="Do not report any violations for loops containing a &quot;break&quot; or &quot;return&quot; statement."/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="PB.LOGIC.AULV.BREAK" inputType="checkbox" label="Do not report any violations for loops containing a &quot;break&quot; or &quot;return&quot; statement."/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.INDEX" header="Avoid bugs in the usage of loop variables." id="INDEX" scope="LINE" severity="3" since="8.0">
               <messages>
                  <msg index="1" value="You may have intended to use a variable from the innermost loop instead of variable ''{0}'' from an outer loop."/>
                  <msg index="2" value="The variable(s) used in the update portion of this &quot;for&quot; statement do not match those used in the initialization and condition."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.OOR" header="Avoid out of range comparisons" id="OOR" scope="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="&quot;{2}&quot; variable ''{0}'' is compared to {1}, which is not within &quot;{2}&quot; upper and lower bounds."/>
                  <msg index="2" value="&quot;{2}&quot; variable ''{0}'' cannot be less than &quot;{2}&quot; lower bound: {1}."/>
                  <msg index="3" value="&quot;{2}&quot; variable ''{0}'' cannot be greater than &quot;{2}&quot; upper bound: {1}."/>
                  <msg index="4" value="&quot;{1}&quot; value is compared to {0}, which is not within &quot;{1}&quot; upper and lower bounds."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.LOGIC.OOR.CHECK_CHAR" name="CHECK_CHAR" value="Check 'char' comparisons"/>
                  <oldparam id="PB.LOGIC.OOR.CHECK_BYTE" name="CHECK_BYTE" value="Check 'byte' comparisons"/>
                  <oldparam id="PB.LOGIC.OOR.CHECK_SHORT" name="CHECK_SHORT" value="Check 'short' comparisons"/>
                  <oldparam id="PB.LOGIC.OOR.CHECK_INT" name="CHECK_INT" value="Check 'int' comparisons"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="PB.LOGIC.OOR.CHECK_CHAR" inputType="checkbox" label="Check 'char' comparisons"/>
                  <param defaultValue="false" id="PB.LOGIC.OOR.CHECK_BYTE" inputType="checkbox" label="Check 'byte' comparisons"/>
                  <param defaultValue="false" id="PB.LOGIC.OOR.CHECK_SHORT" inputType="checkbox" label="Check 'short' comparisons"/>
                  <param defaultValue="false" id="PB.LOGIC.OOR.CHECK_INT" inputType="checkbox" label="Check 'int' comparisons"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AIL" header="Avoid infinite loops" id="AIL" scope="LINE" severity="2" since="8.0">
               <messages>
                  <msg index="1" value="Possible infinite loop: the loop's condition will always evaluate to &quot;true&quot;, and there is no other exit from the loop."/>
                  <msg index="2" value="Possible infinite loop: the loop's condition will always evaluate to 'true' and there is no other exit from the loop."/>
                  <msg index="3" value="Possible infinite loop: the loop''s condition uses the variable &quot;{0}&quot;, but this variable is not modified within the loop''s body."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.LOGIC.AIL.DEPTH_ITERATOR" name="DEPTH_ITERATOR" value="Maximum depth of checking for nested calls to 'Iterator.next()' or 'Iterator.remove()'"/>
               </oldparameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/835.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="5" id="PB.LOGIC.AIL.DEPTH_ITERATOR" inputType="integer" label="Maximum depth of checking for nested calls to 'Iterator.next()' or 'Iterator.remove()'" min="0"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CRRV" header="Check the return value of methods which read or skip input" id="CRRV" scope="LINE" severity="3" since="8.0">
               <messages>
                  <msg index="1" value="The return value of this call to ''{0}()'' is not checked."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.LOGIC.CRRV.CHECKED_METHOD_LIST" name="CHECKED_METHOD_LIST" value="Methods to be checked: \n(in form of &lt;fully qualified type name&gt;#&lt;method&gt;(&lt;parameter1 type&gt;,&lt;parameter2 type&gt;))"/>
               </oldparameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/252.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="java.io.InputStream#read();java.io.InputStream#read(byte[]);java.io.InputStream#read(byte[],int,int);java.io.InputStream#skip(long);java.io.DataInput#skipBytes(int)" description="Methods to be checked: (in form of &lt;fully qualified type name&gt;#&lt;method&gt;(&lt;parameter1 type&gt;,&lt;parameter2 type&gt;))" id="PB.LOGIC.CRRV.CHECKED_METHOD_LIST" inputType="stringList" label="Methods to be checked:" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.DJNCR" header="Do not discard the result of a call to &quot;readLine()&quot; after checking that the return value is non-null" id="DJNCR" scope="LINE" severity="2" since="8.0">
               <messages>
                  <msg index="1" value="The result of this call to &quot;readLine()&quot; is compared with &quot;null&quot; and then discarded."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.EQUS" header="Do not call 'equals()' methods that always return false" id="EQUS" scope="LINE" severity="1" since="5.1">
               <messages>
                  <msg index="1" value="''equals()'' method would always return false, since calling object is type ''{0}'' and argument is type ''{1}''."/>
                  <msg index="2" value="''equals()'' method would always return false, since calling object is type anonymous class that extends ''{0}'' and argument is type ''{1}''."/>
                  <msg index="3" value="'equals()' method would always return false, since argument is null."/>
                  <msg index="4" value="''equals()'' method would always return false, since calling object is type ''{0}'' and argument is type ''{1}''."/>
                  <msg index="5" value="''equals()'' method would always return false, since calling object and argument do not refer to the same object."/>
               </messages>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.SG" header="Ensure get/set methods are accessing the correct variables" id="SG" scope="METHOD" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="'Set' method ''{0}'' is not setting variable ''{1}''."/>
                  <msg index="2" value="'Get' method ''{0}'' is not getting variable ''{1}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.LOGIC.SG.CHECK_SETTER" name="CHECK_SETTER" value="Check 'set' methods"/>
                  <oldparam id="PB.LOGIC.SG.CHECK_GETTER" name="CHECK_GETTER" value="Check 'get' methods"/>
                  <oldparam id="PB.LOGIC.SG.IGNORE_THROW_SET" name="IGNORE_THROW_SET" value="Ignore 'set' methods which throw an exception."/>
                  <oldparam id="PB.LOGIC.SG.IGNORE_THROW_GET" name="IGNORE_THROW_GET" value="Ignore 'get' methods which throw an exception."/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               </references>
               <parameters>
                  <param defaultValue="true" id="PB.LOGIC.SG.CHECK_SETTER" inputType="checkbox" label="Check 'set' methods">
                     <param defaultValue="false" id="PB.LOGIC.SG.IGNORE_THROW_SET" inputType="checkbox" label="Ignore 'set' methods which throw an exception."/>
                  </param>
                  <param defaultValue="true" id="PB.LOGIC.SG.CHECK_GETTER" inputType="checkbox" label="Check 'get' methods">
                     <param defaultValue="false" id="PB.LOGIC.SG.IGNORE_THROW_GET" inputType="checkbox" label="Ignore 'get' methods which throw an exception."/>
                  </param>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.FLRC" header="Avoid infinite recursive method calls" id="FLRC" scope="LINE" severity="1" since="8.0">
               <messages>
                  <msg index="1" value="Method ''{0}'' {1}calls itself within the first statement of its definition, which may result in an infinite recursion."/>
                  <msg index="2" value="Method ''{0}'' {1}calls itself using the same arguments that were passed in, which may result in an infinite recursion."/>
                  <msg index="3" value="Method ''{0}'' {1}calls itself and does not have any parameters, which may result in an infinite recursion."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.LOGIC.FLRC.IGNORE_COND_STMT" name="IGNORE_COND_STMT" value="Allow recursive calls within the first statement if the call is in the &quot;then&quot; or &quot;else&quot; part of a conditional expression."/>
                  <oldparam id="PB.LOGIC.FLRC.IGNORE_OVERRIDDEN" name="IGNORE_OVERRIDDEN" value="Ignore calls to potentially overridden methods where the calling object is not &quot;this&quot;."/>
                  <oldparam id="PB.LOGIC.FLRC.ONLY_FIRST_STMT" name="ONLY_FIRST_STMT" value="Only check the first statement of each method."/>
                  <oldparam id="PB.LOGIC.FLRC.POSSIBLY" name="POSSIBLY" value="possibly "/>
               </oldparameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/674.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="true" id="PB.LOGIC.FLRC.ONLY_FIRST_STMT" inputType="checkbox" label="Only check the first statement of each method.">
                     <param defaultValue="true" id="PB.LOGIC.FLRC.IGNORE_COND_STMT" inputType="checkbox" label="Allow recursive calls within the first statement if the call is in the &quot;then&quot; or &quot;else&quot; part of a conditional expression."/>
                  </param>
                  <param defaultValue="true" id="PB.LOGIC.FLRC.IGNORE_OVERRIDDEN" inputType="checkbox" label="Ignore calls to potentially overridden methods where the calling object is not &quot;this&quot;."/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.OAMC" header="Ensure that the objects used within a loop's condition are properly accessed within the loop's body." id="OAMC" scope="LINE" severity="2" since="8.1">
               <messages>
                  <msg index="1" value="''hasNext()'' is called on the variable &quot;{0}&quot; in the loop''s condition, but ''next()'' is never called on this variable in the loop''s body."/>
                  <msg index="2" value="''size()'' is called on the variable &quot;{0}&quot; in the loop''s condition, but ''get()'' is never called on this variable in the loop''s body."/>
                  <msg index="3" value="The length of the array &quot;{0}&quot; is accessed in the loop''s condition, but no elements of the array are accessed in the loop''s body."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AMOI" header="Avoid using the wrong index variable to access an array or List element." id="AMOI" scope="LINE" severity="3" since="8.1">
               <messages>
                  <msg index="1" value="The index variable ''{0}'' may be the wrong index for the array ''{1}''.  You may have meant to use the variable ''{2}'' instead"/>
                  <msg index="2" value="The index variable ''{0}'' may be the wrong index for the array ''{1}''.  You may have meant to use one of the following variables instead: {2}"/>
                  <msg index="3" value="''{0}'' is not the only index variable used for the array ''{1}'' in the enclosing loop(s).  Make sure that this is correct."/>
                  <msg index="4" value="The index variable ''{0}'' may be the wrong index for the List ''{1}''.  You may have meant to use the variable ''{2}'' instead"/>
                  <msg index="5" value="The index variable ''{0}'' may be the wrong index for the List ''{1}''.  You may have meant to use one of the following variables instead: {2}"/>
                  <msg index="6" value="''{0}'' is not the only index variable used for the List ''{1}'' in the enclosing loop(s).  Make sure that this is correct."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.LOGIC.AMOI.WHAT_TO_CHECK" name="WHAT_TO_CHECK" value="What to Flag as a Violation"/>
                  <oldparam id="PB.LOGIC.AMOI.ALL" name="ALL" value="Flag all cases where multiple index variables are used to access an array or List within a loop"/>
                  <oldparam id="PB.LOGIC.AMOI.ERRONEOUS" name="ERRONEOUS" value="Only flag cases where the index variable does not match the loop condition"/>
                  <oldparam id="PB.LOGIC.AMOI.ARRAY" name="ARRAY" value="array"/>
                  <oldparam id="PB.LOGIC.AMOI.LIST" name="LIST" value="List"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="PB.LOGIC.AMOI.WHAT_TO_CHECK" label="What to Flag as a Violation" prevType="MultipleChoice" showLabel="true">
                     <radioItem defaultValue="checked" label="Flag all cases where multiple index variables are used to access an array or List within a loop" value="0"/>
                     <radioItem label="Only flag cases where the index variable does not match the loop condition" value="1"/>
                  </radioGroup>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CPI" header="Do not check whether the result of &quot;String.indexOf()&quot; is positive or non-positive" id="CPI" scope="LINE" severity="3" since="8.0">
               <messages>
                  <msg index="1" value="This expression checks whether the result of &quot;String.indexOf()&quot; is positive or non-positive (rather than negative or non-negative)."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.EQLC" header="Use 'getClass()' or &quot;instanceof&quot; within 'equals()' and 'compareTo()' method implementations." id="EQLC" scope="METHOD" severity="3" since="8.1">
               <messages>
                  <msg index="1" value="''{0}()'' implementation does not use ''getClass()''."/>
                  <msg index="2" value="''{0}()'' implementation does not use the &quot;instanceof&quot; operator."/>
                  <msg index="3" value="''{0}()'' implementation does not use ''getClass()'' or &quot;instanceof&quot;."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.LOGIC.EQLC.ACCEPTABLE_WAYS" name="ACCEPTABLE_WAYS" value="Acceptable ways of checking the parameter's type"/>
                  <oldparam id="PB.LOGIC.EQLC.PB.EQL" name="PB.EQL" value="getClass() only"/>
                  <oldparam id="PB.LOGIC.EQLC.PB.EQL2" name="PB.EQL2" value="instanceof only"/>
                  <oldparam id="PB.LOGIC.EQLC.BOTH" name="BOTH" value="Either Way"/>
                  <oldparam id="PB.LOGIC.EQLC.CHECK_EQUALS" name="CHECK_EQUALS" value="Check 'equals()' methods"/>
                  <oldparam id="PB.LOGIC.EQLC.CHECK_COMPARETO" name="CHECK_COMPARETO" value="Check 'compareTo()' methods"/>
                  <oldparam id="PB.LOGIC.EQLC.IGNORE_COMPARETO_PARAM" name="IGNORE_COMPARETO_PARAM" value="Ignore type parameterized 'compareTo()' methods"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="PB.LOGIC.EQLC.CHECK_EQUALS" inputType="checkbox" label="Check 'equals()' methods"/>
                  <param defaultValue="false" id="PB.LOGIC.EQLC.CHECK_COMPARETO" inputType="checkbox" label="Check 'compareTo()' methods">
                     <param defaultValue="true" id="PB.LOGIC.EQLC.IGNORE_COMPARETO_PARAM" inputType="checkbox" label="Ignore type parameterized 'compareTo()' methods"/>
                  </param>
                  <radioGroup id="PB.LOGIC.EQLC.ACCEPTABLE_WAYS" label="Acceptable ways of checking the parameter's type" prevType="MultipleChoice" showLabel="true">
                     <radioItem label="getClass() only" value="0"/>
                     <radioItem label="instanceof only" value="1"/>
                     <radioItem defaultValue="checked" label="Either Way" value="2"/>
                  </radioGroup>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.LLM" header="Ensure that the logging level checked matches the level of the called logging method." id="LLM" scope="LINE" severity="3" since="8.2">
               <messages>
                  <msg index="1" value="The logging level checked in this method call is &quot;{0}&quot;, but the logging method called has the level &quot;{1}&quot;."/>
                  <msg index="2" value="The logging level checked in this comparison is &quot;{0}&quot;, but the logging method called has the level &quot;{1}&quot;."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ROM" header="Make sure that methods are invoked on the correct object." id="ROM" scope="LINE" severity="4" since="8.1">
               <messages>
                  <msg index="1" value="No method is called on the ''{0}'' object. Inspect the object usage to make sure this is not a bug."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.LOGIC.ROM.INVOKED_ON_ANOTHER" name="INVOKED_ON_ANOTHER" value="Report only if a compatible method is invoked on another object at least twice."/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="PB.LOGIC.ROM.INVOKED_ON_ANOTHER" inputType="checkbox" label="Report only if a compatible method is invoked on another object at least twice."/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ESO" header="Avoid calling 'equals()' with same object." id="ESO" scope="LINE" severity="1" since="9.0">
               <messages>
                  <msg index="1" value="''{0}'' calls &quot;equals()&quot; method with itself."/>
               </messages>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AOBO" header="Avoid off-by-one errors in loop conditions" id="AOBO" scope="LINE" severity="2" since="9.0">
               <messages>
                  <msg index="1" value="Loop condition may be off by one."/>
               </messages>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/193.html" name="CWE"/>
               </references>
            </rule>
         </category>
         <category description="Confusing or Unintended Behavior" name="CUB">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AWP" header="Avoid confusing assignments to constructor arguments" id="AWP" scope="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="Confusing assignment to a parameter, possibly should be &quot;{0}&quot; instead"/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ADE" header="Avoid dangling &quot;else&quot; statements" id="ADE" scope="LINE" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="Dangling &quot;else&quot; statement."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.CUB.ADE.INDENTATION" name="INDENTATION" value="Only report a violation when the &quot;else&quot; statement is positioned incorrectly"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="false" id="PB.CUB.ADE.INDENTATION" inputType="checkbox" label="Only report a violation when the &quot;else&quot; statement is positioned incorrectly"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AMCO" header="Avoid using multiple '!' or '~' unary operators." id="AMCO" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="''{0}'' uses multiple complement operators."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ARCF" header="Avoid using 'return's inside 'finally blocks if thare are other 'return's inside the try-catch block." id="ARCF" scope="LINE" severity="1" since="6.0">
               <messages>
                  <msg index="1" value="Avoid multiple 'return' if a 'return' is present inside finally block."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.CUB.ARCF.ALSO_CATCH" name="ALSO_CATCH" value="Only flag return statements when they are in try-catch blocks"/>
               </oldparameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/584.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="true" id="PB.CUB.ARCF.ALSO_CATCH" inputType="checkbox" label="Only flag return statements when they are in try-catch blocks"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.DCP" header="Do not use the &quot;+&quot; string concatenation operator to concatenate numbers; use it only to add numbers" id="DCP" scope="LINE" severity="2" since="4.5">
               <messages>
                  <msg index="1" value="String concatenation &quot;+&quot; is a possible typo for mathematical addition."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.EOOM" header="Avoid errors in overriding methods of &quot;java.lang.Object&quot;" id="EOOM" scope="METHOD" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Method ''{0}'' has wrong parameters to override Object method ''{1}''."/>
                  <msg index="2" value="Method ''{0}'' is spelled incorrectly to override Object method ''{1}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.CUB.EOOM.CHECK_PARAMETERS" name="CHECK_PARAMETERS" value="check method parameters"/>
                  <oldparam id="PB.CUB.EOOM.CHECK_SPELLING" name="CHECK_SPELLING" value="check spelling of method name"/>
                  <oldparam id="PB.CUB.EOOM.CHECK_PRIVATE" name="CHECK_PRIVATE" value="check &quot;private&quot; methods"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="PB.CUB.EOOM.CHECK_PARAMETERS" inputType="checkbox" label="check method parameters"/>
                  <param defaultValue="true" id="PB.CUB.EOOM.CHECK_SPELLING" inputType="checkbox" label="check spelling of method name"/>
                  <param defaultValue="false" id="PB.CUB.EOOM.CHECK_PRIVATE" inputType="checkbox" label="check &quot;private&quot; methods"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.FLVA" header="Do not assign loop control variables in the body of a &quot;for&quot; loop." id="FLVA" scope="LINE" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="The loop control variable ''{0}'' is modified in the loop body."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.IMM" header="Ensure &quot;static&quot; &quot;final&quot; fields are immutable." id="IMM" scope="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="&quot;static&quot; &quot;final&quot; field ''{0}'' of ''{1}'' type is mutable."/>
                  <msg index="2" value="&quot;static&quot; &quot;final&quot; field ''{0}'' of ''{1}'' type is mutable, since array elements could be modified even if the array is declared as &quot;final&quot;."/>
                  <msg index="3" value="&quot;static&quot; mutable field ''{0}'' of ''{1}'' type is not declared &quot;private&quot;."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.CUB.IMM.CHECK_PRIVATE" name="CHECK_PRIVATE" value="Check &quot;static&quot; mutable fields are declared &quot;private&quot;"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="false" id="PB.CUB.IMM.CHECK_PRIVATE" inputType="checkbox" label="Report mutable non-final &quot;static&quot; fields that are not declared &quot;private&quot;"/>
                  <param defaultValue="" id="PB.CUB.IMM.IGNORE_TYPES" inputType="stringList" label="Ignore types"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ISF" header="Inspect &quot;private&quot; &quot;static&quot; fields which may have mistakenly been declared &quot;static&quot;" id="ISF" scope="LINE" severity="3" since="8.0">
               <messages>
                  <msg index="1" value="''{0}'' might be mistakenly declared as &quot;static&quot;."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.PSFA" header="Avoid using &quot;public static final&quot; array fields" id="PSFA" scope="LINE" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="Mutable &quot;public static final&quot; array field: ''{0}''."/>
               </messages>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/582.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.RMO" header="Avoid referencing mutable fields" id="RMO" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="''{0}'' is a mutable field."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.CUB.RMO.STATIC_FINAL_FIELD_ONLY" name="STATIC_FINAL_FIELD_ONLY" value="Check &quot;static final&quot; fields only"/>
                  <oldparam id="PB.CUB.RMO.ACCESSIBILITY_LABEL" name="ACCESSIBILITY_LABEL" value="Check fields of accessibility"/>
                  <oldparam id="PB.CUB.RMO.PUBLIC_FIELD" name="PUBLIC_FIELD" value="public"/>
                  <oldparam id="PB.CUB.RMO.PROTECTED_FIELD" name="PROTECTED_FIELD" value="protected"/>
                  <oldparam id="PB.CUB.RMO.PACKAGE_FIELD" name="PACKAGE_FIELD" value="package-private"/>
                  <oldparam id="PB.CUB.RMO.PRIVATE_FIELD" name="PRIVATE_FIELD" value="private"/>
                  <oldparam id="PB.CUB.RMO.IGNORE_LIST" name="IGNORE_LIST" value="Ignore fields of the following classes: (Glob expression)"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="false" id="PB.CUB.RMO.STATIC_FINAL_FIELD_ONLY" inputType="checkbox" label="Check &quot;static final&quot; fields only"/>
                  <group collapsible="false" id="PB.CUB.RMO.group.0" label="Check fields of accessibility">
                     <param defaultValue="true" id="PB.CUB.RMO.PUBLIC_FIELD" inputType="checkbox" label="public"/>
                     <param defaultValue="false" id="PB.CUB.RMO.PROTECTED_FIELD" inputType="checkbox" label="protected"/>
                     <param defaultValue="false" id="PB.CUB.RMO.PACKAGE_FIELD" inputType="checkbox" label="package-private"/>
                     <param defaultValue="false" id="PB.CUB.RMO.PRIVATE_FIELD" inputType="checkbox" label="private"/>
                  </group>
                  <param defaultValue="java.lang.System;java.util.Locale" id="PB.CUB.RMO.IGNORE_LIST" inputType="stringList" label="Ignore fields of the following classes: (Glob expression)" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.SAC" header="Do not use &quot;char&quot; arrays in &quot;String&quot; concatenations" id="SAC" scope="LINE" severity="2" since="8.0">
               <messages>
                  <msg index="1" value="&quot;char&quot; array ''{0}'' is used in 'String' concatenation."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.SBC" header="Do not use a &quot;switch&quot; statement with a bad &quot;case&quot;" id="SBC" scope="LINE" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="&quot;{0}&quot; is missing either &quot;break&quot;, &quot;return&quot;, or &quot;/* falls through */&quot;."/>
                  <msg index="2" value="&quot;default&quot; case is missing either &quot;break&quot;, &quot;return&quot;, or &quot;/* falls through */&quot;."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.CUB.SBC.IGNORE_LAST_SWITCH_CASE" name="IGNORE_LAST_SWITCH_CASE" value="Ignore last &quot;switch&quot; case"/>
                  <oldparam id="PB.CUB.SBC.IGNORE_EMPTY" name="IGNORE_EMPTY" value="Ignore &quot;case&quot; statements with empty bodies"/>
               </oldparameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/484.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="true" id="PB.CUB.SBC.IGNORE_LAST_SWITCH_CASE" inputType="checkbox" label="Ignore last &quot;switch&quot; case"/>
                  <param defaultValue="true" id="PB.CUB.SBC.IGNORE_EMPTY" inputType="checkbox" label="Ignore &quot;case&quot; statements with empty bodies"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.SRAD" header="Specify @Retention for annotation type declarations" id="SRAD" scope="LINE" severity="3" since="9.0">
               <messages>
                  <msg index="1" value="Annotation ''{0}'' does not specify @Retention."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ATSF" header="Do not exit &quot;finally&quot; blocks abruptly." id="ATSF" scope="LINE" severity="1" since="6.0">
               <messages>
                  <msg index="1" value="The enclosing &quot;finally&quot; block should not be exited with a &quot;{0}&quot; statement."/>
                  <msg index="2" value="This method call may cause the enclosing &quot;finally&quot; block to be exited because it throws a checked exception."/>
                  <msg index="3" value="This constructor call may cause the enclosing &quot;finally&quot; block to be exited because it throws a checked exception."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.CUB.ATSF.WHAT_TO_CHECK" name="WHAT_TO_CHECK" value="What to Check"/>
                  <oldparam id="PB.CUB.ATSF.CHECK_RETURN" name="CHECK_RETURN" value="&quot;return&quot; statements"/>
                  <oldparam id="PB.CUB.ATSF.CHECK_THROW" name="CHECK_THROW" value="&quot;throw&quot; statements"/>
                  <oldparam id="PB.CUB.ATSF.CHECK_BREAK" name="CHECK_BREAK" value="&quot;break&quot; and &quot;continue&quot; statements"/>
                  <oldparam id="PB.CUB.ATSF.CHECK_METH_THROW" name="CHECK_METH_THROW" value="method calls which throw uncaught exceptions"/>
                  <oldparam id="PB.CUB.ATSF.ALLOW_RETHROW" name="ALLOW_RETHROW" value="allow rethrowing of exceptions from within &quot;finally&quot; blocks"/>
               </oldparameters>
               <parameters>
                  <group collapsible="false" id="PB.CUB.ATSF.group.0" label="What to Check">
                     <param defaultValue="true" id="PB.CUB.ATSF.CHECK_THROW" inputType="checkbox" label="&quot;throw&quot; statements">
                        <param defaultValue="false" id="PB.CUB.ATSF.ALLOW_RETHROW" inputType="checkbox" label="allow rethrowing of exceptions from within &quot;finally&quot; blocks"/>
                     </param>
                     <param defaultValue="false" id="PB.CUB.ATSF.CHECK_RETURN" inputType="checkbox" label="&quot;return&quot; statements"/>
                     <param defaultValue="false" id="PB.CUB.ATSF.CHECK_BREAK" inputType="checkbox" label="&quot;break&quot; and &quot;continue&quot; statements"/>
                     <param defaultValue="false" id="PB.CUB.ATSF.CHECK_METH_THROW" inputType="checkbox" label="method calls which throw uncaught exceptions"/>
                  </group>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.STRCC" header="Parenthesize complex expressions in 'print()' or 'println()' statements" id="STRCC" scope="LINE" severity="3" since="8.0">
               <messages>
                  <msg index="1" value="Complex expression in ''{0}()'' statement is not parenthesized. The expression is now interpreted as : {1}."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.IMC" header="Ensure overriding methods are not unintended covariants due to parameter type differences" id="IMC" scope="METHOD" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="Possible covariant of the method ''{0}'' defined in the class ''{1}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.CUB.IMC.IGNORE_METHOD_TABLE" name="IGNORE_METHOD_TABLE" value="Methods to be ignored"/>
                  <oldparam id="PB.CUB.IMC.IGNORE_VISIBILITY_CHANGE" name="IGNORE_VISIBILITY_CHANGE" value="Ignore covariants that have visibility changes"/>
                  <oldparam id="PB.CUB.IMC.METHOD" name="METHOD" value="Method"/>
                  <oldparam id="PB.CUB.IMC.TYPE" name="TYPE" value="Type"/>
                  <oldparam id="PB.CUB.IMC.IGNORE_STATIC" name="IGNORE_STATIC" value="Ignore &quot;static&quot; methods"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="PB.CUB.IMC.IGNORE_STATIC" inputType="checkbox" label="Ignore &quot;static&quot; methods"/>
                  <param defaultValue="false" id="PB.CUB.IMC.IGNORE_VISIBILITY_CHANGE" inputType="checkbox" label="Ignore covariants that have visibility changes"/>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="PB.CUB.IMC.IGNORE_METHOD_TABLE" label="Methods to be ignored" reader="SATable">
                     <columns>
                        <column columnType="text" editable="true" id="PB__CUB__IMC__IGNORE_METHOD_TABLE__COLUMN1" label="Type" required="true"/>
                        <column columnType="text" editable="true" id="PB__CUB__IMC__IGNORE_METHOD_TABLE__COLUMN2" label="Method" required="true"/>
                     </columns>
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.OSM" header="Ensure overloaded methods in superclass are overridden when overriding a method in subclass" id="OSM" scope="CLASS" severity="3" since="8.3">
               <messages>
                  <msg index="1" value="Method ''{0}'' overrides a superclass method, should also override: ''{1}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.CUB.OSM.IGNORED_METHODS" name="IGNORED_METHODS" value="Ignore the following methods:"/>
                  <oldparam id="PB.CUB.OSM.IGNORE_EMPTY" name="IGNORE_EMPTY" value="Ignore methods with empty bodies"/>
                  <oldparam id="PB.CUB.OSM.IGNORE_CHAINED" name="IGNORE_CHAINED" value="Ignore &quot;chained&quot; methods"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="visit#accept#beginVisit#endVisit#run#print#write#read" id="PB.CUB.OSM.IGNORED_METHODS" inputType="stringList" label="Ignore the following methods:" prevType="StringList"/>
                  <param defaultValue="true" id="PB.CUB.OSM.IGNORE_EMPTY" inputType="checkbox" label="Ignore methods with empty bodies"/>
                  <param defaultValue="true" id="PB.CUB.OSM.IGNORE_CHAINED" inputType="checkbox" label="Ignore &quot;chained&quot; methods"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.UEIC" header="Do not use '==' or '!=' to compare objects" id="UEIC" scope="LINE" severity="2" since="4.5">
               <messages>
                  <msg index="1" value="&quot;==&quot; is used when comparing Objects. 'equals()' should be used instead."/>
                  <msg index="2" value="&quot;!=&quot; is used when comparing Objects. 'equals()' should be used instead."/>
                  <msg index="3" value="&quot;==&quot; is used when comparing 'String' Objects. 'equals()' should be used instead."/>
                  <msg index="4" value="&quot;!=&quot; is used when comparing 'String' Objects. 'equals()' should be used instead."/>
                  <msg index="5" value="The 'equals()' method of class 'Object' is used when comparing array Objects. 'java.util.Arrays.equals (Object[], Object[])' should be used instead."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.CUB.UEIC.STRING_ONLY" name="STRING_ONLY" value="Only 'String' objects "/>
                  <oldparam id="PB.CUB.UEIC.CHECK_ARRAYS" name="CHECK_ARRAYS" value="Check for calls to the 'equals()' method of class Object on arrays"/>
                  <oldparam id="PB.CUB.UEIC.ALL" name="ALL" value="All objects"/>
                  <oldparam id="PB.CUB.UEIC.SCOPE" name="SCOPE" value="Scope of checking:"/>
                  <oldparam id="PB.CUB.UEIC.IGNORE_TYPES" name="IGNORE_TYPES" value="Allow &quot;==&quot; and &quot;!=&quot; operators when compared object is type:"/>
                  <oldparam id="PB.CUB.UEIC.CHECK_STATICFINAL" name="CHECK_STATICFINAL" value="Check comparisons to &quot;static&quot; &quot;final&quot; objects"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/597.html" name="CWE"/>
               </references>
               <parameters>
                  <radioGroup id="PB.CUB.UEIC.SCOPE" label="Scope of checking:" prevType="MultipleChoice" showLabel="true">
                     <radioItem defaultValue="checked" label="All objects" value="0"/>
                     <radioItem label="Only 'String' objects " value="1"/>
                  </radioGroup>
                  <param defaultValue="java.lang.Class;java.lang.Thread" id="PB.CUB.UEIC.IGNORE_TYPES" inputType="stringList" label="Allow &quot;==&quot; and &quot;!=&quot; operators when compared object is type:" prevType="StringList"/>
                  <param defaultValue="true" id="PB.CUB.UEIC.CHECK_ARRAYS" inputType="checkbox" label="Check for calls to the 'equals()' method of class Object on arrays"/>
                  <param defaultValue="false" id="PB.CUB.UEIC.CHECK_STATICFINAL" inputType="checkbox" label="Check comparisons to &quot;static&quot; &quot;final&quot; objects"/>
                  <param defaultValue="false" id="PB.CUB.UEIC.CHECK_EQUALS_METHOD" inputType="checkbox" label="Check comparisons in equals() methods"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CILB" header="Do not put code other than logging code inside logging blocks." id="CILB" scope="LINE" severity="5" since="8.2">
               <messages>
                  <msg index="1" value="This code may have been accidentally included in the enclosing logging block."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.APAM" header="Avoid passing arrays as arguments to methods that take non-array parameters." id="APAM" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Array argument passed to method ''{0}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.CUB.APAM.CHECK_TYPES" name="CHECK_TYPES" value="Check the following types:"/>
                  <oldparam id="PB.CUB.APAM.CHECK_OBJECT" name="CHECK_OBJECT" value="Check Object array types"/>
                  <oldparam id="PB.CUB.APAM.CHECK_ALL" name="CHECK_ALL" value="Check all array types"/>
                  <oldparam id="PB.CUB.APAM.IGNORED_METHODS" name="IGNORED_METHODS" value="Ignore the following methods:"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="PB.CUB.APAM.CHECK_TYPES" label="Check the following types:" prevType="MultipleChoice" showLabel="true">
                     <radioItem defaultValue="checked" label="Check Object array types" value="0"/>
                     <radioItem label="Check all array types" value="1"/>
                  </radioGroup>
                  <param defaultValue="^arraycopy\(java.lang.Object,int,java.lang.Object,int,int\)$;^assert;^put[\S]*\)$;^add[\S]*\)$" id="PB.CUB.APAM.IGNORED_METHODS" inputType="stringList" label="Ignore the following methods:" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.EBI" header="Avoid erroneously placing statements outside blocks." id="EBI" scope="LINE" severity="2" since="8.4">
               <messages>
                  <msg index="1" value="Statement has indentation matching or greater than the previous line, but is outside the ''{0}'' statement."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.CUB.EBI.CHECK_IF" name="CHECK_IF" value="Check &quot;if&quot; statements"/>
                  <oldparam id="PB.CUB.EBI.CHECK_ELSE" name="CHECK_ELSE" value="Check &quot;else&quot; statements"/>
                  <oldparam id="PB.CUB.EBI.CHECK_FOR" name="CHECK_FOR" value="Check &quot;for&quot; statements"/>
                  <oldparam id="PB.CUB.EBI.CHECK_WHILE" name="CHECK_WHILE" value="Check &quot;while&quot; statements"/>
                  <oldparam id="PB.CUB.EBI.CHECK_DO" name="CHECK_DO" value="Check &quot;do-while&quot; statements"/>
               </oldparameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/483.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="true" id="PB.CUB.EBI.CHECK_IF" inputType="checkbox" label="Check &quot;if&quot; statements"/>
                  <param defaultValue="true" id="PB.CUB.EBI.CHECK_ELSE" inputType="checkbox" label="Check &quot;else&quot; statements"/>
                  <param defaultValue="true" id="PB.CUB.EBI.CHECK_FOR" inputType="checkbox" label="Check &quot;for&quot; statements"/>
                  <param defaultValue="true" id="PB.CUB.EBI.CHECK_WHILE" inputType="checkbox" label="Check &quot;while&quot; statements"/>
                  <param defaultValue="true" id="PB.CUB.EBI.CHECK_DO" inputType="checkbox" label="Check &quot;do-while&quot; statements"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CNVC" header="Avoid improper concatenation of characters with numbers." id="CNVC" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Addition performed with character ''{0}'' instead of concatenation."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CTOR" header="Do not call non-&quot;final&quot;, non-&quot;static&quot; and non-&quot;private&quot; methods from constructors." id="CTOR" scope="LINE" severity="4" since="4.5">
               <messages>
                  <msg index="1" value="Non-&quot;final&quot;, non-&quot;static&quot;, and non-&quot;private&quot; method ''{0}()'' called from inside constructor ''{1}''."/>
                  <msg index="2" value="Non-&quot;final&quot;, non-&quot;static&quot;, and non-&quot;private&quot; method ''{0}()'' called indirectly from ''{1}'' inside constructor ''{2}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.CUB.CTOR.CHECK_INDIRECT" name="CHECK_INDIRECT" value="Check indirect method calls to a depth of"/>
               </oldparameters>
               <parameters>
                  <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="PB.CUB.CTOR.CHECK_INDIRECT" label="Check indirect method calls to a depth of" prevType="InputValueWithCheckBox" reader="SATable">
                     <columns>
                        <column columnType="checkbox" editable="true" id="PB__CUB__CTOR__CHECK_INDIRECT__COLUMN1" label="" required="true"/>
                        <column columnType="text" editable="true" id="PB__CUB__CTOR__CHECK_INDIRECT__COLUMN2" label="" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="PB__CUB__CTOR__CHECK_INDIRECT__COLUMN1" value="false"/>
                           <column refColumnId="PB__CUB__CTOR__CHECK_INDIRECT__COLUMN2" value="1"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.OVAM" header="Avoid overloading varargs methods" id="OVAM" scope="LINE" severity="2" since="9.0">
               <messages>
                  <msg index="1" value="Varargs method ''{0}'' is overloaded."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.CUB.OVAM.CHECK_PARAMETERS" name="CHECK_PARAMETERS" value="Ignore overloaded methods with dissimilar parameters"/>
                  <oldparam id="PB.CUB.OVAM.CHECK_RETURN" name="CHECK_RETURN" value="Ignore overloaded methods with dissimilar return types"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="PB.CUB.OVAM.CHECK_PARAMETERS" inputType="checkbox" label="Ignore overloaded methods with dissimilar parameters"/>
                  <param defaultValue="false" id="PB.CUB.OVAM.CHECK_RETURN" inputType="checkbox" label="Ignore overloaded methods with dissimilar return types"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.TVOM" header="Avoid type variable parameters when calling overloaded methods." id="TVOM" scope="LINE" severity="3" since="9.0">
               <messages>
                  <msg index="1" value="Type variable in call to overloaded method ''{0}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.CUB.TVOM.CHECK_PARAMETERS" name="CHECK_PARAMETERS" value="Ignore overloaded methods with dissimilar parameters"/>
                  <oldparam id="PB.CUB.TVOM.CHECK_RETURN" name="CHECK_RETURN" value="Ignore overloaded methods with dissimilar return types"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="false" id="PB.CUB.TVOM.CHECK_PARAMETERS" inputType="checkbox" label="Ignore overloaded methods with dissimilar parameters"/>
                  <param defaultValue="false" id="PB.CUB.TVOM.CHECK_RETURN" inputType="checkbox" label="Ignore overloaded methods with dissimilar return types"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AIPQ" header="Avoid using 'iterator()' with PriorityQueue and PriorityBlockingQueue." id="AIPQ" scope="LINE" severity="3" since="9.0">
               <messages>
                  <msg index="1" value="Priority queue ''{0}'' calls &quot;iterator()&quot;."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.TOS" header="Avoid invoking 'toString()' on array variables" id="TOS" scope="LINE" severity="2" since="8.2">
               <messages>
                  <msg index="1" value="''toString()'' in variable ''{0}'' may return unreadable string."/>
                  <msg index="2" value="''toString()'' in array creation ''{0}'' may return unreadable string."/>
                  <msg index="3" value="''toString()'' in method invocation ''{0}'' may return unreadable string."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.TOCTOU" header="Avoid Time-of-check Time-of-use (TOCTOU) Race Condition" id="TOCTOU" scope="LINE" severity="2" since="9.2">
               <messages>
                  <msg index="1" value="This call is not preceeded by: ''{0}'' within {1} method calls."/>
                  <msg index="2" value="This call is not preceeded by: ''{0}'' before calling blocking instruction: ''{1}''."/>
                  <msg index="3" value="This call is not preceeded by: ''{0}'' within block scope."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.CUB.TOCTOU.PAIRS_TABLE_HEADER" name="PAIRS_TABLE_HEADER" value="Pairs of instructions that need to be called right after each other"/>
                  <oldparam id="PB.CUB.TOCTOU.PAIRS_TABLE_1ST" name="PAIRS_TABLE_1ST" value="First instruction"/>
                  <oldparam id="PB.CUB.TOCTOU.PAIRS_TABLE_2ND" name="PAIRS_TABLE_2ND" value="Second instruction"/>
                  <oldparam id="PB.CUB.TOCTOU.BLOCKING_TABLE_HEADER" name="BLOCKING_TABLE_HEADER" value="Blocking instructions"/>
                  <oldparam id="PB.CUB.TOCTOU.BLOCKING_TABLE_1ST" name="BLOCKING_TABLE_1ST" value="Blocking instruction"/>
                  <oldparam id="PB.CUB.TOCTOU.MAX_INSTRUCTIONS_COUNT" name="MAX_INSTRUCTIONS_COUNT" value="Maximum number of method calls that can occur between pairs of instructions"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/367.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="3" id="PB.CUB.TOCTOU.MAX_INSTRUCTIONS_COUNT" inputType="integer" label="Maximum number of method calls between the pairs of methods" min="0"/>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="PB.CUB.TOCTOU.PAIRS_TABLE_HEADER" label="Pairs of methods" reader="SATable">
                     <columns>
                        <column columnType="text" editable="true" id="PB__CUB__TOCTOU__PAIRS_TABLE_HEADER__COLUMN1" label="First instruction" required="true"/>
                        <column columnType="text" editable="true" id="PB__CUB__TOCTOU__PAIRS_TABLE_HEADER__COLUMN2" label="Second instruction" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="PB__CUB__TOCTOU__PAIRS_TABLE_HEADER__COLUMN1" value="java.io.File#canWrite()"/>
                           <column refColumnId="PB__CUB__TOCTOU__PAIRS_TABLE_HEADER__COLUMN2" value="java.io.FileWriter#FileWriter(java.io.File)"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="PB.CUB.TOCTOU.BLOCKING_TABLE_HEADER" label="Blocking instructions" reader="SATable">
                     <columns>
                        <column columnType="text" editable="true" id="PB__CUB__TOCTOU__BLOCKING_TABLE_HEADER__COLUMN1" label="Blocking instruction" required="true" textSize="large"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="PB__CUB__TOCTOU__BLOCKING_TABLE_HEADER__COLUMN1" value="java.lang.Thread#sleep(long)"/>
                        </row>
                        <row id="2">
                           <column refColumnId="PB__CUB__TOCTOU__BLOCKING_TABLE_HEADER__COLUMN1" value="java.lang.Thread#sleep(long,int)"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CWRITE" header="Avoid usage of File.canWrite() method because it may returns true even if directory is not writable" id="CWRITE" scope="LINE" severity="3" since="9.4">
               <messages>
                  <msg index="1" value="Do not use File.canWrite() method because it may returns true even if directory is not writable."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CUB.NCUCP" header="Do not assume that a Java char fully represents a Unicode code point" id="NCUCP" scope="LINE" severity="3" since="2021.1">
               <messages>
                  <msg index="1" value="The ''{0}'' method does not support all Unicode characters and should be replaced with ''{1}''"/>
               </messages>
               <parameters>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="PB.CUB.NCUCP.METHODS_TABLE_HEADER" label="Methods to be checked" reader="SATable">
                     <columns>
                        <column columnType="text" editable="true" id="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" label="Incorrect method (qualified name)" required="true" textSize="large"/>
                        <column columnType="text" editable="true" id="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" label="Correct method (qualified name)" required="true" textSize="large"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isDefined(char)"/>
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isDefined(int)"/>
                        </row>
                        <row id="2">
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isDigit(char)"/>
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isDigit(int)"/>
                        </row>
                        <row id="3">
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isIdentifierIgnorable(char)"/>
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isIdentifierIgnorable(int)"/>
                        </row>
                        <row id="4">
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isISOControl(char)"/>
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isISOControl(int)"/>
                        </row>
                        <row id="5">
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isJavaIdentifierPart(char)"/>
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isJavaIdentifierPart(int)"/>
                        </row>
                        <row id="6">
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isJavaIdentifierStart(char)"/>
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isJavaIdentifierStart(int)"/>
                        </row>
                        <row id="7">
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isLetter(char)"/>
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isLetter(int)"/>
                        </row>
                        <row id="8">
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isLetterOrDigit(char)"/>
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isLetterOrDigit(int)"/>
                        </row>
                        <row id="9">
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isLowerCase(char)"/>
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isLowerCase(int)"/>
                        </row>
                        <row id="10">
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isMirrored(char)"/>
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isMirrored(int)"/>
                        </row>
                        <row id="11">
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isSpaceChar(char)"/>
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isSpaceChar(int)"/>
                        </row>
                        <row id="12">
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isTitleCase(char)"/>
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isTitleCase(int)"/>
                        </row>
                        <row id="13">
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isUnicodeIdentifierPart(char)"/>
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isUnicodeIdentifierPart(int)"/>
                        </row>
                        <row id="14">
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isUnicodeIdentifierStart(char)"/>
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isUnicodeIdentifierStart(int)"/>
                        </row>
                        <row id="15">
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isUpperCase(char)"/>
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isUpperCase(int)"/>
                        </row>
                        <row id="16">
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isWhitespace(char)"/>
                           <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isWhitespace(int)"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </parameters>
            </rule>
         </category>
         <category description="Typographical Errors" name="TYPO">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AECB" header="Avoid &quot;try&quot;, &quot;catch&quot; and &quot;finally&quot; blocks with empty bodies" id="AECB" scope="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="&quot;try&quot; block has an empty body."/>
                  <msg index="2" value="&quot;catch&quot; block has an empty body."/>
                  <msg index="3" value="&quot;finally&quot; block has an empty body."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.TYPO.AECB.CHECK_FINALLY" name="CHECK_FINALLY" value="Check &quot;finally&quot; block."/>
                  <oldparam id="PB.TYPO.AECB.CHECK_TRY" name="CHECK_TRY" value="Check &quot;try&quot; block."/>
                  <oldparam id="PB.TYPO.AECB.CHECK_CATCH" name="CHECK_CATCH" value="Check &quot;catch&quot; block."/>
                  <oldparam id="PB.TYPO.AECB.CHECK_COMMENTS" name="CHECK_COMMENTS" value="Disallow blocks with comments as content."/>
                  <oldparam id="PB.TYPO.AECB.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="Regular expression of exception variable name. (enclosing catch block would be ignored if matches)"/>
               </oldparameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/391.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="true" id="PB.TYPO.AECB.CHECK_TRY" inputType="checkbox" label="Check &quot;try&quot; block."/>
                  <param defaultValue="true" id="PB.TYPO.AECB.CHECK_CATCH" inputType="checkbox" label="Check &quot;catch&quot; block."/>
                  <param defaultValue="true" id="PB.TYPO.AECB.CHECK_FINALLY" inputType="checkbox" label="Check &quot;finally&quot; block."/>
                  <param defaultValue="false" id="PB.TYPO.AECB.CHECK_COMMENTS" inputType="checkbox" label="Disallow blocks with comments as content."/>
                  <param defaultValue="%5Eignore%24;" id="PB.TYPO.AECB.REGULAR_EXPRESSION" inputType="stringList" label="Regular expression of exception variable name. (enclosing catch block would be ignored if matches)" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ASI" header="Avoid assignment within a condition" id="ASI" scope="LINE" severity="1" since="4.5">
               <messages>
                  <msg index="1" value="Assignment within an &quot;if&quot; condition."/>
                  <msg index="2" value="Assignment within a loop condition."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.TYPO.ASI.CHECK_BOOLEAN_ONLY" name="CHECK_BOOLEAN_ONLY" value="Flag assignments to &quot;boolean&quot; objects only"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/481.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="true" id="PB.TYPO.ASI.CHECK_BOOLEAN_ONLY" inputType="checkbox" label="Flag assignments to &quot;boolean&quot; objects only"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.DAV" header="Avoid assigning same variable in the fall-through switch case." id="DAV" scope="LINE" severity="3" since="8.2">
               <messages>
                  <msg index="1" value="variable ''{0}'' has been assigned in previous switch case."/>
               </messages>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/484.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.EB" header="Avoid control statements with empty bodies" id="EB" scope="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="''{0}'' statement with an empty body."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.TYPO.EB.CHECK_EMPTY_STATEMENT" name="CHECK_EMPTY_STATEMENT" value="empty statement"/>
                  <oldparam id="PB.TYPO.EB.CHECK_TYPE_TABLE" name="CHECK_TYPE_TABLE" value="Flag as empty body:"/>
                  <oldparam id="PB.TYPO.EB.CHECK_TYPE" name="CHECK_TYPE" value="Conditional statement type"/>
                  <oldparam id="PB.TYPO.EB.CHECK_EMPTY_BLOCK" name="CHECK_EMPTY_BLOCK" value="empty block"/>
                  <oldparam id="PB.TYPO.EB.SAME_LINE_ONLY" name="SAME_LINE_ONLY" value="Report only if the empty statement is on the same line as the control statement."/>
               </oldparameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/483.html" name="CWE"/>
               </references>
               <parameters>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="PB.TYPO.EB.CHECK_TYPE_TABLE" label="Flag as empty body:" reader="SATable">
                     <columns>
                        <column columnType="text" editable="true" id="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN1" label="Conditional statement type" required="true"/>
                        <column columnType="checkbox" editable="true" id="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN2" label="empty statement" required="true"/>
                        <column columnType="checkbox" editable="true" id="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN3" label="empty block" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN1" value="if"/>
                           <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN2" value="true"/>
                           <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN3" value="false"/>
                        </row>
                        <row id="2">
                           <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN1" value="else"/>
                           <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN2" value="true"/>
                           <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN3" value="false"/>
                        </row>
                        <row id="3">
                           <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN1" value="for"/>
                           <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN2" value="true"/>
                           <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN3" value="false"/>
                        </row>
                        <row id="4">
                           <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN1" value="while"/>
                           <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN2" value="true"/>
                           <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN3" value="false"/>
                        </row>
                        <row id="5">
                           <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN1" value="do while"/>
                           <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN2" value="true"/>
                           <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN3" value="false"/>
                        </row>
                        <row id="6">
                           <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN1" value="switch"/>
                           <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN2" value="true"/>
                           <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN3" value="false"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
                  <param defaultValue="true" id="PB.TYPO.EB.SAME_LINE_ONLY" inputType="checkbox" label="Report only if the empty statement is on the same line as the control statement."/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.NAMING" header="Do not give methods and fields the same name as the enclosing class or each other" id="NAMING" scope="CLASS" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="Method &quot;{0}&quot; has the same name as the enclosing class."/>
                  <msg index="2" value="Field &quot;{0}&quot; has the same name as the enclosing class."/>
                  <msg index="3" value="Field &quot;{0}&quot; has the same name as a member method."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.TYPO.NAMING.CHECK_METHODS" name="CHECK_METHODS" value="check methods with same name as class"/>
                  <oldparam id="PB.TYPO.NAMING.CHECK_FIELDS_C" name="CHECK_FIELDS_C" value="check fields with same name as class"/>
                  <oldparam id="PB.TYPO.NAMING.CHECK_FIELDS_M" name="CHECK_FIELDS_M" value="check fields with same name as member methods"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="PB.TYPO.NAMING.CHECK_METHODS" inputType="checkbox" label="check methods with same name as class"/>
                  <param defaultValue="false" id="PB.TYPO.NAMING.CHECK_FIELDS_C" inputType="checkbox" label="check fields with same name as class"/>
                  <param defaultValue="false" id="PB.TYPO.NAMING.CHECK_FIELDS_M" inputType="checkbox" label="check fields with same name as member methods"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.TLS" header="Ensure &quot;switch&quot; statements do not contain typos" id="TLS" scope="LINE" severity="2" since="4.5">
               <messages>
                  <msg index="1" value="Text label ''{0}'' may be a typo for ''{1}''."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.IMO" header="Ensure the overriding method name does not have a typo" id="IMO" scope="METHOD" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="Possible typo overriding method ''{0}()'': ''{1}()'' should be ''{2}()''."/>
                  <msg index="2" value="Possible typo overriding method ''{0}()'': ''{1}'' should be ''{2}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.TYPO.IMO.IGNORE_LIST" name="IGNORE_LIST" value="Method name pairs to be ignored (Regular Expressions)"/>
               </oldparameters>
               <parameters>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="PB.TYPO.IMO.IGNORE_LIST" label="Method name pairs to be ignored (Regular Expressions)" reader="SATable">
                     <columns>
                        <column columnType="text" editable="true" id="PB__TYPO__IMO__IGNORE_LIST__COLUMN1" label="" required="true"/>
                        <column columnType="text" editable="true" id="PB__TYPO__IMO__IGNORE_LIST__COLUMN2" label="" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="PB__TYPO__IMO__IGNORE_LIST__COLUMN1" value="print"/>
                           <column refColumnId="PB__TYPO__IMO__IGNORE_LIST__COLUMN2" value="paint"/>
                        </row>
                        <row id="2">
                           <column refColumnId="PB__TYPO__IMO__IGNORE_LIST__COLUMN1" value="clone"/>
                           <column refColumnId="PB__TYPO__IMO__IGNORE_LIST__COLUMN2" value="close"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.WT" header="Ensure that arguments passed to Java wrapper classes do not contain typos" id="WT" scope="LINE" severity="1" since="6.0">
               <messages>
                  <msg index="1" value="Possible typo in argument passed to wrapper class."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CSI" header="Ensure that the correct &quot;super&quot; method is invoked." id="CSI" scope="LINE" severity="3" since="8.1">
               <messages>
                  <msg index="1" value="You may have meant to call ''super.{0}()'' here instead of ''super.{1}()''."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.RSK" header="Avoid having more than one &quot;getter&quot; or &quot;setter&quot; method for the same field" id="RSK" scope="LINE" severity="4" since="8.0">
               <messages>
                  <msg index="1" value="There is another &quot;getter&quot; method defined for field ''{0}'': ''{1}()''."/>
                  <msg index="2" value="There is another &quot;setter&quot; method defined for field ''{0}'': ''{1}()''."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.TYPO.RSK.DUP_SET" name="DUP_SET" value="Allow multiple &quot;setter&quot; methods if the parameter types are different."/>
                  <oldparam id="PB.TYPO.RSK.DUP_GET" name="DUP_GET" value="Allow multiple &quot;getter&quot; methods if the return types are different."/>
                  <oldparam id="PB.TYPO.RSK.IGNORE_OVER" name="IGNORE_OVER" value="Ignore overriding and implementing methods."/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="PB.TYPO.RSK.IGNORE_OVER" inputType="checkbox" label="Ignore overriding and implementing methods."/>
                  <param defaultValue="false" id="PB.TYPO.RSK.DUP_SET" inputType="checkbox" label="Allow multiple &quot;setter&quot; methods if the parameter types are different."/>
                  <param defaultValue="false" id="PB.TYPO.RSK.DUP_GET" inputType="checkbox" label="Allow multiple &quot;getter&quot; methods if the return types are different."/>
               </parameters>
            </rule>
         </category>
         <category description="Useless Code" name="USC">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.SAFL" header="Avoid self assignments/initializations to fields and/or local variables" id="SAFL" scope="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="Avoid self assignment that has no effect: ''{0}''."/>
                  <msg index="2" value="Avoid self initialization that has no effect: ''{0}''."/>
                  <msg index="3" value="Avoid redirect self assignment that has no effect: ''{0}''."/>
                  <msg index="4" value="Avoid redirect self initialization that has no effect: ''{0}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.USC.SAFL.CHECK_LOCALS" name="CHECK_LOCALS" value="Check local variables and parameters"/>
                  <oldparam id="PB.USC.SAFL.CHECK_FIELDS" name="CHECK_FIELDS" value="Check fields"/>
               </oldparameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/398.html" name="CWE"/>
               </references>
               <parameters>
                  <param defaultValue="true" id="PB.USC.SAFL.CHECK_FIELDS" inputType="checkbox" label="Check fields"/>
                  <param defaultValue="true" id="PB.USC.SAFL.CHECK_LOCALS" inputType="checkbox" label="Check local variables and parameters"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CC" header="Avoid conditional expressions that always evaluate to a constant value" id="CC" scope="LINE" severity="1" since="6.0">
               <messages>
                  <msg index="1" value="Conditional expression always evaluates to &quot;{0}&quot;."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.USC.CC.ALL" name="ALL" value="All conditional expressions"/>
                  <oldparam id="PB.USC.CC.ONLY_LOGICAL_EXPRESSION" name="ONLY_LOGICAL_EXPRESSION" value="Only expressions that have a logical operator (&amp;&amp;&amp;&amp;, ||, &amp;&amp; or |) embedded in them"/>
                  <oldparam id="PB.USC.CC.SCOPE_OF_CHECKING" name="SCOPE_OF_CHECKING" value="Scope of checking:"/>
                  <oldparam id="PB.USC.CC.IGNORE_SINGLE_CONSTANT" name="IGNORE_SINGLE_CONSTANT" value="Ignore &quot;static final boolean&quot; constants and &quot;boolean&quot; literals"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="PB.USC.CC.SCOPE_OF_CHECKING" label="Scope of checking:" prevType="MultipleChoice" showLabel="true">
                     <radioItem defaultValue="checked" label="All conditional expressions" value="0">
                        <param defaultValue="true" id="PB.USC.CC.IGNORE_SINGLE_CONSTANT" inputType="checkbox" label="Ignore &quot;static final boolean&quot; constants and &quot;boolean&quot; literals"/>
                     </radioItem>
                     <radioItem label="Only expressions that have a logical operator (&amp;&amp;&amp;&amp;, ||, &amp;&amp; or |) embedded in them" value="1"/>
                  </radioGroup>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.FCBS" header="Avoid using &quot;private&quot; fields which are never given a meaningful value." id="FCBS" scope="LINE" severity="2" since="8.1">
               <messages>
                  <msg index="1" value="The field ''{0}'' is used but is never assigned a non-&quot;null&quot; value."/>
                  <msg index="2" value="The field ''{0}'' is used but is never explicitly assigned a value."/>
                  <msg index="3" value="The &quot;{0}&quot; ''{1}'' is read, but no values are ever added to it."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.USC.FCBS.CHECK_PRIMITIVES" name="CHECK_PRIMITIVES" value="Check fields of primitive types"/>
                  <oldparam id="PB.USC.FCBS.IGNORE_FINAL" name="IGNORE_FINAL" value="Ignore &quot;final&quot; fields"/>
                  <oldparam id="PB.USC.FCBS.IGNORE_ANNOT" name="IGNORE_ANNOT" value="Ignore annotations that correspond to these qualified names"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="false" id="PB.USC.FCBS.CHECK_PRIMITIVES" inputType="checkbox" label="Check fields of primitive types"/>
                  <param defaultValue="true" id="PB.USC.FCBS.IGNORE_FINAL" inputType="checkbox" label="Ignore &quot;final&quot; fields"/>
                  <param defaultValue="javax.persistence.GeneratedValue;javax.ejb.EJB;javax.annotation.Resource;javax.persistence.EntityManager;" id="PB.USC.FCBS.IGNORE_ANNOT" inputType="stringList" label="Ignore annotations that correspond to these qualified names" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.OI" header="Avoid increment and decrement statements which have no effect." id="OI" scope="LINE" severity="2" since="8.0">
               <messages>
                  <msg index="1" value="This {0} of ''{1}'' will have no effect, as it is overwritten in an assignment statement."/>
                  <msg index="2" value="This post-{0} of the local variable ''{1}'' will have no effect, as it is executed in a return statement."/>
               </messages>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.UIF" header="Avoid unreachable &quot;else if&quot; and &quot;else&quot; cases" id="UIF" scope="LINE" severity="1" since="6.0">
               <messages>
                  <msg index="1" value="The &quot;else&quot; statement is unreachable because of previous branches."/>
                  <msg index="2" value="The &quot;else&quot; condition always evaluates to &quot;false&quot; because of previous branches."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.USC.UIF.IGNORE_CONSTANTS" name="IGNORE_CONSTANTS" value="Ignore &quot;static final boolean&quot; constants and &quot;boolean&quot; literals"/>
               </oldparameters>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
               </references>
               <parameters>
                  <param defaultValue="true" id="PB.USC.UIF.IGNORE_CONSTANTS" inputType="checkbox" label="Ignore &quot;static final boolean&quot; constants and &quot;boolean&quot; literals"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.EC" header="Avoid empty classes" id="EC" scope="LINE" severity="3" since="7.5">
               <messages>
                  <msg index="1" value="Empty class ''{0}'' is declared."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.USC.EC.IGNORE_TYPE_LIST" name="IGNORE_TYPE_LIST" value="Ignore method arguments of the following types (specify as regular expression):"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="java.lang.Throwable" id="PB.USC.EC.IGNORE_TYPE_LIST" inputType="stringList" label="Ignore method arguments of the following types (specify as regular expression):" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.NASSIG" header="Ensure method and constructor return values are used" id="NASSIG" scope="LINE" severity="3" since="5.0">
               <messages>
                  <msg index="1" value="Return value from method ''{0}'' is not used."/>
                  <msg index="2" value="Return value from method ''{0}'' is not used, immutable variable ''{1}'' has not been updated."/>
                  <msg index="3" value="Return value from constructor ''{0}'' is not used."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.USC.NASSIG.GENERAL_TAB" name="GENERAL_TAB" value="General"/>
                  <oldparam id="PB.USC.NASSIG.CHECK_CONSTRUCTORS" name="CHECK_CONSTRUCTORS" value="Check constructor calls"/>
                  <oldparam id="PB.USC.NASSIG.CHECK_METHODS" name="CHECK_METHODS" value="Check method calls"/>
                  <oldparam id="PB.USC.NASSIG.ONLY_IMMUTABLE" name="ONLY_IMMUTABLE" value="Only check method calls on immutable types where all of the parameter types are immutable."/>
                  <oldparam id="PB.USC.NASSIG.ONLY_IMMUTABLE_NOT_UPDATE" name="ONLY_IMMUTABLE_NOT_UPDATE" value="Only check method calls which are used to update the state of immutable variables."/>
                  <oldparam id="PB.USC.NASSIG.IGNORE_NON_JDK" name="IGNORE_NON_JDK" value="Ignore methods and constructors which are not defined in the &quot;java&quot; or &quot;javax&quot; packages."/>
                  <oldparam id="PB.USC.NASSIG.CHECK_IGNORE_TAB" name="CHECK_IGNORE_TAB" value="Check/Ignore"/>
                  <oldparam id="PB.USC.NASSIG.CHECK_IGNORE" name="CHECK_IGNORE" value="Specify whether to check or ignore certain methods and constructors"/>
                  <oldparam id="PB.USC.NASSIG.CHECK_FOLLOWING" name="CHECK_FOLLOWING" value="Check the following methods and constructors:"/>
                  <oldparam id="PB.USC.NASSIG.IGNORE_FOLLOWING" name="IGNORE_FOLLOWING" value="Ignore the following methods and constructors:"/>
                  <oldparam id="PB.USC.NASSIG.CHECK_TABLE" name="CHECK_TABLE" value="Specify types and methods/constructors as a Glob expression (use * as wildcard)"/>
                  <oldparam id="PB.USC.NASSIG.IGNORE_TABLE" name="IGNORE_TABLE" value="Specify types and methods/constructors as a Glob expression (use * as wildcard)"/>
                  <oldparam id="PB.USC.NASSIG.TYPE" name="TYPE" value="Type"/>
                  <oldparam id="PB.USC.NASSIG.METHOD" name="METHOD" value="Method/Constructor"/>
               </oldparameters>
               <parameters>
                  <group collapsible="false" id="PB.USC.NASSIG.tab.GENERAL_TAB" label="General">
                     <param defaultValue="true" id="PB.USC.NASSIG.CHECK_CONSTRUCTORS" inputType="checkbox" label="Check constructor calls"/>
                     <param defaultValue="true" id="PB.USC.NASSIG.CHECK_METHODS" inputType="checkbox" label="Check method calls">
                        <param defaultValue="true" id="PB.USC.NASSIG.ONLY_IMMUTABLE" inputType="checkbox" label="Only check method calls on immutable types where all of the parameter types are immutable.">
                           <param defaultValue="false" id="PB.USC.NASSIG.ONLY_IMMUTABLE_NOT_UPDATE" inputType="checkbox" label="Only check method calls which are used to update the state of immutable variables."/>
                        </param>
                     </param>
                     <param defaultValue="false" id="PB.USC.NASSIG.IGNORE_NON_JDK" inputType="checkbox" label="Ignore methods and constructors which are not defined in the &quot;java&quot; or &quot;javax&quot; packages."/>
                  </group>
                  <group collapsible="false" id="PB.USC.NASSIG.tab.CHECK_IGNORE_TAB" label="Check/Ignore">
                     <radioGroup id="PB.USC.NASSIG.CHECK_IGNORE" label="Specify whether to check or ignore certain methods and constructors" prevType="MultipleChoice" showLabel="true">
                        <radioItem label="Check the following methods and constructors:" value="0">
                           <!--param id="PB.USC.NASSIG.CHECK_TABLE" inputType="bigtext" defaultValue="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;table version=&quot;1.0&quot;&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.String&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;concat(java.lang.String)&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.String&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;copy*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.String&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;intern()&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.String&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;replace*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.String&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;split*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.String&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;sub*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.String&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;to*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.String&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;trim()&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.String&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;valueOf*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.sql.ResultSet&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;absolute(int)&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.sql.ResultSet&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;first()&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.sql.ResultSet&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;last()&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.sql.ResultSet&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;previous()&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.sql.ResultSet&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;next()&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.sql.ResultSet&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;relative(int)&quot;/&gt;&lt;/row&gt;&lt;/table&gt;" label="Specify types and methods/constructors as a Glob expression (use * as wildcard)"/-->
                           <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="PB.USC.NASSIG.CHECK_TABLE" label="Specify types and methods/constructors as a Glob expression (use * as wildcard)" reader="SATable">
                              <columns>
                                 <column columnType="text" editable="true" id="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" label="Type" required="true"/>
                                 <column columnType="text" editable="true" id="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" label="Method/Constructor" required="true"/>
                              </columns>
                              <predefinedRows>
                                 <row id="1">
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.lang.String"/>
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="concat(java.lang.String)"/>
                                 </row>
                                 <row id="2">
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.lang.String"/>
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="copy*"/>
                                 </row>
                                 <row id="3">
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.lang.String"/>
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="intern()"/>
                                 </row>
                                 <row id="4">
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.lang.String"/>
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="replace*"/>
                                 </row>
                                 <row id="5">
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.lang.String"/>
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="split*"/>
                                 </row>
                                 <row id="6">
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.lang.String"/>
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="sub*"/>
                                 </row>
                                 <row id="7">
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.lang.String"/>
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="to*"/>
                                 </row>
                                 <row id="8">
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.lang.String"/>
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="trim()"/>
                                 </row>
                                 <row id="9">
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.lang.String"/>
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="valueOf*"/>
                                 </row>
                                 <row id="10">
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.sql.ResultSet"/>
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="absolute(int)"/>
                                 </row>
                                 <row id="11">
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.sql.ResultSet"/>
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="first()"/>
                                 </row>
                                 <row id="12">
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.sql.ResultSet"/>
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="last()"/>
                                 </row>
                                 <row id="13">
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.sql.ResultSet"/>
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="previous()"/>
                                 </row>
                                 <row id="14">
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.sql.ResultSet"/>
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="next()"/>
                                 </row>
                                 <row id="15">
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.sql.ResultSet"/>
                                    <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="relative(int)"/>
                                 </row>
                              </predefinedRows>
                           </complexParamTable>
                        </radioItem>
                        <radioItem defaultValue="checked" label="Ignore the following methods and constructors:" value="1">
                           <!--param id="PB.USC.NASSIG.IGNORE_TABLE" inputType="bigtext" defaultValue="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;table version=&quot;1.0&quot;&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.io.ObjectInputStream&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;enableResolveObject(boolean)&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.Process&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;exitValue()&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.Process&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;waitFor()&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.Runtime&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;exec*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.Runtime&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;removeShutdownHook(java.lang.Thread)&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.StringBuffer&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;append*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.util.*&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;clear()&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.util.*&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;remove*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.util.*&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;put*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.util.*&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;add*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.util.*&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;remove*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.util.*&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;retain*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.Throwable&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;fillInStackTrace()&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.Throwable&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;initCause(java.lang.Throwable)&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.sql.PreparedStatement&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;execute()&quot;/&gt;&lt;/row&gt;&lt;/table&gt;" label="Specify types and methods/constructors as a Glob expression (use * as wildcard)"/-->
                           <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="PB.USC.NASSIG.IGNORE_TABLE" label="Specify types and methods/constructors as a Glob expression (use * as wildcard)" reader="SATable">
                              <columns>
                                 <column columnType="text" editable="true" id="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" label="Type" required="true"/>
                                 <column columnType="text" editable="true" id="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" label="Method/Constructor" required="true"/>
                              </columns>
                              <predefinedRows>
                                 <row id="1">
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.io.ObjectInputStream"/>
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="enableResolveObject(boolean)"/>
                                 </row>
                                 <row id="2">
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.lang.Process"/>
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="exitValue()"/>
                                 </row>
                                 <row id="3">
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.lang.Process"/>
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="waitFor()"/>
                                 </row>
                                 <row id="4">
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.lang.Runtime"/>
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="exec*"/>
                                 </row>
                                 <row id="5">
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.lang.Runtime"/>
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="removeShutdownHook(java.lang.Thread)"/>
                                 </row>
                                 <row id="6">
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.lang.StringBuffer"/>
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="append*"/>
                                 </row>
                                 <row id="7">
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.util.*"/>
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="clear()"/>
                                 </row>
                                 <row id="8">
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.util.*"/>
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="remove*"/>
                                 </row>
                                 <row id="9">
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.util.*"/>
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="put*"/>
                                 </row>
                                 <row id="10">
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.util.*"/>
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="add*"/>
                                 </row>
                                 <row id="11">
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.util.*"/>
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="remove*"/>
                                 </row>
                                 <row id="12">
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.util.*"/>
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="retain*"/>
                                 </row>
                                 <row id="13">
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.lang.Throwable"/>
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="fillInStackTrace()"/>
                                 </row>
                                 <row id="14">
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.lang.Throwable"/>
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="initCause(java.lang.Throwable)"/>
                                 </row>
                                 <row id="15">
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.sql.PreparedStatement"/>
                                    <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="execute()"/>
                                 </row>
                              </predefinedRows>
                           </complexParamTable>
                        </radioItem>
                     </radioGroup>
                  </group>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.USC.NACC" header="Avoid classes with no accessible members" id="NACC" scope="LINE" severity="1" since="7.5">
               <messages>
                  <msg index="1" value="Class ''{0}'' has no accessible members."/>
               </messages>
            </rule>
         </category>
         <category description="Numerical Errors" name="NUM">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.BSA" header="Do not use an integer outside the range of [0, 31] as the amount of a shift" id="BSA" scope="LINE" severity="2" since="8.0">
               <messages>
                  <msg index="1" value="The shift amount ''{0}'' is outside the range [0, 31]."/>
               </messages>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/190.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/191.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CACO" header="Avoid using compound assignment operators in cases which may cause overflow." id="CACO" scope="LINE" severity="3" since="8.1">
               <messages>
                  <msg index="1" value="Compound assignment operators should not be used when the destination type is ''{0}''."/>
                  <msg index="2" value="Compound assignment operators should not be used when the destination type is ''{0}'' and the operand type is ''{1}''."/>
               </messages>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/190.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CMP" header="Possible integer overflow in a compare or compareTo method." id="CMP" scope="LINE" severity="3" since="9.0">
               <messages>
                  <msg index="1" value="Remove subtraction from ''{0}'' method."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.DCF" header="Do not compare floating point types" id="DCF" scope="LINE" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="Floating point comparisons for equality can produce unexpected results."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.NUM.DCF.IGNORE_INFINITY" name="IGNORE_INFINITY" value="Ignore floating point comparisons to &quot;infinity&quot;."/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="PB.NUM.DCF.IGNORE_INFINITY" inputType="checkbox" label="Ignore floating point comparisons to &quot;infinity&quot;."/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.FPLI" header="Do not use floating point variables as loop indices." id="FPLI" scope="LINE" severity="3" since="8.1">
               <messages>
                  <msg index="1" value="The floating point variable ''{0}'' should not be used as an index for this loop."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.NUM.FPLI.IGNORED_OPERATORS" name="IGNORED_OPERATORS" value="Ignore variables which are compared using &quot;&lt;&quot; or &quot;&gt;&quot; in the conditional expression"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="false" id="PB.NUM.FPLI.IGNORED_OPERATORS" inputType="checkbox" label="Ignore variables which are compared using &quot;&lt;&quot; or &quot;&gt;&quot; in the conditional expression"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ICO" header="Avoid calculations which result in overflow or NaN" id="ICO" scope="LINE" severity="1" since="8.1">
               <messages>
                  <msg index="1" value="This calculation will not produce an accurate result because it will result in overflow."/>
                  <msg index="2" value="This calculation will throw 'java.lang.ArithmeticException'."/>
               </messages>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/190.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.IDCD" header="Do not assign the result of an integer division to a floating point variable" id="IDCD" scope="LINE" severity="1" since="8.0">
               <messages>
                  <msg index="1" value="Assigning the result of this integer division to a floating point variable will not increase the precision of the result."/>
               </messages>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/681.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.IOF" header="Use unsigned right shift instead of division when overflow is possible." id="IOF" scope="LINE" severity="3" since="8.2">
               <messages>
                  <msg index="1" value="This integer computation may cause overflow."/>
               </messages>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="http://cwe.mitre.org/data/definitions/190.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.NAN" header="Avoid comparisons to Double.NaN or Float.NaN." id="NAN" scope="LINE" severity="1" since="9.0">
               <messages>
                  <msg index="1" value="Avoid comparison to ''{0}''."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.NIA" header="Do not initialize array dimensions with negative numbers" id="NIA" scope="LINE" severity="1" since="8.0">
               <messages>
                  <msg index="1" value="Array dimension is negative : {0}."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AIC" header="Avoid implicit casts from integer data types to floating point data types." id="AIC" scope="LINE" severity="2" since="8.2">
               <messages>
                  <msg index="1" value="This expression will be implicitly cast from an &quot;{0}&quot; to a &quot;{1}&quot; because the called method requires a &quot;{1}&quot; argument."/>
                  <msg index="2" value="This expression will be implicitly cast from a &quot;{0}&quot; to a &quot;{1}&quot; because the called method requires a &quot;{1}&quot; argument."/>
                  <msg index="3" value="This expression will be implicitly cast from an &quot;{0}&quot; to a &quot;{1}&quot; because the expression is assigned to a &quot;{1}&quot; variable."/>
                  <msg index="4" value="This expression will be implicitly cast from a &quot;{0}&quot; to a &quot;{1}&quot; because the expression is assigned to a &quot;{1}&quot; variable."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CLP" header="Do not cast primitive data types to lower precision" id="CLP" scope="LINE" severity="2" since="4.5">
               <messages>
                  <msg index="1" value="&quot;{0}&quot; type cast to lower precision &quot;{1}&quot; type."/>
               </messages>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/197.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/681.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.UBD" header="Do not use &quot;float&quot; and &quot;double&quot; if exact answers are required" id="UBD" scope="LINE" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="''{0}'' used in a high-precision calculation or comparison is of type &quot;double&quot; or &quot;float&quot;"/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.NUM.PMRWLED" header="Provide methods to read and write little-endian data" id="PMRWLED" scope="LINE" severity="4" since="2021.1">
               <messages>
                  <msg index="1" value="The ''{0}'' is insecure, because it cannot handle little-endian data."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.NUM.BBDCC" header="Do not pass floating point values to the 'BigDecimal' constructor" id="BBDCC" scope="LINE" severity="2" since="8.0">
               <messages>
                  <msg index="1" value="The 'BigDecimal' constructor is called with a floating point value as an argument"/>
               </messages>
            </rule>
         </category>
         <category description="API Usage and Implementation" name="API">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AECC" header="Avoid extending certain classes (custom rule)" id="AECC" scope="LINE" severity="3" since="8.0">
               <messages>
                  <msg index="1" value="The class ''{0}'' should not extend ''{1}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.API.AECC.FORBIDDEN" name="FORBIDDEN" value="Types which should not be subclassed (Specify fully qualified type names):"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="" id="PB.API.AECC.FORBIDDEN" inputType="stringList" label="Types which should not be subclassed (Specify fully qualified type names):" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.DANNOT" header="Add the &quot;@Deprecated&quot; annotation to the declarations of deprecated members." id="DANNOT" scope="LINE" severity="3" since="8.0">
               <messages>
                  <msg index="1" value="The member ''{0}'' is deprecated but does not use the &quot;@Deprecated&quot; annotation."/>
                  <msg index="2" value="The type ''{0}'' is deprecated but does not use the &quot;@Deprecated&quot; annotation."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.DPRAPI" header="Do not use deprecated APIs" id="DPRAPI" scope="LINE" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="Using deprecated {0}: ''{1}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.API.DPRAPI.FIELD_LIST" name="FIELD_LIST" value="Deprecated field list\n(in form of &lt;fully qualified type name&gt;#&lt;field name&gt;)"/>
                  <oldparam id="PB.API.DPRAPI.CLASS" name="CLASS" value="Class/Interface"/>
                  <oldparam id="PB.API.DPRAPI.FIELD" name="FIELD" value="Field"/>
                  <oldparam id="PB.API.DPRAPI.FIELD_LOWER" name="FIELD_LOWER" value="field"/>
                  <oldparam id="PB.API.DPRAPI.CONSTRUCTOR_LOWER" name="CONSTRUCTOR_LOWER" value="constructor"/>
                  <oldparam id="PB.API.DPRAPI.METHOD" name="METHOD" value="Method"/>
                  <oldparam id="PB.API.DPRAPI.METHOD_LOWER" name="METHOD_LOWER" value="method"/>
                  <oldparam id="PB.API.DPRAPI.METHOD_LIST" name="METHOD_LIST" value="Deprecated method list \n(in form of &lt;fully qualified type name&gt;#&lt;method&gt;(&lt;parameter1 type&gt;,&lt;parameter2 type&gt;))"/>
                  <oldparam id="PB.API.DPRAPI.CLASS_LIST" name="CLASS_LIST" value="Deprecated class/interface list"/>
                  <oldparam id="PB.API.DPRAPI.CHECK_SEE" name="CHECK_SEE" value="Check for usage of deprecated APIs in Javadoc &quot;@see&quot; tags"/>
                  <oldparam id="PB.API.DPRAPI.IGNORE_USER_DEFINED" name="IGNORE_USER_DEFINED" value="Ignore user-defined types, methods, and fields"/>
                  <oldparam id="PB.API.DPRAPI.IGNORE_NOT_LISTED" name="IGNORE_NOT_LISTED" value="Ignore all types, methods, and fields not listed above"/>
               </oldparameters>
               <references>
                  <reference href="http://cwe.mitre.org/data/definitions/477.html" name="CWE"/>
               </references>
               <parameters>
                  <group collapsible="false" id="PB.API.DPRAPI.tab.CLASS" label="Class/Interface">
                     <param defaultValue="" id="PB.API.DPRAPI.CLASS_LIST" inputType="stringList" label="Deprecated class/interface list" prevType="StringList"/>
                  </group>
                  <group collapsible="false" id="PB.API.DPRAPI.tab.FIELD" label="Field">
                     <param defaultValue="" description="Deprecated field list (in form of &lt;fully qualified type name&gt;#&lt;field name&gt;)" id="PB.API.DPRAPI.FIELD_LIST" inputType="stringList" label="Deprecated field list" prevType="StringList"/>
                  </group>
                  <group collapsible="false" id="PB.API.DPRAPI.tab.METHOD" label="Method">
                     <param defaultValue="" description="Deprecated method list (in form of &lt;fully qualified type name&gt;#&lt;method&gt;(&lt;parameter1 type&gt;,&lt;parameter2 type&gt;))" id="PB.API.DPRAPI.METHOD_LIST" inputType="stringList" label="Deprecated method list" prevType="StringList"/>
                  </group>
                  <param defaultValue="false" id="PB.API.DPRAPI.CHECK_SEE" inputType="checkbox" label="Check for usage of deprecated APIs in Javadoc &quot;@see&quot; tags"/>
                  <param defaultValue="false" id="PB.API.DPRAPI.IGNORE_USER_DEFINED" inputType="checkbox" label="Ignore user-defined types, methods, and fields"/>
                  <param defaultValue="false" id="PB.API.DPRAPI.IGNORE_NOT_LISTED" inputType="checkbox" label="Ignore all types, methods, and fields not listed above"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.EJF" header="Do not create an empty JarFile entry or an empty ZipFile entry" id="EJF" scope="LINE" severity="2" since="8.0">
               <messages>
                  <msg index="1" value="The contents of the current {0} entry may not have been written to the {1} before this call to 'closeEntry()'."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.MOHK" header="Avoid using objects with dangerous implementations of 'equals()' or 'hashCode()' as keys in hashed data structures" id="MOHK" scope="LINE" severity="3" since="8.1">
               <messages>
                  <msg index="1" value="The type ''{0}'' accesses mutable or non-&quot;final&quot; fields in its ''equals()'' or ''hashCode()'' implementation, so it is dangerous to use in a ''{1}''."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.UNI" header="Avoid improper casting of the results of the 'next' methods in the 'java.util.Random' class" id="UNI" scope="LINE" severity="2" since="8.0">
               <messages>
                  <msg index="1" value="You may have intended to use the ''nextInt()'' method instead of casting the result of this call to ''{0}()'' to an &quot;int&quot;."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.IUMS" header="Do not use &quot;URL&quot; objects in &quot;Collections&quot; or &quot;Maps&quot;." id="IUMS" scope="LINE" severity="1" since="8.2">
               <messages>
                  <msg index="1" value="A &quot;URL&quot; object is added to a &quot;Collection&quot;.  Consider using &quot;URI&quot; instead."/>
                  <msg index="2" value="A &quot;URL&quot; object is used as the key in a &quot;Map&quot;.  Consider using &quot;URI&quot; instead."/>
                  <msg index="3" value="This &quot;{0}&quot; object is created with the type parameter &quot;URL&quot;.  Consider using &quot;URI&quot; instead."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CMMT" header="Ensure that the types passed to &quot;Collection&quot; and &quot;Map&quot; methods match the types in those data structures." id="CMMT" scope="LINE" severity="1" since="8.2">
               <messages>
                  <msg index="1" value="The type &quot;{0}&quot; is being passed to the ''{1}()'' method, but the &quot;{2}&quot; is declared to hold objects of type &quot;{3}&quot;."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.KOEH" header="Ensure that all types which are used as keys in Sets and Maps override the 'equals()' and 'hashCode()' methods." id="KOEH" scope="LINE" severity="2" since="8.1">
               <messages>
                  <msg index="1" value="The type ''{0}'' is inserted into a ''{1}'' but does not override {2}."/>
                  <msg index="2" value="The type ''{0}'' is used as a key in a ''{1}'' but does not override {2}."/>
                  <msg index="3" value=" or "/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.API.KOEH.IGNORED_TYPES" name="IGNORED_TYPES" value="Allow the following types as keys in Sets and Maps (Specify fully qualified type names):"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="" id="PB.API.KOEH.IGNORED_TYPES" inputType="stringList" label="Allow the following types as keys in Sets and Maps (Specify fully qualified type names):" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.HNCN" header="Do not call the 'next' method from the 'hasNext' method of an Iterator" id="HNCN" scope="LINE" severity="1" since="8.0">
               <messages>
                  <msg index="1" value="'next' method called from the 'hasNext' method of an Iterator."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.MASP" header="Assign 'protected' accessibility to 'readResolve()' and 'writeReplace()' methods in serializable classes" id="MASP" scope="METHOD" severity="3" since="4.5">
               <messages>
                  <msg index="1" value="Method is not &quot;protected&quot;: ''{0}''"/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.VAFS" header="Ensure the correct number of arguments for varargs methods with format strings" id="VAFS" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Number of arguments to method ''{0}'' does not match format string."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.APT" header="Avoid using certain packages or types" id="APT" scope="LINE" severity="3" since="6.0">
               <messages>
                  <msg index="1" value="Type ''{0}'' is {1}, and it is prohibited."/>
                  <msg index="2" value="Package ''{0}'' is {1}, and it is prohibited."/>
               </messages>
               <oldparameters>
                  <oldparam id="PB.API.APT.CLASS_TAB" name="CLASS_TAB" value="Class"/>
                  <oldparam id="PB.API.APT.INTERFACE_AVOID_PACKAGE_EXPRS" name="INTERFACE_AVOID_PACKAGE_EXPRS" value="Package or type to be avoided (name in regular expression):"/>
                  <oldparam id="PB.API.APT.INTERFACE_TAB" name="INTERFACE_TAB" value="Interface"/>
                  <oldparam id="PB.API.APT.AVOID_PACKAGE_EXPRS" name="AVOID_PACKAGE_EXPRS" value="Package or type to be avoided (name in regular expression):"/>
               </oldparameters>
               <parameters>
                  <group collapsible="false" id="PB.API.APT.tab.CLASS_TAB" label="Class">
                     <param defaultValue="^sun\..*;^java\.lang\.reflect.*;.*internal.*" id="PB.API.APT.AVOID_PACKAGE_EXPRS" inputType="stringList" label="Package or type to be avoided (name in regular expression):" prevType="StringList"/>
                  </group>
                  <group collapsible="false" id="PB.API.APT.tab.INTERFACE_TAB" label="Interface">
                     <param defaultValue="^sun\..*;.*internal.*" id="PB.API.APT.INTERFACE_AVOID_PACKAGE_EXPRS" inputType="stringList" label="Package or type to be avoided (name in regular expression):" prevType="StringList"/>
                  </group>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.EQNL" header="Avoid calling 'equals(null)'" id="EQNL" scope="LINE" severity="2" since="9.0">
               <messages>
                  <msg index="1" value="'equals()' called with 'null' argument."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.VENDOR" header="Update values which may be using to compare with vendor properties" id="VENDOR" scope="LINE" severity="2" since="9.4">
               <messages>
                  <msg index="1" value="Make sure that ''Sun Microsystems Inc.'' you do not need changed to ''Oracle Corporation''."/>
                  <msg index="2" value="Make sure that ''http://java.sun.com/'' you do not need changed to ''http://java.oracle.com/''."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ONS" header="Ensure method arguments are serializable" id="ONS" scope="LINE" severity="1" since="8.2">
               <messages>
                  <msg index="1" value="This object of type ''{0}'' may not be serializable."/>
                  <msg index="2" value="This object of type ''{0}'' may not be completely serializable."/>
               </messages>
               <parameters>
                  <param defaultValue="false" id="PB.API.ONS.CHECK_INTERFACES" inputType="checkbox" label="Check implementations of interface method arguments (slow)"/>
                  <param defaultValue="true" id="PB.API.ONS.IGNORE_PARAM_COLLECTION" inputType="checkbox" label="Ignore Collections or Maps with Serializable type arguments"/>
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="PB.API.ONS.SERIAL_LIST" label="List of methods to be checked: " reader="SATable">
                     <columns>
                        <column columnType="text" editable="true" id="PB__API__ONS__SERIAL_LIST__COLUMN1" label="Type" required="true"/>
                        <column columnType="text" editable="true" id="PB__API__ONS__SERIAL_LIST__COLUMN2" label="Method" required="true"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN1" value="javax.servlet.http.HttpSession"/>
                           <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN2" value="setAttribute"/>
                        </row>
                        <row id="2">
                           <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN1" value="java.io.ObjectOutputStream"/>
                           <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN2" value="writeObject"/>
                        </row>
                        <row id="3">
                           <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN1" value="java.io.ObjectOutputStream"/>
                           <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN2" value="writeObjectOverride"/>
                        </row>
                        <row id="4">
                           <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN1" value="java.io.ObjectOutputStream"/>
                           <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN2" value="writeUnshared"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
                  <param defaultValue="^java\.util\.Collection$;^java\.util\.Map$;^java\.lang\.Object$" id="PB.API.ONS.IGNORE_TYPE_LIST" inputType="stringList" label="Ignore method arguments of the following types (specify as regular expression):"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.API.REP" header="Avoid using &quot;.&quot; as a regular expression in 'String.replaceAll()' and 'String.replaceFirst()'" id="REP" severity="2" since="8.2">
               <messages>
                  <msg index="1" value="Regular expression &quot;{0}&quot; will replace all string character to &quot;{1}&quot;"/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.API.OF" header="Do not overload the 'finalize()' method" id="OF" index="1" scope="LINE" severity="2" since="6.0">
               <messages>
                  <msg index="1" value="Avoid overloading 'finalize()' method."/>
               </messages>
            </rule>
         </category>
         <rule class="com.parasoft.jtest.standards.rules.builtin.PB.NAECS" header="Include a 'case' statement for each constant of an 'enum' type in 'switch' statements." id="NAECS" scope="LINE" severity="5" since="8.0">
            <messages>
               <msg index="1" value="This ''switch'' statement is missing a ''case'' for the following ''enum'' constant: {0}."/>
               <msg index="2" value="This ''switch'' statement is missing a ''case'' for the following ''enum'' constants: {0}."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.PB.PDCL" header="Place &quot;default&quot; as the last case of the &quot;switch&quot; statement" id="PDCL" scope="LINE" severity="3" since="5.1">
            <messages>
               <msg index="1" value="&quot;default&quot; case is not the last case."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.PB.PDS" header="Provide &quot;default:&quot; for each &quot;switch&quot; statement" id="PDS" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="&quot;switch&quot; is missing &quot;default:&quot; label."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.PB.EAR" header="Ensure that non-&quot;void&quot; methods have a return value other than empty arrays and &quot;null&quot;." id="EAR" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Method ''{0}()'' may not have any return values other than empty arrays and &quot;null&quot;."/>
               <msg index="2" value="Method ''{0}()'' may not have any return values other than &quot;null&quot;."/>
            </messages>
            <oldparameters>
               <oldparam id="PB.EAR.EMPTY_ARRAY" name="EMPTY_ARRAY" value="Flag methods where every return value is either the literal &quot;null&quot; or an empty array."/>
               <oldparam id="PB.EAR.NULL" name="NULL" value="Flag only methods where every return value is the literal &quot;null&quot;."/>
               <oldparam id="PB.EAR.IGNORE_ABSTRACT_CLASSES" name="IGNORE_ABSTRACT_CLASSES" value="Ignore method which are members of abstract classes or overriding abstract methods from abstract classes."/>
               <oldparam id="PB.EAR.IGNORE_INTERFACES" name="IGNORE_INTERFACES" value="Ignore interface implementation methods."/>
            </oldparameters>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/690.html" name="CWE"/>
            </references>
            <parameters>
               <radioGroup id="PB.EAR.FLAG_LEVEL" prevType="MultipleChoice" showLabel="false">
                  <radioItem label="Flag only methods where every return value is the literal &quot;null&quot;." value="0"/>
                  <radioItem defaultValue="checked" label="Flag methods where every return value is either the literal &quot;null&quot; or an empty array." value="1"/>
               </radioGroup>
               <group collapsible="false" id="PB.EAR.group.0" showLabel="false">
                  <param defaultValue="false" id="PB.EAR.IGNORE_INTERFACES" inputType="checkbox" label="Ignore interface implementation methods."/>
                  <param defaultValue="false" id="PB.EAR.IGNORE_ABSTRACT_CLASSES" inputType="checkbox" label="Ignore method which are members of abstract classes or overriding abstract methods from abstract classes."/>
               </group>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CLOSE" header="Unrestricted lock resource" id="CLOSE" scope="LINE" severity="1" since="9.2">
            <oldparameters>
               <oldparam id="PB.CLOSE.TABLE_HEADER" name="TABLE_HEADER" value="List of classes responsible for the resource and resource closing methods"/>
               <oldparam id="PB.CLOSE.CLASS_NAME_HEADER" name="CLASS_NAME_HEADER" value="Class name"/>
               <oldparam id="PB.CLOSE.METHOD_NAME_HEADER" name="METHOD_NAME_HEADER" value="Method name"/>
            </oldparameters>
            <messages>
               <msg index="1" value="Variable ''{0}'' may not have a close resource."/>
               <msg index="2" value="Variable ''{0}'' is rewrite without close resource."/>
            </messages>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE"/>
               <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE"/>
               <reference href="http://cwe.mitre.org/data/definitions/775.html" name="CWE"/>
            </references>
            <parameters>
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="PB.CLOSE.TABLE_HEADER" label="List of classes responsible for the resource and resource closing methods" reader="SATable">
                  <columns>
                     <column columnType="text" editable="true" id="PB__CLOSE__TABLE_HEADER__COLUMN1" label="Class name" required="true"/>
                     <column columnType="text" editable="true" id="PB__CLOSE__TABLE_HEADER__COLUMN2" label="Method name" required="true"/>
                  </columns>
                  <predefinedRows>
                     <row id="1">
                        <column refColumnId="PB__CLOSE__TABLE_HEADER__COLUMN1" value="java.io.Closeable"/>
                        <column refColumnId="PB__CLOSE__TABLE_HEADER__COLUMN2" value="close"/>
                     </row>
                  </predefinedRows>
               </complexParamTable>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.PB.IKICO" header="Ensure that keys used in comparison operations are immutable" id="IKICO" scope="LINE" severity="3" since="10.4">
            <messages>
               <msg index="1" value="A mutable field &quot;{1}&quot; is used in the &quot;{0}&quot; method."/>
            </messages>
         </rule>
      </category>
      <category description="Internationalization" name="INTER">
         <rule class="com.parasoft.jtest.standards.rules.builtin.INTER.COS" header="Do not use String concatenation in an Internationalized environment." id="COS" severity="5" since="4.5">
            <messages>
               <msg index="1" value="Concatenating strings."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INTER.CCL" header="Use the optional java.util.Locale parameter" id="CCL" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="The ''{0}'' method is called without the java.util.Locale parameter"/>
            </messages>
            <parameters>
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="INTER.CCL.CANDIDATES_TABLE" label="List of methods with optional java.util.Locale parameter" reader="SATable">
                  <columns>
                     <column columnType="text" editable="true" id="INTER__CCL__CANDIDATES_TABLE__COLUMN1" label="Type" required="true"/>
                     <column columnType="text" editable="true" id="INTER__CCL__CANDIDATES_TABLE__COLUMN2" label="Method" required="true"/>
                  </columns>
                  <predefinedRows>
                     <row id="1">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.awt.Font"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getFamily"/>
                     </row>
                     <row id="2">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.awt.Font"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getFontName"/>
                     </row>
                     <row id="3">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.awt.GraphicsEnvironment"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getAvailableFontFamilyNames"/>
                     </row>
                     <row id="4">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.io.PrintStream"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="format"/>
                     </row>
                     <row id="5">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.io.PrintStream"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="printf"/>
                     </row>
                     <row id="6">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.io.PrintWriter"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="format"/>
                     </row>
                     <row id="7">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.io.PrintWriter"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="printf"/>
                     </row>
                     <row id="8">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.lang.String"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="format"/>
                     </row>
                     <row id="9">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.lang.String"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="toLowerCase"/>
                     </row>
                     <row id="10">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.lang.String"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="toUpperCase"/>
                     </row>
                     <row id="11">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.nio.charset.Charset"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="displayName"/>
                     </row>
                     <row id="12">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.BreakIterator"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getCharacterInstance"/>
                     </row>
                     <row id="13">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.BreakIterator"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getLineInstance"/>
                     </row>
                     <row id="14">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.BreakIterator"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getSentenceInstance"/>
                     </row>
                     <row id="15">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.BreakIterator"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getWordInstance"/>
                     </row>
                     <row id="16">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.Collator"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getInstance"/>
                     </row>
                     <row id="17">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.DateFormat"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getDateInstance"/>
                     </row>
                     <row id="18">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.DateFormat"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getDateTimeInstance"/>
                     </row>
                     <row id="19">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.DateFormat"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getTimeInstance"/>
                     </row>
                     <row id="20">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.DateFormatSymbols"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getInstance"/>
                     </row>
                     <row id="21">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.DecimalFormatSymbols"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getInstance"/>
                     </row>
                     <row id="22">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.NumberFormat"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getInstance"/>
                     </row>
                     <row id="23">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.NumberFormat"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getIntegerInstance"/>
                     </row>
                     <row id="24">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.NumberFormat"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getNumberInstance"/>
                     </row>
                     <row id="25">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.NumberFormat"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getPercentInstance"/>
                     </row>
                     <row id="26">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.NumberFormat"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getScientificInstance"/>
                     </row>
                     <row id="27">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.NumberFormat"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getCurrencyInstance"/>
                     </row>
                     <row id="28">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.time.format.DateTimeFormatter"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="ofPattern"/>
                     </row>
                     <row id="29">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.time.format.DateTimeFormatterBuilder"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="toFormatter"/>
                     </row>
                     <row id="30">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.time.format.ZoneName"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="toZid"/>
                     </row>
                     <row id="31">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.util.Calendar"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getInstance"/>
                     </row>
                     <row id="32">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.util.Currency"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getDisplayName"/>
                     </row>
                     <row id="33">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.util.Currency"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getInstance"/>
                     </row>
                     <row id="34">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.util.Currency"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getSymbol"/>
                     </row>
                     <row id="35">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.util.Formatter"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="format"/>
                     </row>
                     <row id="36">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.util.TimeZone"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getDisplayName"/>
                     </row>
                     <row id="37">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javafx.beans.binding.Bindings"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="format"/>
                     </row>
                     <row id="38">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javafx.beans.binding.NumberExpression"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="asString"/>
                     </row>
                     <row id="39">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javafx.beans.binding.NumberExpressionBase"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="asString"/>
                     </row>
                     <row id="40">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javafx.beans.binding.ObjectExpression"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="asString"/>
                     </row>
                     <row id="41">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.accessibility.AccessibleBundle"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="toDisplayString"/>
                     </row>
                     <row id="42">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.MultiUIDefaults"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="get"/>
                     </row>
                     <row id="43">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.UIDefaults"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="get"/>
                     </row>
                     <row id="44">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.UIDefaults"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getBoolean"/>
                     </row>
                     <row id="45">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.UIDefaults"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getBorder"/>
                     </row>
                     <row id="46">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.UIDefaults"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getColor"/>
                     </row>
                     <row id="47">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.UIDefaults"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getDimension"/>
                     </row>
                     <row id="48">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.UIDefaults"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getFont"/>
                     </row>
                     <row id="49">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.UIDefaults"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getIcon"/>
                     </row>
                     <row id="50">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.UIDefaults"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getInsets"/>
                     </row>
                     <row id="51">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.UIDefaults"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getInt"/>
                     </row>
                     <row id="52">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.UIDefaults"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getString"/>
                     </row>
                     <row id="53">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.xml.soap.SOAPBody"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="addFault"/>
                     </row>
                     <row id="54">
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.xml.soap.SOAPFault"/>
                        <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="setFaultString"/>
                     </row>
                  </predefinedRows>
               </complexParamTable>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INTER.ITT" header="Isolate translatable text in resource bundles in an Internationalized environment" id="ITT" scope="LINE" severity="3" since="4.5">
            <suppression-by-comment>
               <comment body="^NOI18N$" type="c-style"/>
            </suppression-by-comment>
            <messages>
               <msg index="1" value="Non internationalized string: {0}."/>
            </messages>
            <oldparameters>
               <oldparam id="INTER.ITT.CHECK_ONLY_ALPHA" name="CHECK_ONLY_ALPHA" value="Check only Strings that contain ASCII alphabetic characters [a-z][A-Z]"/>
               <oldparam id="INTER.ITT.IGNORED" name="IGNORED" value="Ignore String literals which match this regular expression:"/>
               <oldparam id="INTER.ITT.IGNORE_TABLE" name="IGNORE_TABLE" value="Ignore Strings passed to the following methods"/>
               <oldparam id="INTER.ITT.IGNORE_DETAIL_MESSAGES" name="IGNORE_DETAIL_MESSAGES" value="Ignore String literals passed to the constructors of Exceptions"/>
               <oldparam id="INTER.ITT.METHOD" name="METHOD" value="Method (in regular expression)"/>
               <oldparam id="INTER.ITT.TYPE" name="TYPE" value="Type (in regular expression)"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="INTER.ITT.CHECK_ONLY_ALPHA" inputType="checkbox" label="Check only Strings that contain ASCII alphabetic characters [a-z][A-Z]"/>
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="INTER.ITT.IGNORE_TABLE" label="Ignore Strings passed to the following methods" reader="SATable">
                  <columns>
                     <column columnType="text" editable="true" id="INTER__ITT__IGNORE_TABLE__COLUMN1" label="Type (in regular expression)" required="true"/>
                     <column columnType="text" editable="true" id="INTER__ITT__IGNORE_TABLE__COLUMN2" label="Method (in regular expression)" required="true"/>
                  </columns>
                  <predefinedRows>
                     <row id="1">
                        <column refColumnId="INTER__ITT__IGNORE_TABLE__COLUMN1" value="^java\.io\.PrintStream$"/>
                        <column refColumnId="INTER__ITT__IGNORE_TABLE__COLUMN2" value="^print.*$"/>
                     </row>
                     <row id="2">
                        <column refColumnId="INTER__ITT__IGNORE_TABLE__COLUMN1" value="^java\.lang\.Class$"/>
                        <column refColumnId="INTER__ITT__IGNORE_TABLE__COLUMN2" value="^(forName|getDeclaredField|getDeclaredMethod|getField|getMethod)$"/>
                     </row>
                     <row id="3">
                        <column refColumnId="INTER__ITT__IGNORE_TABLE__COLUMN1" value="^java\.lang\.System$"/>
                        <column refColumnId="INTER__ITT__IGNORE_TABLE__COLUMN2" value="^.*$"/>
                     </row>
                     <row id="4">
                        <column refColumnId="INTER__ITT__IGNORE_TABLE__COLUMN1" value="^java\.lang\.Runtime$"/>
                        <column refColumnId="INTER__ITT__IGNORE_TABLE__COLUMN2" value="^.*$"/>
                     </row>
                     <row id="5">
                        <column refColumnId="INTER__ITT__IGNORE_TABLE__COLUMN1" value="^java\.lang\.String$"/>
                        <column refColumnId="INTER__ITT__IGNORE_TABLE__COLUMN2" value="^(index.*|startsWith|endsWith)$"/>
                     </row>
                     <row id="6">
                        <column refColumnId="INTER__ITT__IGNORE_TABLE__COLUMN1" value="^.*Logger$"/>
                        <column refColumnId="INTER__ITT__IGNORE_TABLE__COLUMN2" value="^.*$"/>
                     </row>
                     <row id="7">
                        <column refColumnId="INTER__ITT__IGNORE_TABLE__COLUMN1" value="^.*Verbose$"/>
                        <column refColumnId="INTER__ITT__IGNORE_TABLE__COLUMN2" value="^.*$"/>
                     </row>
                     <row id="8">
                        <column refColumnId="INTER__ITT__IGNORE_TABLE__COLUMN1" value="."/>
                        <column refColumnId="INTER__ITT__IGNORE_TABLE__COLUMN2" value="^(getLogger|verbose)$"/>
                     </row>
                  </predefinedRows>
               </complexParamTable>
               <param defaultValue="^(\s)*$" id="INTER.ITT.IGNORED" inputType="text" label="Ignore String literals which match this regular expression:"/>
               <param defaultValue="true" id="INTER.ITT.IGNORE_DETAIL_MESSAGES" inputType="checkbox" label="Ignore String literals passed to the constructors of Exceptions"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INTER.CLO" header="Do not use single characters with logic operators in an Internationalized environment" id="CLO" scope="LINE" severity="3" since="4.5">
            <suppression-by-comment>
               <comment body="^NOI18N$" type="c-style"/>
            </suppression-by-comment>
            <messages>
               <msg index="1" value="Logical operator used with a single character literal: {0}."/>
            </messages>
            <oldparameters>
               <oldparam id="INTER.CLO.IGNORE_TABLE" name="IGNORE_TABLE" value="Ignore characters passed to the following methods"/>
               <oldparam id="INTER.CLO.METHOD" name="METHOD" value="Method (in regular expression)"/>
               <oldparam id="INTER.CLO.TYPE" name="TYPE" value="Type (in regular expression)"/>
            </oldparameters>
            <parameters>
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="INTER.CLO.IGNORE_TABLE" label="Ignore characters passed to the following methods" reader="SATable">
                  <columns>
                     <column columnType="text" editable="true" id="INTER__CLO__IGNORE_TABLE__COLUMN1" label="Type (in regular expression" required="true"/>
                     <column columnType="text" editable="true" id="INTER__CLO__IGNORE_TABLE__COLUMN2" label="Method (in regular expression)" required="true"/>
                  </columns>
                  <predefinedRows>
                     <row id="1">
                        <column refColumnId="INTER__CLO__IGNORE_TABLE__COLUMN1" value="^java.io.PrintStream$"/>
                        <column refColumnId="INTER__CLO__IGNORE_TABLE__COLUMN2" value="^print.*$"/>
                     </row>
                     <row id="2">
                        <column refColumnId="INTER__CLO__IGNORE_TABLE__COLUMN1" value="^java.lang.System$"/>
                        <column refColumnId="INTER__CLO__IGNORE_TABLE__COLUMN2" value="^.*$"/>
                     </row>
                  </predefinedRows>
               </complexParamTable>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INTER.SDFL" header="Provide a 'Locale' argument when instantiating 'SimpleDateFormat' objects" id="SDFL" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="Instantiating 'SimpleDateFormat' object without a 'Locale' argument."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INTER.SEO" header="Avoid calling methods and constructors which do not allow you to specify a character encoding option." id="SEO" scope="LINE" severity="3" since="8.1">
            <messages>
               <msg index="1" value="You may not want to use this constructor for ''{0}'' because it does not allow you to specify an encoding option."/>
               <msg index="2" value="You may not want to use the method ''{0}()'' because it does not allow you to specify an encoding option."/>
               <msg index="3" value="You may not want to use the type ''{0}'' because it does not allow you to specify an encoding option."/>
            </messages>
            <oldparameters>
               <oldparam id="INTER.SEO.METHODS_TO_CHECK" name="METHODS_TO_CHECK" value="Methods and Constructors to Avoid (in form of\n&lt;fully qualified type name&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,&lt;parameter2 fully qualified type&gt;)):"/>
               <oldparam id="INTER.SEO.TYPES_TO_CHECK" name="TYPES_TO_CHECK" value="Types to Avoid (Fully Qualified Names):"/>
            </oldparameters>
            <parameters>
               <param defaultValue="java.io.InputStreamReader#InputStreamReader(java.io.InputStream);java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream);java.lang.String#getBytes();java.lang.String#String(byte[]);java.lang.String#String(byte[],int,int);javax.mail.internet.MimeBodyPart#setDescription(java.lang.String);javax.mail.internet.MimeBodyPart#setText(java.lang.String);javax.mail.internet.MimeMessage#setDescription(java.lang.String);javax.mail.internet.MimeMessage#setSubject(java.lang.String);javax.mail.internet.MimeMessage#setText(java.lang.String)" description="Methods and Constructors to Avoid (in form of &lt;fully qualified type name&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,&lt;parameter2 fully qualified type&gt;))" id="INTER.SEO.METHODS_TO_CHECK" inputType="stringList" label="Methods and Constructors to Avoid:" prevType="StringList"/>
               <param defaultValue="java.io.FileReader;java.io.FileWriter" id="INTER.SEO.TYPES_TO_CHECK" inputType="stringList" label="Types to Avoid (Fully Qualified Names):" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INTER.DTS" header="Do not call 'toString()' or 'String.valueOf()' on Date objects in an Internationalized environment." id="DTS" scope="LINE" severity="4" since="4.5">
            <suppression-by-comment>
               <comment body="^NOI18N$" type="c-style"/>
            </suppression-by-comment>
            <messages>
               <msg index="1" value="Called 'toString()' on a 'Date' object."/>
               <msg index="2" value="Called 'String.valueOf()' on a 'Date' object."/>
               <msg index="3" value="Called 'toString()' implicitly on a 'Date' object."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INTER.TTS" header="Do not call 'toString()' or 'String.valueOf()' on Time objects in an Internationalized environment." id="TTS" scope="LINE" severity="4" since="4.5">
            <suppression-by-comment>
               <comment body="^NOI18N$" type="c-style"/>
            </suppression-by-comment>
            <messages>
               <msg index="1" value="Called 'toString()' on a 'Time' object."/>
               <msg index="2" value="Called 'String.valueOf()' on a 'Time' object."/>
               <msg index="3" value="Called 'toString()' implicitly on a 'Time' object."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INTER.NTS" header="Do not call 'toString()' or 'String.valueOf()' on numeric values in an Internationalized environment." id="NTS" scope="LINE" severity="4" since="4.5">
            <suppression-by-comment>
               <comment body="^NOI18N$" type="c-style"/>
            </suppression-by-comment>
            <messages>
               <msg index="1" value="Called 'toString()' on a numeric object."/>
               <msg index="2" value="Called 'String.valueOf()' on a numeric value."/>
               <msg index="3" value="Called 'toString()' implicitly on a numeric object."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INTER.NCL" header="Use &quot;static final&quot; constants for single character literals in an Internationalized environment" id="NCL" scope="LINE" severity="4" since="4.5">
            <suppression-by-comment>
               <comment body="^NOI18N$" type="c-style"/>
            </suppression-by-comment>
            <messages>
               <msg index="1" value="Single character literal used instead of a constant: {0}."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INTER.UNLS" header="Avoid unnecessary &quot;$NON-NLS&quot; and &quot;NOI18N&quot; comments." id="UNLS" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="The comment &quot;{0}&quot; does not have a corresponding String constant."/>
               <msg index="2" value="This &quot;NOI18N&quot; comment is unnecessary because there are no String literals on this line."/>
               <msg index="3" value="The comment &quot;{0}&quot; is unnecessary because there is a &quot;/* NOI18N */&quot; comment on this line."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.INTER.CTLC" header="Do not call 'Character.toLowerCase(char)' or 'Character.toUpperCase(char)' in an internationalized environment." id="CTLC" index="1" scope="LINE" severity="3" since="8.1">
            <messages>
               <msg index="1" value="Called 'Character.toLowerCase(char)'"/>
               <msg index="2" value="Called 'Character.toUpperCase(char)'"/>
            </messages>
         </rule>
      </category>
      <category description="Object Oriented Programming" name="OOP">
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.AHF" header="Do not hide inherited fields" id="AHF" scope="LINE" severity="1" since="4.5">
            <messages>
               <msg index="1" value="&quot;{0}&quot; field ''{1}'' hides a field in ancestor class ''{2}''."/>
            </messages>
            <oldparameters>
               <oldparam id="OOP.AHF.CHECK_PUBLIC_PARENT" name="CHECK_PUBLIC_PARENT" value="Check &quot;public&quot; fields in ancestor classes"/>
               <oldparam id="OOP.AHF.CHECK_PACKAGE_PARENT_DIFFERENT_PACKAGE" name="CHECK_PACKAGE_PARENT_DIFFERENT_PACKAGE" value="ancestor class from a different package from child class"/>
               <oldparam id="OOP.AHF.CHECK_PROTECTED_CHILD" name="CHECK_PROTECTED_CHILD" value="Check &quot;protected&quot; fields in child classes"/>
               <oldparam id="OOP.AHF.CHECK_PRIVATE_CHILD" name="CHECK_PRIVATE_CHILD" value="Check &quot;private&quot; fields in child classes"/>
               <oldparam id="OOP.AHF.CHECK_PROTECTED_PARENT" name="CHECK_PROTECTED_PARENT" value="Check &quot;protected&quot; fields in ancestor classes"/>
               <oldparam id="OOP.AHF.FIELD_SKIP_LIST" name="FIELD_SKIP_LIST" value="Fields to be ignored:"/>
               <oldparam id="OOP.AHF.CHECK_PRIVATE_PARENT" name="CHECK_PRIVATE_PARENT" value="Check &quot;private&quot; fields in ancestor classes"/>
               <oldparam id="OOP.AHF.CHECK_PUBLIC_CHILD" name="CHECK_PUBLIC_CHILD" value="Check &quot;public&quot; fields in child classes"/>
               <oldparam id="OOP.AHF.CHECK_PACKAGE_CHILD" name="CHECK_PACKAGE_CHILD" value="Check package-private fields in child classes"/>
               <oldparam id="OOP.AHF.STATIC_NON_STATIC_STRING" name="STATIC_NON_STATIC_STRING" value="static/non static"/>
               <oldparam id="OOP.AHF.CHECK_NON_STATIC_FIELD" name="CHECK_NON_STATIC_FIELD" value="Check non &quot;static&quot; (instance) fields"/>
               <oldparam id="OOP.AHF.CHECK_PACKAGE_PARENT_SAME_PACKAGE" name="CHECK_PACKAGE_PARENT_SAME_PACKAGE" value="ancestor class from the same package as child class"/>
               <oldparam id="OOP.AHF.CHECK_PACKAGE_PARENT" name="CHECK_PACKAGE_PARENT" value="Check package-private fields in ancestor classes"/>
               <oldparam id="OOP.AHF.ACCESSIBILITY_STRING" name="ACCESSIBILITY_STRING" value="accessibility"/>
               <oldparam id="OOP.AHF.CHECK_STATIC_FIELD" name="CHECK_STATIC_FIELD" value="Check &quot;static&quot; fields"/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="OOP.AHF.group.0" label="accessibility">
                  <param defaultValue="true" id="OOP.AHF.CHECK_PUBLIC_PARENT" inputType="checkbox" label="Check &quot;public&quot; fields in ancestor classes"/>
                  <param defaultValue="true" id="OOP.AHF.CHECK_PROTECTED_PARENT" inputType="checkbox" label="Check &quot;protected&quot; fields in ancestor classes"/>
                  <param defaultValue="true" id="OOP.AHF.CHECK_PACKAGE_PARENT" inputType="checkbox" label="Check package-private fields in ancestor classes">
                     <param defaultValue="true" id="OOP.AHF.CHECK_PACKAGE_PARENT_SAME_PACKAGE" inputType="checkbox" label="ancestor class from the same package as child class"/>
                     <param defaultValue="false" id="OOP.AHF.CHECK_PACKAGE_PARENT_DIFFERENT_PACKAGE" inputType="checkbox" label="ancestor class from a different package from child class"/>
                  </param>
                  <param defaultValue="false" id="OOP.AHF.CHECK_PRIVATE_PARENT" inputType="checkbox" label="Check &quot;private&quot; fields in ancestor classes"/>
                  <param defaultValue="true" id="OOP.AHF.CHECK_PUBLIC_CHILD" inputType="checkbox" label="Check &quot;public&quot; fields in child classes"/>
                  <param defaultValue="true" id="OOP.AHF.CHECK_PROTECTED_CHILD" inputType="checkbox" label="Check &quot;protected&quot; fields in child classes"/>
                  <param defaultValue="true" id="OOP.AHF.CHECK_PACKAGE_CHILD" inputType="checkbox" label="Check package-private fields in child classes"/>
                  <param defaultValue="true" id="OOP.AHF.CHECK_PRIVATE_CHILD" inputType="checkbox" label="Check &quot;private&quot; fields in child classes"/>
               </group>
               <group collapsible="false" id="OOP.AHF.group.1" label="static/non static">
                  <param defaultValue="false" id="OOP.AHF.CHECK_STATIC_FIELD" inputType="checkbox" label="Check &quot;static&quot; fields"/>
                  <param defaultValue="true" id="OOP.AHF.CHECK_NON_STATIC_FIELD" inputType="checkbox" label="Check non &quot;static&quot; (instance) fields"/>
               </group>
               <param defaultValue="serialVersionUID" id="OOP.AHF.FIELD_SKIP_LIST" inputType="stringList" label="Fields to be ignored:" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.AHSM" header="Do not hide inherited &quot;static&quot; member methods" id="AHSM" scope="METHOD" severity="3" since="4.5">
            <messages>
               <msg index="1" value="&quot;static&quot; method ''{0}()'' overrides &quot;static&quot; method in ancestor class ''{1}''."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.RI" header="Do not declare a class as implementing an interface if a superclass already implements that interface" id="RI" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="The interface ''{0}'' is already implemented by a superclass of this class."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.AOA" header="Add the &quot;@Override&quot; annotation to overriding methods" id="AOA" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="The overriding method ''{0}()'' does not have an &quot;@Override&quot; annotation."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.OPM" header="Do not override an instance &quot;private&quot; method" id="OPM" scope="METHOD" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Private method ''{0}'' also declared in class ''{1}''."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.AOCM" header="Always override certain methods when extending certain types." id="AOCM" scope="LINE" severity="3" since="8.2">
            <messages>
               <msg index="1" value="The type ''{0}'' should override the method ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="OOP.AOCM.TYPE_TO_METHOD_MAP" name="TYPE_TO_METHOD_MAP" value="Methods which should always be overridden"/>
               <oldparam id="OOP.AOCM.DECLARING_CLASS" name="DECLARING_CLASS" value="Declaring Class (Specify fully qualified name)\n\n"/>
               <oldparam id="OOP.AOCM.METHOD_SIG" name="METHOD_SIG" value="Method Signature (&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,\n&lt;parameter2 fully qualified type&gt;,...))"/>
            </oldparameters>
            <parameters>
               <!--param id="OOP.AOCM.TYPE_TO_METHOD_MAP" inputType="bigtext" defaultValue="java.io.InputStream#available()" label="Methods which should always be overridden" prevType="DuoList"/-->
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="OOP.AOCM.TYPE_TO_METHOD_MAP" label="Methods which should always be overridden" prevType="DuoList" reader="SADuoList">
                  <columns>
                     <column columnType="text" editable="true" id="OOP__AOCM__TYPE_TO_METHOD_MAP__COLUMN1" label="Declaring Class (Specify fully qualified name)" required="true" textSize="large"/>
                  </columns>
                  <predefinedRows>
                     <row id="1">
                        <column refColumnId="OOP__AOCM__TYPE_TO_METHOD_MAP__COLUMN1" value="java.io.InputStream"/>
                     </row>
                  </predefinedRows>
                  <childTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="OOP.AOCM.TYPE_TO_METHOD_MAP.CHILDTABLE1" label="">
                     <columns>
                        <column columnType="text" description="&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,&lt;parameter2 fully qualified type&gt;,...)" editable="true" id="OOP__AOCM__TYPE_TO_METHOD_MAP__COLUMN2" label="Method Signature" required="true"/>
                     </columns>
                     <predefinedRows refParentRowId="1">
                        <row id="1">
                           <column refColumnId="OOP__AOCM__TYPE_TO_METHOD_MAP__COLUMN2" value="available()"/>
                        </row>
                     </predefinedRows>
                  </childTable>
               </complexParamTable>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.SVHM" header="Specify which version of potentially ambiguous methods you wish to call for method calls in inner classes" id="SVHM" scope="LINE" severity="3" since="8.2">
            <messages>
               <msg index="1" value="This call to the method ''{0}()'' does not specify which version of the method should be called."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.IIAC" header="Avoid implementing interfaces only to access constants" id="IIAC" scope="LINE" severity="3" since="8.2">
            <messages>
               <msg index="1" value="The interface &quot;{0}&quot; declares only constants, so it does not need to be implemented."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.ACST" header="Avoid casts to types which are more specific than necessary." id="ACST" scope="LINE" severity="3" since="8.2">
            <messages>
               <msg index="1" value="This expression is cast to &quot;{0}&quot;, but it only needs to be cast to &quot;{1}&quot;."/>
               <msg index="2" value="This expression is cast to &quot;{0}&quot;, but no cast is necessary."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.NAM" header="Avoid &quot;abstract&quot; classes without &quot;abstract&quot; methods." id="NAM" scope="LINE" severity="3" since="8.2">
            <messages>
               <msg index="1" value="The &quot;abstract&quot; class &quot;{0}&quot; does not contain any &quot;abstract&quot; methods."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.RSFC" header="Avoid referencing a class' subclasses from itself." id="RSFC" scope="LINE" severity="4" since="8.2">
            <messages>
               <msg index="1" value="The class &quot;{0}&quot; references its subclass &quot;{1}&quot;."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.AUO" header="Do not use an object to access &quot;static&quot; fields or methods" id="AUO" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="&quot;static&quot; field ''{0}'' should be accessed as ''{1}''."/>
               <msg index="2" value="&quot;static&quot; method ''{0}'' should be accessed as ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="OOP.AUO.ALLOW_CHAINED" name="ALLOW_CHAINED" value="Allow use of an object to access &quot;static&quot; methods for chained method calls."/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="OOP.AUO.ALLOW_CHAINED" inputType="checkbox" label="Allow use of an object to access &quot;static&quot; methods for chained method calls."/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.ASFI" header="Redeclare a class with only &quot;abstract&quot; methods and &quot;static final&quot; fields as an &quot;interface&quot;" id="ASFI" scope="CLASS" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Class ''{0}'' should be declared as &quot;interface&quot;."/>
            </messages>
            <oldparameters>
               <oldparam id="OOP.ASFI.IGNORE_NONPUBLIC" name="IGNORE_NONPUBLIC" value="ignore classes with non-public members"/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="OOP.ASFI.IGNORE_NONPUBLIC" inputType="checkbox" label="ignore classes with non-public members"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.NOMA" header="Declare methods in &quot;abstract&quot; classes with empty bodies &quot;abstract&quot;." id="NOMA" scope="CLASS" severity="4" since="8.2">
            <messages>
               <msg index="1" value="The method ''{0}()'' could be declared &quot;abstract&quot;."/>
            </messages>
            <oldparameters>
               <oldparam id="OOP.NOMA.CHECK_PUBLIC" name="CHECK_PUBLIC" value="Check &quot;public&quot; methods"/>
               <oldparam id="OOP.NOMA.CHECK_PROTECTED" name="CHECK_PROTECTED" value="Check &quot;protected&quot; methods"/>
               <oldparam id="OOP.NOMA.CHECK_PACKAGE" name="CHECK_PACKAGE" value="Check &quot;package-private&quot; methods"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="OOP.NOMA.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods"/>
               <param defaultValue="false" id="OOP.NOMA.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods"/>
               <param defaultValue="false" id="OOP.NOMA.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; methods"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.MUCOP" header="Provide mutable classes with copy functionality" id="MUCOP" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="{0} missing."/>
            </messages>
            <oldparameters>
               <oldparam id="OOP.MUCOP.PUBLIC_CLONE" name="PUBLIC_CLONE" value="Provide a public clone method(relevant for final classes)"/>
               <oldparam id="OOP.MUCOP.COPY_CONSTRUCTOR" name="COPY_CONSTRUCTOR" value="Provide a copy constructor"/>
               <oldparam id="OOP.MUCOP.STATIC_CREATION" name="STATIC_CREATION" value="Provide a static creation method"/>
               <oldparam id="OOP.MUCOP.SELECT_OPTIONS" name="SELECT_OPTIONS" value="Select which options to require"/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="OOP.MUCOP.group.0" label="Select which options to require">
                  <param defaultValue="true" id="OOP.MUCOP.PUBLIC_CLONE" inputType="checkbox" label="Provide a public clone method(relevant for final classes)"/>
                  <param defaultValue="true" id="OOP.MUCOP.STATIC_CREATION" inputType="checkbox" label="Provide a static creation method"/>
                  <param defaultValue="true" id="OOP.MUCOP.COPY_CONSTRUCTOR" inputType="checkbox" label="Provide a copy constructor"/>
               </group>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.AF" header="Avoid &quot;public&quot;/&quot;protected&quot;/package-private fields" id="AF" scope="LINE" severity="3" since="6.0">
            <messages>
               <msg index="1" value="{0} field is declared {1}: {2}."/>
            </messages>
            <oldparameters>
               <oldparam id="OOP.AF.OOP.APROF" name="OOP.APROF" value="Check &quot;protected&quot; field"/>
               <oldparam id="OOP.AF.OOP.APF" name="OOP.APF" value="Check &quot;public&quot; field"/>
               <oldparam id="OOP.AF.OOP.APPF" name="OOP.APPF" value="Check package-private field"/>
               <oldparam id="OOP.AF.CHECK_INSTANCE" name="CHECK_INSTANCE" value="Check instance fields."/>
               <oldparam id="OOP.AF.CHECK_STATIC" name="CHECK_STATIC" value="Check non-final &quot;static&quot; fields."/>
               <oldparam id="OOP.AF.CHECK_PUBLIC_IN_CHILD_CLASS" name="CHECK_PUBLIC_IN_CHILD_CLASS" value="Check member class"/>
               <oldparam id="OOP.AF.CHECK_PACKAGE_IN_TOP_LEVEL_CLASS" name="CHECK_PACKAGE_IN_TOP_LEVEL_CLASS" value="Check top-level class"/>
               <oldparam id="OOP.AF.CHECK_PROTECTED_IN_CHILD_CLASS" name="CHECK_PROTECTED_IN_CHILD_CLASS" value="Check member class"/>
               <oldparam id="OOP.AF.CHECK_PUBLIC_IN_TOP_LEVEL_CLASS" name="CHECK_PUBLIC_IN_TOP_LEVEL_CLASS" value="Check top-level class"/>
               <oldparam id="OOP.AF.CHECK_PACKAGE_IN_CHILD_CLASS" name="CHECK_PACKAGE_IN_CHILD_CLASS" value="Check member class"/>
               <oldparam id="OOP.AF.CHECK_PROTECTED_IN_TOP_LEVEL_CLASS" name="CHECK_PROTECTED_IN_TOP_LEVEL_CLASS" value="Check top-level class"/>
               <oldparam id="OOP.AF.WHAT_TO_CHECK" name="WHAT_TO_CHECK" value="What to Check"/>
               <oldparam id="OOP.AF.ACCESSIBILITY" name="ACCESSIBILITY" value="Accessibility"/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="OOP.AF.group.0" label="What to Check">
                  <param defaultValue="true" id="OOP.AF.CHECK_INSTANCE" inputType="checkbox" label="Check instance fields."/>
                  <param defaultValue="true" id="OOP.AF.CHECK_STATIC" inputType="checkbox" label="Check non-final &quot;static&quot; fields."/>
               </group>
               <group collapsible="false" id="OOP.AF.group.1" label="Accessibility">
                  <param defaultValue="true" id="OOP.AF.OOP.APF" inputType="checkbox" label="Check &quot;public&quot; field">
                     <param defaultValue="true" id="OOP.AF.CHECK_PUBLIC_IN_TOP_LEVEL_CLASS" inputType="checkbox" label="Check top-level class"/>
                     <param defaultValue="true" id="OOP.AF.CHECK_PUBLIC_IN_CHILD_CLASS" inputType="checkbox" label="Check member class"/>
                  </param>
                  <param defaultValue="false" id="OOP.AF.OOP.APROF" inputType="checkbox" label="Check &quot;protected&quot; field">
                     <param defaultValue="true" id="OOP.AF.CHECK_PROTECTED_IN_TOP_LEVEL_CLASS" inputType="checkbox" label="Check top-level class"/>
                     <param defaultValue="true" id="OOP.AF.CHECK_PROTECTED_IN_CHILD_CLASS" inputType="checkbox" label="Check member class"/>
                  </param>
                  <param defaultValue="false" id="OOP.AF.OOP.APPF" inputType="checkbox" label="Check package-private field">
                     <param defaultValue="true" id="OOP.AF.CHECK_PACKAGE_IN_TOP_LEVEL_CLASS" inputType="checkbox" label="Check top-level class"/>
                     <param defaultValue="true" id="OOP.AF.CHECK_PACKAGE_IN_CHILD_CLASS" inputType="checkbox" label="Check member class"/>
                  </param>
               </group>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.AUASI" header="Do not implement or extend annotations." id="AUASI" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="The type ''{0}'' should not implement the annotation type ''{1}''."/>
               <msg index="2" value="The interface ''{0}'' should not extend the annotation type ''{1}''."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.CQS" header="Ensure methods are either a command(change state) or a query(get state)." id="CQS" scope="METHOD" severity="4" since="8.3">
            <messages>
               <msg index="1" value="Method ''{0}'' returns a value, but ''{1}'' changes state on line: ''{2}''."/>
            </messages>
            <oldparameters>
               <oldparam id="OOP.CQS.CHECK_ACCESS" name="CHECK_ACCESS" value="Check the following accessibilities:"/>
               <oldparam id="OOP.CQS.CHECK_PUBLIC" name="CHECK_PUBLIC" value="Check &quot;public&quot; methods."/>
               <oldparam id="OOP.CQS.CHECK_PROTECTED" name="CHECK_PROTECTED" value="Check &quot;protected&quot; methods."/>
               <oldparam id="OOP.CQS.CHECK_PACKAGE_PRIVATE" name="CHECK_PACKAGE_PRIVATE" value="Check &quot;package-private&quot; methods."/>
               <oldparam id="OOP.CQS.CHECK_PRIVATE" name="CHECK_PRIVATE" value="Check &quot;private&quot; methods."/>
               <oldparam id="OOP.CQS.IGNORED_METHODS" name="IGNORED_METHODS" value="Ignore the following methods:"/>
               <oldparam id="OOP.CQS.ALLOW_LAZY_INIT" name="ALLOW_LAZY_INIT" value="Allow lazy initialization."/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="OOP.CQS.group.0" label="Check the following accessibilities:">
                  <param defaultValue="true" id="OOP.CQS.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods."/>
                  <param defaultValue="true" id="OOP.CQS.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods."/>
                  <param defaultValue="true" id="OOP.CQS.CHECK_PACKAGE_PRIVATE" inputType="checkbox" label="Check &quot;package-private&quot; methods."/>
                  <param defaultValue="false" id="OOP.CQS.CHECK_PRIVATE" inputType="checkbox" label="Check &quot;private&quot; methods."/>
               </group>
               <param defaultValue="nextToken" id="OOP.CQS.IGNORED_METHODS" inputType="stringList" label="Ignore the following methods:" prevType="StringList"/>
               <param defaultValue="true" id="OOP.CQS.ALLOW_LAZY_INIT" inputType="checkbox" label="Allow lazy initialization."/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.HIF" header="Do not hide fields and local variables declared in enclosing scopes" id="HIF" scope="LINE" severity="3" since="7.5">
            <messages>
               <msg index="1" value="The field ''{0}'' hides a field declared in the enclosing type ''{1}''."/>
               <msg index="2" value="The {0} ''{1}'' uses the same name as a {2} declared in an enclosing scope, which may cause confusion."/>
            </messages>
            <oldparameters>
               <oldparam id="OOP.HIF.PARAMETER" name="PARAMETER" value="parameter"/>
               <oldparam id="OOP.HIF.LOCAL" name="LOCAL" value="local variable"/>
               <oldparam id="OOP.HIF.FIELD" name="FIELD" value="field"/>
            </oldparameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.HMF" header="Do not give method local variables and parameters the same name as class fields." id="HMF" scope="LINE" severity="3" since="4.5">
            <messages>
               <msg index="1" value="Parameter ''{0}'' has the same name as a field."/>
               <msg index="2" value="Local variable ''{0}'' has the same name as a field."/>
            </messages>
            <oldparameters>
               <oldparam id="OOP.HMF.CHECK_PARAM" name="CHECK_PARAM" value="Check parameters"/>
               <oldparam id="OOP.HMF.CHECK_LOCAL" name="CHECK_LOCAL" value="Check local variables"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="OOP.HMF.CHECK_PARAM" inputType="checkbox" label="Check parameters"/>
               <param defaultValue="true" id="OOP.HMF.CHECK_LOCAL" inputType="checkbox" label="Check local variables"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.IDOM" header="Avoid declaring methods inherited from class &quot;Object&quot; in an interface." id="IDOM" scope="LINE" severity="4" since="8.0">
            <messages>
               <msg index="1" value="The method ''{0}'' should not be declared in an interface because it is inherited from class &quot;Object&quot;."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.INSOF" header="Use &quot;instanceof&quot; only on interfaces." id="INSOF" scope="LINE" severity="4" since="4.5">
            <messages>
               <msg index="1" value="&quot;instanceof&quot; operator not used on an &quot;interface&quot;, type ''{0}'' is not an interface."/>
            </messages>
            <oldparameters>
               <oldparam id="OOP.INSOF.IGNORE_IN_EQUALS" name="IGNORE_IN_EQUALS" value="Ignore usages of &quot;instanceof&quot; in 'equals()' methods"/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="OOP.INSOF.IGNORE_IN_EQUALS" inputType="checkbox" label="Ignore usages of &quot;instanceof&quot; in 'equals()' methods"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.MI" header="Avoid interfaces with no fields or methods (marker interfaces)" id="MI" scope="LINE" severity="4" since="8.2">
            <messages>
               <msg index="1" value="Interface &quot;{0}&quot; is a marker interface."/>
            </messages>
            <oldparameters>
               <oldparam id="OOP.MI.MAX_EXTENDED_INTERF" name="MAX_EXTENDED_INTERF" value="Ignore interfaces which extend at least this many other interfaces:"/>
            </oldparameters>
            <parameters>
               <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="OOP.MI.MAX_EXTENDED_INTERF" label="Ignore interfaces which extend at least this many other interfaces:" prevType="InputValueWithCheckBox" reader="SATable">
                  <columns>
                     <column columnType="checkbox" editable="true" id="OOP__MI__MAX_EXTENDED_INTERF__COLUMN1" label="" required="true"/>
                     <column columnType="text" editable="true" id="OOP__MI__MAX_EXTENDED_INTERF__COLUMN2" label="" required="true"/>
                  </columns>
                  <predefinedRows>
                     <row id="1">
                        <column refColumnId="OOP__MI__MAX_EXTENDED_INTERF__COLUMN1" value="true"/>
                        <column refColumnId="OOP__MI__MAX_EXTENDED_INTERF__COLUMN2" value="2"/>
                     </row>
                  </predefinedRows>
               </complexParamTable>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.NPAC" header="Do not declare &quot;public&quot; or package-private constructors in &quot;abstract&quot; classes." id="NPAC" scope="LINE" severity="3" since="7.5">
            <messages>
               <msg index="1" value="&quot;public&quot; constructor is used in &quot;abstract&quot; class ''{0}''."/>
               <msg index="2" value="package-private constructor is used in &quot;abstract&quot; class ''{0}''."/>
            </messages>
            <oldparameters>
               <oldparam id="OOP.NPAC.CHECK_PUBLIC" name="CHECK_PUBLIC" value="Check for &quot;public&quot; constructors"/>
               <oldparam id="OOP.NPAC.CHECK_PP" name="CHECK_PP" value="Check for package-private constructors"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="OOP.NPAC.CHECK_PUBLIC" inputType="checkbox" label="Check for &quot;public&quot; constructors"/>
               <param defaultValue="false" id="OOP.NPAC.CHECK_PP" inputType="checkbox" label="Check for package-private constructors"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.PMPC" header="Ensure 'public' classes have at least one 'public' or 'protected' member" id="PMPC" scope="LINE" severity="3" since="7.5">
            <messages>
               <msg index="1" value="No 'public' or 'protected' member in class ''{0}''."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.PSDF" header="Do not declare &quot;private&quot; or &quot;static&quot; methods as &quot;final&quot;." id="PSDF" scope="LINE" severity="4" since="8.2">
            <messages>
               <msg index="1" value="The &quot;private&quot; method ''{0}()'' is unnecessarily declared &quot;final&quot;."/>
               <msg index="2" value="The &quot;static&quot; method ''{0}()'' is declared &quot;final&quot;."/>
               <msg index="3" value="The &quot;private static&quot; method ''{0}()'' is unnecessarily declared &quot;final&quot;."/>
            </messages>
            <oldparameters>
               <oldparam id="OOP.PSDF.CHECK_PRIVATE" name="CHECK_PRIVATE" value="Check &quot;private&quot; methods"/>
               <oldparam id="OOP.PSDF.CHECK_STATIC" name="CHECK_STATIC" value="Check &quot;static&quot; methods"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="OOP.PSDF.CHECK_PRIVATE" inputType="checkbox" label="Check &quot;private&quot; methods"/>
               <param defaultValue="true" id="OOP.PSDF.CHECK_STATIC" inputType="checkbox" label="Check &quot;static&quot; methods"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.SNGL" header="Use a naming convention for singleton classes" id="SNGL" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="The class ''{0}'' was probably intended to be a singleton but contains a non-&quot;private&quot; constructor."/>
               <msg index="2" value="The class ''{0}'' was probably intended to be a singleton but does not contain a &quot;static&quot; accessor method that returns an instance of the class."/>
               <msg index="3" value="The class ''{0}'' is a singleton, but the method ''{1}()'' to get the singleton instance is not &quot;synchronized&quot;."/>
            </messages>
            <oldparameters>
               <oldparam id="OOP.SNGL.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="regular expression"/>
               <oldparam id="OOP.SNGL.CHECK_SYNCHRONIZED" name="CHECK_SYNCHRONIZED" value="Check that the method to get the singleton instance is &quot;synchronized&quot; for classes which match the singleton pattern"/>
            </oldparameters>
            <parameters>
               <param defaultValue="^.+Singleton$" id="OOP.SNGL.REGULAR_EXPRESSION" inputType="text" label="regular expression"/>
               <param defaultValue="true" id="OOP.SNGL.CHECK_SYNCHRONIZED" inputType="checkbox" label="Check that the method to get the singleton instance is &quot;synchronized&quot; for classes which match the singleton pattern"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.THRECL" header="Use getContextClassLoader() instead of getClassLoader()" id="THRECL" scope="LINE" severity="4" since="9.0">
            <messages>
               <msg index="1" value="getClassLoader() used instead of getContextClassLoader()."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.MFP" header="Give &quot;finalize()&quot; methods &quot;protected&quot; access." id="MFP" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="This &quot;finalize()&quot; method has &quot;public&quot; access"/>
            </messages>
         </rule>
      </category>
      <category description="Struts Framework" name="STRUTS">
         <rule class="com.parasoft.jtest.standards.rules.builtin.STRUTS.ACDA" header="Avoid accessing a database from Action Classes" id="ACDA" scope="LINE" severity="1" since="9.0">
            <messages>
               <msg index="1" value="Database accessed here."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.STRUTS.ACJC" header="Avoid accessing a JSP page from Action Classes" id="ACJC" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="Opening connection to JSP page here."/>
               <msg index="2" value="Redirecting to JSP page here."/>
            </messages>
            <oldparameters>
               <oldparam id="STRUTS.ACJC.CHECK_OPEN_CONNECTION" name="CHECK_OPEN_CONNECTION" value="Check 'URL.openConnection()' calls"/>
               <oldparam id="STRUTS.ACJC.CHECK_REDIRECT" name="CHECK_REDIRECT" value="Check 'HttpServletResponse.sendRedirect()' calls"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="STRUTS.ACJC.CHECK_OPEN_CONNECTION" inputType="checkbox" label="Check 'URL.openConnection()' calls"/>
               <param defaultValue="true" id="STRUTS.ACJC.CHECK_REDIRECT" inputType="checkbox" label="Check 'HttpServletResponse.sendRedirect()' calls"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.STRUTS.FIELDS" header="Provide an appropriate getter and setter method for each field in a form bean." id="FIELDS" scope="LINE" severity="3" since="7.5">
            <messages>
               <msg index="1" value="Form bean does not contain a getter method for field ''{0}''."/>
               <msg index="2" value="Form bean does not contain a setter method for field ''{0}''."/>
            </messages>
            <oldparameters>
               <oldparam id="STRUTS.FIELDS.IGNORE_LIST" name="IGNORE_LIST" value="Ignore fields with names:"/>
            </oldparameters>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
            </references>
            <parameters>
               <param defaultValue="" id="STRUTS.FIELDS.IGNORE_LIST" inputType="stringList" label="Ignore fields with names:" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.STRUTS.FORM" header="Include only getter and setter methods in form beans" id="FORM" scope="LINE" severity="4" since="7.5">
            <messages>
               <msg index="1" value="Method other than a &quot;getter&quot;/&quot;setter&quot; declared inside a form bean class: ''{0}''."/>
            </messages>
            <oldparameters>
               <oldparam id="STRUTS.FORM.ALLOWED_LIST" name="ALLOWED_LIST" value="Allow methods with the following names:"/>
            </oldparameters>
            <parameters>
               <param defaultValue="" id="STRUTS.FORM.ALLOWED_LIST" inputType="stringList" label="Allow methods with the following names:" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.STRUTS.IACM" header="Avoid calling methods of Action Classes" id="IACM" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="Action Class method ''{0}'' is called."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.STRUTS.INST" header="Do not declare instance variables in Struts Action classes" id="INST" scope="LINE" severity="1" since="7.5">
            <messages>
               <msg index="1" value="Instance variable declared in an Action class."/>
            </messages>
            <oldparameters>
               <oldparam id="STRUTS.INST.IGNORE_LIST" name="IGNORE_LIST" value="Allow instance variables with the following names:"/>
            </oldparameters>
            <parameters>
               <param defaultValue="" id="STRUTS.INST.IGNORE_LIST" inputType="stringList" label="Allow instance variables with the following names:" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.STRUTS.PMAC" header="Avoid public methods in Action Classes" id="PMAC" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="Action Class method ''{0}'' is &quot;public&quot;."/>
            </messages>
         </rule>
      </category>
      <category description="Enterprise JavaBeans" name="EJB">
         <category description="Enterprise JavaBeans 3" name="EJB3">
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.MDML" header="Ensure @MessageDriven beans specify a MessageListener" id="MDML" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="@MessageDriven bean ''{0}'' does not specify a message listener."/>
               </messages>
               <oldparameters>
                  <oldparam id="EJB.EJB3.MDML.CHECK_FOLLOWING" name="CHECK_FOLLOWING" value="Check the following:"/>
                  <oldparam id="EJB.EJB3.MDML.CHECK_ANNOTATIONS" name="CHECK_ANNOTATIONS" value="Check annotations"/>
                  <oldparam id="EJB.EJB3.MDML.CHECK_BOTH" name="CHECK_BOTH" value="Check annotations and deployment descriptors"/>
                  <oldparam id="EJB.EJB3.MDML.SCAN_TYPE" name="SCAN_TYPE" value="Check deployment descriptors in the following location:"/>
                  <oldparam id="EJB.EJB3.MDML.SCAN_TYPE_PROJECT" name="SCAN_TYPE_PROJECT" value="Check project"/>
                  <oldparam id="EJB.EJB3.MDML.SCAN_TYPE_PACKAGE" name="SCAN_TYPE_PACKAGE" value="Check package"/>
                  <oldparam id="EJB.EJB3.MDML.MESSAGE_LISTENERS" name="MESSAGE_LISTENERS" value="Specify message listeners using qualified names:"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="EJB.EJB3.MDML.CHECK_FOLLOWING" label="Check the following:" prevType="MultipleChoice" showLabel="true">
                     <radioItem label="Check annotations" value="0"/>
                     <radioItem defaultValue="checked" label="Check annotations and deployment descriptors" value="1">
                        <radioGroup id="EJB.EJB3.MDML.SCAN_TYPE" label="Check deployment descriptors in the following location:" prevType="MultipleChoice" showLabel="true">
                           <radioItem defaultValue="checked" label="Check project" value="0"/>
                           <radioItem label="Check package" value="1"/>
                        </radioGroup>
                     </radioItem>
                  </radioGroup>
                  <param defaultValue="javax.jms.MessageListener" id="EJB.EJB3.MDML.MESSAGE_LISTENERS" inputType="stringList" label="Specify message listeners using qualified names:" prevType="StringList"/>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.IDCS" header="Ensure @IdClass is Serializable and defines &quot;equals()&quot; and &quot;hashCode()&quot; methods." id="IDCS" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="@IdClass ''{0}'' is not Serializable."/>
                  <msg index="2" value="@IdClass ''{0}'' does not define an &quot;equals()&quot; method."/>
                  <msg index="3" value="@IdClass ''{0}'' does not define a &quot;hashCode()&quot; method."/>
                  <msg index="4" value="@IdClass ''{0}'' does not define &quot;equals()&quot; or &quot;hashCode()&quot; methods."/>
               </messages>
               <oldparameters>
                  <oldparam id="EJB.EJB3.IDCS.CHECK_FOLLOWING" name="CHECK_FOLLOWING" value="Check the following:"/>
                  <oldparam id="EJB.EJB3.IDCS.CHECK_ANNOTATIONS" name="CHECK_ANNOTATIONS" value="Check annotations"/>
                  <oldparam id="EJB.EJB3.IDCS.CHECK_BOTH" name="CHECK_BOTH" value="Check annotations and deployment descriptors"/>
                  <oldparam id="EJB.EJB3.IDCS.SCAN_TYPE" name="SCAN_TYPE" value="Check deployment descriptors in the following location:"/>
                  <oldparam id="EJB.EJB3.IDCS.SCAN_TYPE_PROJECT" name="SCAN_TYPE_PROJECT" value="Check project"/>
                  <oldparam id="EJB.EJB3.IDCS.SCAN_TYPE_PACKAGE" name="SCAN_TYPE_PACKAGE" value="Check package"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="EJB.EJB3.IDCS.CHECK_FOLLOWING" label="Check the following:" prevType="MultipleChoice" showLabel="true">
                     <radioItem label="Check annotations" value="0"/>
                     <radioItem defaultValue="checked" label="Check annotations and deployment descriptors" value="1">
                        <radioGroup id="EJB.EJB3.IDCS.SCAN_TYPE" label="Check deployment descriptors in the following location:" prevType="MultipleChoice" showLabel="true">
                           <radioItem defaultValue="checked" label="Check project" value="0"/>
                           <radioItem label="Check package" value="1"/>
                        </radioGroup>
                     </radioItem>
                  </radioGroup>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.SIVS" header="Ensure instance variables of @Stateful beans are Serializable." id="SIVS" scope="LINE" severity="2" since="8.4">
               <messages>
                  <msg index="1" value="Instance variable ''{0}'' of @Stateful bean ''{1}'' is not Serializable."/>
               </messages>
               <oldparameters>
                  <oldparam id="EJB.EJB3.SIVS.CHECK_FOLLOWING" name="CHECK_FOLLOWING" value="Check the following:"/>
                  <oldparam id="EJB.EJB3.SIVS.CHECK_ANNOTATIONS" name="CHECK_ANNOTATIONS" value="Check annotations"/>
                  <oldparam id="EJB.EJB3.SIVS.CHECK_BOTH" name="CHECK_BOTH" value="Check annotations and deployment descriptors"/>
                  <oldparam id="EJB.EJB3.SIVS.SCAN_TYPE" name="SCAN_TYPE" value="Check deployment descriptors in the following location:"/>
                  <oldparam id="EJB.EJB3.SIVS.SCAN_TYPE_PROJECT" name="SCAN_TYPE_PROJECT" value="Check project"/>
                  <oldparam id="EJB.EJB3.SIVS.SCAN_TYPE_PACKAGE" name="SCAN_TYPE_PACKAGE" value="Check package"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="EJB.EJB3.SIVS.CHECK_FOLLOWING" label="Check the following:" prevType="MultipleChoice" showLabel="true">
                     <radioItem label="Check annotations" value="0"/>
                     <radioItem defaultValue="checked" label="Check annotations and deployment descriptors" value="1">
                        <radioGroup id="EJB.EJB3.SIVS.SCAN_TYPE" label="Check deployment descriptors in the following location:" prevType="MultipleChoice" showLabel="true">
                           <radioItem defaultValue="checked" label="Check project" value="0"/>
                           <radioItem label="Check package" value="1"/>
                        </radioGroup>
                     </radioItem>
                  </radioGroup>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.ISB" header="Do not inject @Stateful beans into @Stateless beans." id="ISB" scope="LINE" severity="2" since="8.4">
               <messages>
                  <msg index="1" value="@Stateful bean ''{0}'' injected into @Stateless bean ''{1}''"/>
               </messages>
               <oldparameters>
                  <oldparam id="EJB.EJB3.SIVS.CHECK_FOLLOWING" name="CHECK_FOLLOWING" value="Check the following:"/>
                  <oldparam id="EJB.EJB3.SIVS.CHECK_ANNOTATIONS" name="CHECK_ANNOTATIONS" value="Check annotations"/>
                  <oldparam id="EJB.EJB3.SIVS.CHECK_BOTH" name="CHECK_BOTH" value="Check annotations and deployment descriptors"/>
                  <oldparam id="EJB.EJB3.SIVS.SCAN_TYPE" name="SCAN_TYPE" value="Check deployment descriptors in the following location:"/>
                  <oldparam id="EJB.EJB3.SIVS.SCAN_TYPE_PROJECT" name="SCAN_TYPE_PROJECT" value="Check project"/>
                  <oldparam id="EJB.EJB3.SIVS.SCAN_TYPE_PACKAGE" name="SCAN_TYPE_PACKAGE" value="Check package"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="EJB.EJB3.ISB.CHECK_FOLLOWING" label="Check the following:" prevType="MultipleChoice" showLabel="true">
                     <radioItem label="Check annotations" value="0"/>
                     <radioItem defaultValue="checked" label="Check annotations and deployment descriptors" value="1">
                        <radioGroup id="EJB.EJB3.ISB.SCAN_TYPE" label="Check deployment descriptors in the following location:" prevType="MultipleChoice" showLabel="true">
                           <radioItem defaultValue="checked" label="Check project" value="0"/>
                           <radioItem label="Check package" value="1"/>
                        </radioGroup>
                     </radioItem>
                  </radioGroup>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.RMSB" header="Specify a @Remove method for @Stateful beans" id="RMSB" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="@Stateful bean ''{0}'' has no &quot;@Remove&quot; method."/>
               </messages>
               <oldparameters>
                  <oldparam id="EJB.EJB3.RMSB.CHECK_FOLLOWING" name="CHECK_FOLLOWING" value="Check the following:"/>
                  <oldparam id="EJB.EJB3.RMSB.CHECK_ANNOTATIONS" name="CHECK_ANNOTATIONS" value="Check annotations"/>
                  <oldparam id="EJB.EJB3.RMSB.CHECK_BOTH" name="CHECK_BOTH" value="Check annotations and deployment descriptors"/>
                  <oldparam id="EJB.EJB3.RMSB.SCAN_TYPE" name="SCAN_TYPE" value="Check deployment descriptors in the following location:"/>
                  <oldparam id="EJB.EJB3.RMSB.SCAN_TYPE_PROJECT" name="SCAN_TYPE_PROJECT" value="Check project"/>
                  <oldparam id="EJB.EJB3.RMSB.SCAN_TYPE_PACKAGE" name="SCAN_TYPE_PACKAGE" value="Check package"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="EJB.EJB3.RMSB.CHECK_FOLLOWING" label="Check the following:" prevType="MultipleChoice" showLabel="true">
                     <radioItem label="Check annotations" value="0"/>
                     <radioItem defaultValue="checked" label="Check annotations and deployment descriptors" value="1">
                        <radioGroup id="EJB.EJB3.RMSB.SCAN_TYPE" label="Check deployment descriptors in the following location:" prevType="MultipleChoice" showLabel="true">
                           <radioItem defaultValue="checked" label="Check project" value="0"/>
                           <radioItem label="Check package" value="1"/>
                        </radioGroup>
                     </radioItem>
                  </radioGroup>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.MTM" header="Do not declare multiple &quot;@Timeout&quot; methods" id="MTM" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="@Stateless bean ''{0}'' has multiple &quot;@Timeout&quot; methods."/>
                  <msg index="2" value="@MessageDriven bean ''{0}'' has multiple &quot;@Timeout&quot; methods."/>
               </messages>
               <oldparameters>
                  <oldparam id="EJB.EJB3.MTM.CHECK_FOLLOWING" name="CHECK_FOLLOWING" value="Check the following:"/>
                  <oldparam id="EJB.EJB3.MTM.CHECK_ANNOTATIONS" name="CHECK_ANNOTATIONS" value="Check annotations"/>
                  <oldparam id="EJB.EJB3.MTM.CHECK_BOTH" name="CHECK_BOTH" value="Check annotations and deployment descriptors"/>
                  <oldparam id="EJB.EJB3.MTM.SCAN_TYPE" name="SCAN_TYPE" value="Check deployment descriptors in the following location:"/>
                  <oldparam id="EJB.EJB3.MTM.SCAN_TYPE_PROJECT" name="SCAN_TYPE_PROJECT" value="Check project"/>
                  <oldparam id="EJB.EJB3.MTM.SCAN_TYPE_PACKAGE" name="SCAN_TYPE_PACKAGE" value="Check package"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="EJB.EJB3.MTM.CHECK_FOLLOWING" label="Check the following:" prevType="MultipleChoice" showLabel="true">
                     <radioItem label="Check annotations" value="0"/>
                     <radioItem defaultValue="checked" label="Check annotations and deployment descriptors" value="1">
                        <radioGroup id="EJB.EJB3.MTM.SCAN_TYPE" label="Check deployment descriptors in the following location:" prevType="MultipleChoice" showLabel="true">
                           <radioItem defaultValue="checked" label="Check project" value="0"/>
                           <radioItem label="Check package" value="1"/>
                        </radioGroup>
                     </radioItem>
                  </radioGroup>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.MDBS" header="Do not extend other @MessageDriven beans from a @MessageDriven bean." id="MDBS" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="@MessageDriven bean ''{0}'' has @MessageDriven superclass ''{1}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="EJB.EJB3.MDBS.CHECK_FOLLOWING" name="CHECK_FOLLOWING" value="Check the following:"/>
                  <oldparam id="EJB.EJB3.MDBS.CHECK_ANNOTATIONS" name="CHECK_ANNOTATIONS" value="Check annotations"/>
                  <oldparam id="EJB.EJB3.MDBS.CHECK_BOTH" name="CHECK_BOTH" value="Check annotations and deployment descriptors"/>
                  <oldparam id="EJB.EJB3.MDBS.SCAN_TYPE" name="SCAN_TYPE" value="Check deployment descriptors in the following location:"/>
                  <oldparam id="EJB.EJB3.MDBS.SCAN_TYPE_PROJECT" name="SCAN_TYPE_PROJECT" value="Check project"/>
                  <oldparam id="EJB.EJB3.MDBS.SCAN_TYPE_PACKAGE" name="SCAN_TYPE_PACKAGE" value="Check package"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="EJB.EJB3.MDBS.CHECK_FOLLOWING" label="Check the following:" prevType="MultipleChoice" showLabel="true">
                     <radioItem label="Check annotations" value="0"/>
                     <radioItem defaultValue="checked" label="Check annotations and deployment descriptors" value="1">
                        <radioGroup id="EJB.EJB3.MDBS.SCAN_TYPE" label="Check deployment descriptors in the following location:" prevType="MultipleChoice" showLabel="true">
                           <radioItem defaultValue="checked" label="Check project" value="0"/>
                           <radioItem label="Check package" value="1"/>
                        </radioGroup>
                     </radioItem>
                  </radioGroup>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.CMF" header="Improper signature of the annotated method in EJB bean." id="CMF" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Callback method ''{0}'' has return type ''{1}'' but should be &quot;void&quot;."/>
                  <msg index="2" value="Callback method ''{0}'' has ''{1}'' parameter(s) but should have none."/>
               </messages>
               <oldparameters>
                  <oldparam id="EJB.EJB3.CMF.CHECK_FOLLOWING" name="CHECK_FOLLOWING" value="Check the following:"/>
                  <oldparam id="EJB.EJB3.CMF.CHECK_ANNOTATIONS" name="CHECK_ANNOTATIONS" value="Check annotations"/>
                  <oldparam id="EJB.EJB3.CMF.CHECK_BOTH" name="CHECK_BOTH" value="Check annotations and deployment descriptors"/>
                  <oldparam id="EJB.EJB3.CMF.SCAN_TYPE" name="SCAN_TYPE" value="Check deployment descriptors in the following location:"/>
                  <oldparam id="EJB.EJB3.CMF.SCAN_TYPE_PROJECT" name="SCAN_TYPE_PROJECT" value="Check project"/>
                  <oldparam id="EJB.EJB3.CMF.SCAN_TYPE_PACKAGE" name="SCAN_TYPE_PACKAGE" value="Check package"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="EJB.EJB3.CMF.CHECK_FOLLOWING" label="Check the following:" prevType="MultipleChoice" showLabel="true">
                     <radioItem label="Check annotations" value="0"/>
                     <radioItem defaultValue="checked" label="Check annotations and deployment descriptors" value="1">
                        <radioGroup id="EJB.EJB3.CMF.SCAN_TYPE" label="Check deployment descriptors in the following location:" prevType="MultipleChoice" showLabel="true">
                           <radioItem defaultValue="checked" label="Check project" value="0"/>
                           <radioItem label="Check package" value="1"/>
                        </radioGroup>
                     </radioItem>
                  </radioGroup>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.AIA" header="Avoid ignored or invalid annotations." id="AIA" scope="LINE" severity="4" since="8.4">
               <messages>
                  <msg index="1" value="''{0}'' is ignored for {1} bean ''{2}''."/>
                  <msg index="2" value="''{0}'' is ignored for {1} bean ''{2}'' with ''{3}''."/>
               </messages>
               <oldparameters>
                  <oldparam id="EJB.EJB3.AIA.CHECK_FOLLOWING" name="CHECK_FOLLOWING" value="Check the following:"/>
                  <oldparam id="EJB.EJB3.AIA.CHECK_ANNOTATIONS" name="CHECK_ANNOTATIONS" value="Check annotations"/>
                  <oldparam id="EJB.EJB3.AIA.CHECK_BOTH" name="CHECK_BOTH" value="Check annotations and deployment descriptors"/>
                  <oldparam id="EJB.EJB3.AIA.SCAN_TYPE" name="SCAN_TYPE" value="Check deployment descriptors in the following location:"/>
                  <oldparam id="EJB.EJB3.AIA.SCAN_TYPE_PROJECT" name="SCAN_TYPE_PROJECT" value="Check project"/>
                  <oldparam id="EJB.EJB3.AIA.SCAN_TYPE_PACKAGE" name="SCAN_TYPE_PACKAGE" value="Check package"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="EJB.EJB3.AIA.CHECK_FOLLOWING" label="Check the following:" prevType="MultipleChoice" showLabel="true">
                     <radioItem label="Check annotations" value="0"/>
                     <radioItem defaultValue="checked" label="Check annotations and deployment descriptors" value="1">
                        <radioGroup id="EJB.EJB3.AIA.SCAN_TYPE" label="Check deployment descriptors in the following location:" prevType="MultipleChoice" showLabel="true">
                           <radioItem defaultValue="checked" label="Check project" value="0"/>
                           <radioItem label="Check package" value="1"/>
                        </radioGroup>
                     </radioItem>
                  </radioGroup>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.AISE" header="Avoid IllegalStateException when using transactions." id="AISE" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="''{0}'' called from bean managed transaction."/>
                  <msg index="2" value="''{0}'' called from container managed transaction with ''{1}''."/>
                  <msg index="3" value="''{0}'' called from container managed transaction."/>
               </messages>
               <oldparameters>
                  <oldparam id="EJB.EJB3.AISE.CHECK_FOLLOWING" name="CHECK_FOLLOWING" value="Check the following:"/>
                  <oldparam id="EJB.EJB3.AISE.CHECK_ANNOTATIONS" name="CHECK_ANNOTATIONS" value="Check annotations"/>
                  <oldparam id="EJB.EJB3.AISE.CHECK_BOTH" name="CHECK_BOTH" value="Check annotations and deployment descriptors"/>
                  <oldparam id="EJB.EJB3.AISE.SCAN_TYPE" name="SCAN_TYPE" value="Check deployment descriptors in the following location:"/>
                  <oldparam id="EJB.EJB3.AISE.SCAN_TYPE_PROJECT" name="SCAN_TYPE_PROJECT" value="Check project"/>
                  <oldparam id="EJB.EJB3.AISE.SCAN_TYPE_PACKAGE" name="SCAN_TYPE_PACKAGE" value="Check package"/>
               </oldparameters>
               <parameters>
                  <radioGroup id="EJB.EJB3.AISE.CHECK_FOLLOWING" label="Check the following:" prevType="MultipleChoice" showLabel="true">
                     <radioItem label="Check annotations" value="0"/>
                     <radioItem defaultValue="checked" label="Check annotations and deployment descriptors" value="1">
                        <radioGroup id="EJB.EJB3.AISE.SCAN_TYPE" label="Check deployment descriptors in the following location:" prevType="MultipleChoice" showLabel="true">
                           <radioItem defaultValue="checked" label="Check project" value="0"/>
                           <radioItem label="Check package" value="1"/>
                        </radioGroup>
                     </radioItem>
                  </radioGroup>
               </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.BMN" header="Do not start business method names with &quot;ejb&quot;." id="BMN" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Business method ''{0}'' starts with &quot;ejb&quot;."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.CPIM" header="Call 'InvocationContext.proceed()' from @AroundInvoke methods." id="CPIM" scope="LINE" severity="2" since="8.4">
               <messages>
                  <msg index="1" value="@AroundInvoke method ''{0}'' does not call &quot;InvocationContext.proceed()&quot;."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.EAII" header="Do not expose @AroundInvoke method in business interface." id="EAII" scope="LINE" severity="1" since="8.4">
               <messages>
                  <msg index="1" value="@AroundInvoke method ''{0}'' is exposed in interface ''{1}''."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.IDA" header="Avoid improper use of @Id annotation." id="IDA" scope="CLASS" severity="2" since="8.4">
               <messages>
                  <msg index="1" value="@Id field ''{0}'' is of type ''{1}''."/>
                  <msg index="2" value="@Id method ''{0}'' returns type ''{1}''."/>
                  <msg index="3" value="@EmbeddedId used in conjunction with @Id."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.PCUN" header="Always specify &quot;unitName&quot; with @PersistenceContext" id="PCUN" scope="CLASS" severity="5" since="8.4">
               <messages>
                  <msg index="1" value="@PersistenceContext does not specify a &quot;unitName&quot;."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.PERMIT" header="Avoid EJB 3 methods without security annotations" id="PERMIT" scope="LINE" severity="1" since="9.2">
               <messages>
                  <msg index="1" value="Method without permit (@RolesAllowed, @PermitAll, @DenyAll) annotations."/>
               </messages>
               <references>
                  <reference href="" name="OWASP-CODEREVIEW-1.1"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A4" name="OWASP-2010"/>
                  <reference href="https://www.owasp.org/index.php/Top_10_2010-A8" name="OWASP-2010"/>
                  <reference href="http://cwe.mitre.org/data/definitions/862.html" name="CWE"/>
                  <reference href="http://cwe.mitre.org/data/definitions/863.html" name="CWE"/>
               </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.RLI" header="Do not declare an interface both @Local and @Remote" id="RLI" scope="LINE" severity="4" since="8.4">
               <messages>
                  <msg index="1" value="Interface ''{0}'' is @Local and @Remote."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.SRBM" header="Ensure parameters and return type of remote business methods are Serializable." id="SRBM" scope="LINE" severity="3" since="8.4">
               <messages>
                  <msg index="1" value="Remote business method ''{0}'' has a non-Serializable return type."/>
                  <msg index="2" value="Remote business method ''{0}'' has non-Serializable parameters."/>
                  <msg index="3" value="Remote business method ''{0}'' has a non-Serializable return type and parameters."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.ULI" header="Access beans through a local interface" id="ULI" scope="LINE" severity="5" since="9.0">
               <messages>
                  <msg index="1" value="Injected ''{0}'' is not a remote interface."/>
                  <msg index="2" value="Call to narrow() here."/>
               </messages>
               <oldparameters>
                  <oldparam id="EJB.EJB3.ULI.CHECK_INJECTION" name="CHECK_INJECTION" value="Check injected beans"/>
                  <oldparam id="EJB.EJB3.ULI.CHECK_CLASSES" name="CHECK_CLASSES" value="Flag injected classes"/>
                  <oldparam id="EJB.EJB3.ULI.CHECK_NARROW" name="CHECK_NARROW" value="Check calls to narrow()"/>
               </oldparameters>
               <parameters>
                  <param defaultValue="true" id="EJB.EJB3.ULI.CHECK_INJECTION" inputType="checkbox" label="Check injected beans">
                     <param defaultValue="true" id="EJB.EJB3.ULI.CHECK_CLASSES" inputType="checkbox" label="Flag injected classes"/>
                  </param>
                  <param defaultValue="false" id="EJB.EJB3.ULI.CHECK_NARROW" inputType="checkbox" label="Check calls to narrow()"/>
               </parameters>
            </rule>
         </category>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.AMSC" header="Do not access or modify security configuration objects." id="AMSC" scope="LINE" severity="2" since="4.5">
            <messages>
               <msg index="1" value="Security method was called"/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.STD" header="Ensure EJB beans include necessary methods and EJB bean and interface classes follow the name format" id="STD" scope="CLASS" severity="2" since="6.0">
            <messages>
               <msg index="1" value="''{0}'' does not begin with ''{1}''."/>
               <msg index="2" value="''{0}'' does not end with ''{1}''."/>
               <msg index="3" value="Method ''{0}'' is missing."/>
               <msg index="4" value="''{0}'' is not &quot;public&quot; instance method."/>
            </messages>
            <oldparameters>
               <oldparam id="EJB.STD.PRE_OR_POST" name="PRE_OR_POST" value="prefix/postfix"/>
               <oldparam id="EJB.STD.ENFORCE" name="ENFORCE" value="prefix/postfix value"/>
               <oldparam id="EJB.STD.HOME_INTERFACE_TAB" name="HOME_INTERFACE_TAB" value="EJB Home Interface"/>
               <oldparam id="EJB.STD.FQNAME" name="FQNAME" value="fully qualified name in regular expression"/>
               <oldparam id="EJB.STD.BEAN_CLASS_TABLE" name="BEAN_CLASS_TABLE" value="EJB bean class naming convention table"/>
               <oldparam id="EJB.STD.MISSING_HOME" name="MISSING_HOME" value="Check to make sure EJB bean contains all create and finder methods in the Home interface."/>
               <oldparam id="EJB.STD.REMOTE_INTERFACE_TAB" name="REMOTE_INTERFACE_TAB" value="EJB Remote Interface"/>
               <oldparam id="EJB.STD.REMOTE_OR_LOCAL" name="REMOTE_OR_LOCAL" value="remote/local"/>
               <oldparam id="EJB.STD.BEAN_TAB" name="BEAN_TAB" value="EJB Bean class"/>
               <oldparam id="EJB.STD.MISSING_BUSINESS" name="MISSING_BUSINESS" value="Check to make sure EJB bean contains all the business methods."/>
               <oldparam id="EJB.STD.HOME_INTERFACE_TABLE" name="HOME_INTERFACE_TABLE" value="EJB home interface naming convention table"/>
               <oldparam id="EJB.STD.REMOTE_INTERFACE_TABLE" name="REMOTE_INTERFACE_TABLE" value="EJB remote interface naming convention table"/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="EJB.STD.tab.HOME_INTERFACE_TAB" label="EJB Home Interface">
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="EJB.STD.HOME_INTERFACE_TABLE" label="EJB home interface naming convention table" reader="SATable">
                     <columns>
                        <column acceptedValuesForCombobox="remote|local" columnType="combo" editable="true" id="EJB__STD__HOME_INTERFACE_TABLE__COLUMN1" label="remote/local" required="true"/>
                        <column acceptedValuesForCombobox="prefix|postfix" columnType="combo" editable="true" id="EJB__STD__HOME_INTERFACE_TABLE__COLUMN2" label="prefix/postfix" required="true"/>
                        <column columnType="text" editable="true" id="EJB__STD__HOME_INTERFACE_TABLE__COLUMN3" label="fully qualified name in regular expression" required="true" textSize="smallPlus"/>
                        <column columnType="text" editable="true" id="EJB__STD__HOME_INTERFACE_TABLE__COLUMN4" label="prefix/postfix value" required="true" textSize="small"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="EJB__STD__HOME_INTERFACE_TABLE__COLUMN1" value="remote"/>
                           <column refColumnId="EJB__STD__HOME_INTERFACE_TABLE__COLUMN2" value="postfix"/>
                           <column refColumnId="EJB__STD__HOME_INTERFACE_TABLE__COLUMN3" value=".*"/>
                           <column refColumnId="EJB__STD__HOME_INTERFACE_TABLE__COLUMN4" value="RemoteHome"/>
                        </row>
                        <row id="2">
                           <column refColumnId="EJB__STD__HOME_INTERFACE_TABLE__COLUMN1" value="local"/>
                           <column refColumnId="EJB__STD__HOME_INTERFACE_TABLE__COLUMN2" value="postfix"/>
                           <column refColumnId="EJB__STD__HOME_INTERFACE_TABLE__COLUMN3" value=".*"/>
                           <column refColumnId="EJB__STD__HOME_INTERFACE_TABLE__COLUMN4" value="LocalHome"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </group>
               <group collapsible="false" id="EJB.STD.tab.REMOTE_INTERFACE_TAB" label="EJB Remote Interface">
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="EJB.STD.REMOTE_INTERFACE_TABLE" label="EJB remote interface naming convention table" reader="SATable">
                     <columns>
                        <column acceptedValuesForCombobox="remote|local" columnType="combo" editable="true" id="EJB__STD__REMOTE_INTERFACE_TABLE__COLUMN1" label="remote/local" required="true"/>
                        <column acceptedValuesForCombobox="prefix|postfix" columnType="combo" editable="true" id="EJB__STD__REMOTE_INTERFACE_TABLE__COLUMN2" label="prefix/postfix" required="true"/>
                        <column columnType="text" editable="true" id="EJB__STD__REMOTE_INTERFACE_TABLE__COLUMN3" label="fully qualified name in regular expression" required="true" textSize="medium"/>
                        <column columnType="text" editable="true" id="EJB__STD__REMOTE_INTERFACE_TABLE__COLUMN4" label="prefix/postfix value" required="true" textSize="small"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="EJB__STD__REMOTE_INTERFACE_TABLE__COLUMN1" value="remote"/>
                           <column refColumnId="EJB__STD__REMOTE_INTERFACE_TABLE__COLUMN2" value="postfix"/>
                           <column refColumnId="EJB__STD__REMOTE_INTERFACE_TABLE__COLUMN3" value=".*"/>
                           <column refColumnId="EJB__STD__REMOTE_INTERFACE_TABLE__COLUMN4" value="Remote"/>
                        </row>
                        <row id="2">
                           <column refColumnId="EJB__STD__REMOTE_INTERFACE_TABLE__COLUMN1" value="local"/>
                           <column refColumnId="EJB__STD__REMOTE_INTERFACE_TABLE__COLUMN2" value="postfix"/>
                           <column refColumnId="EJB__STD__REMOTE_INTERFACE_TABLE__COLUMN3" value=".*"/>
                           <column refColumnId="EJB__STD__REMOTE_INTERFACE_TABLE__COLUMN4" value="Local"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </group>
               <group collapsible="false" id="EJB.STD.tab.BEAN_TAB" label="EJB Bean class">
                  <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="EJB.STD.BEAN_CLASS_TABLE" label="EJB bean class naming convention table" reader="SATable">
                     <columns>
                        <column acceptedValuesForCombobox="prefix|postfix" columnType="combo" editable="true" id="EJB__STD__BEAN_CLASS_TABLE__COLUMN1" label="prefix/postfix" required="true"/>
                        <column columnType="text" editable="true" id="EJB__STD__BEAN_CLASS_TABLE__COLUMN2" label="fully qualified name in regular expression" required="true" textSize="medium"/>
                        <column columnType="text" editable="true" id="EJB__STD__BEAN_CLASS_TABLE__COLUMN3" label="prefix/postfix value" required="true" textSize="small"/>
                     </columns>
                     <predefinedRows>
                        <row id="1">
                           <column refColumnId="EJB__STD__BEAN_CLASS_TABLE__COLUMN1" value="postfix"/>
                           <column refColumnId="EJB__STD__BEAN_CLASS_TABLE__COLUMN2" value=".*"/>
                           <column refColumnId="EJB__STD__BEAN_CLASS_TABLE__COLUMN3" value="Bean"/>
                        </row>
                        <row id="2">
                           <column refColumnId="EJB__STD__BEAN_CLASS_TABLE__COLUMN1" value="postfix"/>
                           <column refColumnId="EJB__STD__BEAN_CLASS_TABLE__COLUMN2" value=".*"/>
                           <column refColumnId="EJB__STD__BEAN_CLASS_TABLE__COLUMN3" value="EJB"/>
                        </row>
                     </predefinedRows>
                  </complexParamTable>
               </group>
               <param defaultValue="true" id="EJB.STD.MISSING_HOME" inputType="checkbox" label="Check to make sure EJB bean contains all create and finder methods in the Home interface."/>
               <param defaultValue="true" id="EJB.STD.MISSING_BUSINESS" inputType="checkbox" label="Check to make sure EJB bean contains all the business methods."/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.THREAD" header="Avoid starting, stopping, or managing threads in any way in bean classes." id="THREAD" scope="LINE" severity="2" since="4.5">
            <messages>
               <msg index="1" value="Thread or ThreadGroup method ''{0}'' called in a bean class."/>
               <msg index="2" value="Method ''{0}'' indirectly calls a Thread or ThreadGroup method."/>
            </messages>
            <oldparameters>
               <oldparam id="EJB.THREAD.DEPTH" name="DEPTH" value="Maximum depth to check for Thread or ThreadGroup usage"/>
            </oldparameters>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
            </references>
            <parameters>
               <param defaultValue="2" id="EJB.THREAD.DEPTH" inputType="integer" label="Maximum depth to check for Thread or ThreadGroup usage" max="5" min="1"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.SMSN" header="Do not set or create a new SecurityManager in EJBs" id="SMSN" scope="LINE" severity="2" since="8.4">
            <messages>
               <msg index="1" value="&quot;System.setSecurityManager()&quot; called in bean class."/>
               <msg index="2" value="New ''{0}'' created in bean class."/>
               <msg index="3" value="Call to ''{0}'' indirectly sets or creates a SecurityManager."/>
            </messages>
            <oldparameters>
               <oldparam id="EJB.SMSN.DEPTH" name="DEPTH" value="Maximum depth to check for SecurityManager setting or creation"/>
            </oldparameters>
            <references>
               <reference href="https://www.owasp.org/index.php/Top_10_2010-A6" name="OWASP-2010"/>
               <reference href="http://cwe.mitre.org/data/definitions/732.html" name="CWE"/>
            </references>
            <parameters>
               <param defaultValue="2" id="EJB.SMSN.DEPTH" inputType="integer" label="Maximum depth to check for SecurityManager setting or creation" max="5" min="1"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.JIO" header="Do not use types from the &quot;java.io&quot; package within bean classes." id="JIO" scope="LINE" severity="2" since="8.2">
            <messages>
               <msg index="1" value="New instance of type ''{0}'' created in a bean class."/>
               <msg index="2" value="Call to &quot;java.io&quot; method ''{0}'' in a bean class."/>
               <msg index="3" value="Method ''{0}'' indirectly uses the &quot;java.io&quot; package in a bean class."/>
            </messages>
            <oldparameters>
               <oldparam id="EJB.JIO.DEPTH" name="DEPTH" value="Maximum depth to check for &quot;java.io&quot; usage"/>
            </oldparameters>
            <parameters>
               <param defaultValue="2" id="EJB.JIO.DEPTH" inputType="integer" label="Maximum depth to check for &quot;java.io&quot; usage" max="5" min="1"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.AUS" header="Do not use sockets in EJBs." id="AUS" scope="LINE" severity="3" since="8.4">
            <messages>
               <msg index="1" value="Socket method ''{0}'' called in a bean."/>
               <msg index="2" value="Call to ''{0}'' indirectly uses a socket."/>
            </messages>
            <oldparameters>
               <oldparam id="EJB.AUS.DEPTH" name="DEPTH" value="Maximum depth to check for socket usage"/>
               <oldparam id="EJB.AUS.CHECK_SOCKET" name="CHECK_SOCKET" value="Check Sockets"/>
               <oldparam id="EJB.AUS.CHECK_SERVERSOCKET" name="CHECK_SERVERSOCKET" value="Check ServerSockets"/>
            </oldparameters>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/577.html" name="CWE"/>
            </references>
            <parameters>
               <param defaultValue="2" id="EJB.AUS.DEPTH" inputType="integer" label="Maximum depth to check for socket usage" max="5" min="1"/>
               <param defaultValue="true" id="EJB.AUS.CHECK_SOCKET" inputType="checkbox" label="Check Sockets"/>
               <param defaultValue="true" id="EJB.AUS.CHECK_SERVERSOCKET" inputType="checkbox" label="Check ServerSockets"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.ACL" header="Do not access, use, or create a class loader within a bean class." id="ACL" scope="LINE" severity="2" since="8.2">
            <messages>
               <msg index="1" value="&quot;Class.getClassLoader()&quot; called within a bean class."/>
               <msg index="2" value="ClassLoader method ''{0}'' called within a bean class."/>
               <msg index="3" value="''{0}'' created within a bean class."/>
               <msg index="4" value="Method ''{0}'' indirectly calls &quot;Class.getClassLoader()&quot;."/>
               <msg index="5" value="Method ''{0}'' indirectly calls ClassLoader method."/>
               <msg index="6" value="Method ''{0}'' indirectly creates a ClassLoader."/>
            </messages>
            <oldparameters>
               <oldparam id="EJB.ACL.DEPTH" name="DEPTH" value="Maximum depth to check for ClassLoader usage"/>
            </oldparameters>
            <parameters>
               <param defaultValue="2" id="EJB.ACL.DEPTH" inputType="integer" label="Maximum depth to check for ClassLoader usage" max="5" min="1"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.MEC" header="Define a matching 'ejbPostCreate()' method for each 'ejbCreate' method in entity bean classes" id="MEC" scope="METHOD" severity="3" since="4.5">
            <messages>
               <msg index="1" value="must have a corresponding ''{0}'' method."/>
            </messages>
            <oldparameters>
               <oldparam id="EJB.MEC.UNMATCHED_POST" name="UNMATCHED_POST" value="Check that each 'ejbPostCreate()' method has a corresponding 'ejbCreate()' method."/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="EJB.MEC.UNMATCHED_POST" inputType="checkbox" label="Check that each 'ejbPostCreate()' method has a corresponding 'ejbCreate()' method."/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.MNDF" header="Do not define 'finalize()' method in bean classes." id="MNDF" scope="CLASS" severity="1" since="4.5">
            <messages>
               <msg index="1" value="Bean &quot;class&quot; should not define 'finalize()' method."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.UVO" header="Use Value Objects to reduce the granularity of calls to the server" id="UVO" scope="CLASS" severity="4" since="5.0">
            <messages>
               <msg index="1" value="More than {0} field in the bean class ''{1}''."/>
               <msg index="2" value="More than {0} fields in the bean class ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="EJB.UVO.MAX_FIELD" name="MAX_FIELD" value="Max number of &quot;private&quot; fields in EJB bean class"/>
            </oldparameters>
            <parameters>
               <param defaultValue="3" id="EJB.UVO.MAX_FIELD" inputType="integer" label="Max number of &quot;private&quot; fields in EJB bean class" min="0"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.UCIC" header="Cache reusable JNDI resources to minimize the use of expensive operations" id="UCIC" scope="LINE" severity="3" since="5.0">
            <messages>
               <msg index="1" value="'InitialContext' object is not using a cache."/>
            </messages>
         </rule>
      </category>
      <category description="Code Duplication Detection" name="CDD">
         <rule class="com.parasoft.jtest.standards.rules.builtin.CDD.DUPI" header="Avoid duplicate import statements" id="DUPI" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Duplicate import statement ''{0}''."/>
               <msg index="2" value="[Line {0}] Duplicated import statement in file ''{1}''"/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.CDD.DFI" header="Avoid duplicated field initialization in constructors." id="DFI" scope="LINE" severity="4">
            <messages>
               <msg index="1" value="Duplicated field initialization in constructors: ''{0}''."/>
               <!-- child message -->
               <msg index="2" value="[Line {0}] Duplicated field initialization in file ''{1}''"/>
            </messages>
         </rule>
      </category>
      <category description="Hibernate Framework" name="HIBERNATE">
         <rule class="com.parasoft.jtest.standards.rules.builtin.HIBERNATE.PIDS" header="Declare the setter method for the Hibernate identifier 'private'." id="PIDS" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="The method ''{0}'' should be 'private'."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.HIBERNATE.OHCE" header="Override the 'equals' and 'hashCode' methods for mapped Hibernate objects." id="OHCE" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="The mapped object ''{0}'' does not override the ''{1}()'' method."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.HIBERNATE.IDC" header="Declare a no-argument constructor for Hibernate persistent classes." id="IDC" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="The class ''{0}'' does not have a no-argument constructor."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.HIBERNATE.GSIM" header="Include getter and setter methods and an id field for any object mapped to a column in a database table." id="GSIM" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="There is no method called ''{0}'' to access the field ''{1}''."/>
               <msg index="2" value="There is no method called ''{0}'' to set the field ''{1}''."/>
               <msg index="3" value="The type ''{0}'' is missing an ''id'' field."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.HIBERNATE.CHS" header="Close Hibernate Sessions in &quot;finally&quot; blocks" id="CHS" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="Hibernate Session ''{0}'' is not closed in a &quot;finally&quot; block."/>
            </messages>
            <oldparameters>
               <oldparam id="HIBERNATE.CHS.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
               <oldparam id="HIBERNATE.CHS.ADDITIONAL_CLOSE_METHODS" name="ADDITIONAL_CLOSE_METHODS" value="Additional Hibernate Session closing methods (in regular expression)"/>
               <oldparam id="HIBERNATE.CHS.METHOD" name="METHOD" value="Method name"/>
               <oldparam id="HIBERNATE.CHS.TYPE" name="TYPE" value="Declaring type"/>
               <oldparam id="HIBERNATE.CHS.SAFE_OPEN_METHODS" name="SAFE_OPEN_METHODS" value="Hibernate Session methods treated as safe (in regular expression)"/>
            </oldparameters>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE"/>
               <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE"/>
            </references>
            <parameters>
               <!--param id="HIBERNATE.CHS.SAFE_OPEN_METHODS" inputType="bigtext" defaultValue="" label="Hibernate Session methods treated as safe (in regular expression)"/-->
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="HIBERNATE.CHS.SAFE_OPEN_METHODS" label="Hibernate Session methods treated as safe (in regular expression)" reader="SATable">
                  <columns>
                     <column columnType="text" defaultValue=".*" editable="true" id="HIBERNATE__CHS__SAFE_OPEN_METHODS__COLUMN1" label="Declaring type" required="true"/>
                     <column columnType="text" defaultValue=".*" editable="true" id="HIBERNATE__CHS__SAFE_OPEN_METHODS__COLUMN2" label="Method name" required="true"/>
                  </columns>
               </complexParamTable>
               <!--param id="HIBERNATE.CHS.ADDITIONAL_CLOSE_METHODS" inputType="bigtext" defaultValue="" label="Additional Hibernate Session closing methods (in regular expression)"/-->
               <!-- complexParamTable id="HIBERNATE.CHS.ADDITIONAL_CLOSE_METHODS" reader="SATable" label="Additional Hibernate Session closing methods (in regular expression)" canAddRow="true" canRemoveRow="true" canEditRow="true" canSetOrdering="true">
                        <columns>
                            <column id="HIBERNATE__CHS__ADDITIONAL_CLOSE_METHODS__COLUMN1" label="Declaring type" columnType="text" defaultValue=".*" editable="true" required="true" />
                            <column id="HIBERNATE__CHS__ADDITIONAL_CLOSE_METHODS__COLUMN2" label="Method name" columnType="text" defaultValue=".*" editable="true" required="true" />
                        </columns>
                    </complexParamTable> -->
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.HIBERNATE.CSF" header="Close all 'SessionFactory' objects." id="CSF" scope="LINE" severity="3" since="8.0">
            <messages>
               <msg index="1" value="The ''SessionFactory'' object ''{0}'' may never be closed."/>
            </messages>
            <oldparameters>
               <oldparam id="HIBERNATE.CSF.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
               <oldparam id="HIBERNATE.CSF.ADDITIONAL_CLOSE_METHODS" name="ADDITIONAL_CLOSE_METHODS" value="Additional 'SessionFactory' closing methods (in regular expression)"/>
               <oldparam id="HIBERNATE.CSF.METHOD" name="METHOD" value="Method name"/>
               <oldparam id="HIBERNATE.CSF.TYPE" name="TYPE" value="Declaring type"/>
            </oldparameters>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE"/>
               <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE"/>
            </references>
            <!-- <parameters>
                    <param id="HIBERNATE.CSF.ADDITIONAL_CLOSE_METHODS" inputType="bigtext" defaultValue="" label="Additional 'SessionFactory' closing methods (in regular expression)"/>
                    <complexParamTable id="HIBERNATE.CSF.ADDITIONAL_CLOSE_METHODS" reader="SATable" label="Additional 'SessionFactory' closing methods (in regular expression)" canAddRow="true" canRemoveRow="true" canEditRow="true" canSetOrdering="true">
                        <columns>
                            <column id="HIBERNATE__CSF__ADDITIONAL_CLOSE_METHODS__COLUMN1" label="Declaring type" columnType="text" defaultValue=".*" editable="true" required="true" />
                            <column id="HIBERNATE__CSF__ADDITIONAL_CLOSE_METHODS__COLUMN2" label="Method name" columnType="text" defaultValue=".*" editable="true" required="true" />
                        </columns>
                    </complexParamTable>
                </parameters> -->
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.HIBERNATE.RBT" header="Roll back any active transactions in 'catch' blocks." id="RBT" scope="LINE" severity="2" since="8.0">
            <messages>
               <msg index="1" value="This ''catch'' block does not roll back the transaction ''{0}''."/>
            </messages>
            <oldparameters>
               <oldparam id="HIBERNATE.RBT.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
               <oldparam id="HIBERNATE.RBT.ADDITIONAL_CLOSE_METHODS" name="ADDITIONAL_CLOSE_METHODS" value="Additional Transaction rollback methods (in regular expression)"/>
               <oldparam id="HIBERNATE.RBT.METHOD" name="METHOD" value="Method name"/>
               <oldparam id="HIBERNATE.RBT.TYPE" name="TYPE" value="Declaring type"/>
            </oldparameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.HIBERNATE.SLM" header="Call 'setLockMode()' before executing a Hibernate Query." id="SLM" scope="METHOD" severity="1" since="8.4">
            <messages>
               <msg index="1" value="This call to ''{0}()'' executes a Hibernate Query without first calling ''setLockMode()'' on it."/>
            </messages>
         </rule>
      </category>
      <category description="XML Development" name="XML"/>
      <category description="Embedded Devices" name="MOBILE">
         <category description="Java 2 Micro Edition" name="J2ME">
            <rule class="com.parasoft.jtest.standards.rules.builtin.MOBILE.J2ME.CSOO" header="Avoid classes that are subclassed only once and are not publicly used" id="CSOO" scope="LINE" severity="3" since="5.1" type="global">
               <messages>
                  <msg index="1" value="Class ''{0}'' could potentially be merged with its subclass."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.MOBILE.J2ME.ACII" header="Do not use anonymous classes as interface implementors" id="ACII" scope="LINE" severity="3" since="5.1">
               <messages>
                  <msg index="1" value="Anonymous class implementing ''{0}'' should be merged with enclosing class."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.MOBILE.J2ME.EURP" header="Ensure methods use return parameters instead of returning new objects" id="EURP" scope="METHOD" severity="3" since="5.1">
               <messages>
                  <msg index="1" value="Method ''{0}'' could use a return parameter instead of returning a new ''{1}'' object."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.MOBILE.J2ME.ARLL" header="Do not use an array length in a loop condition expression" id="ARLL" scope="LINE" severity="3" since="5.1">
               <messages>
                  <msg index="1" value="''{0}.length'' should not be used in a loop condition expression."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.MOBILE.J2ME.CIPA" header="Avoid constant initializations of primitive arrays that exceed a certain size" id="CIPA" scope="LINE" severity="3" since="5.1">
               <messages>
                  <msg index="1" value="Array should be initialized from a binary file (estimated savings: {0} KB)."/>
                  <msg index="2" value="Array ''{0}'' should be initialized from a binary file (estimated savings: {1} KB)."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.MOBILE.J2ME.EAOF" header="Do not access a field excessively" id="EAOF" scope="LINE" severity="3" since="5.1">
               <messages>
                  <msg index="1" value="Field ''{0}'' is accessed very frequently; try using a local variable as a buffer."/>
               </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.MOBILE.J2ME.OOME" header="Catch 'OutOfMemoryError' for large array allocations" id="OOME" scope="LINE" severity="3" since="5.1">
               <messages>
                  <msg index="1" value="'OutOfMemoryError' should be caught for potentially large array allocations."/>
               </messages>
            </rule>
         </category>
         <category description="Google Android" name="ANDROID">
            <rule class="com.parasoft.jtest.standards.rules.builtin.MOBILE.ANDROID.AOSM" header="Always override 'onSaveInstanceState()'" id="AOSM" scope="LINE" severity="3" since="9.0">
               <messages>
                  <msg index="1" value="Class ''{0}'' did not override ''onSaveInstanceState()'' method."/>
               </messages>
            </rule>
         </category>
         <rule class="com.parasoft.jtest.standards.rules.builtin.MOBILE.ACFM" header="Avoid accessing same fields and methods multiple times" id="ACFM" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="field ''{0}'' is used multiple times."/>
               <msg index="2" value="method ''{0}'' is used multiple times."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.MOBILE.APTA" header="Avoid using array of primtive wrapper objects" id="APTA" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="Use array of &quot;int&quot; instead."/>
               <msg index="2" value="Use array of &quot;long&quot; instead."/>
               <msg index="3" value="Use array of &quot;float&quot; instead."/>
               <msg index="4" value="Use array of &quot;double&quot; instead."/>
               <msg index="5" value="Use array of &quot;char&quot; instead."/>
               <msg index="6" value="Use array of &quot;byte&quot; instead."/>
               <msg index="7" value="Use array of &quot;boolean&quot; instead."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.MOBILE.AUEF" header="Avoid using enhanced &quot;for&quot; loop to walk through a &quot;java.lang.Iterable&quot; object" id="AUEF" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="Additional object will be created in enhanced &quot;for&quot; loop, should walk through &quot;{0}&quot; directly."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.MOBILE.AUI" header="Avoid declaring &quot;interface&quot; types" id="AUI" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="interface type ''{0}'' is used."/>
            </messages>
            <oldparameters>
               <oldparam id="MOBILE.AUI.CHECK_FIELD_DECLARATION" name="CHECK_FIELD_DECLARATION" value="Check fields"/>
               <oldparam id="MOBILE.AUI.CHECK_LOCAL_DECLARATION" name="CHECK_LOCAL_DECLARATION" value="Check local variables"/>
               <oldparam id="MOBILE.AUI.CHECK_PARAM" name="CHECK_PARAM" value="Check parameters"/>
               <oldparam id="MOBILE.AUI.CHECK_RETURN" name="CHECK_RETURN" value="Check method return types"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="MOBILE.AUI.CHECK_FIELD_DECLARATION" inputType="checkbox" label="Check fields"/>
               <param defaultValue="true" id="MOBILE.AUI.CHECK_PARAM" inputType="checkbox" label="Check parameters"/>
               <param defaultValue="true" id="MOBILE.AUI.CHECK_LOCAL_DECLARATION" inputType="checkbox" label="Check local variables"/>
               <param defaultValue="true" id="MOBILE.AUI.CHECK_RETURN" inputType="checkbox" label="Check method return types"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.MOBILE.DARRAY" header="Avoid multiple dimension arrays" id="DARRAY" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="Creating arrays that are greater than 1 dimension can be costly."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.MOBILE.AMA" header="Avoid using 'getter' and 'setter' methods" id="AMA" scope="LINE" severity="3" since="9.0">
            <messages>
               <msg index="1" value="setter method ''{0}'' is used."/>
               <msg index="2" value="getter method ''{0}'' is used."/>
            </messages>
         </rule>
      </category>
      <category description="Spring Framework" name="SPRING">
         <rule class="com.parasoft.jtest.standards.rules.builtin.SPRING.ATCFG" header="Follow configuration class conventions" id="ATCFG" scope="LINE" severity="2" since="9.2">
            <messages>
               <msg index="1" value="Configuration class with final modifier."/>
               <msg index="2" value="Configuration class is a local class."/>
               <msg index="3" value="Configuration class have invalid or missing constructor."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SPRING.DCSRFJAVA" header="Do not disable CSRF protection" id="DCSRFJAVA" scope="LINE" severity="2" since="10.4.3">
            <messages>
               <msg index="1" value="CSRF protection is disabled."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SPRING.REQMAP" header="Ensure that methods annotated with @RequestMapping specify the HTTP request method they call" id="REQMAP" scope="LINE" severity="2" since="10.4.3">
            <messages>
               <msg index="1" value="The ''{0}'' method annotated with @RequestMapping does not explicitly specify the HTTP request method it calls"/>
               <msg index="2" value="The ''{0}'' method annotated with @RequestMapping calls more than one HTTP request method."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.SPRING.JDBCTEMPLATE" header="Avoid using native JDBC" id="JDBCTEMPLATE" scope="LINE" severity="3" since="9.2">
            <messages>
               <msg index="1" value="Avoid using native jdbc to open connection."/>
               <msg index="2" value="Avoid using native jdbc to prepare statement."/>
               <msg index="3" value="Avoid using native jdbc to execute statement."/>
               <msg index="4" value="Avoid using native jdbc to close connection."/>
               <msg index="5" value="Avoid using deprecated SimpleJdbcTemplate class."/>
            </messages>
            <oldparameters>
               <oldparam id="SPRING.JDBCTEMPLATE.CHECK_SIMPLE_JDBC_TEMPLATE" name="CHECK_SIMPLE_JDBC_TEMPLATE" value="Avoid using SimpleJdbcTemplate (From Spring Framework 3.0.1 is deprecated)"/>
            </oldparameters>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
            </references>
            <parameters>
               <param defaultValue="true" id="SPRING.JDBCTEMPLATE.CHECK_SIMPLE_JDBC_TEMPLATE" inputType="checkbox" label="Avoid using SimpleJdbcTemplate (From Spring Framework 3.0.1 is deprecated)"/>
            </parameters>
         </rule>
      </category>
      <category description="Global Static Analysis" name="GLOBAL">
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.ACD" header="Ensure that files do not contain cyclical dependencies" id="ACD" scope="LINE" severity="4" type="global">
            <messages>
               <msg index="1" value="The file ''{0}'' contains a cyclical dependency in its imports : {1}"/>
               <msg index="2" value="in {0} {1}:{2}-{3}:{4}"/>
            </messages>
            <parameters>
               <param defaultValue="5" id="GLOBAL.ACD.MAX_DEPTH" inputType="integer" label="Maximum Depth of Cyclical Dependencies to Detect:" min="1" required="true"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.SF" header="Declare non-private fields &quot;final&quot; if they are read-only" id="SF" scope="LINE" severity="3" type="global">
            <messages>
               <msg index="1" value="Field ''{0}'' should be declared &quot;final&quot;."/>
            </messages>
            <oldparameters>
               <oldparam id="GLOBAL.SF.ACCESSIBILITY" name="ACCESSIBILITY" value="Check fields with the following accessibilities:"/>
               <oldparam id="GLOBAL.SF.PUBLIC_FIELD" name="PUBLIC_FIELD" value="public"/>
               <oldparam id="GLOBAL.SF.PROTECTED_FIELD" name="PROTECTED_FIELD" value="protected"/>
               <oldparam id="GLOBAL.SF.PACKAGE_FIELD" name="PACKAGE_FIELD" value="package-private"/>
               <oldparam id="GLOBAL.SF.STATIC_FIELD" name="STATIC_FIELD" value="Check &quot;static&quot; fields only"/>
               <oldparam id="GLOBAL.SF.IGNORE_TYPE_TABLE" name="IGNORE_TYPE_TABLE" value="Ignore the following classes: (specify with Glob expressions)"/>
               <oldparam id="GLOBAL.SF.IGNORE_SUPER_CLASS" name="IGNORE_SUPER_CLASS" value="Superclass"/>
               <oldparam id="GLOBAL.SF.IGNORE_CURRENT_CLASS" name="IGNORE_CURRENT_CLASS" value="Class"/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="GLOBAL.SF.group.0" label="Check fields with the following accessibilities:">
                  <param defaultValue="true" id="GLOBAL.SF.PUBLIC_FIELD" inputType="checkbox" label="public"/>
                  <param defaultValue="true" id="GLOBAL.SF.PROTECTED_FIELD" inputType="checkbox" label="protected"/>
                  <param defaultValue="true" id="GLOBAL.SF.PACKAGE_FIELD" inputType="checkbox" label="package-private"/>
               </group>
               <param defaultValue="false" id="GLOBAL.SF.STATIC_FIELD" inputType="checkbox" label="Check &quot;static&quot; fields only"/>
               <param defaultValue="false" id="GLOBAL.SF.CHECK_UNUSED" inputType="checkbox" label="Check unused fields"/>
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="GLOBAL.SF.IGNORE_TYPE_TABLE" label="Ignore the following classes: (specify with Glob expressions)" reader="SATable">
                  <columns>
                     <column columnType="text" editable="true" id="GLOBAL__SF__IGNORE_TYPE_TABLE__COLUMN1" label="Superclass" required="true"/>
                     <column columnType="text" editable="true" id="GLOBAL__SF__IGNORE_TYPE_TABLE__COLUMN2" label="Class" required="true"/>
                  </columns>
                  <predefinedRows>
                     <row id="1">
                        <column refColumnId="GLOBAL__SF__IGNORE_TYPE_TABLE__COLUMN1" value="org.eclipse.osgi.util.NLS"/>
                        <column refColumnId="GLOBAL__SF__IGNORE_TYPE_TABLE__COLUMN2" value="*"/>
                     </row>
                  </predefinedRows>
               </complexParamTable>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.dpxf.DPAF" header="Declare package-private fields as inaccessible as possible" id="DPAF" scope="LINE" severity="2" type="global">
            <messages>
               <msg index="1" value="Field ''{0}'' should be declared {1}."/>
            </messages>
            <oldparameters>
               <oldparam id="GLOBAL.DPAF.IGNORE_FINAL" name="IGNORE_FINAL" value="Ignore &quot;final&quot; fields"/>
               <oldparam id="GLOBAL.DPAF.IGNORE_ABSTRACT" name="IGNORE_ABSTRACT" value="Ignore fields declared in &quot;abstract&quot; classes"/>
               <oldparam id="GLOBAL.DPAF.IGNORE_TYPE_TABLE" name="IGNORE_TYPE_TABLE" value="Ignore the following classes: (specify with Glob expressions)"/>
               <oldparam id="GLOBAL.DPAF.SUPERCLASS" name="SUPERCLASS" value="Superclass"/>
               <oldparam id="GLOBAL.DPAF.CLASS" name="CLASS" value="Class"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="GLOBAL.DPAF.IGNORE_FINAL" inputType="checkbox" label="Ignore &quot;final&quot; fields"/>
               <param defaultValue="false" id="GLOBAL.DPAF.IGNORE_ABSTRACT" inputType="checkbox" label="Ignore fields declared in &quot;abstract&quot; classes"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.dpxf.DPPF" header="Declare &quot;public/protected&quot; fields as inaccessible as possible" id="DPPF" scope="LINE" severity="4" type="global">
            <messages>
               <msg index="1" value="Field ''{0}'' should be declared {1}."/>
            </messages>
            <oldparameters>
               <oldparam id="GLOBAL.DPPF.IGNORE_FINAL" name="IGNORE_FINAL" value="Ignore &quot;final&quot; fields"/>
               <oldparam id="GLOBAL.DPPF.IGNORE_ABSTRACT" name="IGNORE_ABSTRACT" value="Ignore fields declared in &quot;abstract&quot; classes"/>
               <oldparam id="GLOBAL.DPPF.IGNORE_PROTECTED_PP" name="IGNORE_PROTECTED_PP" value="Ignore &quot;protected&quot; fields which can be made package-private"/>
               <oldparam id="GLOBAL.DPPF.IGNORE_TYPE_TABLE" name="IGNORE_TYPE_TABLE" value="Ignore the following classes: (specify with Glob expressions)"/>
               <oldparam id="GLOBAL.DPPF.SUPERCLASS" name="SUPERCLASS" value="Superclass"/>
               <oldparam id="GLOBAL.DPPF.CLASS" name="CLASS" value="Class"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="GLOBAL.DPPF.IGNORE_FINAL" inputType="checkbox" label="Ignore &quot;final&quot; fields"/>
               <param defaultValue="false" id="GLOBAL.DPPF.IGNORE_PROTECTED_PP" inputType="checkbox" label="Ignore &quot;protected&quot; fields which can be made package-private"/>
               <param defaultValue="false" id="GLOBAL.DPPF.IGNORE_ABSTRACT" inputType="checkbox" label="Ignore fields declared in &quot;abstract&quot; classes"/>
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="GLOBAL.DPPF.IGNORE_TYPE_TABLE" label="Ignore the following classes: (specify with Glob expressions)" reader="SATable">
                  <columns>
                     <column columnType="text" editable="true" id="GLOBAL__DPPF__IGNORE_TYPE_TABLE__COLUMN1" label="Superclass" required="true"/>
                     <column columnType="text" editable="true" id="GLOBAL__DPPF__IGNORE_TYPE_TABLE__COLUMN2" label="Class" required="true"/>
                  </columns>
                  <predefinedRows>
                     <row id="1">
                        <column refColumnId="GLOBAL__DPPF__IGNORE_TYPE_TABLE__COLUMN1" value="org.eclipse.osgi.util.NLS"/>
                        <column refColumnId="GLOBAL__DPPF__IGNORE_TYPE_TABLE__COLUMN2" value="*"/>
                     </row>
                  </predefinedRows>
               </complexParamTable>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.dpxm.DPAM" header="Declare package-private methods as inaccessible as possible" id="DPAM" scope="METHOD" severity="2" type="global">
            <messages>
               <msg index="1" value="Method ''{0}()'' should be declared {1}."/>
               <msg index="2" value="Constructor ''{0}()'' should be declared {1}."/>
            </messages>
            <oldparameters>
               <oldparam id="GLOBAL.DPAM.CHECK_ANONYMOUS" name="CHECK_ANONYMOUS" value="Check methods in anonymous classes"/>
               <oldparam id="GLOBAL.DPAM.CHECK_LOCAL" name="CHECK_LOCAL" value="Check methods in local classes"/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="GLOBAL.DPAM.CHECK_ANONYMOUS" inputType="checkbox" label="Check methods in anonymous classes"/>
               <param defaultValue="false" id="GLOBAL.DPAM.CHECK_LOCAL" inputType="checkbox" label="Check methods in local classes"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.dpxm.DPPM" header="Declare &quot;public/protected&quot; methods as inaccessible as possible" id="DPPM" scope="METHOD" severity="4" type="global">
            <messages>
               <msg index="1" value="Method ''{0}()'' should be declared {1}."/>
               <msg index="2" value="Constructor ''{0}()'' should be declared {1}."/>
            </messages>
            <oldparameters>
               <oldparam id="GLOBAL.DPPM.IGNORE_PROTECTED_PP" name="IGNORE_PROTECTED_PP" value="Ignore &quot;protected&quot; methods which can be made package-private"/>
               <oldparam id="GLOBAL.DPPM.CHECK_ANONYMOUS" name="CHECK_ANONYMOUS" value="Check methods in anonymous classes"/>
               <oldparam id="GLOBAL.DPPM.CHECK_LOCAL" name="CHECK_LOCAL" value="Check methods in local classes"/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" hidden="true" id="GLOBAL.DPPM.IGNORE_OVERLOADED" inputType="checkbox" label="Ignore &quot;overloaded&quot; methods"/>
               <param defaultValue="false" id="GLOBAL.DPPM.IGNORE_PROTECTED_PP" inputType="checkbox" label="Ignore &quot;protected&quot; methods which can be made package-private"/>
               <param defaultValue="false" id="GLOBAL.DPPM.CHECK_ANONYMOUS" inputType="checkbox" label="Check methods in anonymous classes"/>
               <param defaultValue="false" id="GLOBAL.DPPM.CHECK_LOCAL" inputType="checkbox" label="Check methods in local classes"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.ASI" header="Make methods &quot;static&quot; if they do not use instance class members" id="ASI" scope="METHOD" severity="3" since="4.5" type="global">
            <messages>
               <msg index="1" value="Method ''{0}'' is not &quot;static&quot; and uses no instance members."/>
            </messages>
            <oldparameters>
               <oldparam id="GLOBAL.ASI.CHECK_PROTECTED" name="CHECK_PROTECTED" value="protected"/>
               <oldparam id="GLOBAL.ASI.CHECK_PUBLIC" name="CHECK_PUBLIC" value="public"/>
               <oldparam id="GLOBAL.ASI.SCOPE" name="SCOPE" value="Check methods with accessibility:"/>
               <oldparam id="GLOBAL.ASI.CHECK_PACKAGE" name="CHECK_PACKAGE" value="package-private"/>
               <oldparam id="GLOBAL.ASI.CHECK_PRIVATE" name="CHECK_PRIVATE" value="private"/>
               <oldparam id="GLOBAL.ASI.IGNORE_ABSTRACT_CLASS" name="IGNORE_ABSTRACT_CLASS" value="Ignore method declarations within &quot;abstract&quot; classes"/>
               <oldparam id="GLOBAL.ASI.IGNORE_SYNCHRONIZED_METHOD" name="IGNORE_SYNCHRONIZED_METHOD" value="Ignore &quot;synchronized&quot; method declarations"/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="GLOBAL.ASI.group.0" label="Check methods with accessibility:">
                  <param defaultValue="false" id="GLOBAL.ASI.CHECK_PUBLIC" inputType="checkbox" label="public"/>
                  <param defaultValue="false" id="GLOBAL.ASI.CHECK_PROTECTED" inputType="checkbox" label="protected"/>
                  <param defaultValue="true" id="GLOBAL.ASI.CHECK_PACKAGE" inputType="checkbox" label="package-private"/>
                  <param defaultValue="true" id="GLOBAL.ASI.CHECK_PRIVATE" inputType="checkbox" label="private"/>
               </group>
               <param defaultValue="false" id="GLOBAL.ASI.IGNORE_ABSTRACT_CLASS" inputType="checkbox" label="Ignore method declarations within &quot;abstract&quot; classes"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.UEC" header="Avoid globally unused enum constants" id="UEC" scope="LINE" severity="4" since="8.0" type="global">
            <messages>
               <msg index="1" value="Enum constant not directly used: {0}."/>
            </messages>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.AUT" header="Avoid unused &quot;throws&quot; clauses" id="AUT" scope="LINE" severity="2" since="6.0" type="global">
            <messages>
               <msg index="1" value="Exception ''{0}'' is not thrown in the body of method ''{1}''."/>
            </messages>
            <oldparameters>
               <oldparam id="GLOBAL.AUT.IGNORE_OVERRIDING_METHOD" name="IGNORE_OVERRIDING_METHOD" value="Ignore overriding and implementing methods"/>
               <oldparam id="GLOBAL.AUT.IGNORE_THROWS_LIST" name="IGNORE_THROWS_LIST" value="Ignore exception list(in regular expression)"/>
               <oldparam id="GLOBAL.AUT.ALLOW_SUPERTYPES" name="ALLOW_SUPERTYPES" value="Allow exceptions to be declared as thrown if a subtype is thrown"/>
               <oldparam id="GLOBAL.AUT.ALLOW_UNCHECKED" name="ALLOW_UNCHECKED" value="Allow unchecked exceptions to be declared as thrown"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="GLOBAL.AUT.IGNORE_OVERRIDING_METHOD" inputType="checkbox" label="Ignore overriding and implementing methods"/>
               <param defaultValue="true" id="GLOBAL.AUT.ALLOW_SUPERTYPES" inputType="checkbox" label="Allow exceptions to be declared as thrown if a subtype is thrown"/>
               <param defaultValue="false" id="GLOBAL.AUT.ALLOW_UNCHECKED" inputType="checkbox" label="Allow unchecked exceptions to be declared as thrown"/>
               <param defaultValue="" id="GLOBAL.AUT.IGNORE_THROWS_LIST" inputType="stringList" label="Ignore exception list(in regular expression)" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.upxc.UPPC" header="Avoid globally unused &quot;public/protected&quot; types" id="UPPC" scope="CLASS" severity="4" since="4.5" type="global">
            <messages>
               <msg index="1" value="Globally unused {1} class: {0}."/>
               <msg index="2" value="Globally unused {1} interface: {0}."/>
               <msg index="3" value="Globally unused {1} enum: {0}."/>
               <msg index="4" value="Globally unused {1} annotation: {0}."/>
            </messages>
            <oldparameters>
               <oldparam id="GLOBAL.UPPC.SKIP_MAIN" name="SKIP_MAIN" value="Do not report an error for classes with a main method."/>
               <oldparam id="GLOBAL.UPPC.XPATH_TABLE" name="XPATH_TABLE" value="Classes used in XML files"/>
               <oldparam id="GLOBAL.UPPC.DESCRIPTION" name="DESCRIPTION" value="Description"/>
               <oldparam id="GLOBAL.UPPC.FILE_PATTERN" name="FILE_PATTERN" value="File Pattern (Glob Expression)"/>
               <oldparam id="GLOBAL.UPPC.XPATH_EXPRESSION" name="XPATH_EXPRESSION" value="XPath Expression"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="GLOBAL.UPPC.SKIP_MAIN" inputType="checkbox" label="Do not report an error for classes with a main method."/>
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="GLOBAL.UPPC.XPATH_TABLE" label="Classes used in XML files" reader="SATable">
                  <columns>
                     <column columnType="text" editable="true" id="GLOBAL__UPPC__XPATH_TABLE__COLUMN1" label="Description" required="true" textSize="smallPlus"/>
                     <column columnType="text" editable="true" id="GLOBAL__UPPC__XPATH_TABLE__COLUMN2" label="File Pattern (Glob Expression)" required="true" textSize="smallPlus"/>
                     <column columnType="text" editable="true" id="GLOBAL__UPPC__XPATH_TABLE__COLUMN3" label="XPath Expression" required="true"/>
                  </columns>
                  <predefinedRows>
                     <row id="1">
                        <column refColumnId="GLOBAL__UPPC__XPATH_TABLE__COLUMN1" value="Eclipse plug-ins"/>
                        <column refColumnId="GLOBAL__UPPC__XPATH_TABLE__COLUMN2" value="plugin.xml"/>
                        <column refColumnId="GLOBAL__UPPC__XPATH_TABLE__COLUMN3" value="/plugin/extension//@class"/>
                     </row>
                     <row id="2">
                        <column refColumnId="GLOBAL__UPPC__XPATH_TABLE__COLUMN1" value="Servlets"/>
                        <column refColumnId="GLOBAL__UPPC__XPATH_TABLE__COLUMN2" value="web.xml"/>
                        <column refColumnId="GLOBAL__UPPC__XPATH_TABLE__COLUMN3" value="/web-app/servlet/servlet-class/text()"/>
                     </row>
                     <row id="3">
                        <column refColumnId="GLOBAL__UPPC__XPATH_TABLE__COLUMN1" value="Listener"/>
                        <column refColumnId="GLOBAL__UPPC__XPATH_TABLE__COLUMN2" value="web.xml"/>
                        <column refColumnId="GLOBAL__UPPC__XPATH_TABLE__COLUMN3" value="/web-app/listener/listener-class/text()"/>
                     </row>
                  </predefinedRows>
               </complexParamTable>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.upxc.UPAC" header="Avoid globally unused package-private types" id="UPAC" scope="CLASS" severity="2" since="4.5" type="global">
            <messages>
               <msg index="1" value="Globally unused {1} class: {0}."/>
               <msg index="2" value="Globally unused {1} interface: {0}."/>
               <msg index="3" value="Globally unused {1} enum: {0}."/>
               <msg index="4" value="Globally unused {1} annotation: {0}."/>
            </messages>
            <oldparameters>
               <oldparam id="GLOBAL.UPAC.SKIP_MAIN" name="SKIP_MAIN" value="Do not report an error for classes with a main method."/>
               <oldparam id="GLOBAL.UPAC.XPATH_TABLE" name="XPATH_TABLE" value="Classes used in XML files"/>
               <oldparam id="GLOBAL.UPAC.DESCRIPTION" name="DESCRIPTION" value="Description"/>
               <oldparam id="GLOBAL.UPAC.FILE_PATTERN" name="FILE_PATTERN" value="File Pattern (Glob Expression)"/>
               <oldparam id="GLOBAL.UPAC.XPATH_EXPRESSION" name="XPATH_EXPRESSION" value="XPath Expression"/>
            </oldparameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.upxm.UPPM" header="Avoid globally unused &quot;public/protected&quot; methods" id="UPPM" scope="METHOD" severity="4" since="4.5" type="global">
            <messages>
               <msg index="1" value="Globally unused {1} method: {0}()."/>
               <msg index="2" value="Globally unused {1} constructor {0}()."/>
            </messages>
            <oldparameters>
               <oldparam id="GLOBAL.UPPM.IGNORE_MAIN" name="IGNORE_MAIN" value="Ignore &quot;main&quot; method"/>
               <oldparam id="GLOBAL.UPPM.XPATH_TABLE" name="XPATH_TABLE" value="Classes used in XML files"/>
               <oldparam id="GLOBAL.UPPM.DESCRIPTION" name="DESCRIPTION" value="Description"/>
               <oldparam id="GLOBAL.UPPM.FILE_PATTERN" name="FILE_PATTERN" value="File Pattern (Glob Expression)"/>
               <oldparam id="GLOBAL.UPPM.XPATH_EXPRESSION" name="XPATH_EXPRESSION" value="XPath Expression"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="GLOBAL.UPPM.IGNORE_MAIN" inputType="checkbox" label="Ignore &quot;main&quot; method"/>
               <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="GLOBAL.UPPM.XPATH_TABLE" label="Classes used in XML files" reader="SATable">
                  <columns>
                     <column columnType="text" editable="true" id="GLOBAL__UPPM__XPATH_TABLE__COLUMN1" label="Description" required="true"/>
                     <column columnType="text" editable="true" id="GLOBAL__UPPM__XPATH_TABLE__COLUMN2" label="File Pattern (Glob Expression)" required="true" textSize="smallPlus"/>
                     <column columnType="text" editable="true" id="GLOBAL__UPPM__XPATH_TABLE__COLUMN3" label="XPath Expression" required="true" textSize="smallPlus"/>
                  </columns>
               </complexParamTable>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.upxm.UPAM" header="Avoid globally unused package-private methods" id="UPAM" scope="METHOD" severity="2" since="4.5" type="global">
            <messages>
               <msg index="1" value="Globally unused {1} method: {0}()."/>
               <msg index="2" value="Globally unused {1} constructor {0}()."/>
            </messages>
            <oldparameters>
               <oldparam id="GLOBAL.UPAM.IGNORE_MAIN" name="IGNORE_MAIN" value="Ignore &quot;main&quot; method"/>
               <oldparam id="GLOBAL.UPAM.XPATH_TABLE" name="XPATH_TABLE" value="Classes used in XML files"/>
               <oldparam id="GLOBAL.UPAM.DESCRIPTION" name="DESCRIPTION" value="Description"/>
               <oldparam id="GLOBAL.UPAM.FILE_PATTERN" name="FILE_PATTERN" value="File Pattern (Glob Expression)"/>
               <oldparam id="GLOBAL.UPAM.XPATH_EXPRESSION" name="XPATH_EXPRESSION" value="XPath Expression"/>
            </oldparameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.upxf.UPPF" header="Avoid globally unused &quot;public/protected&quot; fields" id="UPPF" scope="LINE" severity="4" since="4.5" type="global">
            <messages>
               <msg index="1" value="Globally unused {1} field: {0}."/>
            </messages>
            <oldparameters>
               <oldparam id="GLOBAL.UPPF.IGNORE_FINAL" name="IGNORE_FINAL" value="Ignore &quot;final&quot; fields"/>
            </oldparameters>
            <references>
               <reference href="http://cwe.mitre.org/data/definitions/563.html" name="CWE"/>
            </references>
            <parameters>
               <param defaultValue="true" id="GLOBAL.UPPF.IGNORE_FINAL" inputType="checkbox" label="Ignore &quot;final&quot; fields"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.upxf.UPAF" header="Avoid globally unused package-private fields" id="UPAF" scope="LINE" severity="2" since="4.5" type="global">
            <messages>
               <msg index="1" value="Globally unused {1} field: {0}."/>
            </messages>
            <oldparameters>
               <oldparam id="GLOBAL.UPAF.IGNORE_FINAL" name="IGNORE_FINAL" value="Ignore &quot;final&quot; fields"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="GLOBAL.UPAF.IGNORE_FINAL" inputType="checkbox" label="Ignore &quot;final&quot; fields"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.NIE" header="Avoid interfaces which are never implemented and &quot;abstract&quot; classes which are never extended." id="NIE" scope="LINE" severity="4" since="8.2" type="global">
            <messages>
               <msg index="1" value="The interface ''{0}'' is never implemented."/>
               <msg index="2" value="The &quot;abstract&quot; class ''{0}'' is never extended."/>
            </messages>
            <oldparameters>
               <oldparam id="GLOBAL.NIE.IGNORE_CONSTANTS" name="IGNORE_CONSTANTS" value="Ignore interfaces which only declare constants"/>
            </oldparameters>
            <parameters>
               <param defaultValue="true" id="GLOBAL.NIE.IGNORE_CONSTANTS" inputType="checkbox" label="Ignore interfaces which only declare constants"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.spxc.SPPC" header="Declare a &quot;public/protected&quot; &quot;class&quot; &quot;final&quot; if it is not subclassed" id="SPPC" scope="CLASS" severity="5" since="4.5" type="global">
            <messages>
               <msg index="1" value="Class ''{0}'' should be declared &quot;final&quot;."/>
               <msg index="2" value="Interface ''{0}'' should be declared &quot;final&quot;."/>
            </messages>
            <oldparameters>
               <oldparam id="GLOBAL.SPPC.CHECK_UNUSED" name="CHECK_UNUSED" value="Check unused classes"/>
            </oldparameters>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
            </references>
            <parameters>
               <param defaultValue="false" id="GLOBAL.SPPC.CHECK_UNUSED" inputType="checkbox" label="Check unused classes"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.spxc.SPAC" header="Declare a package-private &quot;class&quot; &quot;final&quot; if it is not subclassed" id="SPAC" scope="CLASS" severity="2" since="4.5" type="global">
            <messages>
               <msg index="1" value="Class ''{0}'' should be declared &quot;final&quot;."/>
               <msg index="2" value="Interface ''{0}'' should be declared &quot;final&quot;."/>
            </messages>
            <oldparameters>
               <oldparam id="GLOBAL.SPAC.CHECK_UNUSED" name="CHECK_UNUSED" value="Check unused classes"/>
            </oldparameters>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
            </references>
            <parameters>
               <param defaultValue="false" id="GLOBAL.SPAC.CHECK_UNUSED" inputType="checkbox" label="Check unused classes"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.spxm.SPPM" header="Declare a &quot;public/protected&quot; method &quot;final&quot; if it is not overridden" id="SPPM" scope="METHOD" severity="5" since="4.5" type="global">
            <messages>
               <msg index="1" value="Method ''{0}()'' should be declared &quot;final&quot;."/>
            </messages>
            <oldparameters>
               <oldparam id="GLOBAL.SPPM.CHECK_ABSTRACT" name="CHECK_ABSTRACT" value="Check methods in abstract classes"/>
               <oldparam id="GLOBAL.SPPM.CHECK_ANONYMOUS" name="CHECK_ANONYMOUS" value="Check methods in anonymous classes"/>
               <oldparam id="GLOBAL.SPPM.CHECK_LOCAL" name="CHECK_LOCAL" value="Check methods in local classes"/>
               <oldparam id="GLOBAL.SPPM.CHECK_UNUSED" name="CHECK_UNUSED" value="Check unused methods"/>
            </oldparameters>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
            </references>
            <parameters>
               <param defaultValue="false" id="GLOBAL.SPPM.CHECK_ABSTRACT" inputType="checkbox" label="Check methods in abstract classes"/>
               <param defaultValue="false" id="GLOBAL.SPPM.CHECK_ANONYMOUS" inputType="checkbox" label="Check methods in anonymous classes"/>
               <param defaultValue="false" id="GLOBAL.SPPM.CHECK_LOCAL" inputType="checkbox" label="Check methods in local classes"/>
               <param defaultValue="false" id="GLOBAL.SPPM.CHECK_UNUSED" inputType="checkbox" label="Check unused methods"/>
               <param defaultValue="false" id="GLOBAL.SPPM.CHECK_STATIC_METHOD" inputType="checkbox" label="Check static methods"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.spxm.SPAM" header="Declare a package-private method &quot;final&quot; if it is not overridden" id="SPAM" scope="METHOD" severity="2" since="4.5" type="global">
            <messages>
               <msg index="1" value="Method ''{0}()'' should be declared &quot;final&quot;."/>
            </messages>
            <oldparameters>
               <oldparam id="GLOBAL.SPAM.CHECK_ABSTRACT" name="CHECK_ABSTRACT" value="Check methods in abstract classes"/>
               <oldparam id="GLOBAL.SPAM.CHECK_ANONYMOUS" name="CHECK_ANONYMOUS" value="Check methods in anonymous classes"/>
               <oldparam id="GLOBAL.SPAM.CHECK_LOCAL" name="CHECK_LOCAL" value="Check methods in local classes"/>
               <oldparam id="GLOBAL.SPAM.CHECK_UNUSED" name="CHECK_UNUSED" value="Check unused methods"/>
               <oldparam id="GLOBAL.SPAM.CHECK_STATIC_METHOD" name="CHECK_STATIC_METHOD" value="Check static methods"/>
            </oldparameters>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
            </references>
            <parameters>
               <param defaultValue="false" id="GLOBAL.SPAM.CHECK_ABSTRACT" inputType="checkbox" label="Check methods in abstract classes"/>
               <param defaultValue="false" id="GLOBAL.SPAM.CHECK_ANONYMOUS" inputType="checkbox" label="Check methods in anonymous classes"/>
               <param defaultValue="false" id="GLOBAL.SPAM.CHECK_LOCAL" inputType="checkbox" label="Check methods in local classes"/>
               <param defaultValue="false" id="GLOBAL.SPAM.CHECK_UNUSED" inputType="checkbox" label="Check unused methods"/>
               <param defaultValue="false" id="GLOBAL.SPAM.CHECK_STATIC_METHOD" inputType="checkbox" label="Check static methods"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.UCC" header="Ensure correct constructor declarations in utility classes" id="UCC" scope="METHOD" severity="2" since="8.2" type="global">
            <messages>
               <msg index="1" value="Utility class ''{0}'' has non-&quot;private&quot; constructor."/>
               <msg index="2" value="Utility class ''{0}'' does not have a &quot;private&quot; constructor."/>
            </messages>
            <oldparameters>
               <oldparam id="GLOBAL.UCC.PUBLIC" name="PUBLIC" value="Must be &quot;public&quot;"/>
               <oldparam id="GLOBAL.UCC.ABSTRACT" name="ABSTRACT" value="Must not be &quot;abstract&quot;"/>
               <oldparam id="GLOBAL.UCC.SUPERCLASS" name="SUPERCLASS" value="Must not have a superclass other than &quot;java.lang.Object&quot;"/>
               <oldparam id="GLOBAL.UCC.NON_PRIVATE_METH" name="NON_PRIVATE_METH" value="Must have at least one non-&quot;private&quot; method other than the 'main()' method"/>
               <oldparam id="GLOBAL.UCC.INNER_TYPE" name="INNER_TYPE" value="Must not declare any inner types"/>
               <oldparam id="GLOBAL.UCC.CONSTRUCTOR_NEVER_CALLED" name="CONSTRUCTOR_NEVER_CALLED" value="Constructor(s) must never be called (requires global analysis)"/>
               <oldparam id="GLOBAL.UCC.NO_SUBCLASSES" name="NO_SUBCLASSES" value="Must not have any subclasses (requires global analysis)"/>
               <oldparam id="GLOBAL.UCC.REQUIREMENTS_UTILITY_CLASS" name="REQUIREMENTS_UTILITY_CLASS" value="Requirements for a Utility Class"/>
            </oldparameters>
            <parameters>
               <group collapsible="false" id="GLOBAL.UCC.group.0" label="Requirements for a Utility Class">
                  <param defaultValue="true" id="GLOBAL.UCC.PUBLIC" inputType="checkbox" label="Must be &quot;public&quot;"/>
                  <param defaultValue="true" id="GLOBAL.UCC.ABSTRACT" inputType="checkbox" label="Must not be &quot;abstract&quot;"/>
                  <param defaultValue="true" id="GLOBAL.UCC.SUPERCLASS" inputType="checkbox" label="Must not have a superclass other than &quot;java.lang.Object&quot;"/>
                  <param defaultValue="true" id="GLOBAL.UCC.NON_PRIVATE_METH" inputType="checkbox" label="Must have at least one non-&quot;private&quot; method other than the 'main()' method"/>
                  <param defaultValue="true" id="GLOBAL.UCC.INNER_TYPE" inputType="checkbox" label="Must not declare any inner types"/>
                  <param defaultValue="true" id="GLOBAL.UCC.NO_SUBCLASSES" inputType="checkbox" label="Must not have any subclasses (requires global analysis)"/>
                  <param defaultValue="true" id="GLOBAL.UCC.CONSTRUCTOR_NEVER_CALLED" inputType="checkbox" label="Constructor(s) must never be called (requires global analysis)"/>
               </group>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.dpxc.DPPC" header="Declare &quot;public/protected&quot; types as inaccessible as possible" id="DPPC" scope="CLASS" severity="4" since="4.5" type="global">
            <messages>
               <msg index="1" value="Class ''{0}'' should be declared {1}."/>
               <msg index="2" value="Interface ''{0}'' should be declared {1}."/>
               <msg index="3" value="Enum ''{0}'' should be declared {1}."/>
               <msg index="4" value="Annotation ''{0}'' should be declared {1}."/>
            </messages>
            <oldparameters>
               <oldparam id="GLOBAL.DPPC.IGNORE_PROTECTED_PP" name="IGNORE_PROTECTED_PP" value="Ignore &quot;protected&quot; types which can be made package-private"/>
               <oldparam id="GLOBAL.DPPC.ALLOW_PRIVATE_INNER" name="ALLOW_PRIVATE_INNER" value="Allow inner types to be declared &quot;private&quot;"/>
               <oldparam id="GLOBAL.DPPC.IGNORE_CLASSES" name="IGNORE_CLASSES" value="Ignore the classes that correspond to these qualified names"/>
            </oldparameters>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
            </references>
            <parameters>
               <param defaultValue="false" id="GLOBAL.DPPC.IGNORE_PROTECTED_PP" inputType="checkbox" label="Ignore &quot;protected&quot; types which can be made package-private"/>
               <param defaultValue="true" id="GLOBAL.DPPC.ALLOW_PRIVATE_INNER" inputType="checkbox" label="Allow inner types to be declared &quot;private&quot;"/>
               <param defaultValue="android.app.Activity;android.app.Service;android.content.ContentProvider;android.app.Application" id="GLOBAL.DPPC.IGNORE_CLASSES" inputType="stringList" label="Ignore the classes that correspond to these qualified names" prevType="StringList"/>
            </parameters>
         </rule>
         <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.dpxc.DPAC" header="Declare &quot;package-private&quot; types as inaccessible as possible" id="DPAC" scope="CLASS" severity="4" since="4.5" type="global">
            <messages>
               <msg index="1" value="Class ''{0}'' should be declared {1}."/>
               <msg index="2" value="Interface ''{0}'' should be declared {1}."/>
               <msg index="3" value="Enum ''{0}'' should be declared {1}."/>
               <msg index="4" value="Annotation ''{0}'' should be declared {1}."/>
            </messages>
            <oldparameters>
               <oldparam id="GLOBAL.DPAC.ALLOW_PRIVATE_INNER" name="ALLOW_PRIVATE_INNER" value="Allow inner types to be declared &quot;private&quot;"/>
               <oldparam id="GLOBAL.DPAC.IGNORE_CLASSES" name="IGNORE_CLASSES" value="Ignore the classes that correspond to these qualified names"/>
            </oldparameters>
            <parameters>
               <param defaultValue="false" id="GLOBAL.DPAC.IGNORE_PROTECTED_PP" inputType="checkbox" label="Ignore &quot;protected&quot; types which can be made package-private"/>
               <param defaultValue="true" id="GLOBAL.DPAC.ALLOW_PRIVATE_INNER" inputType="checkbox" label="Allow inner types to be declared &quot;private&quot;"/>
               <param defaultValue="android.app.Activity;android.app.Service;android.content.ContentProvider;android.app.Application" id="GLOBAL.DPAC.IGNORE_CLASSES" inputType="stringList" label="Ignore the classes that correspond to these qualified names" prevType="StringList"/>
            </parameters>
            <references>
               <reference href="" name="OWASP-CODEREVIEW-1.1"/>
            </references>
         </rule>
      </category>
      <category description="DISA ASD STIG" name="APSC_DV">
         <category description="APSC_DV.003215 The application development team must follow a set of coding standards." name="003215">
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.UP" header="Avoid unnecessary parentheses" id="UP" originalId="FORMAT.UP" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Avoid unnecessary parentheses."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.UP.INLINE_CONDITIONAL" name="INLINE_CONDITIONAL" value="Check inline conditional expressions"/>
                    <oldparam id="APSC_DV.003215.UP.NESTED_OPERATION" name="NESTED_OPERATION" value="Check nested operations"/>
                    <oldparam id="APSC_DV.003215.UP.ORDER_OF_OPERATION" name="ORDER_OF_OPERATION" value="Check order of operation in expressions"/>
                    <oldparam id="APSC_DV.003215.UP.CHECK_SCOPE" name="CHECK_SCOPE" value="Scope of checking:"/>
                    <oldparam id="APSC_DV.003215.UP.ALL" name="ALL" value="All statements"/>
                    <oldparam id="APSC_DV.003215.UP.RETURN_ONLY" name="RETURN_ONLY" value="Only return statements"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="false" id="APSC_DV.003215.UP.INLINE_CONDITIONAL" inputType="checkbox" label="Check inline conditional expressions"/>
                    <param defaultValue="true" id="APSC_DV.003215.UP.NESTED_OPERATION" inputType="checkbox" label="Check nested operations"/>
                    <param defaultValue="false" id="APSC_DV.003215.UP.ORDER_OF_OPERATION" inputType="checkbox" label="Check order of operation in expressions"/>
                    <radioGroup id="APSC_DV.003215.UP.CHECK_SCOPE" label="Scope of checking:" prevType="MultipleChoice" showLabel="true">
                        <radioItem label="Only return statements" value="0"/>
                        <radioItem defaultValue="checked" label="All statements" value="1"/>
                    </radioGroup>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.TC" header="Avoid using trailing comments." id="TC" originalId="FORMAT.TC" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Do not use trailing comments."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.TE" header="Use the preferred formatting for conditional expressions" id="TE" originalId="FORMAT.TE" scope="LINE" severity="3" since="5.0">
                <messages>
                    <msg index="1" value="Invalid conditional expression format."/>
                    <msg index="2" value="The condition in this conditional expression is not parenthesized."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.TE.FORMAT_TWO" name="FORMAT_TWO" value="expression1 ? expression2\n                     : expression3"/>
                    <oldparam id="APSC_DV.003215.TE.FORMAT_ONE" name="FORMAT_ONE" value="expression1 ? expression2 : expression3"/>
                    <oldparam id="APSC_DV.003215.TE.ENFORCED_FORMAT" name="ENFORCED_FORMAT" value="Enforced formats for conditional expressions"/>
                    <oldparam id="APSC_DV.003215.TE.FORMAT_THREE" name="FORMAT_THREE" value="expression1\n? expression2\n: expression3"/>
                    <oldparam id="APSC_DV.003215.TE.PARENTHESIZE" name="PARENTHESIZE" value="The condition must be parenthesized"/>
                </oldparameters>
                <parameters>
                    <group collapsible="false" id="APSC_DV.003215.TE.group.0" label="Enforced formats for conditional expressions">
                        <param defaultValue="true" id="APSC_DV.003215.TE.FORMAT_ONE" inputType="checkbox" label="expression1 ? expression2 : expression3"/>
                        <param defaultValue="true" id="APSC_DV.003215.TE.FORMAT_TWO" inputType="checkbox" label="expression1 ? expression2\n: expression3"/>
                        <param defaultValue="true" id="APSC_DV.003215.TE.FORMAT_THREE" inputType="checkbox" label="expression1\n? expression2\n: expression3"/>
                    </group>
                    <param defaultValue="false" id="APSC_DV.003215.TE.PARENTHESIZE" inputType="checkbox" label="The condition must be parenthesized"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SAC" header="Enforce number of space character(s) after every comma" id="SAC" originalId="FORMAT.SAC" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Comma not followed by {0} space."/>
                    <msg index="2" value="Comma not followed by {0} spaces."/>
                    <msg index="3" value="Comma preceded by a space character."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.SAC.SYMBOL_SPACE" name="SYMBOL_SPACE" value="Number of spaces"/>
                    <oldparam id="APSC_DV.003215.SAC.NO_SPACE_BEFORE" name="NO_SPACE_BEFORE" value="Commas must not be preceded by a space."/>
                </oldparameters>
                <parameters>
                    <param defaultValue="1" id="APSC_DV.003215.SAC.SYMBOL_SPACE" inputType="integer" label="Number of spaces" min="0"/>
                    <param defaultValue="false" id="APSC_DV.003215.SAC.NO_SPACE_BEFORE" inputType="checkbox" label="Commas must not be preceded by a space."/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SAS" header="Enforce number of space character(s) after every semicolon" id="SAS" originalId="FORMAT.SAS" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Semicolon not followed by {0} space."/>
                    <msg index="2" value="Semicolon not followed by {0} spaces."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.SAS.IGNORE_EMPTY_ITER" name="IGNORE_EMPTY_ITER" value="Ignore rule for the special case &quot;for(;;)&quot;."/>
                    <oldparam id="APSC_DV.003215.SAS.SYMBOL_SPACE" name="SYMBOL_SPACE" value="Number of spaces"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="1" id="APSC_DV.003215.SAS.SYMBOL_SPACE" inputType="integer" label="Number of spaces" min="0"/>
                    <param defaultValue="true" id="APSC_DV.003215.SAS.IGNORE_EMPTY_ITER" inputType="checkbox" label="Ignore rule for the special case &quot;for(;;)&quot;."/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SAP" header="Enforce number of space character(s) after the opening parenthesis &quot;(&quot; of a conditional statement" id="SAP" originalId="FORMAT.SAP" scope="LINE" severity="3" since="7.5">
                <messages>
                    <msg index="1" value="Parenthesis not followed by {0} space."/>
                    <msg index="2" value="Parenthesis not followed by {0} spaces."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.SAP.IGNORE_EMPTY_ITER" name="IGNORE_EMPTY_ITER" value="Ignore rule for the special case &quot;for(;;)&quot;."/>
                    <oldparam id="APSC_DV.003215.SAP.SYMBOL_SPACE" name="SYMBOL_SPACE" value="Number of spaces"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="1" id="APSC_DV.003215.SAP.SYMBOL_SPACE" inputType="integer" label="Number of spaces" min="0"/>
                    <param defaultValue="true" id="APSC_DV.003215.SAP.IGNORE_EMPTY_ITER" inputType="checkbox" label="Ignore rule for the special case &quot;for(;;)&quot;."/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SC" header="Enforce number of space character(s) between a conditional statement and the opening &quot;(&quot; parenthesis" id="SC" originalId="FORMAT.SC" scope="LINE" severity="3" since="8.0">
                <messages>
                    <msg index="1" value="Conditional statement does not have {0} space after &quot;{1}&quot;."/>
                    <msg index="2" value="Conditional statement does not have {0} spaces after &quot;{1}&quot;."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.SC.SPACE_BEFORE" name="SPACE_BEFORE" value="Number of spaces"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="1" id="APSC_DV.003215.SC.SPACE_BEFORE" inputType="integer" label="Number of spaces" min="0"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SLOP" header="Enforce number of space character(s) on each side of a logical operator" id="SLOP" originalId="FORMAT.SLOP" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="There is not {1} space after ''{0}''."/>
                    <msg index="2" value="There is not {1} spaces after ''{0}''."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.SLOP.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
                    <oldparam id="APSC_DV.003215.SLOP.SYMBOL_SPACE_AFTER" name="SYMBOL_SPACE_AFTER" value="Number of spaces after"/>
                    <oldparam id="APSC_DV.003215.SLOP.SYMBOL_SPACE_BEFORE" name="SYMBOL_SPACE_BEFORE" value="Number of spaces before"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="1" id="APSC_DV.003215.SLOP.SYMBOL_SPACE_BEFORE" inputType="integer" label="Number of spaces before" min="0"/>
                    <param defaultValue="1" id="APSC_DV.003215.SLOP.SYMBOL_SPACE_AFTER" inputType="integer" label="Number of spaces after" min="0"/>
                    <param defaultValue="false" hidden="true" id="APSC_DV.003215.SLOP.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.FCB" header="Enforce the position of '{' brace" id="FCB" originalId="FORMAT.FCB" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Opening brace '''{''' is not on the same line as the {0}."/>
                    <msg index="2" value="Opening brace '''{''' is not on the line following the {0} or is not indented exactly the same."/>
                    <msg index="3" value="Opening brace '''{''' is not on the line following the {0} or does not have exactly one extra level of indentation."/>
                    <msg index="4" value="Opening brace '''{''' does not follow coding convention.  It is not on the same line or the line following the {0} or does not have exactly one extra level of indentation."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.FCB.SAME_LINE" name="SAME_LINE" value="Same line"/>
                    <oldparam id="APSC_DV.003215.FCB.ELSE" name="ELSE" value="&quot;else&quot; statement"/>
                    <oldparam id="APSC_DV.003215.FCB.FINALLY" name="FINALLY" value="&quot;finally&quot; block"/>
                    <oldparam id="APSC_DV.003215.FCB.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
                    <oldparam id="APSC_DV.003215.FCB.WHILE" name="WHILE" value="&quot;while&quot; statement"/>
                    <oldparam id="APSC_DV.003215.FCB.CLASS_DECL" name="CLASS_DECL" value="Class declaration"/>
                    <oldparam id="APSC_DV.003215.FCB.ANNOTATION_DECL" name="ANNOTATION_DECL" value="Annotation type declaration"/>
                    <oldparam id="APSC_DV.003215.FCB.IGNORE_IF_OPEN_AND_CLOSE_ON_SAME_LINE" name="IGNORE_IF_OPEN_AND_CLOSE_ON_SAME_LINE" value="Open and close braces on the same line are not considered a violation"/>
                    <oldparam id="APSC_DV.003215.FCB.SWITCH" name="SWITCH" value="&quot;switch&quot; statement"/>
                    <oldparam id="APSC_DV.003215.FCB.IF" name="IF" value="&quot;if&quot; statement"/>
                    <oldparam id="APSC_DV.003215.FCB.NEXT_LINE" name="NEXT_LINE" value="Next line"/>
                    <oldparam id="APSC_DV.003215.FCB.NEXT_LINE_ON_WRAP" name="NEXT_LINE_ON_WRAP" value="Next line on wrap"/>
                    <oldparam id="APSC_DV.003215.FCB.IGNORE" name="IGNORE" value="Ignore"/>
                    <oldparam id="APSC_DV.003215.FCB.DO" name="DO" value="&quot;do-while&quot; statement"/>
                    <oldparam id="APSC_DV.003215.FCB.TRY" name="TRY" value="&quot;try&quot; statement"/>
                    <oldparam id="APSC_DV.003215.FCB.IGNORE_IF_COMMENT_ABOVE_BRACE" name="IGNORE_IF_COMMENT_ABOVE_BRACE" value="Braces preceded by comments are not considered a violation"/>
                    <oldparam id="APSC_DV.003215.FCB.ENUM_DECL" name="ENUM_DECL" value="Enum declaration"/>
                    <oldparam id="APSC_DV.003215.FCB.CONSTRUCTOR_DECL" name="CONSTRUCTOR_DECL" value="Constructor declaration"/>
                    <oldparam id="APSC_DV.003215.FCB.ENUM_CONSTANT" name="ENUM_CONSTANT" value="Enum constant body "/>
                    <oldparam id="APSC_DV.003215.FCB.STATIC_INIT" name="STATIC_INIT" value="Static initializer"/>
                    <oldparam id="APSC_DV.003215.FCB.CATCH" name="CATCH" value="&quot;catch&quot; clause"/>
                    <oldparam id="APSC_DV.003215.FCB.NEXT_LINE_INDENT" name="NEXT_LINE_INDENT" value="Next line indented"/>
                    <oldparam id="APSC_DV.003215.FCB.BLOCK_IN_CASE" name="BLOCK_IN_CASE" value="Block in  &quot;switch-case&quot;"/>
                    <oldparam id="APSC_DV.003215.FCB.METHOD_DECL" name="METHOD_DECL" value="Method declaration"/>
                    <oldparam id="APSC_DV.003215.FCB.FOR" name="FOR" value="&quot;for&quot; statement"/>
                    <oldparam id="APSC_DV.003215.FCB.ARRAY" name="ARRAY" value="Array initializer"/>
                    <oldparam id="APSC_DV.003215.FCB.BLOCK" name="BLOCK" value="Block"/>
                    <oldparam id="APSC_DV.003215.FCB.ANONY_DECL" name="ANONY_DECL" value="Anonymous class declaration"/>
                    <oldparam id="APSC_DV.003215.FCB.SYNC_STATEMENT" name="SYNC_STATEMENT" value="&quot;synchronized&quot; statement"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="true" id="APSC_DV.003215.FCB.IGNORE_IF_COMMENT_ABOVE_BRACE" inputType="checkbox" label="Braces preceded by comments are not considered a violation"/>
                    <param defaultValue="true" id="APSC_DV.003215.FCB.IGNORE_IF_OPEN_AND_CLOSE_ON_SAME_LINE" inputType="checkbox" label="Open and close braces on the same line are not considered a violation"/>
                    <radioGroup id="APSC_DV.003215.FCB.CLASS_DECL" label="Class declaration" prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Same line" value="0"/>
                        <radioItem label="Next line" value="1"/>
                        <radioItem label="Next line indented" value="2"/>
                        <radioItem label="Next line on wrap" value="3"/>
                        <radioItem label="Ignore" value="4"/>
                    </radioGroup>
                    <radioGroup id="APSC_DV.003215.FCB.ANONY_DECL" label="Anonymous class declaration" prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Same line" value="0"/>
                        <radioItem label="Next line" value="1"/>
                        <radioItem label="Next line indented" value="2"/>
                        <radioItem label="Next line on wrap" value="3"/>
                        <radioItem label="Ignore" value="4"/>
                    </radioGroup>
                    <radioGroup id="APSC_DV.003215.FCB.CONSTRUCTOR_DECL" label="Constructor declaration" prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Same line" value="0"/>
                        <radioItem label="Next line" value="1"/>
                        <radioItem label="Next line indented" value="2"/>
                        <radioItem label="Next line on wrap" value="3"/>
                        <radioItem label="Ignore" value="4"/>
                    </radioGroup>
                    <radioGroup id="APSC_DV.003215.FCB.ENUM_DECL" label="Enum declaration" prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Same line" value="0"/>
                        <radioItem label="Next line" value="1"/>
                        <radioItem label="Next line indented" value="2"/>
                        <radioItem label="Next line on wrap" value="3"/>
                        <radioItem label="Ignore" value="4"/>
                    </radioGroup>
                    <radioGroup id="APSC_DV.003215.FCB.ENUM_CONSTANT" label="Enum constant body " prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Same line" value="0"/>
                        <radioItem label="Next line" value="1"/>
                        <radioItem label="Next line indented" value="2"/>
                        <radioItem label="Next line on wrap" value="3"/>
                        <radioItem label="Ignore" value="4"/>
                    </radioGroup>
                    <radioGroup id="APSC_DV.003215.FCB.ANNOTATION_DECL" label="Annotation type declaration" prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Same line" value="0"/>
                        <radioItem label="Next line" value="1"/>
                        <radioItem label="Next line indented" value="2"/>
                        <radioItem label="Next line on wrap" value="3"/>
                        <radioItem label="Ignore" value="4"/>
                    </radioGroup>
                    <radioGroup id="APSC_DV.003215.FCB.METHOD_DECL" label="Method declaration" prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Same line" value="0"/>
                        <radioItem label="Next line" value="1"/>
                        <radioItem label="Next line indented" value="2"/>
                        <radioItem label="Next line on wrap" value="3"/>
                        <radioItem label="Ignore" value="4"/>
                    </radioGroup>
                    <radioGroup id="APSC_DV.003215.FCB.STATIC_INIT" label="Static initializer" prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Same line" value="0"/>
                        <radioItem label="Next line" value="1"/>
                        <radioItem label="Next line indented" value="2"/>
                        <radioItem label="Next line on wrap" value="3"/>
                        <radioItem label="Ignore" value="4"/>
                    </radioGroup>
                    <radioGroup id="APSC_DV.003215.FCB.ARRAY" label="Array initializer" prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Same line" value="0"/>
                        <radioItem label="Next line" value="1"/>
                        <radioItem label="Next line indented" value="2"/>
                        <radioItem label="Next line on wrap" value="3"/>
                        <radioItem label="Ignore" value="4"/>
                    </radioGroup>
                    <radioGroup id="APSC_DV.003215.FCB.BLOCK" label="Block" prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Same line" value="0"/>
                        <radioItem label="Next line" value="1"/>
                        <radioItem label="Next line indented" value="2"/>
                        <radioItem label="Next line on wrap" value="3"/>
                        <radioItem label="Ignore" value="4"/>
                    </radioGroup>
                    <radioGroup id="APSC_DV.003215.FCB.IF" label="&quot;if&quot; statement" prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Same line" value="0"/>
                        <radioItem label="Next line" value="1"/>
                        <radioItem label="Next line indented" value="2"/>
                        <radioItem label="Next line on wrap" value="3"/>
                        <radioItem label="Ignore" value="4"/>
                    </radioGroup>
                    <radioGroup id="APSC_DV.003215.FCB.ELSE" label="&quot;else&quot; statement" prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Same line" value="0"/>
                        <radioItem label="Next line" value="1"/>
                        <radioItem label="Next line indented" value="2"/>
                        <radioItem label="Next line on wrap" value="3"/>
                        <radioItem label="Ignore" value="4"/>
                    </radioGroup>
                    <radioGroup id="APSC_DV.003215.FCB.FOR" label="&quot;for&quot; statement" prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Same line" value="0"/>
                        <radioItem label="Next line" value="1"/>
                        <radioItem label="Next line indented" value="2"/>
                        <radioItem label="Next line on wrap" value="3"/>
                        <radioItem label="Ignore" value="4"/>
                    </radioGroup>
                    <radioGroup id="APSC_DV.003215.FCB.WHILE" label="&quot;while&quot; statement" prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Same line" value="0"/>
                        <radioItem label="Next line" value="1"/>
                        <radioItem label="Next line indented" value="2"/>
                        <radioItem label="Next line on wrap" value="3"/>
                        <radioItem label="Ignore" value="4"/>
                    </radioGroup>
                    <radioGroup id="APSC_DV.003215.FCB.DO" label="&quot;do-while&quot; statement" prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Same line" value="0"/>
                        <radioItem label="Next line" value="1"/>
                        <radioItem label="Next line indented" value="2"/>
                        <radioItem label="Next line on wrap" value="3"/>
                        <radioItem label="Ignore" value="4"/>
                    </radioGroup>
                    <radioGroup id="APSC_DV.003215.FCB.TRY" label="&quot;try&quot; statement" prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Same line" value="0"/>
                        <radioItem label="Next line" value="1"/>
                        <radioItem label="Next line indented" value="2"/>
                        <radioItem label="Next line on wrap" value="3"/>
                        <radioItem label="Ignore" value="4"/>
                    </radioGroup>
                    <radioGroup id="APSC_DV.003215.FCB.SYNC_STATEMENT" label="&quot;synchronized&quot; statement" prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Same line" value="0"/>
                        <radioItem label="Next line" value="1"/>
                        <radioItem label="Next line indented" value="2"/>
                        <radioItem label="Next line on wrap" value="3"/>
                        <radioItem label="Ignore" value="4"/>
                    </radioGroup>
                    <radioGroup id="APSC_DV.003215.FCB.CATCH" label="&quot;catch&quot; clause" prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Same line" value="0"/>
                        <radioItem label="Next line" value="1"/>
                        <radioItem label="Next line indented" value="2"/>
                        <radioItem label="Next line on wrap" value="3"/>
                        <radioItem label="Ignore" value="4"/>
                    </radioGroup>
                    <radioGroup id="APSC_DV.003215.FCB.FINALLY" label="&quot;finally&quot; block" prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Same line" value="0"/>
                        <radioItem label="Next line" value="1"/>
                        <radioItem label="Next line indented" value="2"/>
                        <radioItem label="Next line on wrap" value="3"/>
                        <radioItem label="Ignore" value="4"/>
                    </radioGroup>
                    <radioGroup id="APSC_DV.003215.FCB.SWITCH" label="&quot;switch&quot; statement" prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Same line" value="0"/>
                        <radioItem label="Next line" value="1"/>
                        <radioItem label="Next line indented" value="2"/>
                        <radioItem label="Next line on wrap" value="3"/>
                        <radioItem label="Ignore" value="4"/>
                    </radioGroup>
                    <radioGroup id="APSC_DV.003215.FCB.BLOCK_IN_CASE" label="Block in  &quot;switch-case&quot;" prevType="ComboBox" showLabel="true">
                        <radioItem defaultValue="checked" label="Same line" value="0"/>
                        <radioItem label="Next line" value="1"/>
                        <radioItem label="Next line indented" value="2"/>
                        <radioItem label="Next line on wrap" value="3"/>
                        <radioItem label="Ignore" value="4"/>
                    </radioGroup>
                    <param defaultValue="false" hidden="true" id="APSC_DV.003215.FCB.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.FCN" header="Place the type that has the same name as the file as the first type." id="FCN" originalId="FORMAT.FCN" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="The type has the same name as the file should be the first type."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.ASPACE" header="Ensure proper spacing in array references" id="ASPACE" originalId="FORMAT.ASPACE" scope="LINE" severity="3" since="9.0">
                <messages>
                    <msg index="1" value="Use correct spacing for array references."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.ASPACE.Number of Spaces" name="Number of Spaces" value="Number of spaces before open bracket"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="0" id="APSC_DV.003215.ASPACE.Number of Spaces" inputType="integer" label="Number of spaces before open bracket" min="0"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.APAREN" header="Use '()' to separate complex expressions" id="APAREN" originalId="FORMAT.APAREN" scope="LINE" severity="3" since="5.0">
                <messages>
                    <msg index="1" value="Missing '()' to separate complex expression."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.OSPL" header="Write one statement per line" id="OSPL" originalId="FORMAT.OSPL" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Multiple statements on one line."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.ATS" header="Do not place empty whitespace at the end of a line" id="ATS" originalId="FORMAT.ATS" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Avoid trailing spaces."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.ATS.FLAG_EMPTY_LINE_WITH_SPACE" name="FLAG_EMPTY_LINE_WITH_SPACE" value="Flag empty line containing extra whitespaces"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="false" id="APSC_DV.003215.ATS.FLAG_EMPTY_LINE_WITH_SPACE" inputType="checkbox" label="Flag empty line containing extra whitespaces"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SBOP" header="Enforce number of space character(s) on each side of a bitwise operator" id="SBOP" originalId="FORMAT.SBOP" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="There is not {1} space after ''{0}''."/>
                    <msg index="2" value="There is not {1} spaces after ''{0}''."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.SBOP.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
                    <oldparam id="APSC_DV.003215.SBOP.SYMBOL_SPACE_AFTER" name="SYMBOL_SPACE_AFTER" value="Number of spaces after"/>
                    <oldparam id="APSC_DV.003215.SBOP.SYMBOL_SPACE_BEFORE" name="SYMBOL_SPACE_BEFORE" value="Number of spaces before"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="1" id="APSC_DV.003215.SBOP.SYMBOL_SPACE_BEFORE" inputType="integer" label="Number of spaces before" min="0"/>
                    <param defaultValue="1" id="APSC_DV.003215.SBOP.SYMBOL_SPACE_AFTER" inputType="integer" label="Number of spaces after" min="0"/>
                    <param defaultValue="false" hidden="true" id="APSC_DV.003215.SBOP.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SAUOP" header="Enforce number of space character(s) between a prefixed unary operator and its operand" id="SAUOP" originalId="FORMAT.SAUOP" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="There is not {0} space after unary operator ''{1}''."/>
                    <msg index="2" value="There is not {0} spaces after unary operator ''{1}''."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.SAUOP.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
                    <oldparam id="APSC_DV.003215.SAUOP.SYMBOL_SPACE_AFTER" name="SYMBOL_SPACE_AFTER" value="Number of spaces after"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="0" id="APSC_DV.003215.SAUOP.SYMBOL_SPACE_AFTER" inputType="integer" label="Number of spaces after" min="0"/>
                    <param defaultValue="false" hidden="true" id="APSC_DV.003215.SAUOP.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.TNL" header="Make sure all files are terminated with a newline character." id="TNL" originalId="FORMAT.TNL" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="File should be terminated by a newline character."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.CMS" header="Place a single space character or no space character after type casting" id="CMS" originalId="FORMAT.CMS" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="There is not one single space after type cast."/>
                    <msg index="2" value="There is an extra space after type cast."/>
                    <msg index="3" value="There are extra spaces after type cast."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.CMS.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
                    <oldparam id="APSC_DV.003215.CMS.ONE_CAST_SPACE" name="ONE_CAST_SPACE" value="one space"/>
                    <oldparam id="APSC_DV.003215.CMS.CAST_SPACE" name="CAST_SPACE" value="Check option"/>
                    <oldparam id="APSC_DV.003215.CMS.NO_CAST_SPACE" name="NO_CAST_SPACE" value="no space"/>
                </oldparameters>
                <parameters>
                    <radioGroup id="APSC_DV.003215.CMS.CAST_SPACE" label="Check option" prevType="MultipleChoice" showLabel="true">
                        <radioItem defaultValue="checked" label="one space" value="0"/>
                        <radioItem label="no space" value="1"/>
                    </radioGroup>
                    <param defaultValue="false" hidden="true" id="APSC_DV.003215.CMS.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.BLSIM" header="Enforce number of blank line(s) to separate &quot;imports&quot; from different packages" id="BLSIM" originalId="FORMAT.BLSIM" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="&quot;import {0}&quot; not separated by {1} blank line from previous &quot;import&quot; from a different package."/>
                    <msg index="2" value="&quot;import {0}&quot; not separated by {1} blank lines from previous &quot;import&quot; from a different package."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.BLSIM.BLANK_LINE" name="BLANK_LINE" value="Number of blank lines"/>
                    <oldparam id="APSC_DV.003215.BLSIM.IGNORE_SUBPACKAGE" name="IGNORE_SUBPACKAGE" value="Ignore adjacent imports if they are from subpackages of the same package"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="1" id="APSC_DV.003215.BLSIM.BLANK_LINE" inputType="integer" label="Number of blank lines" min="0"/>
                    <param defaultValue="false" id="APSC_DV.003215.BLSIM.IGNORE_SUBPACKAGE" inputType="checkbox" label="Ignore adjacent imports if they are from subpackages of the same package"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.CBRACE" header="Place a closing brace on its own line" id="CBRACE" originalId="FORMAT.CBRACE" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Closing brace should be in a line of its own."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.CBRACE.IGNORE_TWO_BRACE" name="IGNORE_TWO_BRACE" value="Ignore case &quot;} }&quot;"/>
                    <oldparam id="APSC_DV.003215.CBRACE.IGNORE_BRACE_SEMI_COLON" name="IGNORE_BRACE_SEMI_COLON" value="Ignore case &quot;} ;&quot;"/>
                    <oldparam id="APSC_DV.003215.CBRACE.IGNORE_FINALLY" name="IGNORE_FINALLY" value="Ignore case &quot;} finally {&quot;"/>
                    <oldparam id="APSC_DV.003215.CBRACE.IGNORE_BRACE_C_COMMENT" name="IGNORE_BRACE_C_COMMENT" value="Ignore case &quot;} /*&quot;"/>
                    <oldparam id="APSC_DV.003215.CBRACE.IGNORE_DO_WHILE" name="IGNORE_DO_WHILE" value="Ignore case &quot;} while();&quot;"/>
                    <oldparam id="APSC_DV.003215.CBRACE.IGNORE_BRACE_S_COMMENT" name="IGNORE_BRACE_S_COMMENT" value="Ignore case &quot;} //&quot;"/>
                    <oldparam id="APSC_DV.003215.CBRACE.IGNORE_ELSE" name="IGNORE_ELSE" value="Ignore case &quot;} else {&quot;"/>
                    <oldparam id="APSC_DV.003215.CBRACE.IGNORE_CATCH" name="IGNORE_CATCH" value="Ignore case &quot;} catch {&quot;"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="true" id="APSC_DV.003215.CBRACE.IGNORE_ELSE" inputType="checkbox" label="Ignore case &quot;} else {&quot;"/>
                    <param defaultValue="true" id="APSC_DV.003215.CBRACE.IGNORE_CATCH" inputType="checkbox" label="Ignore case &quot;} catch {&quot;"/>
                    <param defaultValue="true" id="APSC_DV.003215.CBRACE.IGNORE_FINALLY" inputType="checkbox" label="Ignore case &quot;} finally {&quot;"/>
                    <param defaultValue="true" id="APSC_DV.003215.CBRACE.IGNORE_DO_WHILE" inputType="checkbox" label="Ignore case &quot;} while();&quot;"/>
                    <param defaultValue="true" id="APSC_DV.003215.CBRACE.IGNORE_TWO_BRACE" inputType="checkbox" label="Ignore case &quot;} }&quot;"/>
                    <param defaultValue="true" id="APSC_DV.003215.CBRACE.IGNORE_BRACE_SEMI_COLON" inputType="checkbox" label="Ignore case &quot;} ;&quot;"/>
                    <param defaultValue="true" id="APSC_DV.003215.CBRACE.IGNORE_BRACE_C_COMMENT" inputType="checkbox" label="Ignore case &quot;} /*&quot;"/>
                    <param defaultValue="true" id="APSC_DV.003215.CBRACE.IGNORE_BRACE_S_COMMENT" inputType="checkbox" label="Ignore case &quot;} //&quot;"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.TCOMMA" header="Avoid or enforce the use of trailing commas in array initializers" id="TCOMMA" originalId="FORMAT.TCOMMA" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Avoid trailing comma."/>
                    <msg index="2" value="Missing trailing comma."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.TCOMMA.ENFORCE" name="ENFORCE" value="Enforce"/>
                    <oldparam id="APSC_DV.003215.TCOMMA.DISALLOW" name="DISALLOW" value="Avoid"/>
                    <oldparam id="APSC_DV.003215.TCOMMA.COMMA_OPTION" name="COMMA_OPTION" value="Enforce/Avoid trailing comma:"/>
                </oldparameters>
                <parameters>
                    <radioGroup id="APSC_DV.003215.TCOMMA.COMMA_OPTION" label="Enforce/Avoid trailing comma:" prevType="MultipleChoice" showLabel="true">
                        <radioItem label="Enforce" value="0"/>
                        <radioItem defaultValue="checked" label="Avoid" value="1"/>
                    </radioGroup>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.NSAB" header="Do not place statements on the same line as the '{' opening brace" id="NSAB" originalId="FORMAT.NSAB" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Statement on the same line as the '{' opening brace."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.NSAB.IGNORE_ONE_LINE_BLOCK" name="IGNORE_ONE_LINE_BLOCK" value="Allow statements on the same line as the opening brace if the opening and closing braces appear on the same line."/>
                </oldparameters>
                <parameters>
                    <param defaultValue="true" id="APSC_DV.003215.NSAB.IGNORE_ONE_LINE_BLOCK" inputType="checkbox" label="Allow statements on the same line as the opening brace if the opening and closing braces appear on the same line."/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.BLCD" header="Enforce number of blank line(s) before type declarations" id="BLCD" originalId="FORMAT.BLCD" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Use {0} blank line before type declaration."/>
                    <msg index="2" value="Use {0} blank lines before type declaration."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.BLCD.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
                    <oldparam id="APSC_DV.003215.BLCD.BLANK_LINE" name="BLANK_LINE" value="Number of blank lines"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="2" id="APSC_DV.003215.BLCD.BLANK_LINE" inputType="integer" label="Number of blank lines" min="0"/>
                    <param defaultValue="false" hidden="true" id="APSC_DV.003215.BLCD.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.IND" header="Enforce number of space(s) for indentation" id="IND" originalId="FORMAT.IND" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Indentation should be {0} spaces."/>
                    <msg index="2" value="Keyword &quot;if&quot; should be placed on the same line as the preceding keyword &quot;else&quot;."/>
                    <msg index="3" value="Indentation should be {0} (or {1}) spaces."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.IND.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
                    <oldparam id="APSC_DV.003215.IND.SPLIT_INDENT_EXCEPTION" name="SPLIT_INDENT_EXCEPTION" value="Ignore parentheses for split line indentation"/>
                    <oldparam id="APSC_DV.003215.IND.SPLIT_INDENT" name="SPLIT_INDENT" value="Additional levels of indentation for wrapped line continuations"/>
                    <oldparam id="APSC_DV.003215.IND.INDENT" name="INDENT" value="Indentation size"/>
                    <oldparam id="APSC_DV.003215.IND.SPLIT_INDENT_ENFORCEMENT" name="SPLIT_INDENT_ENFORCEMENT" value="Require additional level(s) of indentation for wrapped line continuations"/>
                    <oldparam id="APSC_DV.003215.IND.ADD_EXTRA_LEVEL" name="ADD_EXTRA_LEVEL" value="Require an additional level of indentation for each &quot;(&quot; encountered in a wrapped line continuation"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="false" hidden="true" id="APSC_DV.003215.IND.SPLIT_INDENT_EXCEPTION" inputType="checkbox" label="Ignore parentheses for split line indentation"/>
                    <param defaultValue="4" id="APSC_DV.003215.IND.INDENT" inputType="integer" label="Indentation size" min="1"/>
                    <param defaultValue="2" id="APSC_DV.003215.IND.SPLIT_INDENT" inputType="integer" label="Additional levels of indentation for wrapped line continuations" min="0"/>
                    <param defaultValue="false" hidden="true" id="APSC_DV.003215.IND.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
                    <param defaultValue="false" id="APSC_DV.003215.IND.SPLIT_INDENT_ENFORCEMENT" inputType="checkbox" label="Require additional level(s) of indentation for wrapped line continuations"/>
                    <param defaultValue="true" id="APSC_DV.003215.IND.ADD_EXTRA_LEVEL" inputType="checkbox" label="Require an additional level of indentation for each &quot;(&quot; encountered in a wrapped line continuation"/>
                       <param defaultValue="true" id="APSC_DV.003215.IND.IGNORE_ARRAY_DECL" inputType="checkbox" label="Ignore additional indentation caused by array declaration brackets."/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.BLBC" header="Put a blank line before each C-style comment" id="BLBC" originalId="FORMAT.BLBC" scope="LINE" severity="3" since="8.0">
                <messages>
                    <msg index="1" value="Blank line missing before this C-style comment."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.MSP" header="Place a single space character or no space character between a method name and the opening &quot;(&quot; parenthesis" id="MSP" originalId="FORMAT.MSP" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Method ''{0}'' does not have one space before the &quot;(&quot; parenthesis."/>
                    <msg index="2" value="Method ''{0}'' has an extra space before the &quot;(&quot; parenthesis."/>
                    <msg index="3" value="Method ''{0}'' has extra spaces before the &quot;(&quot; parenthesis."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.MSP.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
                    <oldparam id="APSC_DV.003215.MSP.ONE_METHOD_SPACE" name="ONE_METHOD_SPACE" value="one space"/>
                    <oldparam id="APSC_DV.003215.MSP.METHOD_SPACE" name="METHOD_SPACE" value="Check option"/>
                    <oldparam id="APSC_DV.003215.MSP.NO_METHOD_SPACE" name="NO_METHOD_SPACE" value="no space"/>
                </oldparameters>
                <parameters>
                    <radioGroup id="APSC_DV.003215.MSP.METHOD_SPACE" label="Check option" prevType="MultipleChoice" showLabel="true">
                        <radioItem label="one space" value="0"/>
                        <radioItem defaultValue="checked" label="no space" value="1"/>
                    </radioGroup>
                    <param defaultValue="false" hidden="true" id="APSC_DV.003215.MSP.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.U2BL" header="Enforce number of blank line(s) between major sections" id="U2BL" originalId="FORMAT.U2BL" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Use {0} blank line before the package statements."/>
                    <msg index="2" value="Use {0} blank lines before the package statements."/>
                    <msg index="3" value="Use {0} blank line before the import statements (or corresponding import comments)."/>
                    <msg index="4" value="Use {0} blank lines before the import statements (or corresponding import comments)."/>
                    <msg index="5" value="Use {0} blank line before every top-level class (or corresponding Javadoc)."/>
                    <msg index="6" value="Use {0} blank lines before every top-level class (or corresponding Javadoc)."/>
                    <msg index="7" value="Use {0} blank line before every top-level interface (or corresponding Javadoc)."/>
                    <msg index="8" value="Use {0} blank lines before every top-level interface (or corresponding Javadoc)."/>
                    <msg index="9" value="Use {0} blank line before every field declaration (or corresponding Javadoc)."/>
                    <msg index="10" value="Use {0} blank lines before every field declaration (or corresponding Javadoc)."/>
                    <msg index="11" value="Use {0} blank line before every method declaration (or corresponding Javadoc)."/>
                    <msg index="12" value="Use {0} blank lines before every method declaration (or corresponding Javadoc)."/>
                    <msg index="13" value="Use {0} blank line before every member class (or corresponding Javadoc)."/>
                    <msg index="14" value="Use {0} blank lines before every member class (or corresponding Javadoc)."/>
                    <msg index="15" value="Use {0} blank line before every member interface (or corresponding Javadoc)."/>
                    <msg index="16" value="Use {0} blank lines before every member interface (or corresponding Javadoc)."/>
                    <msg index="17" value="Use {0} blank line before every declaration of the same kind (or corresponding Javadoc)."/>
                    <msg index="18" value="Use {0} blank lines before every declaration of the same kind (or corresponding Javadoc)."/>
                    <msg index="19" value="Use {0} blank line before every top-level enum declaration (or corresponding Javadoc)."/>
                    <msg index="20" value="Use {0} blank lines before every top-level enum declaration (or corresponding Javadoc)."/>
                    <msg index="21" value="Use {0} blank line before every top-level annotation declaration (or corresponding Javadoc)."/>
                    <msg index="22" value="Use {0} blank lines before every top-level annotation declaration (or corresponding Javadoc)."/>
                    <msg index="23" value="Use {0} blank line before every member enum declaration (or corresponding Javadoc)."/>
                    <msg index="24" value="Use {0} blank lines before every member enum declaration (or corresponding Javadoc)."/>
                    <msg index="25" value="Use {0} blank line before every member annotation declaration (or corresponding Javadoc)."/>
                    <msg index="26" value="Use {0} blank lines before every member annotation declaration (or corresponding Javadoc)."/>
                    <msg index="27" value="Use {0} blank line before every enum constant declaration (or corresponding Javadoc)."/>
                    <msg index="28" value="Use {0} blank lines before every enum constant declaration (or corresponding Javadoc)."/>
                    <msg index="29" value="Use {0} blank line before every annotation type member declaration (or corresponding Javadoc)."/>
                    <msg index="30" value="Use {0} blank lines before every annotation type member declaration (or corresponding Javadoc)."/>
                    <msg index="31" value="Use {0} blank line before each statement."/>
                    <msg index="32" value="Use {0} blank lines before each statement."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.U2BL.IMPORT" name="IMPORT" value="import statements"/>
                    <oldparam id="APSC_DV.003215.U2BL.BLANK_TABLE_IN_CLASS" name="BLANK_TABLE_IN_CLASS" value="Major sections in class declaration"/>
                    <oldparam id="APSC_DV.003215.U2BL.FIELD_DECL" name="FIELD_DECL" value="field declarations"/>
                    <oldparam id="APSC_DV.003215.U2BL.CLASS" name="CLASS" value="top-level classes"/>
                    <oldparam id="APSC_DV.003215.U2BL.BLINE_IN_CLASS" name="BLINE_IN_CLASS" value="Blank lines in class declaration"/>
                    <oldparam id="APSC_DV.003215.U2BL.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
                    <oldparam id="APSC_DV.003215.U2BL.INNER_ENUM_DECL" name="INNER_ENUM_DECL" value="Member enum declarations"/>
                    <oldparam id="APSC_DV.003215.U2BL.INNER_ANNOTATION_DECL" name="INNER_ANNOTATION_DECL" value="Member annotation declarations"/>
                    <oldparam id="APSC_DV.003215.U2BL.INNER_INTERFACE_DECL" name="INNER_INTERFACE_DECL" value="Member interface declarations"/>
                    <oldparam id="APSC_DV.003215.U2BL.PKG" name="PKG" value="package statement"/>
                    <oldparam id="APSC_DV.003215.U2BL.BLANK_TABLE_IN_UNIT" name="BLANK_TABLE_IN_UNIT" value="Major sections in compilation unit"/>
                    <oldparam id="APSC_DV.003215.U2BL.SECTION" name="SECTION" value="Section"/>
                    <oldparam id="APSC_DV.003215.U2BL.ANNOTATION" name="ANNOTATION" value="top-level Annotation"/>
                    <oldparam id="APSC_DV.003215.U2BL.BLANK_LINE" name="BLANK_LINE" value="Number of blank lines"/>
                    <oldparam id="APSC_DV.003215.U2BL.ENUM_CONSTANT_DECL" name="ENUM_CONSTANT_DECL" value="Enum constant declarations"/>
                    <oldparam id="APSC_DV.003215.U2BL.ANNOTATION_MEMBER_DECL" name="ANNOTATION_MEMBER_DECL" value="Annotation type member declarations"/>
                    <oldparam id="APSC_DV.003215.U2BL.ENUM" name="ENUM" value="top-level Enum"/>
                    <oldparam id="APSC_DV.003215.U2BL.INTERFACE" name="INTERFACE" value="top-level interfaces"/>
                    <oldparam id="APSC_DV.003215.U2BL.SAME_DECL" name="SAME_DECL" value="Declarations of the same kind"/>
                    <oldparam id="APSC_DV.003215.U2BL.METHOD_DECL" name="METHOD_DECL" value="method declarations"/>
                    <oldparam id="APSC_DV.003215.U2BL.INNER_CLASS_DECL" name="INNER_CLASS_DECL" value="Member class declarations"/>
                    <oldparam id="APSC_DV.003215.U2BL.BLINE_IN_UNIT" name="BLINE_IN_UNIT" value="Blank lines in compilation unit"/>
                    <oldparam id="APSC_DV.003215.U2BL.CHECK_STATEMENTS" name="CHECK_STATEMENTS" value="Check amount of blank lines between consecutive statements:"/>
                    <oldparam id="APSC_DV.003215.U2BL.ENFORCE" name="ENFORCE" value="Enforce section?"/>
                    <oldparam id="APSC_DV.003215.U2BL.RECOGNIZE_NON_JAVADOC_COMMENTS" name="RECOGNIZE_NON_JAVADOC_COMMENTS" value="Recognize non javadoc comments"/>
                </oldparameters>
                <parameters>
                    <group collapsible="false" id="APSC_DV.003215.U2BL.tab.BLINE_IN_UNIT" label="Blank lines in compilation unit">
                        <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="APSC_DV.003215.U2BL.BLANK_TABLE_IN_UNIT2" label="Major sections in compilation unit" reader="SATable">
                            <columns>
                                <column columnType="checkbox" editable="true" id="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN1" label="Enforce section?" required="true"/>
                                <column columnType="text" editable="false" id="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN2" label="Section" required="false"/>
                                <column columnType="text" editable="false" id="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN3" label="Section ID" required="true"/>
                                <column columnType="positiveNumber" editable="true" id="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN4" label="Number of blank lines" required="true" textSize="small"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN1" value="true"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN2" value="package statement"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN3" value="1"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN4" value="0"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN1" value="true"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN2" value="import statements"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN3" value="3"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN4" value="1"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN1" value="true"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN2" value="top-level classes"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN3" value="5"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN4" value="1"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN1" value="true"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN2" value="top-level interfaces"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN3" value="7"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN4" value="1"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN1" value="true"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN2" value="top-level Enum"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN3" value="19"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN4" value="1"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN1" value="true"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN2" value="top-level Annotation"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN3" value="21"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_UNIT__COLUMN4" value="1"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>

                    </group>
                    <group collapsible="false" id="APSC_DV.003215.U2BL.tab.BLINE_IN_CLASS" label="Blank lines in class declaration">
                        <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="APSC_DV.003215.U2BL.BLANK_TABLE_IN_CLASS2" label="Major sections in class declaration" prevType="InputValueWithCheckBox" reader="SATable">
                            <columns>
                                <column columnType="checkbox" editable="true" id="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN1" label="Enforce section?" required="true"/>
                                <column columnType="text" editable="false" id="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN2" label="Section" required="true"/>
                                <column columnType="text" editable="false" id="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN3" label="Section ID" required="true"/>
                                <column columnType="positiveNumber" editable="true" id="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN4" label="Number of blank lines" required="true" textSize="small"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN1" value="true"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN2" value="field declarations"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN3" value="9"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN4" value="1"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN1" value="true"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN2" value="method declarations"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN3" value="11"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN4" value="1"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN1" value="true"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN2" value="Member class declarations"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN3" value="13"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN4" value="1"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN1" value="true"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN2" value="Member interface declarations"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN3" value="15"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN4" value="1"/>

                                </row>
                                <row id="5">
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN1" value="true"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN2" value="Declarations of the same kind"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN3" value="10"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN4" value="1"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN1" value="true"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN2" value="Enum constant declarations"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN3" value="27"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN4" value="1"/>
                                </row>
                                <row id="7">
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN1" value="true"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN2" value="Annotation type member declarations"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN3" value="29"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN4" value="1"/>
                                </row>
                                <row id="8">
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN1" value="true"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN2" value="Member enum declarations"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN3" value="23"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN4" value="1"/>
                                </row>
                                <row id="9">
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN1" value="true"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN2" value="Member annotation declarations"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN3" value="25"/>
                                    <column refColumnId="FORMAT__U2BL__BLANK_TABLE_IN_CLASS__COLUMN4" value="1"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>

                    </group>
                    <param defaultValue="false" hidden="true" id="APSC_DV.003215.U2BL.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
                    <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="APSC_DV.003215.U2BL.CHECK_STATEMENTS" label="Check amount of blank lines between consecutive statements:" prevType="InputValueWithCheckBox" reader="SATable">
                        <columns>
                            <column columnType="checkbox" editable="true" id="FORMAT__U2BL__CHECK_STATEMENTS__COLUMN1" label="" required="true"/>
                            <column columnType="text" editable="true" id="FORMAT__U2BL__CHECK_STATEMENTS__COLUMN2" label="" required="true"/>
                        </columns>
                        <predefinedRows>
                            <row id="1">
                                <column refColumnId="FORMAT__U2BL__CHECK_STATEMENTS__COLUMN1" value="false"/>
                                <column refColumnId="FORMAT__U2BL__CHECK_STATEMENTS__COLUMN2" value="1"/>
                            </row>
                        </predefinedRows>
                    </complexParamTable>
                    <param defaultValue="false" id="APSC_DV.003215.U2BL.RECOGNIZE_NON_JAVADOC_COMMENTS" inputType="checkbox" label="Recognize non javadoc comments"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SBUOP" header="Enforce number of space character(s) between a postfixed unary operator and its operand" id="SBUOP" originalId="FORMAT.SBUOP" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="There is not {0} space before unary operator ''{1}''."/>
                    <msg index="2" value="There is not {0} spaces before unary operator ''{1}''."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.SBUOP.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
                    <oldparam id="APSC_DV.003215.SBUOP.SYMBOL_SPACE_BEFORE" name="SYMBOL_SPACE_BEFORE" value="Number of spaces before"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="0" id="APSC_DV.003215.SBUOP.SYMBOL_SPACE_BEFORE" inputType="integer" label="Number of spaces before" min="0"/>
                    <param defaultValue="false" hidden="true" id="APSC_DV.003215.SBUOP.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.IAD" header="Declare arrays with '[]' brackets after the array type and before the variable name(s)" id="IAD" originalId="FORMAT.IAD" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Place the '[]' after the array type, not after the variable: {0}."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SROP" header="Enforce number of space character(s) on each side of a relational operator" id="SROP" originalId="FORMAT.SROP" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="There is not {1} space after ''{0}''."/>
                    <msg index="2" value="There is not {1} spaces after ''{0}''."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.SROP.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
                    <oldparam id="APSC_DV.003215.SROP.SYMBOL_SPACE_AFTER" name="SYMBOL_SPACE_AFTER" value="Number of spaces after"/>
                    <oldparam id="APSC_DV.003215.SROP.SYMBOL_SPACE_BEFORE" name="SYMBOL_SPACE_BEFORE" value="Number of spaces before"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="1" id="APSC_DV.003215.SROP.SYMBOL_SPACE_BEFORE" inputType="integer" label="Number of spaces before" min="0"/>
                    <param defaultValue="1" id="APSC_DV.003215.SROP.SYMBOL_SPACE_AFTER" inputType="integer" label="Number of spaces after" min="0"/>
                    <param defaultValue="false" hidden="true" id="APSC_DV.003215.SROP.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.DUT" header="Use spaces instead of tabs (or tabs instead of spaces)" id="DUT" originalId="FORMAT.DUT" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="'Tab' character found on column {0}."/>
                    <msg index="2" value="Set of {0} space characters used instead of a tab on column {1}."/>
                    <msg index="3" value="Space character used instead of a tab on column {0}."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.DUT.SPACES_PER_TAB" name="SPACES_PER_TAB" value="Spaces per tab:"/>
                    <oldparam id="APSC_DV.003215.DUT.USE_SPACES" name="USE_SPACES" value="Use spaces"/>
                    <oldparam id="APSC_DV.003215.DUT.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page for &quot;Tab size&quot;"/>
                    <oldparam id="APSC_DV.003215.DUT.SPACES_OR_TABS" name="SPACES_OR_TABS" value="Choose to use tabs or spaces:"/>
                    <oldparam id="APSC_DV.003215.DUT.USE_TABS" name="USE_TABS" value="Use tabs"/>
                </oldparameters>
                <parameters>
                    <radioGroup id="APSC_DV.003215.DUT.SPACES_OR_TABS" label="Choose to use tabs or spaces:" prevType="MultipleChoice" showLabel="true">
                        <radioItem defaultValue="checked" label="Use spaces" value="0"/>
                        <radioItem label="Use tabs" value="1"/>
                    </radioGroup>
                    <param defaultValue="false" hidden="true" id="APSC_DV.003215.DUT.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page for &quot;Tab size&quot;" prevType="LinkBox">
                    <param defaultValue="4" id="APSC_DV.003215.DUT.SPACES_PER_TAB" inputType="integer" label="Spaces per tab:" min="1"/>
                  </param>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SCOP" header="Enforce number of space character(s) before and after the &quot;?&quot; conditional operator" id="SCOP" originalId="FORMAT.SCOP" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="There is not {1} space after ''{0}''."/>
                    <msg index="2" value="There is not {1} spaces after ''{0}''."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.SCOP.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
                    <oldparam id="APSC_DV.003215.SCOP.SYMBOL_SPACE_AFTER" name="SYMBOL_SPACE_AFTER" value="Number of spaces after"/>
                    <oldparam id="APSC_DV.003215.SCOP.SYMBOL_SPACE_BEFORE" name="SYMBOL_SPACE_BEFORE" value="Number of spaces before"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="1" id="APSC_DV.003215.SCOP.SYMBOL_SPACE_BEFORE" inputType="integer" label="Number of spaces before" min="0"/>
                    <param defaultValue="1" id="APSC_DV.003215.SCOP.SYMBOL_SPACE_AFTER" inputType="integer" label="Number of spaces after" min="0"/>
                    <param defaultValue="false" hidden="true" id="APSC_DV.003215.SCOP.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.MCH" header="Include a meaningful file header comment in every source file" id="MCH" originalId="FORMAT.MCH" scope="LINE" severity="2" since="10.4.3">
                <messages>
                    <msg index="1" value="This source file does not include a file header comment."/>
                    <msg index="2" value="The file header comment does not match the specified comment template."/>
                    <msg index="3" value="The 'File header format' parameter is enabled, but the comment template is not defined."/>
                </messages>
                <parameters>
                    <group collapsible="false" id="APSC_DV.003215.MCH.FILE_HEADER_LOCATION_GROUP" label="">
                        <radioGroup id="APSC_DV.003215.MCH.FILE_HEADER_LOCATION" label="File header location" showLabel="true">
                            <radioItem defaultValue="checked" label="before package declaration (if any)" value="0"/>
                            <radioItem label="after package declaration (if any)" value="1"/>
                        </radioGroup>
                    </group>
                    <group collapsible="false" id="APSC_DV.003215.MCH.FILE_HEADER_FORMAT" label="File header format">
                        <param defaultValue="true" id="APSC_DV.003215.MCH.MATCH_HEADER_WITH_TEMPLATE" inputType="checkbox" label="Match the file header with the following template (defined in regular expressions):"/>
                        <param defaultValue=".*" id="APSC_DV.003215.MCH.FILE_HEADER_TEMPLATE" inputType="stringList" label="" prevType="StringList"/>
                        <param defaultValue="false" id="APSC_DV.003215.MCH.MATCH_HEADER_CASE_SENSITIVE" inputType="checkbox" label="Match case sensitive"/>
                        <param defaultValue="true" id="APSC_DV.003215.MCH.FILE_HEADER_TRIM_LINES" inputType="checkbox" label="Trim header lines"/>
                    </group>
                    <group collapsible="false" id="APSC_DV.003215.MCH.FILE_HEADER_TYPES" label="Acceptable types of comments">
                        <param defaultValue="true" id="APSC_DV.003215.MCH.FILE_HEADER_TYPE_CSTYLE" inputType="checkbox" label="C-Style comments"/>
                        <param defaultValue="true" id="APSC_DV.003215.MCH.FILE_HEADER_TYPE_JAVADOC" inputType="checkbox" label="Javadoc comments"/>
                        <param defaultValue="false" id="APSC_DV.003215.MCH.FILE_HEADER_TYPE_SINGLELINE" inputType="checkbox" label="Single-line comments"/>
                    </group>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.MO" header="Enforce the order of annotations and modifiers" id="MO" originalId="FORMAT.MO" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="The ordering of the modifiers violates convention. They should be in order &quot;{0}&quot;."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.MO.MODIFIER_ORDER_LIST" name="MODIFIER_ORDER_LIST" value="Sort modifiers based on modifier types"/>
                    <oldparam id="APSC_DV.003215.MO.BEFORE" name="BEFORE" value="Put all annotations before all other modifiers."/>
                    <oldparam id="APSC_DV.003215.MO.ANNOTATION_ORDER" name="ANNOTATION_ORDER" value="Order of Annotations"/>
                    <oldparam id="APSC_DV.003215.MO.AFTER" name="AFTER" value="Put all annotations after all other modifiers."/>
                    <oldparam id="APSC_DV.003215.MO.MODIFIER" name="MODIFIER" value="Modifier order"/>
                </oldparameters>
                <parameters>
                    <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="APSC_DV.003215.MO.MODIFIER_ORDER_LIST" label="Sort modifiers based on modifier types" reader="SATable">
                        <columns>
                            <column columnType="text" editable="true" id="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" label="Modifier order" required="true"/>
                        </columns>
                        <predefinedRows>
                            <row id="1">
                                <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="public"/>
                            </row>
                            <row id="2">
                                <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="protected"/>
                            </row>
                            <row id="3">
                                <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="private"/>
                            </row>
                            <row id="4">
                                <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="abstract"/>
                            </row>
                            <row id="5">
                                <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="static"/>
                            </row>
                            <row id="6">
                                <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="final"/>
                            </row>
                            <row id="7">
                                <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="transient"/>
                            </row>
                            <row id="8">
                                <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="volatile"/>
                            </row>
                            <row id="9">
                                <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="synchronized"/>
                            </row>
                            <row id="10">
                                <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="native"/>
                            </row>
                            <row id="11">
                                <column refColumnId="FORMAT__MO__MODIFIER_ORDER_LIST__COLUMN1" value="strictfp"/>
                            </row>
                        </predefinedRows>
                    </complexParamTable>
                    <radioGroup id="APSC_DV.003215.MO.ANNOTATION_ORDER" label="Order of Annotations" prevType="MultipleChoice" showLabel="true">
                        <radioItem defaultValue="checked" label="Put all annotations before all other modifiers." value="0"/>
                        <radioItem label="Put all annotations after all other modifiers." value="1"/>
                    </radioGroup>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.DOT" header="Do not leave spaces between qualified names and method invocations" id="DOT" originalId="FORMAT.DOT" scope="LINE" severity="3" since="8.0">
                <messages>
                    <msg index="1" value="Avoid having space before or after the dot."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.LL" header="Limit the maximum length of a line" id="LL" originalId="FORMAT.LL" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Line is longer than {1} characters: {0}."/>
                    <msg index="2" value="Comment line is longer than {1} characters: {0}."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.LL.IGNORE_TRAILING_SPACE" name="IGNORE_TRAILING_SPACE" value="Ignore trailing spaces"/>
                    <oldparam id="APSC_DV.003215.LL.LINK_TO_PREF" name="LINK_TO_PREF" value="Link to value in the preferences page"/>
                    <oldparam id="APSC_DV.003215.LL.MAX_COMMENT_LEN" name="MAX_COMMENT_LEN" value="Maximum comment line width"/>
                    <oldparam id="APSC_DV.003215.LL.MAX_LEN" name="MAX_LEN" value="Maximum line width"/>
                    <oldparam id="APSC_DV.003215.LL.IGNORE_TRAILING_COMMENT" name="IGNORE_TRAILING_COMMENT" value="Ignore trailing comments"/>
                    <oldparam id="APSC_DV.003215.LL.IGNORE_IMPORTS_PACKAGES" name="IGNORE_IMPORTS_PACKAGES" value="Ignore import statements and package declarations"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="80" id="APSC_DV.003215.LL.MAX_LEN" inputType="integer" label="Maximum line width" min="1"/>
                    <param defaultValue="80" id="APSC_DV.003215.LL.MAX_COMMENT_LEN" inputType="integer" label="Maximum comment line width" min="1"/>
                    <param defaultValue="4" id="APSC_DV.003215.LL.RECALCULATE_TABS" inputType="integer" label="Tab size" min="1" required="true"/>
                    <param defaultValue="true" id="APSC_DV.003215.LL.IGNORE_TRAILING_SPACE" inputType="checkbox" label="Ignore trailing whitespaces"/>
                    <param defaultValue="false" id="APSC_DV.003215.LL.IGNORE_TRAILING_COMMENT" inputType="checkbox" label="Ignore trailing comments"/>
                    <param defaultValue="false" hidden="true" id="APSC_DV.003215.LL.LINK_TO_PREF" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
                    <param defaultValue="true" id="APSC_DV.003215.LL.IGNORE_IMPORTS_PACKAGES" inputType="checkbox" label="Ignore import statements and package declarations"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.FORMAT.SAOP" header="Enforce number of space character(s) on each side of an assignment operator" id="SAOP" originalId="FORMAT.SAOP" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="There is not {1} space after ''{0}''."/>
                    <msg index="2" value="There is not {1} spaces after ''{0}''."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.003215.SAOP.LINK_BOX" name="LINK_BOX" value="Link to value in the preferences page"/>
                    <oldparam id="APSC_DV.003215.SAOP.SYMBOL_SPACE_AFTER" name="SYMBOL_SPACE_AFTER" value="Number of spaces after"/>
                    <oldparam id="APSC_DV.003215.SAOP.SYMBOL_SPACE_BEFORE" name="SYMBOL_SPACE_BEFORE" value="Number of spaces before"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="1" id="APSC_DV.003215.SAOP.SYMBOL_SPACE_BEFORE" inputType="integer" label="Number of spaces before" min="0"/>
                    <param defaultValue="1" id="APSC_DV.003215.SAOP.SYMBOL_SPACE_AFTER" inputType="integer" label="Number of spaces after" min="0"/>
                    <param defaultValue="false" hidden="true" id="APSC_DV.003215.SAOP.LINK_BOX" inputType="checkbox" label="Link to value in the preferences page" prevType="LinkBox"/>
                </parameters>
            </rule>
         </category>
         <category description="APSC_DV.001460 An application vulnerability assessment must be conducted." name="001460">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.VOBD" header="Validate objects before deserialization" id="VOBD" originalId="SERIAL.VOBD" scope="LINE" severity="3" since="10.4.3">
                <messages>
                    <msg index="1" value="The object read from the ObjectInputStream is not validated before deserialization"/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.SC" header="Disable LDAP deserialization" id="SC" originalId="SECURITY.IBA.SC" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The SearchControls object allows deserialization"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.DNSL" header="Avoid DNS lookups for decision making" id="DNSL" originalId="SECURITY.WSC.DNSL" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="DNS lookup checked here."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/247.html" name="CWE">247</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/494.html" name="CWE">494</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE">807</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.NCNPE" header="Do not catch 'NullPointerException'" id="NCNPE" originalId="EXCEPT.NCNPE" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Avoid catching 'NullPointerException'"/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PORT.HCNA" header="Do not hard-code IP addresses and port numbers." id="HCNA" originalId="PORT.HCNA" scope="LINE" severity="3" since="9.0">
                <messages>
                    <msg index="1" value="Hard-coded IP address ''{0}''."/>
                    <msg index="2" value="Hard-coded port number ''{0}''."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.001460.HCNA.IP" name="IP" value="Do not hard-code IP addresses"/>
                    <oldparam id="APSC_DV.001460.HCNA.PORT" name="PORT" value="Do not hard-code port numbers"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="true" id="APSC_DV.001460.HCNA.IP" inputType="checkbox" label="Do not hard-code IP addresses"/>
                    <param defaultValue="true" id="APSC_DV.001460.HCNA.PORT" inputType="checkbox" label="Do not hard-code port numbers"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.SIO" header="Avoid calling print methods of 'System.err' or 'System.out'" id="SIO" originalId="SECURITY.ESD.SIO" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Make sure ''{0}'' is not a leftover debug statement."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.001460.SIO.METHOD_SKIP_LIST" name="METHOD_SKIP_LIST" value="Methods to be excluded from this rule"/>
                    </oldparameters>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010">A3-Broken Authentication and Session Management</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="APSC_DV.001460.SIO.SCANNED_CLASS_TABLE" label="Include classes" reader="SATable">
                            <columns>
                                <column columnType="checkbox" defaultValue="true" editable="true" id="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN1" label="Base class/ interface" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN2" label="Class/interface name (regular expression)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN1" value="true"/>
                                    <column refColumnId="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN2" value=".*"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <param defaultValue="main;show;verbose" id="APSC_DV.001460.SIO.METHOD_SKIP_LIST" inputType="stringList" label="Exclude methods" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.SCBNP" header="Always declare writeObject and readObject methods for Serializable subclasses of non-Serializable parents" id="SCBNP" originalId="SERIAL.SCBNP" scope="LINE" severity="3" since="9.0">
                <messages>
                    <msg index="1" value="Class has a non-serializable parent but implements Serializable without specifying readObject or WriteObject methods."/>
                    <msg index="2" value="Class has a non-serializable parent but implements Serializable without specifying readObject method."/>
                    <msg index="3" value="Class has a non-serializable parent but implements Serializable without specifying WriteObject method."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ACPST" header="Do not call the 'printStackTrace()' method of &quot;Throwable&quot; objects." id="ACPST" originalId="SECURITY.WSC.ACPST" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="The 'printStackTrace()' method of a &quot;Throwable&quot; object is called here."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.001460.ACPST.IGNORE_OVERRIDDEN" name="IGNORE_OVERRIDDEN" value="Ignore overridden versions of the 'printStackTrace()' methods"/>
                        <oldparam id="APSC_DV.001460.ACPST.IGNORE_OVERLOADED" name="IGNORE_OVERLOADED" value="Ignore overloaded versions of the 'printStackTrace()' method"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/209.html" name="CWE">209</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="APSC_DV.001460.ACPST.IGNORE_OVERRIDDEN" inputType="checkbox" label="Ignore overridden methods"/>
                        <param defaultValue="true" id="APSC_DV.001460.ACPST.IGNORE_OVERLOADED" inputType="checkbox" label="Ignore overloaded methods"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AECB" header="Avoid &quot;try&quot;, &quot;catch&quot; and &quot;finally&quot; blocks with empty bodies" id="AECB" originalId="PB.TYPO.AECB" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="&quot;try&quot; block has an empty body."/>
                        <msg index="2" value="&quot;catch&quot; block has an empty body."/>
                        <msg index="3" value="&quot;finally&quot; block has an empty body."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.001460.AECB.CHECK_FINALLY" name="CHECK_FINALLY" value="Check &quot;finally&quot; block."/>
                        <oldparam id="APSC_DV.001460.AECB.CHECK_TRY" name="CHECK_TRY" value="Check &quot;try&quot; block."/>
                        <oldparam id="APSC_DV.001460.AECB.CHECK_CATCH" name="CHECK_CATCH" value="Check &quot;catch&quot; block."/>
                        <oldparam id="APSC_DV.001460.AECB.CHECK_COMMENTS" name="CHECK_COMMENTS" value="Disallow blocks with comments as content."/>
                        <oldparam id="APSC_DV.001460.AECB.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="Regular expression of exception variable name. (enclosing catch block would be ignored if matches)"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/391.html" name="CWE">391</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="APSC_DV.001460.AECB.CHECK_TRY" inputType="checkbox" label="Check &quot;try&quot; block."/>
                        <param defaultValue="true" id="APSC_DV.001460.AECB.CHECK_CATCH" inputType="checkbox" label="Check &quot;catch&quot; block."/>
                        <param defaultValue="true" id="APSC_DV.001460.AECB.CHECK_FINALLY" inputType="checkbox" label="Check &quot;finally&quot; block."/>
                        <param defaultValue="false" id="APSC_DV.001460.AECB.CHECK_COMMENTS" inputType="checkbox" label="Disallow blocks with comments as content."/>
                        <param defaultValue="%5Eignore%24;" id="APSC_DV.001460.AECB.REGULAR_EXPRESSION" inputType="stringList" label="Regular expression of exception variable name. (enclosing catch block would be ignored if matches)" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.UPS" header="Use 'prepareCall' or 'prepareStatement' instead of 'createStatement'" id="UPS" originalId="SECURITY.IBA.UPS" scope="LINe" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="Consider using 'prepareCall()' or 'prepareStatement()' to prevent SQL injection vulnerabilities"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for SQL Injection p. 121</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A1" name="OWASP-2010">A1-Injection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/89.html" name="CWE">89</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.NTERR" header="Do not throw exception types which are too general or are unchecked exceptions." id="NTERR" originalId="EXCEPT.NTERR" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Avoid throwing ''{0}''."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.001460.NTERR.CHECKED_EXCEPTS" name="CHECKED_EXCEPTS" value="Exception types which should not be thrown (fully qualified names)"/>
                </oldparameters>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/397.html" name="CWE">397</reference>
                </references>
                <parameters>
                    <param defaultValue="java.lang.Exception;java.lang.Error;java.lang.Throwable;java.lang.RuntimeException" id="APSC_DV.001460.NTERR.CHECKED_EXCEPTS" inputType="stringList" label="Exception types which should not be thrown (fully qualified names)" prevType="StringList"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.SNSO" header="Do not store non-serializable objects as HttpSession attributes" id="SNSO" originalId="SERIAL.SNSO" scope="LINE" severity="1" since="8.4">
                <messages>
                    <msg index="1" value="Argument ''{0}'' to method &quot;setAttribute&quot; is non-serializable."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.001460.SNSO.IGNORE_NULL" name="IGNORE_NULL" value="Ignore &quot;null&quot; values"/>
                    <oldparam id="APSC_DV.001460.SNSO.CHECK_ABSTRACT" name="CHECK_ABSTRACT" value="Check abstract classes"/>
                    <oldparam id="APSC_DV.001460.SNSO.CHECK_INTERFACE" name="CHECK_INTERFACE" value="Check interfaces"/>
                    <oldparam id="APSC_DV.001460.SNSO.CHECK_COLLECTION" name="CHECK_COLLECTION" value="Check Collections"/>
                    <oldparam id="APSC_DV.001460.SNSO.CHECK_MAP" name="CHECK_MAP" value="Check Maps"/>
                </oldparameters>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/579.html" name="CWE">579</reference>
                </references>
                <parameters>
                    <param defaultValue="true" id="APSC_DV.001460.SNSO.IGNORE_NULL" inputType="checkbox" label="Ignore &quot;null&quot; values"/>
                    <param defaultValue="true" id="APSC_DV.001460.SNSO.CHECK_ABSTRACT" inputType="checkbox" label="Check abstract classes"/>
                    <param defaultValue="true" id="APSC_DV.001460.SNSO.CHECK_INTERFACE" inputType="checkbox" label="Check interfaces"/>
                    <param defaultValue="false" id="APSC_DV.001460.SNSO.CHECK_COLLECTION" inputType="checkbox" label="Check Collections"/>
                    <param defaultValue="false" id="APSC_DV.001460.SNSO.CHECK_MAP" inputType="checkbox" label="Check Maps"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.USC" header="Use the SSL-enabled version of classes when possible." id="USC" originalId="SECURITY.WSC.USC" scope="LINE" severity="3" since="7.5">
                    <messages>
                        <msg index="1" value="Consider using the SSL-enabled type ''SSLServerSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="2" value="Consider using the SSL-enabled type ''SSLSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="3" value="Consider using the SSL-enabled type ''HttpsURLConnection'' for the {0} ''{1}''."/>
                        <msg index="4" value="Consider using the SSL-enabled type ''SslRMIClientSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="5" value="Consider using the SSL-enabled type ''SslRMIServerSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="6" value="Consider using the SSL-enabled type ''SSLSocket'' for the {0} ''{1}''."/>
                        <msg index="7" value="Consider using the SSL-enabled type ''SSLServerSocket'' for the {0} ''{1}''."/>
                        <msg index="8" value="Consider using the SSL-enabled type ''SSLPermission'' for the {0} ''{1}''."/>
                    </messages>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010">A9-Insufficient Transport Layer Protection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/494.html" name="CWE">494</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SRD" header="Use 'java.security.SecureRandom' instead of 'java.util.Random' or 'Math.random()'." id="SRD" originalId="SECURITY.WSC.SRD" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Avoid using the insecure ''{0}'' as a random number generator"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/330.html" name="CWE">330</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/338.html" name="CWE">338</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE">676</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HCCK" header="Avoid using hard-coded cryptographic keys" id="HCCK" originalId="SECURITY.WSC.HCCK" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Hard-coded cryptographic key here."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.001460.HCCK.MIN_LENGTH" name="MIN_LENGTH" value="Check keys whose length is greater than "/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/321.html" name="CWE">321</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/506.html" name="CWE">506</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/759.html" name="CWE">759</reference>
                    </references>
                    <parameters>
                        <param defaultValue="9" id="APSC_DV.001460.HCCK.MIN_LENGTH" inputType="integer" label="Check keys whose length is greater than " min="9"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.UEHL.LGE" header="Ensure all exceptions are either logged with a standard logger or rethrown" id="LGE" originalId="SECURITY.UEHL.LGE" scope="LINE" severity="2" since="6.0">
                    <messages>
                        <msg index="1" value="The exception is not logged in the &quot;catch&quot; clause."/>
                        <msg index="2" value="The exception is neither logged nor rethrown in the &quot;catch&quot; clause."/>
                        <msg index="3" value="The exception is neither logged nor rethrown in the &quot;catch&quot; clause. Add a comment to the clause if this is expected."/>
                        <msg index="4" value="The ''{0}'' exception is not passed to the logging method called in the &quot;catch&quot; clause."/>
                        <msg index="5" value="The information passed from the ''{0}'' exception to the logging method may be incomplete."/>
                        <msg index="6" value="The ''{0}'' exception is not rethrown in the &quot;catch&quot; block or passed to the new exception as an argument."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.001460.LGE.FLAG_LEVEL" name="FLAG_LEVEL" value="Catch clause should contain:"/>
                        <oldparam id="APSC_DV.001460.LGE.FLAG_IF_NO_LOG" name="FLAG_IF_NO_LOG" value="Logging method."/>
                        <oldparam id="APSC_DV.001460.LGE.FLAG_IF_NO_LOG_AND_THROW" name="FLAG_IF_NO_LOG_AND_THROW" value="Logging method or exception rethrow statement."/>
                        <oldparam id="APSC_DV.001460.LGE.FLAG_IF_NO_LOG_AND_THROW_AND_COMMENT" name="FLAG_IF_NO_LOG_AND_THROW_AND_COMMENT" value="Logging method, comment or exception rethrow statement."/>
                        <oldparam id="APSC_DV.001460.LGE.LOG_METHOD_EXPRESSION" name="LOG_METHOD_EXPRESSION" value="Logging method name in regular expression"/>
                        <oldparam id="APSC_DV.001460.LGE.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                        <oldparam id="APSC_DV.001460.LGE.CHECK_EXCEPT_LOGGED" name="CHECK_EXCEPT_LOGGED" value="Check that the exception is passed into the logging method call"/>
                        <oldparam id="APSC_DV.001460.LGE.IGNORE_LIST" name="IGNORE_LIST" value="Ignore exception variables matching the following regular expression(s):"/>
                        <oldparam id="APSC_DV.001460.LGE.LOGGERS_TAB" name="LOGGERS_TAB" value="Loggers"/>
                        <oldparam id="APSC_DV.001460.LGE.IGNORE_LIST_TAB" name="IGNORE_LIST_TAB" value="Ignore List"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/390.html" name="CWE">390</reference>
                    </references>
                    <parameters>
                        <group collapsible="false" id="APSC_DV.001460.LGE.tab.LOGGERS_TAB" label="Loggers">
                            <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger;org.apache.logging.log4j.Logger;org.slf4j.Logger" id="APSC_DV.001460.LGE.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                            <param defaultValue="^log.*" id="APSC_DV.001460.LGE.LOG_METHOD_EXPRESSION" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                        </group>
                        <group collapsible="false" id="APSC_DV.001460.LGE.tab.IGNORE_LIST_TAB" label="Ignore List">
                            <param defaultValue="^ignore$" id="APSC_DV.001460.LGE.IGNORE_LIST" inputType="stringList" label="Ignore exception variables matching the following regular expression(s):" prevType="StringList"/>
                        </group>
                        <radioGroup id="APSC_DV.001460.LGE.FLAG_LEVEL" label="Catch clause should contain:" prevType="MultipleChoice" showLabel="true">
                            <radioItem label="Logging method." value="0"/>
                            <radioItem defaultValue="checked" label="Logging method or &quot;throw&quot; exception statement." value="1"/>
                            <radioItem label="Logging method, comment, or &quot;throw&quot; exception statement." value="2"/>
                        </radioGroup>
                        <param defaultValue="false" id="APSC_DV.001460.LGE.CHECK_EXCEPT_LOGGED" inputType="checkbox" label="Check if the exception is passed into the logging method call"/>
                        <param defaultValue="false" id="APSC_DV.001460.LGE.CHECK_EXCEPT_FULL_PASSED" inputType="checkbox" label="Check if the exception passed to the logging method is complete"/>
                        <param defaultValue="false" id="APSC_DV.001460.LGE.CHECK_EXCEPT_THROW" inputType="checkbox" label="Check if the caught exception is passed to a new exception or rethrown"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.DXXE" header="Disable XML external entity injection." id="DXXE" originalId="SECURITY.IBA.DXXE" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="XXE injection has not been disabled."/>
                        <msg index="2" value="XXE injection has not been disabled. Ensure your parser version allows you to configure the required options."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PBRTE" header="Always specify absolute paths to execute commands" id="PBRTE" originalId="SECURITY.WSC.PBRTE" scope="LINE" severity="1" since="10.4.3">
                    <messages>
                        <msg index="1" value="The specified command is not an absolute path with separators"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.AUXD" header="Avoid parsing untrusted data with XMLDecoder" id="AUXD" originalId="SECURITY.IBA.AUXD" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The XMLDecoder class is used."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.EWSSEC" header="Avoid debug information from Spring Security framework to logs" id="EWSSEC" originalId="SECURITY.WSC.EWSSEC" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="Debug features is activated in @EnableWebSecurity annotation"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HV" header="Ensure the HostnameVerifier.verify() method validates the certificate" id="HV" originalId="SECURITY.WSC.HV" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The certificate is not validated, because the 'verify' method always returns 'true'"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.JXCORS" header="Restrict cross-origin resource sharing to secure origins" id="JXCORS" originalId="SECURITY.WSC.JXCORS" scope="LINE" severity="4" since="2020.1">
                    <messages>
                        <msg index="1" value="The &quot;Access-Control-Allow-Origin&quot; header is set to allow unrestricted access to cross-origin resources"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.CONSEN" header="Do not log confidential or sensitive information" id="CONSEN" originalId="SECURITY.ESD.CONSEN" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="''{0}'' should not be used by a logger, it can expose confidential info."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.001460.CONSEN.SUSPICIOUS_WORDS" name="SUSPICIOUS_WORDS" value="Regular expressions representing sensive data:"/>
                        <oldparam id="APSC_DV.001460.CONSEN.LOG_METHOD_EXPRESSIONS" name="LOG_METHOD_EXPRESSIONS" value="Logging method name in regular expression"/>
                        <oldparam id="APSC_DV.001460.CONSEN.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/533.html" name="CWE">533</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/534.html" name="CWE">534</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*ssn.*@delim@.*pass.*" id="APSC_DV.001460.CONSEN.SUSPICIOUS_WORDS" inputType="stringList" label="Regular expressions representing sensive data:" prevType="StringList"/>
                        <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="APSC_DV.001460.CONSEN.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                        <param defaultValue=".*log.*" id="APSC_DV.001460.CONSEN.LOG_METHOD_EXPRESSIONS" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.NTX" header="Avoid declaring methods to throw general or unchecked Exception types" id="NTX" originalId="CODSTA.BP.NTX" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Throwing explicit ''{0}'' object in ''{1}()''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.001460.NTX.CHECKED_EXCEPTS" name="CHECKED_EXCEPTS" value="Exception types which should not be declared to be thrown (fully qualified names)"/>
                        <oldparam id="APSC_DV.001460.NTX.SKIP_JUNIT" name="SKIP_JUNIT" value="Skip JUnit 'TestCase' classes."/>
                        <oldparam id="APSC_DV.001460.NTX.SUBCLASSES" name="SUBCLASSES" value="Check for exceptions which are subclasses of 'Error' and 'RuntimeException'."/>
                        <oldparam id="APSC_DV.001460.NTX.IGNORE_OVERRIDING" name="IGNORE_OVERRIDING" value="Ignore overriding methods."/>
                        <oldparam id="APSC_DV.001460.NTX.IGNORE_PROPAGATED" name="IGNORE_PROPAGATED" value="Ignore methods which propagate exception types of called methods."/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/397.html" name="CWE">397</reference>
                    </references>
                    <parameters>
                        <param defaultValue="java.lang.Exception;java.lang.Error;java.lang.Throwable;java.lang.RuntimeException" id="APSC_DV.001460.NTX.CHECKED_EXCEPTS" inputType="stringList" label="Exception types which should not be declared to be thrown (fully qualified names)" prevType="StringList"/>
                        <param defaultValue="false" id="APSC_DV.001460.NTX.SUBCLASSES" inputType="checkbox" label="Check for exceptions which are subclasses of 'Error' and 'RuntimeException'."/>
                        <param defaultValue="false" id="APSC_DV.001460.NTX.SKIP_JUNIT" inputType="checkbox" label="Skip JUnit classes."/>
                        <param defaultValue="true" id="APSC_DV.001460.NTX.IGNORE_OVERRIDING" inputType="checkbox" label="Ignore overriding methods."/>
                        <param defaultValue="true" id="APSC_DV.001460.NTX.IGNORE_PROPAGATED" inputType="checkbox" label="Ignore methods which propagate exception types of called methods."/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MDSALT" header="Use hash functions with a salt" id="MDSALT" originalId="SECURITY.WSC.MDSALT" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="A salt is not added to the digest"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MCMDU" header="MessageDigest objects must process the data with the 'update' method" id="MCMDU" originalId="SECURITY.WSC.MCMDU" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The 'update' method is not called on the ''{0}'' variable after the message digest object is obtained"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AUNC" header="Avoid using the javax.crypto.NullCipher class in non-test classes." id="AUNC" originalId="SECURITY.WSC.AUNC" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The NullCipher class that does not encrypt the plaintext is used in a non-test class."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.RRSC" header="Define a &quot;readResolve&quot; method for all instances of Serializable types." id="RRSC" originalId="SERIAL.RRSC" scope="LINE" severity="3" since="8.1">
                <messages>
                    <msg index="1" value="The class ''{0}'' implements ''Serializable'' but does not define a &quot;readResolve()&quot; method."/>
                    <msg index="2" value="The &quot;readResolve()&quot; method of the class ''{0}'' may have a return value other than the Serializable instance."/>
                    <msg index="3" value="The &quot;readResolve()&quot; method of the class ''{0}'' does not have the correct signature."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.001460.RRSC.CHECK_PUBLIC" name="CHECK_PUBLIC" value="a &quot;public&quot; constructor"/>
                    <oldparam id="APSC_DV.001460.RRSC.CHECK_PROTECTED" name="CHECK_PROTECTED" value="a &quot;protected&quot; constructor"/>
                    <oldparam id="APSC_DV.001460.RRSC.CHECK_PACKAGE_PRIVATE" name="CHECK_PACKAGE_PRIVATE" value="a &quot;package-private&quot; constructor"/>
                    <oldparam id="APSC_DV.001460.RRSC.CHECK_PRIVATE" name="CHECK_PRIVATE" value="a &quot;private&quot; constructor"/>
                </oldparameters>
                <parameters>
                    <group collapsible="false" id="APSC_DV.001460.RRSC.group.0" label="Check classes with:">
                        <param defaultValue="false" id="APSC_DV.001460.RRSC.CHECK_PUBLIC" inputType="checkbox" label="a &quot;public&quot; constructor"/>
                        <param defaultValue="false" id="APSC_DV.001460.RRSC.CHECK_PROTECTED" inputType="checkbox" label="a &quot;protected&quot; constructor"/>
                        <param defaultValue="false" id="APSC_DV.001460.RRSC.CHECK_PACKAGE_PRIVATE" inputType="checkbox" label="a &quot;package-private&quot; constructor"/>
                        <param defaultValue="true" id="APSC_DV.001460.RRSC.CHECK_PRIVATE" inputType="checkbox" label="a &quot;private&quot; constructor"/>
                    </group>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HGRSI" header="Avoid using the 'getRequestedSessionId' method from the 'HttpServletRequest' class" id="HGRSI" originalId="SECURITY.WSC.HGRSI" scope="LINE" severity="4" since="10.4.2">
                    <messages>
                        <msg index="1" value="The 'getRequestedSessionId' method may return untrusted data"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.CDBV" header="Canonicalize all data before validation." id="CDBV" originalId="SECURITY.IBA.CDBV" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="The data in ''{0}'' may not have been canonicalized before being validated."/>
                        <msg index="2" value="The return value of this call to ''{0}'' may not have been canonicalized before being validated."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.001460.CDBV.CANON_METHS" name="CANON_METHS" value="Canonicalization method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                        <oldparam id="APSC_DV.001460.CDBV.VALID_METHS" name="VALID_METHS" value="Validation method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                        <oldparam id="APSC_DV.001460.CDBV.VALID_CLASSES" name="VALID_CLASSES" value="Only check calls within the following classes\n[regular expressions for fully qualified class name]"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Input Validation p. 81</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A1" name="OWASP-2010">A1-Injection</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A2" name="OWASP-2010">A2-Cross Site Scripting (XSS)</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/79.html" name="CWE">79</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*#canonicalize" description="Canonicalization method names (in regular expressions) [qualified name of declaring type#method name]" id="APSC_DV.001460.CDBV.CANON_METHS" inputType="stringList" label="Canonicalization method names (in regular expressions)" prevType="StringList"/>
                        <param defaultValue=".*#^validate" description="Validation method names (in regular expressions) [qualified name of declaring type#method name]" id="APSC_DV.001460.CDBV.VALID_METHS" inputType="stringList" label="Validation method names (in regular expressions)" prevType="StringList"/>
                        <param defaultValue=".*" description="Only check calls within the following classes [regular expressions for fully qualified class name]" id="APSC_DV.001460.CDBV.VALID_CLASSES" inputType="stringList" label="Only check calls within the following classes" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ENPP" header="Ensure arguments passed to certain methods come from predefined methods list." id="ENPP" originalId="SECURITY.WSC.ENPP" scope="LINE" severity="2" since="9.2">
                    <messages>
                        <msg index="1" value="Argument number {0} passed to method ''{1}'' is not an allowed method call."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.001460.ENPP.PAIRS_TABLE_HEADER" name="PAIRS_TABLE_HEADER" value="Methods and arguments configuration"/>
                        <oldparam id="APSC_DV.001460.ENPP.PAIRS_TABLE_1ST" name="PAIRS_TABLE_1ST" value="Method to be checked (&lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,...)"/>
                        <oldparam id="APSC_DV.001460.ENPP.PAIRS_TABLE_INDEX" name="PAIRS_TABLE_INDEX" value="Argument Index to Check (''0''-based)"/>
                        <oldparam id="APSC_DV.001460.ENPP.PAIRS_TABLE_2ND" name="PAIRS_TABLE_2ND" value="Allowed method name (in Regular Expressions)"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/329.html" name="CWE">329</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/336.html" name="CWE">336</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/337.html" name="CWE">337</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE">676</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="APSC_DV.001460.ENPP.PAIRS_TABLE_HEADER" label="Methods and arguments configuration" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" label="Method to be checked (&lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,...)" required="true"/>
                                <column columnType="text" defaultValue="0" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" label="Argument Index to Check (''0''-based)" required="true" textSize="small"/>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" label="Allowed method name (in Regular Expressions)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#SecureRandom(byte[])"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#setSeed(byte[])"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#setSeed(long)"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="javax.crypto.spec.IvParameterSpec#IvParameterSpec(byte[])"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidIV"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="javax.crypto.spec.IvParameterSpec#IvParameterSpec(byte[],int,int)"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidIV"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.RWAF" header="Ensure that all fields are assigned by the 'readObject()' method and written out by the 'writeObject()' method" id="RWAF" originalId="SERIAL.RWAF" scope="LINE" severity="3" since="8.1">
                <messages>
                    <msg index="1" value="The ''{0}'' field is not read by the ''readObject()'' method."/>
                    <msg index="2" value="The ''{0}'' field is not written out by the ''writeObject()'' method."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.001460.RWAF.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="5" id="APSC_DV.001460.RWAF.MAX_LEVEL" inputType="integer" label="Maximum level of checking allowed" min="0"/>
                    <param defaultValue="true" id="APSC_DV.001460.RWAF.CHECK_WRITE" inputType="checkbox" label="Check 'writeObject' methods" min="0"/>
                    <param defaultValue="true" id="APSC_DV.001460.RWAF.CHECK_READ" inputType="checkbox" label="Check 'readObject' methods" min="0"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ISL" header="Always call 'HttpSession.invalidate()' before 'LoginContext.login()'" id="ISL" originalId="SECURITY.WSC.ISL" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Login without session invalidation."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Session Management p. 78</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/384.html" name="CWE">384</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.IVR" header="Avoid non-random &quot;byte[]&quot; when using IvParameterSpec." id="IVR" originalId="SECURITY.WSC.IVR" scope="LINE" severity="2" since="8.4">
                    <messages>
                        <msg index="1" value="IvParameterSpec instantiated with non-random value ''{0}''."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/329.html" name="CWE">329</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.PEO" header="Do not pass exception messages into output in order to prevent the application from leaking sensitive information" id="PEO" originalId="SECURITY.ESD.PEO" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Print method ''{0}()'' is not allowed in a &quot;catch&quot; block."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.001460.PEO.PRINT_METHOD_EXPRESSION" name="PRINT_METHOD_EXPRESSION" value="Print methods (Specify names in regular expressions)"/>
                        <oldparam id="APSC_DV.001460.PEO.EXCEPTIONS" name="EXCEPTIONS" value="Exceptions (Specify types and method names in regular expressions)"/>
                        <oldparam id="APSC_DV.001460.PEO.TYPE" name="TYPE" value="Type"/>
                        <oldparam id="APSC_DV.001460.PEO.METHOD" name="METHOD" value="Method"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/209.html" name="CWE">209</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/497.html" name="CWE">497</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*print.*;.*Print.*" id="APSC_DV.001460.PEO.PRINT_METHOD_EXPRESSION" inputType="stringList" label="Print methods (Specify names in regular expressions)" prevType="StringList"/>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="APSC_DV.001460.PEO.EXCEPTIONS" label="Exceptions (Specify types and method names in regular expressions)" reader="SATable">
                            <columns>
                                <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" label="Type" required="true"/>
                                <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" label="Method" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" value="^java\.util\.logging\.Logger$"/>
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" value="^.*$"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" value="^org\.apache\.log4j\.Logger$"/>
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" value="^.*$"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.VSI" header="Properly validate server identity" id="VSI" originalId="SECURITY.WSC.VSI" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="SMTP SSL does not check server identity."/>
                        <msg index="2" value="SMTP SSL does not check server identity. Ensure the library version allows you to configure the required options."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.NCE" header="Do not catch exception types which are too general or are unchecked exceptions." id="NCE" originalId="CODSTA.EPC.NCE" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="&quot;catch&quot; statement directly catches the general exception type ''{0}''."/>
                        <msg index="2" value="&quot;catch&quot; statement directly catches the unchecked exception type ''{0}''."/>
                        <msg index="3" value="&quot;catch&quot; statement catches general parent exception type: ''{0}''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.001460.NCE.GENERAL" name="GENERAL" value="Check for general exception types."/>
                        <oldparam id="APSC_DV.001460.NCE.UNCHECKED" name="UNCHECKED" value="Check for unchecked exception types."/>
                        <oldparam id="APSC_DV.001460.NCE.NUM_CHILDREN" name="NUM_CHILDREN" value="Check for parent exceptions caught where number of child exceptions thrown is less than"/>
                        <oldparam id="APSC_DV.001460.NCE.IGNORE_EXCEPTIONS" name="IGNORE_EXCEPTIONS" value="Ignore exceptions with names matching the following regular expression(s):"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/396.html" name="CWE">396</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="APSC_DV.001460.NCE.GENERAL" inputType="checkbox" label="Check for general exception types."/>
                        <param defaultValue="false" id="APSC_DV.001460.NCE.UNCHECKED" inputType="checkbox" label="Check for unchecked exception types."/>
                        <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="APSC_DV.001460.NCE.NUM_CHILDREN" label="Check for parent exceptions caught where number of child exceptions thrown is less than" prevType="InputValueWithCheckBox" reader="SATable">
                            <columns>
                                <column columnType="checkbox" editable="true" id="CODSTA__EPC__NCE__NUM_CHILDREN__COLUMN1" label="" required="true"/>
                                <column columnType="text" editable="true" id="CODSTA__EPC__NCE__NUM_CHILDREN__COLUMN2" label="" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="CODSTA__EPC__NCE__NUM_CHILDREN__COLUMN1" value="true"/>
                                    <column refColumnId="CODSTA__EPC__NCE__NUM_CHILDREN__COLUMN2" value="3"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <param defaultValue="^ignore$" id="APSC_DV.001460.NCE.IGNORE_EXCEPTIONS" inputType="stringList" label="Ignore exceptions with names matching the following regular expression(s):" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SPRING.DCSRFJAVA" header="Do not disable CSRF protection" id="DCSRFJAVA" originalId="SPRING.DCSRFJAVA" scope="LINE" severity="2" since="10.4.3">
                <messages>
                    <msg index="1" value="CSRF protection is disabled."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.ENFL" header="Ensure all sensitive method invocations are logged" id="ENFL" originalId="SECURITY.BV.ENFL" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="''{0}'' is invoked without being logged in the previous statement."/>
                        <msg index="2" value="''{0}'' is invoked without being logged in the next statement."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.001460.ENFL.LOG_TAG" name="LOG_TAG" value="Loggers"/>
                        <oldparam id="APSC_DV.001460.ENFL.PRE_LOG_METHODS" name="PRE_LOG_METHODS" value="Method invocations that need logging in previous statement"/>
                        <oldparam id="APSC_DV.001460.ENFL.LOG_METHOD_EXPRESSIONS" name="LOG_METHOD_EXPRESSIONS" value="Logging method name in regular expression"/>
                        <oldparam id="APSC_DV.001460.ENFL.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                        <oldparam id="APSC_DV.001460.ENFL.POST_LOG_TAG" name="POST_LOG_TAG" value="Next statement"/>
                        <oldparam id="APSC_DV.001460.ENFL.METHOD" name="METHOD" value="Method"/>
                        <oldparam id="APSC_DV.001460.ENFL.PRE_LOG_TAG" name="PRE_LOG_TAG" value="Previous statement"/>
                        <oldparam id="APSC_DV.001460.ENFL.POST_LOG_METHODS" name="POST_LOG_METHODS" value="Method invocations that need logging in next statement"/>
                        <oldparam id="APSC_DV.001460.ENFL.TYPE" name="TYPE" value="Type"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                    </references>
                    <parameters>
                        <group collapsible="false" id="APSC_DV.001460.ENFL.tab.PRE_LOG_TAG" label="Previous statement">
                            <!--param id="SECURITY.BV.ENFL.PRE_LOG_METHODS" inputType="bigtext" defaultValue="true;javax.security.auth.login.LoginContext;false;login;false;true;javax.security.auth.Subject;false;doAs;false;true;javax.security.auth.Subject;false;doAsPrivileged;false" label="Method invocations that need logging in previous statement"/-->
                            <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="APSC_DV.001460.ENFL.PRE_LOG_METHODS" label="Method invocations that need logging in previous statement" reader="SATable">
                                <columns>
                                    <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" label="Type" required="true"/>
                                    <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" label="Method" required="true"/>
                                </columns>
                                <predefinedRows>
                                    <row id="1">
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" value="javax.security.auth.login.LoginContext"/>
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" value="login"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" value="javax.security.auth.Subject"/>
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" value="doAs"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" value="javax.security.auth.Subject"/>
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" value="doAsPrivileged"/>
                                    </row>
                                </predefinedRows>
                            </complexParamTable>
                        </group>
                        <group collapsible="false" id="APSC_DV.001460.ENFL.tab.POST_LOG_TAG" label="Next statement">
                            <!--param id="SECURITY.BV.ENFL.POST_LOG_METHODS" inputType="bigtext" defaultValue="true;javax.security.auth.login.LoginContext;false;logout;false" label="Method invocations that need logging in next statement"/-->
                            <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="APSC_DV.001460.ENFL.POST_LOG_METHODS" label="Method invocations that need logging in next statement" reader="SATable">
                                <columns>
                                    <column columnType="text" defaultValue="unknown" editable="false" id="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN1" label="Type" required="true"/>
                                    <column columnType="text" defaultValue="unknown" editable="false" id="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN2" label="Method" required="true"/>
                                </columns>
                                <predefinedRows>
                                    <row id="1">
                                        <column refColumnId="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN1" value="javax.security.auth.login.LoginContext"/>
                                        <column refColumnId="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN2" value="logout"/>
                                    </row>
                                </predefinedRows>
                            </complexParamTable>
                        </group>
                        <group collapsible="false" id="APSC_DV.001460.ENFL.tab.LOG_TAG" label="Loggers">
                            <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="APSC_DV.001460.ENFL.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                            <param defaultValue="^log$" id="APSC_DV.001460.ENFL.LOG_METHOD_EXPRESSIONS" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                        </group>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PBFA" header="Ensure sufficient protection against multiple failed authentication attempts" id="PBFA" originalId="SECURITY.WSC.PBFA" scope="LINE" severity="5" type="global">
                    <messages>
                        <msg index="1" value="This class uses the object of the AuthenticationFailureBadCredentialsEvent class. Ensure that sufficient protection against multiple failed authentication attempts is implemented."/>
                        <msg index="2" value="Ensure that the implementation of the 'onAuthenticationFailure()' method provides sufficient protection against multiple failed authentication attempts."/>
                        <msg index="3" value="Ensure that the implementation of the 'configure()' method provides sufficient protection against multiple failed authentication attempts."/>
                        <msg index="4" value="Ensure that the application code includes sufficient protection against multiple failed authentication attempts."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SIKG" header="Initialize KeyGenerator instances " id="SIKG" originalId="SECURITY.WSC.SIKG" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The ''{0}'' object of the KeyGenerator class is created but not initialized"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.UOSC" header="Use the ''getSecure()'' and ''setSecure()'' methods to enforce the use of secure cookies." id="UOSC" originalId="SECURITY.WSC.UOSC" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="The ''Cookie'' variable ''{0}'' may be used without making sure that it is a secure cookie."/>
                        <msg index="2" value="Make sure that the appropriate version of library is used."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Session Management p. 78</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010">A3-Broken Authentication and Session Management</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A5" name="OWASP-2010">A5-Cross Site Request Forgery (CSRF)</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/614.html" name="CWE">614</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/352.html" name="CWE">352</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE">807</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.PLC" header="Avoid storing sensitive data in plaintext in a cookie" id="PLC" originalId="SECURITY.ESD.PLC" scope="LINE" severity="1" since="9.2">
                    <messages>
                        <msg index="1" value="Do not store important to safety data in cookie."/>
                        <msg index="2" value="Do not store sensitive data in plaintext in cookie."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.001460.PLC.TABLE_HEADER" name="TABLE_HEADER" value="List of RegExp to check key in cookie"/>
                        <oldparam id="APSC_DV.001460.PLC.CHECK_VALUES_HEADER" name="CHECK_VALUES_HEADER" value="Check values"/>
                        <oldparam id="APSC_DV.001460.PLC.NAME_HEADER" name="NAME_HEADER" value="Key in cookie (RegExp)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010">A9-Insufficient Transport Layer Protection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/315.html" name="CWE">315</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE">807</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="APSC_DV.001460.PLC.TABLE_HEADER" label="List of RegExp to check key in cookie" reader="SATable">
                            <columns>
                                <column columnType="checkbox" defaultValue="true" editable="true" id="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" label="Check values" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" label="Key in cookie (RegExp)" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" value="false"/>
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" value=".*(pass|role).*"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" value="true"/>
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" value=".*(user|login|account).*"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.VJFS" header="Always verify JarFile signatures" id="VJFS" originalId="SECURITY.WSC.VJFS" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Consider using a JarFile constructor with verification enabled."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/347.html" name="CWE">347</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.DMDS" header="Avoid using the DriverManagerDataSource class in production code" id="DMDS" originalId="SECURITY.WSC.DMDS" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The DriverManagerDataSource class is not a pooled data source and should not be used in production code."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AISSAJAVA" header="Avoid using insecure cryptographic algorithms for data encryption with Spring" id="AISSAJAVA" originalId="SECURITY.WSC.AISSAJAVA" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The cryptographic class is insecure."/>
                        <msg index="2" value="The cryptographic algorithm used in the constructor of MessageDigestPasswordEncoder is insecure."/>
                    </messages>
                    <parameters>
                        <!-- <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_ENCODERS" inputType="stringList" defaultValue="org.springframework.security.crypto.password.LdapShaPasswordEncoder;org.springframework.security.crypto.password.Md5PasswordEncoder;org.springframework.security.crypto.password.Md4PasswordEncoder;org.springframework.security.crypto.password.NoOpPasswordEncoder;org.springframework.security.authentication.encoding.LdapShaPasswordEncoder;org.springframework.security.authentication.encoding.Md5PasswordEncoder;org.springframework.security.authentication.encoding.Md4PasswordEncoder" label="Insecure classes that should not be used for encryption" prevType="StringList"/>
                        <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_NAMES" inputType="stringList" defaultValue="MD2;MD5;SHA-1" label="Insecure algorithms in the MessageDigestPasswordEncoder class" prevType="StringList"/>-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="APSC_DV.001460.AISSAJAVA.BANNED_ALGO_ENCODERS" label="Insecure classes that should not be used for encryption" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" label="Fully Qualified Name of Insecure Class" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md5PasswordEncoder"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md4PasswordEncoder"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.NoOpPasswordEncoder"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>
                                </row>
                                <row id="7">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md4PasswordEncoder"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="APSC_DV.001460.AISSAJAVA.BANNED_ALGO_NAMES" label="Insecure algorithms in the MessageDigestPasswordEncoder class" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" label="Name of Insecure Algorithm" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD2"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD5"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="SHA-1"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.RUIM" header="Ensure proper session expiration" id="RUIM" originalId="SECURITY.IBA.RUIM" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The session expiration time used in this metod call is obtained form a servlet request"/>
                        <msg index="2" value="The negative timeout value used in this metod call prevents session expiration"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HTTPRHA" header="Do not rely on IP addresses obtained from HTTP request headers for authentication" id="HTTPRHA" originalId="SECURITY.WSC.HTTPRHA" scope="LINE" severity="3" since="2020.1">
                    <messages>
                        <msg index="1" value="The IP address retrieved from the HTTP request header is used for authentication"/>
                        <msg index="2" value="The IP address retrieved from the header using the 'getRemoteAddr()' method is used for authentication"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.MASP" header="Assign 'protected' accessibility to 'readResolve()' and 'writeReplace()' methods in serializable classes" id="MASP" originalId="PB.API.MASP" scope="METHOD" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Method is not &quot;protected&quot;: ''{0}''"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ONS" header="Ensure method arguments are serializable" id="ONS" originalId="PB.API.ONS" scope="LINE" severity="1" since="8.2">
                    <messages>
                        <msg index="1" value="This object of type ''{0}'' may not be serializable."/>
                        <msg index="2" value="This object of type ''{0}'' may not be completely serializable."/>
                    </messages>
                    <parameters>
                        <param defaultValue="false" id="APSC_DV.001460.ONS.CHECK_INTERFACES" inputType="checkbox" label="Check implementations of interface method arguments (slow)"/>
                        <param defaultValue="true" id="APSC_DV.001460.ONS.IGNORE_PARAM_COLLECTION" inputType="checkbox" label="Ignore Collections or Maps with Serializable type arguments"/>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="APSC_DV.001460.ONS.SERIAL_LIST" label="List of methods to be checked: " reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="PB__API__ONS__SERIAL_LIST__COLUMN1" label="Type" required="true"/>
                                <column columnType="text" editable="true" id="PB__API__ONS__SERIAL_LIST__COLUMN2" label="Method" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN1" value="javax.servlet.http.HttpSession"/>
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN2" value="setAttribute"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN1" value="java.io.ObjectOutputStream"/>
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN2" value="writeObject"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN1" value="java.io.ObjectOutputStream"/>
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN2" value="writeObjectOverride"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN1" value="java.io.ObjectOutputStream"/>
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN2" value="writeUnshared"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <param defaultValue="^java\.util\.Collection$;^java\.util\.Map$;^java\.lang\.Object$" id="APSC_DV.001460.ONS.IGNORE_TYPE_LIST" inputType="stringList" label="Ignore method arguments of the following types (specify as regular expression):"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.OROM" header="Implement 'readObject()' and 'writeObject()' for all 'Serializable' classes." id="OROM" originalId="SECURITY.EAB.OROM" scope="CLASS" severity="5" since="4.5">
                    <messages>
                        <msg index="1" value="Serializable class ''{0}'' does not implement 'readObject()'."/>
                        <msg index="2" value="Serializable class ''{0}'' implements 'readObject()', but this method is not 'final'."/>
                        <msg index="3" value="Serializable class ''{0}'' does not implement 'writeObject()'."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.001460.OROM.MUST_BE_FINAL" name="MUST_BE_FINAL" value="Make sure the 'readObject()' method is 'final'."/>
                        <oldparam id="APSC_DV.001460.OROM.CHECK_FOR_READ" name="CHECK_FOR_READ" value="Check that the 'readObject()' method is implemented in all serializable classes."/>
                        <oldparam id="APSC_DV.001460.OROM.CHECK_FOR_WRITE" name="CHECK_FOR_WRITE" value="Check that the 'writeObject()' method is implemented in all serializable classes."/>
                        <oldparam id="APSC_DV.001460.OROM.IGNORE_TYPES" name="IGNORE_TYPES" value="Ignore types extending or implementing the following types (Specify fully qualified names):"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="APSC_DV.001460.OROM.CHECK_FOR_READ" inputType="checkbox" label="Check that the 'readObject()' method is implemented in all serializable classes.">
                            <param defaultValue="false" id="APSC_DV.001460.OROM.MUST_BE_FINAL" inputType="checkbox" label="Make sure the 'readObject()' method is 'final'."/>
                        </param>
                        <param defaultValue="false" id="APSC_DV.001460.OROM.CHECK_FOR_WRITE" inputType="checkbox" label="Check that the 'writeObject()' method is implemented in all serializable classes."/>
                        <param defaultValue="" id="APSC_DV.001460.OROM.IGNORE_TYPES" inputType="stringList" label="Ignore types extending or implementing the following types (Specify fully qualified names):" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ICA" header="Avoid using insecure algorithms for cryptography." id="ICA" originalId="SECURITY.WSC.ICA" scope="LINE" severity="1" since="8.3">
                    <messages>
                        <msg index="1" value="The &quot;{0}&quot; algorithm is not an acceptable cryptography algorithm for the &quot;{1}&quot; class."/>
                        <msg index="2" value="The cryptography algorithm is used without padding."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.001460.ICA.SUGGESTED_ALGS" name="SUGGESTED_ALGS" value="Safe Cryptography Algorithms"/>
                        <oldparam id="APSC_DV.001460.ICA.TYPE_NAME" name="TYPE_NAME" value="Fully Qualified Class Name"/>
                        <oldparam id="APSC_DV.001460.ICA.ALGORITHM_NAME" name="ALGORITHM_NAME" value="Algorithm Names (in regular expressions)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/328.html" name="CWE">328</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/780.html" name="CWE">780</reference>
                    </references>
                    <parameters>
                        <!--param id="SECURITY.WSC.ICA.SUGGESTED_ALGS" inputType="bigtext" defaultValue="java.security.KeyPairGenerator&lt;#&gt;RSA;java.security.MessageDigest&lt;#&gt;SHA-256#SHA-384#SHA-512;javax.crypto.Cipher&lt;#&gt;3DES#AES#ARCFOUR/RC4#Blowfish#ECIES#RC4#RC5#RSA(.*)OAEPWith(.*)And(.*)Padding;javax.crypto.KeyGenerator&lt;#&gt;AES#ARCFOUR/RC4#Blowfish#HmacSHA256#HmacSHA384#HmacSHA512#RC2" label="Safe Cryptography Algorithms" prevType="DuoList"/-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="APSC_DV.001460.ICA.SUGGESTED_ALGS" label="Secure Cryptographic Algorithms" prevType="DuoList" reader="SADuoList">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" label="Fully Qualified Class Name" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.KeyPairGenerator"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.MessageDigest"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.KeyGenerator"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.Cipher"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.net.ssl.SSLContext"/>
                                </row>
                            </predefinedRows>
                            <childTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="APSC_DV.001460.ICA.SUGGESTED_ALGS.CHILDTABLE1" label="">
                                <columns>
                                    <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" label="Name of Secure Algorithm (in regular expressions)" required="true"/>
                                </columns>
                                <predefinedRows refParentRowId="1">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="2">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-256"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-384"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-512"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="3">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA256"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA384"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA512"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC2"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESede"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="4">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="3DES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES/(.*)/PKCS5Padding"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ECIES"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC4"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC5"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA(.*)OAEPWith(.*)And(.*)Padding"/>
                                    </row>
                                    <row id="9">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESEDE/(.*)/PKCS5Padding"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="5">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="TLSv1.2"/>
                                    </row>
                                </predefinedRows>
                            </childTable>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.DUID" header="Create a 'serialVersionUID' for all 'Serializable' classes." id="DUID" originalId="SERIAL.DUID" scope="CLASS" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="No 'serialVersionUID' declared in class ''{0}''."/>
                    <msg index="2" value="'serialVersionUID' must be declared &quot;static final long&quot;, otherwise it will not be used."/>
                    <msg index="3" value="'serialVersionUID' should be declared &quot;private&quot;."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.001460.DUID.CHECK_PRIVATE" name="CHECK_PRIVATE" value="Check if serialVersionUID is &quot;private&quot;"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="false" id="APSC_DV.001460.DUID.CHECK_PRIVATE" inputType="checkbox" label="Check if serialVersionUID is &quot;private&quot;"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.SROS" header="Do not declare the 'readObject()' method as &quot;synchronized&quot;" id="SROS" originalId="SERIAL.SROS" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Method readObject()  is synchronized."/>
                </messages>
            </rule>
         </category>
         <category description="APSC_DV.000650 The application must not write sensitive data into the application logs." name="000650">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.CONSEN" header="Do not log confidential or sensitive information" id="CONSEN" originalId="SECURITY.ESD.CONSEN" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="''{0}'' should not be used by a logger, it can expose confidential info."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.000650.CONSEN.SUSPICIOUS_WORDS" name="SUSPICIOUS_WORDS" value="Regular expressions representing sensive data:"/>
                        <oldparam id="APSC_DV.000650.CONSEN.LOG_METHOD_EXPRESSIONS" name="LOG_METHOD_EXPRESSIONS" value="Logging method name in regular expression"/>
                        <oldparam id="APSC_DV.000650.CONSEN.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/533.html" name="CWE">533</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/534.html" name="CWE">534</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*ssn.*@delim@.*pass.*" id="APSC_DV.000650.CONSEN.SUSPICIOUS_WORDS" inputType="stringList" label="Regular expressions representing sensive data:" prevType="StringList"/>
                        <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="APSC_DV.000650.CONSEN.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                        <param defaultValue=".*log.*" id="APSC_DV.000650.CONSEN.LOG_METHOD_EXPRESSIONS" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.ENFL" header="Ensure all sensitive method invocations are logged" id="ENFL" originalId="SECURITY.BV.ENFL" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="''{0}'' is invoked without being logged in the previous statement."/>
                        <msg index="2" value="''{0}'' is invoked without being logged in the next statement."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.000650.ENFL.LOG_TAG" name="LOG_TAG" value="Loggers"/>
                        <oldparam id="APSC_DV.000650.ENFL.PRE_LOG_METHODS" name="PRE_LOG_METHODS" value="Method invocations that need logging in previous statement"/>
                        <oldparam id="APSC_DV.000650.ENFL.LOG_METHOD_EXPRESSIONS" name="LOG_METHOD_EXPRESSIONS" value="Logging method name in regular expression"/>
                        <oldparam id="APSC_DV.000650.ENFL.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                        <oldparam id="APSC_DV.000650.ENFL.POST_LOG_TAG" name="POST_LOG_TAG" value="Next statement"/>
                        <oldparam id="APSC_DV.000650.ENFL.METHOD" name="METHOD" value="Method"/>
                        <oldparam id="APSC_DV.000650.ENFL.PRE_LOG_TAG" name="PRE_LOG_TAG" value="Previous statement"/>
                        <oldparam id="APSC_DV.000650.ENFL.POST_LOG_METHODS" name="POST_LOG_METHODS" value="Method invocations that need logging in next statement"/>
                        <oldparam id="APSC_DV.000650.ENFL.TYPE" name="TYPE" value="Type"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                    </references>
                    <parameters>
                        <group collapsible="false" id="APSC_DV.000650.ENFL.tab.PRE_LOG_TAG" label="Previous statement">
                            <!--param id="SECURITY.BV.ENFL.PRE_LOG_METHODS" inputType="bigtext" defaultValue="true;javax.security.auth.login.LoginContext;false;login;false;true;javax.security.auth.Subject;false;doAs;false;true;javax.security.auth.Subject;false;doAsPrivileged;false" label="Method invocations that need logging in previous statement"/-->
                            <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="APSC_DV.000650.ENFL.PRE_LOG_METHODS" label="Method invocations that need logging in previous statement" reader="SATable">
                                <columns>
                                    <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" label="Type" required="true"/>
                                    <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" label="Method" required="true"/>
                                </columns>
                                <predefinedRows>
                                    <row id="1">
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" value="javax.security.auth.login.LoginContext"/>
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" value="login"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" value="javax.security.auth.Subject"/>
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" value="doAs"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" value="javax.security.auth.Subject"/>
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" value="doAsPrivileged"/>
                                    </row>
                                </predefinedRows>
                            </complexParamTable>
                        </group>
                        <group collapsible="false" id="APSC_DV.000650.ENFL.tab.POST_LOG_TAG" label="Next statement">
                            <!--param id="SECURITY.BV.ENFL.POST_LOG_METHODS" inputType="bigtext" defaultValue="true;javax.security.auth.login.LoginContext;false;logout;false" label="Method invocations that need logging in next statement"/-->
                            <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="APSC_DV.000650.ENFL.POST_LOG_METHODS" label="Method invocations that need logging in next statement" reader="SATable">
                                <columns>
                                    <column columnType="text" defaultValue="unknown" editable="false" id="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN1" label="Type" required="true"/>
                                    <column columnType="text" defaultValue="unknown" editable="false" id="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN2" label="Method" required="true"/>
                                </columns>
                                <predefinedRows>
                                    <row id="1">
                                        <column refColumnId="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN1" value="javax.security.auth.login.LoginContext"/>
                                        <column refColumnId="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN2" value="logout"/>
                                    </row>
                                </predefinedRows>
                            </complexParamTable>
                        </group>
                        <group collapsible="false" id="APSC_DV.000650.ENFL.tab.LOG_TAG" label="Loggers">
                            <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="APSC_DV.000650.ENFL.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                            <param defaultValue="^log$" id="APSC_DV.000650.ENFL.LOG_METHOD_EXPRESSIONS" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                        </group>
                    </parameters>
                </rule>
         </category>
         <category description="APSC_DV.001860 The application must use mechanisms meeting the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance for authentication to a cryptographic module." name="001860">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AUNC" header="Avoid using the javax.crypto.NullCipher class in non-test classes." id="AUNC" originalId="SECURITY.WSC.AUNC" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The NullCipher class that does not encrypt the plaintext is used in a non-test class."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MDSALT" header="Use hash functions with a salt" id="MDSALT" originalId="SECURITY.WSC.MDSALT" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="A salt is not added to the digest"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CKTS" header="Avoid using cryptographic keys which are too short." id="CKTS" originalId="SECURITY.WSC.CKTS" scope="LINE" severity="2" since="8.4">
                    <messages>
                        <msg index="1" value="Key size ({0} bits) is below the recommended minimum key size ({1} bits) for the &quot;{2}&quot; algorithm."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.001860.CKTS.MIN_LENGTH_TABLE" name="MIN_LENGTH_TABLE" value="Minimum Key Size for Each Algorithm"/>
                        <oldparam id="APSC_DV.001860.CKTS.ALGORITHM_NAME" name="ALGORITHM_NAME" value="Algorithm Name"/>
                        <oldparam id="APSC_DV.001860.CKTS.MINIMUM_KEY_SIZE" name="MINIMUM_KEY_SIZE" value="Minimum Key Size (in Bits)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="APSC_DV.001860.CKTS.MIN_LENGTH_TABLE" label="Minimum Key Size for Each Algorithm" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" label="Algorithm Name" required="true"/>
                                <column columnType="text" defaultValue="128" editable="true" id="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" label="Minimum Key Size (in Bits)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" value="AES"/>
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" value="128"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" value="RSA"/>
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" value="1024"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ICA" header="Avoid using insecure algorithms for cryptography." id="ICA" originalId="SECURITY.WSC.ICA" scope="LINE" severity="1" since="8.3">
                    <messages>
                        <msg index="1" value="The &quot;{0}&quot; algorithm is not an acceptable cryptography algorithm for the &quot;{1}&quot; class."/>
                        <msg index="2" value="The cryptography algorithm is used without padding."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.001860.ICA.SUGGESTED_ALGS" name="SUGGESTED_ALGS" value="Safe Cryptography Algorithms"/>
                        <oldparam id="APSC_DV.001860.ICA.TYPE_NAME" name="TYPE_NAME" value="Fully Qualified Class Name"/>
                        <oldparam id="APSC_DV.001860.ICA.ALGORITHM_NAME" name="ALGORITHM_NAME" value="Algorithm Names (in regular expressions)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/328.html" name="CWE">328</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/780.html" name="CWE">780</reference>
                    </references>
                    <parameters>
                        <!--param id="SECURITY.WSC.ICA.SUGGESTED_ALGS" inputType="bigtext" defaultValue="java.security.KeyPairGenerator&lt;#&gt;RSA;java.security.MessageDigest&lt;#&gt;SHA-256#SHA-384#SHA-512;javax.crypto.Cipher&lt;#&gt;3DES#AES#ARCFOUR/RC4#Blowfish#ECIES#RC4#RC5#RSA(.*)OAEPWith(.*)And(.*)Padding;javax.crypto.KeyGenerator&lt;#&gt;AES#ARCFOUR/RC4#Blowfish#HmacSHA256#HmacSHA384#HmacSHA512#RC2" label="Safe Cryptography Algorithms" prevType="DuoList"/-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="APSC_DV.001860.ICA.SUGGESTED_ALGS" label="Secure Cryptographic Algorithms" prevType="DuoList" reader="SADuoList">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" label="Fully Qualified Class Name" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.KeyPairGenerator"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.MessageDigest"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.KeyGenerator"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.Cipher"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.net.ssl.SSLContext"/>
                                </row>
                            </predefinedRows>
                            <childTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="APSC_DV.001860.ICA.SUGGESTED_ALGS.CHILDTABLE1" label="">
                                <columns>
                                    <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" label="Name of Secure Algorithm (in regular expressions)" required="true"/>
                                </columns>
                                <predefinedRows refParentRowId="1">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="2">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-256"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-384"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-512"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="3">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA256"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA384"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA512"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC2"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESede"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="4">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="3DES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES/(.*)/PKCS5Padding"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ECIES"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC4"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC5"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA(.*)OAEPWith(.*)And(.*)Padding"/>
                                    </row>
                                    <row id="9">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESEDE/(.*)/PKCS5Padding"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="5">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="TLSv1.2"/>
                                    </row>
                                </predefinedRows>
                            </childTable>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SRD" header="Use 'java.security.SecureRandom' instead of 'java.util.Random' or 'Math.random()'." id="SRD" originalId="SECURITY.WSC.SRD" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Avoid using the insecure ''{0}'' as a random number generator"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/330.html" name="CWE">330</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/338.html" name="CWE">338</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE">676</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AISSAJAVA" header="Avoid using insecure cryptographic algorithms for data encryption with Spring" id="AISSAJAVA" originalId="SECURITY.WSC.AISSAJAVA" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The cryptographic class is insecure."/>
                        <msg index="2" value="The cryptographic algorithm used in the constructor of MessageDigestPasswordEncoder is insecure."/>
                    </messages>
                    <parameters>
                        <!-- <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_ENCODERS" inputType="stringList" defaultValue="org.springframework.security.crypto.password.LdapShaPasswordEncoder;org.springframework.security.crypto.password.Md5PasswordEncoder;org.springframework.security.crypto.password.Md4PasswordEncoder;org.springframework.security.crypto.password.NoOpPasswordEncoder;org.springframework.security.authentication.encoding.LdapShaPasswordEncoder;org.springframework.security.authentication.encoding.Md5PasswordEncoder;org.springframework.security.authentication.encoding.Md4PasswordEncoder" label="Insecure classes that should not be used for encryption" prevType="StringList"/>
                        <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_NAMES" inputType="stringList" defaultValue="MD2;MD5;SHA-1" label="Insecure algorithms in the MessageDigestPasswordEncoder class" prevType="StringList"/>-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="APSC_DV.001860.AISSAJAVA.BANNED_ALGO_ENCODERS" label="Insecure classes that should not be used for encryption" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" label="Fully Qualified Name of Insecure Class" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md5PasswordEncoder"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md4PasswordEncoder"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.NoOpPasswordEncoder"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>
                                </row>
                                <row id="7">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md4PasswordEncoder"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="APSC_DV.001860.AISSAJAVA.BANNED_ALGO_NAMES" label="Insecure algorithms in the MessageDigestPasswordEncoder class" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" label="Name of Insecure Algorithm" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD2"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD5"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="SHA-1"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="APSC_DV.000170 The application must implement cryptographic mechanisms to protect the integrity of remote access sessions." name="000170">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.USC" header="Use the SSL-enabled version of classes when possible." id="USC" originalId="SECURITY.WSC.USC" scope="LINE" severity="3" since="7.5">
                    <messages>
                        <msg index="1" value="Consider using the SSL-enabled type ''SSLServerSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="2" value="Consider using the SSL-enabled type ''SSLSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="3" value="Consider using the SSL-enabled type ''HttpsURLConnection'' for the {0} ''{1}''."/>
                        <msg index="4" value="Consider using the SSL-enabled type ''SslRMIClientSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="5" value="Consider using the SSL-enabled type ''SslRMIServerSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="6" value="Consider using the SSL-enabled type ''SSLSocket'' for the {0} ''{1}''."/>
                        <msg index="7" value="Consider using the SSL-enabled type ''SSLServerSocket'' for the {0} ''{1}''."/>
                        <msg index="8" value="Consider using the SSL-enabled type ''SSLPermission'' for the {0} ''{1}''."/>
                    </messages>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010">A9-Insufficient Transport Layer Protection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/494.html" name="CWE">494</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AISSAJAVA" header="Avoid using insecure cryptographic algorithms for data encryption with Spring" id="AISSAJAVA" originalId="SECURITY.WSC.AISSAJAVA" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The cryptographic class is insecure."/>
                        <msg index="2" value="The cryptographic algorithm used in the constructor of MessageDigestPasswordEncoder is insecure."/>
                    </messages>
                    <parameters>
                        <!-- <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_ENCODERS" inputType="stringList" defaultValue="org.springframework.security.crypto.password.LdapShaPasswordEncoder;org.springframework.security.crypto.password.Md5PasswordEncoder;org.springframework.security.crypto.password.Md4PasswordEncoder;org.springframework.security.crypto.password.NoOpPasswordEncoder;org.springframework.security.authentication.encoding.LdapShaPasswordEncoder;org.springframework.security.authentication.encoding.Md5PasswordEncoder;org.springframework.security.authentication.encoding.Md4PasswordEncoder" label="Insecure classes that should not be used for encryption" prevType="StringList"/>
                        <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_NAMES" inputType="stringList" defaultValue="MD2;MD5;SHA-1" label="Insecure algorithms in the MessageDigestPasswordEncoder class" prevType="StringList"/>-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="APSC_DV.000170.AISSAJAVA.BANNED_ALGO_ENCODERS" label="Insecure classes that should not be used for encryption" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" label="Fully Qualified Name of Insecure Class" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md5PasswordEncoder"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md4PasswordEncoder"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.NoOpPasswordEncoder"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>
                                </row>
                                <row id="7">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md4PasswordEncoder"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="APSC_DV.000170.AISSAJAVA.BANNED_ALGO_NAMES" label="Insecure algorithms in the MessageDigestPasswordEncoder class" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" label="Name of Insecure Algorithm" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD2"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD5"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="SHA-1"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SRD" header="Use 'java.security.SecureRandom' instead of 'java.util.Random' or 'Math.random()'." id="SRD" originalId="SECURITY.WSC.SRD" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Avoid using the insecure ''{0}'' as a random number generator"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/330.html" name="CWE">330</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/338.html" name="CWE">338</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE">676</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AUNC" header="Avoid using the javax.crypto.NullCipher class in non-test classes." id="AUNC" originalId="SECURITY.WSC.AUNC" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The NullCipher class that does not encrypt the plaintext is used in a non-test class."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ICA" header="Avoid using insecure algorithms for cryptography." id="ICA" originalId="SECURITY.WSC.ICA" scope="LINE" severity="1" since="8.3">
                    <messages>
                        <msg index="1" value="The &quot;{0}&quot; algorithm is not an acceptable cryptography algorithm for the &quot;{1}&quot; class."/>
                        <msg index="2" value="The cryptography algorithm is used without padding."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.000170.ICA.SUGGESTED_ALGS" name="SUGGESTED_ALGS" value="Safe Cryptography Algorithms"/>
                        <oldparam id="APSC_DV.000170.ICA.TYPE_NAME" name="TYPE_NAME" value="Fully Qualified Class Name"/>
                        <oldparam id="APSC_DV.000170.ICA.ALGORITHM_NAME" name="ALGORITHM_NAME" value="Algorithm Names (in regular expressions)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/328.html" name="CWE">328</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/780.html" name="CWE">780</reference>
                    </references>
                    <parameters>
                        <!--param id="SECURITY.WSC.ICA.SUGGESTED_ALGS" inputType="bigtext" defaultValue="java.security.KeyPairGenerator&lt;#&gt;RSA;java.security.MessageDigest&lt;#&gt;SHA-256#SHA-384#SHA-512;javax.crypto.Cipher&lt;#&gt;3DES#AES#ARCFOUR/RC4#Blowfish#ECIES#RC4#RC5#RSA(.*)OAEPWith(.*)And(.*)Padding;javax.crypto.KeyGenerator&lt;#&gt;AES#ARCFOUR/RC4#Blowfish#HmacSHA256#HmacSHA384#HmacSHA512#RC2" label="Safe Cryptography Algorithms" prevType="DuoList"/-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="APSC_DV.000170.ICA.SUGGESTED_ALGS" label="Secure Cryptographic Algorithms" prevType="DuoList" reader="SADuoList">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" label="Fully Qualified Class Name" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.KeyPairGenerator"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.MessageDigest"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.KeyGenerator"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.Cipher"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.net.ssl.SSLContext"/>
                                </row>
                            </predefinedRows>
                            <childTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="APSC_DV.000170.ICA.SUGGESTED_ALGS.CHILDTABLE1" label="">
                                <columns>
                                    <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" label="Name of Secure Algorithm (in regular expressions)" required="true"/>
                                </columns>
                                <predefinedRows refParentRowId="1">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="2">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-256"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-384"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-512"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="3">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA256"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA384"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA512"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC2"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESede"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="4">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="3DES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES/(.*)/PKCS5Padding"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ECIES"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC4"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC5"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA(.*)OAEPWith(.*)And(.*)Padding"/>
                                    </row>
                                    <row id="9">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESEDE/(.*)/PKCS5Padding"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="5">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="TLSv1.2"/>
                                    </row>
                                </predefinedRows>
                            </childTable>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MDSALT" header="Use hash functions with a salt" id="MDSALT" originalId="SECURITY.WSC.MDSALT" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="A salt is not added to the digest"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CKTS" header="Avoid using cryptographic keys which are too short." id="CKTS" originalId="SECURITY.WSC.CKTS" scope="LINE" severity="2" since="8.4">
                    <messages>
                        <msg index="1" value="Key size ({0} bits) is below the recommended minimum key size ({1} bits) for the &quot;{2}&quot; algorithm."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.000170.CKTS.MIN_LENGTH_TABLE" name="MIN_LENGTH_TABLE" value="Minimum Key Size for Each Algorithm"/>
                        <oldparam id="APSC_DV.000170.CKTS.ALGORITHM_NAME" name="ALGORITHM_NAME" value="Algorithm Name"/>
                        <oldparam id="APSC_DV.000170.CKTS.MINIMUM_KEY_SIZE" name="MINIMUM_KEY_SIZE" value="Minimum Key Size (in Bits)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="APSC_DV.000170.CKTS.MIN_LENGTH_TABLE" label="Minimum Key Size for Each Algorithm" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" label="Algorithm Name" required="true"/>
                                <column columnType="text" defaultValue="128" editable="true" id="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" label="Minimum Key Size (in Bits)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" value="AES"/>
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" value="128"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" value="RSA"/>
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" value="1024"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ACMD" header="Avoid using custom MessageDigest implementations" id="ACMD" originalId="SECURITY.WSC.ACMD" scope="LINE" severity="4" since="10.4.2">
                    <messages>
                        <msg index="1" value="The class that extends MessageDigest may provide unsafe algorithms"/>
                    </messages>
                </rule>
         </category>
         <category description="APSC_DV.000510 The application must execute without excessive account permissions." name="000510">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.PDLC" header="Avoid using dynamically loaded classes in &quot;privileged&quot; code blocks." id="PDLC" originalId="SECURITY.BV.PDLC" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Method ''{0}'' may dynamically load an untrusted class."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.000510.PDLC.CHECK_PA" name="CHECK_PA" value="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <oldparam id="APSC_DV.000510.PDLC.CHECK_PEA" name="CHECK_PEA" value="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authorization p. 73</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="APSC_DV.000510.PDLC.CHECK_PA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <param defaultValue="true" id="APSC_DV.000510.PDLC.CHECK_PEA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PRMF" header="Declare the 'run()' method of 'PrivilegedAction' and 'PrivilegedExceptionAction' implementations &quot;final&quot;" id="PRMF" originalId="SECURITY.WSC.PRMF" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="&quot;run()&quot; method of class ''{0}'' should be declared &quot;final&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.000510.PRMF.CHECK_PA" name="CHECK_PA" value="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <oldparam id="APSC_DV.000510.PRMF.CHECK_PEA" name="CHECK_PEA" value="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                        <oldparam id="APSC_DV.000510.PRMF.IGNORE_FINAL_CLASS" name="IGNORE_FINAL_CLASS" value="Ignore &quot;final&quot; classes"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="APSC_DV.000510.PRMF.CHECK_PA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <param defaultValue="true" id="APSC_DV.000510.PRMF.CHECK_PEA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                        <param defaultValue="true" id="APSC_DV.000510.PRMF.IGNORE_FINAL_CLASS" inputType="checkbox" label="Ignore &quot;final&quot; classes"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.PCPM" header="Wrap &quot;privileged&quot; method invocations in &quot;private&quot; methods." id="PCPM" originalId="SECURITY.BV.PCPM" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Method ''{0}'' calls ''{1}'' and should be declared &quot;private&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.000510.PCPM.CHECKED_METHODS" name="CHECKED_METHODS" value="Check the following method invocations:"/>
                        <oldparam id="APSC_DV.000510.PCPM.TYPE" name="TYPE" value="Type (regular expression)"/>
                        <oldparam id="APSC_DV.000510.PCPM.METHOD" name="METHOD" value="Method name (regular expression)"/>
                    </oldparameters>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="APSC_DV.000510.PCPM.CHECKED_METHODS" label="Check the following method invocations:" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__BV__PCPM__CHECKED_METHODS__COLUMN1" label="Type (regular expression)" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__BV__PCPM__CHECKED_METHODS__COLUMN2" label="Method name (regular expression)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__BV__PCPM__CHECKED_METHODS__COLUMN1" value="^java\.security\.AccessController$"/>
                                    <column refColumnId="SECURITY__BV__PCPM__CHECKED_METHODS__COLUMN2" value="^doPrivileged$"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PPKG" header="Ensure that all Permissions, PrivilegedActions, and PrivilegedActionExceptions are declared in the same package" id="PPKG" originalId="SECURITY.WSC.PPKG" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Class name ''{0}'' does not match user-specified regular expression ''{1}''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.000510.PPKG.PERMISSION_PKG" name="PERMISSION_PKG" value="'Permission' package name (Glob expression)"/>
                        <oldparam id="APSC_DV.000510.PPKG.ACTION_PKG" name="ACTION_PKG" value="'PrivilegedAction' package name (Glob expression)"/>
                        <oldparam id="APSC_DV.000510.PPKG.EXCEPTION_PKG" name="EXCEPTION_PKG" value="'PrivilegedActionException' package name (Glob expression)"/>
                        <oldparam id="APSC_DV.000510.PPKG.EMPTY_STRING_ERROR" name="EMPTY_STRING_ERROR" value="Package name should not be empty"/>
                        <!--  below params is deprecated and changed into table  -->
                        <oldparam defaultValue="true;" id="APSC_DV.000510.PPKG.PERMISSION_PKG" inputType="bigtext" label="'Permission' package name (Glob expression)" prevType="InputValueWithCheckBox"/>
                        <oldparam defaultValue="true;" id="APSC_DV.000510.PPKG.ACTION_PKG" inputType="bigtext" label="'PrivilegedAction' package name (Glob expression)" prevType="InputValueWithCheckBox"/>
                        <oldparam defaultValue="true;" id="APSC_DV.000510.PPKG.EXCEPTION_PKG" inputType="bigtext" label="'PrivilegedActionException' package name (Glob expression)" prevType="InputValueWithCheckBox"/>
                    </oldparameters>
                    <parameters>
                        <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="APSC_DV.000510.PPKG.PERMISSION_TABLE" label="" reader="SATable">
                            <columns>
                                <column columnType="checkbox" editable="true" id="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN1" label=""/>
                                <column columnType="text" editable="false" id="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN2" label="" textSize="large"/>
                                <column columnType="text" editable="true" id="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN3" label=""/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN1" value="true"/>
                                    <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN2" value="'Permission' package name (Glob expression)"/>
                                    <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN3" value=""/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN1" value="true"/>
                                    <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN2" value="'PrivilegedAction' package name (Glob expression)"/>
                                    <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN3" value=""/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN1" value="true"/>
                                    <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN2" value="'PrivilegedActionException' package name (Glob expression)"/>
                                    <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN3" value=""/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.PCL" header="Limit the number of lines in &quot;privileged&quot; code blocks." id="PCL" originalId="SECURITY.EAB.PCL" scope="LINE" severity="4" since="8.4">
                    <messages>
                        <msg index="1" value="&quot;run()&quot; method of class ''{0}'' has greater than ''{1}'' lines."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.000510.PCL.CHECK_PA" name="CHECK_PA" value="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <oldparam id="APSC_DV.000510.PCL.CHECK_PEA" name="CHECK_PEA" value="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                        <oldparam id="APSC_DV.000510.PCL.NUMBER_LINES" name="NUMBER_LINES" value="Limit number of lines in &quot;run()&quot; method to"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authorization p. 73</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/250.html" name="CWE">250</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="APSC_DV.000510.PCL.CHECK_PA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <param defaultValue="true" id="APSC_DV.000510.PCL.CHECK_PEA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                        <param defaultValue="10" id="APSC_DV.000510.PCL.NUMBER_LINES" inputType="integer" label="Limit number of lines in &quot;run()&quot; method to" min="1"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.PCFM" header="Wrap &quot;privileged&quot; method invocations in &quot;final&quot; methods." id="PCFM" originalId="SECURITY.BV.PCFM" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Method ''{0}'' calls ''{1}'' and should be declared &quot;final&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.000510.PCFM.CHECKED_METHODS" name="CHECKED_METHODS" value="Check the following method invocations:"/>
                        <oldparam id="APSC_DV.000510.PCFM.TYPE" name="TYPE" value="Type (regular expression)"/>
                        <oldparam id="APSC_DV.000510.PCFM.METHOD" name="METHOD" value="Method name (regular expression)"/>
                    </oldparameters>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="APSC_DV.000510.PCFM.CHECKED_METHODS" label="Check the following method invocations:" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__BV__PCFM__CHECKED_METHODS__COLUMN1" label="Type (regular expression)" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__BV__PCFM__CHECKED_METHODS__COLUMN2" label="Method name (regular expression)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__BV__PCFM__CHECKED_METHODS__COLUMN1" value="^java\.security\.AccessController$"/>
                                    <column refColumnId="SECURITY__BV__PCFM__CHECKED_METHODS__COLUMN2" value="^doPrivileged$"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__BV__PCFM__CHECKED_METHODS__COLUMN1" value="^java\.lang\.SecurityManager$"/>
                                    <column refColumnId="SECURITY__BV__PCFM__CHECKED_METHODS__COLUMN2" value=".*"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ACDP" header="Avoid using anonymous &quot;privileged&quot; classes when invoking &quot;AccessController.doPrivileged()&quot;." id="ACDP" originalId="SECURITY.WSC.ACDP" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Anonymous subclass of ''{0}'' used in &quot;AccessController.doPrivileged()&quot; invocation."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PAF" header="Declare subclasses of 'PrivilegedAction', 'PrivilegedExceptionAction', and 'PrivilegedActionException' &quot;final&quot;" id="PAF" originalId="SECURITY.WSC.PAF" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Class ''{0}'' extends ''{1}'' and should be declared &quot;final&quot;."/>
                        <msg index="2" value="Class ''{0}'' implements ''{1}'' and should be declared &quot;final&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.000510.PAF.CHECK_PAE" name="CHECK_PAE" value="Check subclasses of &quot;java.security.PrivilegedActionException&quot;"/>
                        <oldparam id="APSC_DV.000510.PAF.CHECK_PA" name="CHECK_PA" value="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <oldparam id="APSC_DV.000510.PAF.CHECK_PEA" name="CHECK_PEA" value="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                        <oldparam id="APSC_DV.000510.PAF.IGNORE_ENCLOSED_FINAL" name="IGNORE_ENCLOSED_FINAL" value="Ignore subclasses which are enclosed by a &quot;final&quot; outer class"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="APSC_DV.000510.PAF.CHECK_PA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <param defaultValue="true" id="APSC_DV.000510.PAF.CHECK_PEA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                        <param defaultValue="true" id="APSC_DV.000510.PAF.CHECK_PAE" inputType="checkbox" label="Check subclasses of &quot;java.security.PrivilegedActionException&quot;"/>
                        <param defaultValue="true" id="APSC_DV.000510.PAF.IGNORE_ENCLOSED_FINAL" inputType="checkbox" label="Ignore subclasses which are enclosed by a &quot;final&quot; outer class"/>
                    </parameters>
                </rule>
         </category>
         <category description="APSC_DV.002440 The application must protect the confidentiality and integrity of transmitted information." name="002440">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.CONSEN" header="Do not log confidential or sensitive information" id="CONSEN" originalId="SECURITY.ESD.CONSEN" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="''{0}'' should not be used by a logger, it can expose confidential info."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.002440.CONSEN.SUSPICIOUS_WORDS" name="SUSPICIOUS_WORDS" value="Regular expressions representing sensive data:"/>
                        <oldparam id="APSC_DV.002440.CONSEN.LOG_METHOD_EXPRESSIONS" name="LOG_METHOD_EXPRESSIONS" value="Logging method name in regular expression"/>
                        <oldparam id="APSC_DV.002440.CONSEN.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/533.html" name="CWE">533</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/534.html" name="CWE">534</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*ssn.*@delim@.*pass.*" id="APSC_DV.002440.CONSEN.SUSPICIOUS_WORDS" inputType="stringList" label="Regular expressions representing sensive data:" prevType="StringList"/>
                        <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="APSC_DV.002440.CONSEN.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                        <param defaultValue=".*log.*" id="APSC_DV.002440.CONSEN.LOG_METHOD_EXPRESSIONS" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PORT.HCNA" header="Do not hard-code IP addresses and port numbers." id="HCNA" originalId="PORT.HCNA" scope="LINE" severity="3" since="9.0">
                <messages>
                    <msg index="1" value="Hard-coded IP address ''{0}''."/>
                    <msg index="2" value="Hard-coded port number ''{0}''."/>
                </messages>
                <oldparameters>
                    <oldparam id="APSC_DV.002440.HCNA.IP" name="IP" value="Do not hard-code IP addresses"/>
                    <oldparam id="APSC_DV.002440.HCNA.PORT" name="PORT" value="Do not hard-code port numbers"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="true" id="APSC_DV.002440.HCNA.IP" inputType="checkbox" label="Do not hard-code IP addresses"/>
                    <param defaultValue="true" id="APSC_DV.002440.HCNA.PORT" inputType="checkbox" label="Do not hard-code port numbers"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.PLC" header="Avoid storing sensitive data in plaintext in a cookie" id="PLC" originalId="SECURITY.ESD.PLC" scope="LINE" severity="1" since="9.2">
                    <messages>
                        <msg index="1" value="Do not store important to safety data in cookie."/>
                        <msg index="2" value="Do not store sensitive data in plaintext in cookie."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.002440.PLC.TABLE_HEADER" name="TABLE_HEADER" value="List of RegExp to check key in cookie"/>
                        <oldparam id="APSC_DV.002440.PLC.CHECK_VALUES_HEADER" name="CHECK_VALUES_HEADER" value="Check values"/>
                        <oldparam id="APSC_DV.002440.PLC.NAME_HEADER" name="NAME_HEADER" value="Key in cookie (RegExp)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010">A9-Insufficient Transport Layer Protection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/315.html" name="CWE">315</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE">807</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="APSC_DV.002440.PLC.TABLE_HEADER" label="List of RegExp to check key in cookie" reader="SATable">
                            <columns>
                                <column columnType="checkbox" defaultValue="true" editable="true" id="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" label="Check values" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" label="Key in cookie (RegExp)" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" value="false"/>
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" value=".*(pass|role).*"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" value="true"/>
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" value=".*(user|login|account).*"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="APSC_DV.002500 The application must protect from Cross-Site Request Forgery (CSRF) vulnerabilities." name="002500">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SPRING.DCSRFJAVA" header="Do not disable CSRF protection" id="DCSRFJAVA" originalId="SPRING.DCSRFJAVA" scope="LINE" severity="2" since="10.4.3">
                <messages>
                    <msg index="1" value="CSRF protection is disabled."/>
                </messages>
            </rule>
         </category>
         <category description="APSC_DV.000480 The application must enforce approved authorizations for controlling the flow of information within the system based on organization-defined information flow control policies." name="000480">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HV" header="Ensure the HostnameVerifier.verify() method validates the certificate" id="HV" originalId="SECURITY.WSC.HV" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The certificate is not validated, because the 'verify' method always returns 'true'"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SSM" header="Ensure that an appropriate security manager is set" id="SSM" originalId="SECURITY.WSC.SSM" scope="LINe" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Security manager is missing, 'setSecurityManager' should be invoked"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authentication p. 66</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010">A3 - Broken Authentication and Session Management</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/180.html" name="CWE">180</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CAM" header="Keep all authentication methods centralized to enforce consistency" id="CAM" originalId="SECURITY.WSC.CAM" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="''{0}()'' is not allowed to be invoked within ''{1}()'', it should only be invoked inside centralized authentication method declarations."/>
                        <msg index="2" value="''{0}()'' is not allowed to be invoked unless enclosed by centralized access control methods."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.000480.CAM.ENCLOSING_METHOD_LIST" name="ENCLOSING_METHOD_LIST" value="Centralized authentication method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                        <oldparam id="APSC_DV.000480.CAM.DANGEROUS_METHOD_LIST" name="DANGEROUS_METHOD_LIST" value="Authentication method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authentication p. 66</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A8" name="OWASP-2010">A8-Failure to Restrict URL Access</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                    </references>
                    <parameters>
                        <param defaultValue="javax.security.auth.login.LoginContext#getSubject.*;javax.security.auth.login.LoginContext#login.*;" description="Authentication method names (in regular expressions) [qualified name of declaring type#method name]" id="APSC_DV.000480.CAM.DANGEROUS_METHOD_LIST" inputType="stringList" label="Authentication method names (in regular expressions)" prevType="StringList"/>
                        <param defaultValue=".*#login.*;" description="Centralized authentication method names (in regular expressions) [qualified name of declaring type#method name]" id="APSC_DV.000480.CAM.ENCLOSING_METHOD_LIST" inputType="stringList" label="Centralized authentication method names (in regular expressions)" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
         <category description="APSC_DV.001290 The application must protect audit information from unauthorized modification." name="001290">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.UEHL.DCEMSL" header="Avoid untrusted input when logging messages with Seam Logging API" id="DCEMSL" originalId="SECURITY.UEHL.DCEMSL" scope="LINE" severity="1" since="10.4.3">
                    <messages>
                        <msg index="1" value="The ''{0}'' method called on the object of the Log class takes a dangerous argument."/>
                    </messages>
                    <parameters>
                        <param defaultValue="false" id="APSC_DV.001290.DCEMSL.CLASS_FIELDS_ARE_SAFE" inputType="checkbox" label="Consider class fields to be secure"/>
                    </parameters>
                </rule>
         </category>
         <category description="APSC_DV.002350 The application must use appropriate cryptography in order to protect stored DoD information when required by the information owner or DoD policy." name="002350">
            <rule class="com.parasoft.jtest.standards.rules.builtin.INIT.IC" header="Do not use initialization circularities for fields" id="IC" originalId="INIT.IC" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Initialization circularity is detected on this field. Trace of the cycle: {0}."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AISSAJAVA" header="Avoid using insecure cryptographic algorithms for data encryption with Spring" id="AISSAJAVA" originalId="SECURITY.WSC.AISSAJAVA" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The cryptographic class is insecure."/>
                        <msg index="2" value="The cryptographic algorithm used in the constructor of MessageDigestPasswordEncoder is insecure."/>
                    </messages>
                    <parameters>
                        <!-- <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_ENCODERS" inputType="stringList" defaultValue="org.springframework.security.crypto.password.LdapShaPasswordEncoder;org.springframework.security.crypto.password.Md5PasswordEncoder;org.springframework.security.crypto.password.Md4PasswordEncoder;org.springframework.security.crypto.password.NoOpPasswordEncoder;org.springframework.security.authentication.encoding.LdapShaPasswordEncoder;org.springframework.security.authentication.encoding.Md5PasswordEncoder;org.springframework.security.authentication.encoding.Md4PasswordEncoder" label="Insecure classes that should not be used for encryption" prevType="StringList"/>
                        <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_NAMES" inputType="stringList" defaultValue="MD2;MD5;SHA-1" label="Insecure algorithms in the MessageDigestPasswordEncoder class" prevType="StringList"/>-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="APSC_DV.002350.AISSAJAVA.BANNED_ALGO_ENCODERS" label="Insecure classes that should not be used for encryption" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" label="Fully Qualified Name of Insecure Class" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md5PasswordEncoder"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md4PasswordEncoder"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.NoOpPasswordEncoder"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>
                                </row>
                                <row id="7">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md4PasswordEncoder"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="APSC_DV.002350.AISSAJAVA.BANNED_ALGO_NAMES" label="Insecure algorithms in the MessageDigestPasswordEncoder class" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" label="Name of Insecure Algorithm" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD2"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD5"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="SHA-1"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="APSC_DV.002290 The application must use the Federal Information Processing Standard (FIPS) 140-2-validated cryptographic modules and random number generator if the application implements encryption, key exchange, digital signature, and hash functionality." name="002290">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SRD" header="Use 'java.security.SecureRandom' instead of 'java.util.Random' or 'Math.random()'." id="SRD" originalId="SECURITY.WSC.SRD" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Avoid using the insecure ''{0}'' as a random number generator"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/330.html" name="CWE">330</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/338.html" name="CWE">338</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE">676</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MDSALT" header="Use hash functions with a salt" id="MDSALT" originalId="SECURITY.WSC.MDSALT" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="A salt is not added to the digest"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AISSAJAVA" header="Avoid using insecure cryptographic algorithms for data encryption with Spring" id="AISSAJAVA" originalId="SECURITY.WSC.AISSAJAVA" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The cryptographic class is insecure."/>
                        <msg index="2" value="The cryptographic algorithm used in the constructor of MessageDigestPasswordEncoder is insecure."/>
                    </messages>
                    <parameters>
                        <!-- <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_ENCODERS" inputType="stringList" defaultValue="org.springframework.security.crypto.password.LdapShaPasswordEncoder;org.springframework.security.crypto.password.Md5PasswordEncoder;org.springframework.security.crypto.password.Md4PasswordEncoder;org.springframework.security.crypto.password.NoOpPasswordEncoder;org.springframework.security.authentication.encoding.LdapShaPasswordEncoder;org.springframework.security.authentication.encoding.Md5PasswordEncoder;org.springframework.security.authentication.encoding.Md4PasswordEncoder" label="Insecure classes that should not be used for encryption" prevType="StringList"/>
                        <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_NAMES" inputType="stringList" defaultValue="MD2;MD5;SHA-1" label="Insecure algorithms in the MessageDigestPasswordEncoder class" prevType="StringList"/>-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="APSC_DV.002290.AISSAJAVA.BANNED_ALGO_ENCODERS" label="Insecure classes that should not be used for encryption" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" label="Fully Qualified Name of Insecure Class" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md5PasswordEncoder"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md4PasswordEncoder"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.NoOpPasswordEncoder"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>
                                </row>
                                <row id="7">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md4PasswordEncoder"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="APSC_DV.002290.AISSAJAVA.BANNED_ALGO_NAMES" label="Insecure algorithms in the MessageDigestPasswordEncoder class" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" label="Name of Insecure Algorithm" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD2"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD5"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="SHA-1"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="APSC_DV.000160 The application must implement DoD-approved encryption to protect the confidentiality of remote access sessions." name="000160">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AUNC" header="Avoid using the javax.crypto.NullCipher class in non-test classes." id="AUNC" originalId="SECURITY.WSC.AUNC" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The NullCipher class that does not encrypt the plaintext is used in a non-test class."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MDSALT" header="Use hash functions with a salt" id="MDSALT" originalId="SECURITY.WSC.MDSALT" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="A salt is not added to the digest"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AISSAJAVA" header="Avoid using insecure cryptographic algorithms for data encryption with Spring" id="AISSAJAVA" originalId="SECURITY.WSC.AISSAJAVA" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The cryptographic class is insecure."/>
                        <msg index="2" value="The cryptographic algorithm used in the constructor of MessageDigestPasswordEncoder is insecure."/>
                    </messages>
                    <parameters>
                        <!-- <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_ENCODERS" inputType="stringList" defaultValue="org.springframework.security.crypto.password.LdapShaPasswordEncoder;org.springframework.security.crypto.password.Md5PasswordEncoder;org.springframework.security.crypto.password.Md4PasswordEncoder;org.springframework.security.crypto.password.NoOpPasswordEncoder;org.springframework.security.authentication.encoding.LdapShaPasswordEncoder;org.springframework.security.authentication.encoding.Md5PasswordEncoder;org.springframework.security.authentication.encoding.Md4PasswordEncoder" label="Insecure classes that should not be used for encryption" prevType="StringList"/>
                        <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_NAMES" inputType="stringList" defaultValue="MD2;MD5;SHA-1" label="Insecure algorithms in the MessageDigestPasswordEncoder class" prevType="StringList"/>-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="APSC_DV.000160.AISSAJAVA.BANNED_ALGO_ENCODERS" label="Insecure classes that should not be used for encryption" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" label="Fully Qualified Name of Insecure Class" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md5PasswordEncoder"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md4PasswordEncoder"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.NoOpPasswordEncoder"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>
                                </row>
                                <row id="7">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md4PasswordEncoder"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="APSC_DV.000160.AISSAJAVA.BANNED_ALGO_NAMES" label="Insecure algorithms in the MessageDigestPasswordEncoder class" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" label="Name of Insecure Algorithm" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD2"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD5"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="SHA-1"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SRD" header="Use 'java.security.SecureRandom' instead of 'java.util.Random' or 'Math.random()'." id="SRD" originalId="SECURITY.WSC.SRD" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Avoid using the insecure ''{0}'' as a random number generator"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/330.html" name="CWE">330</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/338.html" name="CWE">338</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE">676</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CKTS" header="Avoid using cryptographic keys which are too short." id="CKTS" originalId="SECURITY.WSC.CKTS" scope="LINE" severity="2" since="8.4">
                    <messages>
                        <msg index="1" value="Key size ({0} bits) is below the recommended minimum key size ({1} bits) for the &quot;{2}&quot; algorithm."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.000160.CKTS.MIN_LENGTH_TABLE" name="MIN_LENGTH_TABLE" value="Minimum Key Size for Each Algorithm"/>
                        <oldparam id="APSC_DV.000160.CKTS.ALGORITHM_NAME" name="ALGORITHM_NAME" value="Algorithm Name"/>
                        <oldparam id="APSC_DV.000160.CKTS.MINIMUM_KEY_SIZE" name="MINIMUM_KEY_SIZE" value="Minimum Key Size (in Bits)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="APSC_DV.000160.CKTS.MIN_LENGTH_TABLE" label="Minimum Key Size for Each Algorithm" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" label="Algorithm Name" required="true"/>
                                <column columnType="text" defaultValue="128" editable="true" id="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" label="Minimum Key Size (in Bits)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" value="AES"/>
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" value="128"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" value="RSA"/>
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" value="1024"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ICA" header="Avoid using insecure algorithms for cryptography." id="ICA" originalId="SECURITY.WSC.ICA" scope="LINE" severity="1" since="8.3">
                    <messages>
                        <msg index="1" value="The &quot;{0}&quot; algorithm is not an acceptable cryptography algorithm for the &quot;{1}&quot; class."/>
                        <msg index="2" value="The cryptography algorithm is used without padding."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.000160.ICA.SUGGESTED_ALGS" name="SUGGESTED_ALGS" value="Safe Cryptography Algorithms"/>
                        <oldparam id="APSC_DV.000160.ICA.TYPE_NAME" name="TYPE_NAME" value="Fully Qualified Class Name"/>
                        <oldparam id="APSC_DV.000160.ICA.ALGORITHM_NAME" name="ALGORITHM_NAME" value="Algorithm Names (in regular expressions)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/328.html" name="CWE">328</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/780.html" name="CWE">780</reference>
                    </references>
                    <parameters>
                        <!--param id="SECURITY.WSC.ICA.SUGGESTED_ALGS" inputType="bigtext" defaultValue="java.security.KeyPairGenerator&lt;#&gt;RSA;java.security.MessageDigest&lt;#&gt;SHA-256#SHA-384#SHA-512;javax.crypto.Cipher&lt;#&gt;3DES#AES#ARCFOUR/RC4#Blowfish#ECIES#RC4#RC5#RSA(.*)OAEPWith(.*)And(.*)Padding;javax.crypto.KeyGenerator&lt;#&gt;AES#ARCFOUR/RC4#Blowfish#HmacSHA256#HmacSHA384#HmacSHA512#RC2" label="Safe Cryptography Algorithms" prevType="DuoList"/-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="APSC_DV.000160.ICA.SUGGESTED_ALGS" label="Secure Cryptographic Algorithms" prevType="DuoList" reader="SADuoList">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" label="Fully Qualified Class Name" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.KeyPairGenerator"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.MessageDigest"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.KeyGenerator"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.Cipher"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.net.ssl.SSLContext"/>
                                </row>
                            </predefinedRows>
                            <childTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="APSC_DV.000160.ICA.SUGGESTED_ALGS.CHILDTABLE1" label="">
                                <columns>
                                    <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" label="Name of Secure Algorithm (in regular expressions)" required="true"/>
                                </columns>
                                <predefinedRows refParentRowId="1">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="2">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-256"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-384"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-512"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="3">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA256"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA384"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA512"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC2"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESede"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="4">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="3DES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES/(.*)/PKCS5Padding"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ECIES"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC4"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC5"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA(.*)OAEPWith(.*)And(.*)Padding"/>
                                    </row>
                                    <row id="9">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESEDE/(.*)/PKCS5Padding"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="5">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="TLSv1.2"/>
                                    </row>
                                </predefinedRows>
                            </childTable>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ACMD" header="Avoid using custom MessageDigest implementations" id="ACMD" originalId="SECURITY.WSC.ACMD" scope="LINE" severity="4" since="10.4.2">
                    <messages>
                        <msg index="1" value="The class that extends MessageDigest may provide unsafe algorithms"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.USC" header="Use the SSL-enabled version of classes when possible." id="USC" originalId="SECURITY.WSC.USC" scope="LINE" severity="3" since="7.5">
                    <messages>
                        <msg index="1" value="Consider using the SSL-enabled type ''SSLServerSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="2" value="Consider using the SSL-enabled type ''SSLSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="3" value="Consider using the SSL-enabled type ''HttpsURLConnection'' for the {0} ''{1}''."/>
                        <msg index="4" value="Consider using the SSL-enabled type ''SslRMIClientSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="5" value="Consider using the SSL-enabled type ''SslRMIServerSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="6" value="Consider using the SSL-enabled type ''SSLSocket'' for the {0} ''{1}''."/>
                        <msg index="7" value="Consider using the SSL-enabled type ''SSLServerSocket'' for the {0} ''{1}''."/>
                        <msg index="8" value="Consider using the SSL-enabled type ''SSLPermission'' for the {0} ''{1}''."/>
                    </messages>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010">A9-Insufficient Transport Layer Protection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/494.html" name="CWE">494</reference>
                    </references>
                </rule>
         </category>
         <category description="APSC_DV.000500 The application must prevent non-privileged users from executing privileged functions to include disabling, circumventing, or altering implemented security safeguards/countermeasures." name="000500">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.PCPM" header="Wrap &quot;privileged&quot; method invocations in &quot;private&quot; methods." id="PCPM" originalId="SECURITY.BV.PCPM" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Method ''{0}'' calls ''{1}'' and should be declared &quot;private&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.000500.PCPM.CHECKED_METHODS" name="CHECKED_METHODS" value="Check the following method invocations:"/>
                        <oldparam id="APSC_DV.000500.PCPM.TYPE" name="TYPE" value="Type (regular expression)"/>
                        <oldparam id="APSC_DV.000500.PCPM.METHOD" name="METHOD" value="Method name (regular expression)"/>
                    </oldparameters>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="APSC_DV.000500.PCPM.CHECKED_METHODS" label="Check the following method invocations:" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__BV__PCPM__CHECKED_METHODS__COLUMN1" label="Type (regular expression)" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__BV__PCPM__CHECKED_METHODS__COLUMN2" label="Method name (regular expression)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__BV__PCPM__CHECKED_METHODS__COLUMN1" value="^java\.security\.AccessController$"/>
                                    <column refColumnId="SECURITY__BV__PCPM__CHECKED_METHODS__COLUMN2" value="^doPrivileged$"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PRMF" header="Declare the 'run()' method of 'PrivilegedAction' and 'PrivilegedExceptionAction' implementations &quot;final&quot;" id="PRMF" originalId="SECURITY.WSC.PRMF" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="&quot;run()&quot; method of class ''{0}'' should be declared &quot;final&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.000500.PRMF.CHECK_PA" name="CHECK_PA" value="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <oldparam id="APSC_DV.000500.PRMF.CHECK_PEA" name="CHECK_PEA" value="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                        <oldparam id="APSC_DV.000500.PRMF.IGNORE_FINAL_CLASS" name="IGNORE_FINAL_CLASS" value="Ignore &quot;final&quot; classes"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="APSC_DV.000500.PRMF.CHECK_PA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <param defaultValue="true" id="APSC_DV.000500.PRMF.CHECK_PEA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                        <param defaultValue="true" id="APSC_DV.000500.PRMF.IGNORE_FINAL_CLASS" inputType="checkbox" label="Ignore &quot;final&quot; classes"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PPKG" header="Ensure that all Permissions, PrivilegedActions, and PrivilegedActionExceptions are declared in the same package" id="PPKG" originalId="SECURITY.WSC.PPKG" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Class name ''{0}'' does not match user-specified regular expression ''{1}''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.000500.PPKG.PERMISSION_PKG" name="PERMISSION_PKG" value="'Permission' package name (Glob expression)"/>
                        <oldparam id="APSC_DV.000500.PPKG.ACTION_PKG" name="ACTION_PKG" value="'PrivilegedAction' package name (Glob expression)"/>
                        <oldparam id="APSC_DV.000500.PPKG.EXCEPTION_PKG" name="EXCEPTION_PKG" value="'PrivilegedActionException' package name (Glob expression)"/>
                        <oldparam id="APSC_DV.000500.PPKG.EMPTY_STRING_ERROR" name="EMPTY_STRING_ERROR" value="Package name should not be empty"/>
                        <!--  below params is deprecated and changed into table  -->
                        <oldparam defaultValue="true;" id="APSC_DV.000500.PPKG.PERMISSION_PKG" inputType="bigtext" label="'Permission' package name (Glob expression)" prevType="InputValueWithCheckBox"/>
                        <oldparam defaultValue="true;" id="APSC_DV.000500.PPKG.ACTION_PKG" inputType="bigtext" label="'PrivilegedAction' package name (Glob expression)" prevType="InputValueWithCheckBox"/>
                        <oldparam defaultValue="true;" id="APSC_DV.000500.PPKG.EXCEPTION_PKG" inputType="bigtext" label="'PrivilegedActionException' package name (Glob expression)" prevType="InputValueWithCheckBox"/>
                    </oldparameters>
                    <parameters>
                        <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="APSC_DV.000500.PPKG.PERMISSION_TABLE" label="" reader="SATable">
                            <columns>
                                <column columnType="checkbox" editable="true" id="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN1" label=""/>
                                <column columnType="text" editable="false" id="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN2" label="" textSize="large"/>
                                <column columnType="text" editable="true" id="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN3" label=""/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN1" value="true"/>
                                    <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN2" value="'Permission' package name (Glob expression)"/>
                                    <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN3" value=""/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN1" value="true"/>
                                    <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN2" value="'PrivilegedAction' package name (Glob expression)"/>
                                    <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN3" value=""/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN1" value="true"/>
                                    <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN2" value="'PrivilegedActionException' package name (Glob expression)"/>
                                    <column refColumnId="SECURITY_WSC_PPKG_PERMISSION_TABLE_COLUMN3" value=""/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.PCFM" header="Wrap &quot;privileged&quot; method invocations in &quot;final&quot; methods." id="PCFM" originalId="SECURITY.BV.PCFM" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Method ''{0}'' calls ''{1}'' and should be declared &quot;final&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.000500.PCFM.CHECKED_METHODS" name="CHECKED_METHODS" value="Check the following method invocations:"/>
                        <oldparam id="APSC_DV.000500.PCFM.TYPE" name="TYPE" value="Type (regular expression)"/>
                        <oldparam id="APSC_DV.000500.PCFM.METHOD" name="METHOD" value="Method name (regular expression)"/>
                    </oldparameters>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="APSC_DV.000500.PCFM.CHECKED_METHODS" label="Check the following method invocations:" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__BV__PCFM__CHECKED_METHODS__COLUMN1" label="Type (regular expression)" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__BV__PCFM__CHECKED_METHODS__COLUMN2" label="Method name (regular expression)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__BV__PCFM__CHECKED_METHODS__COLUMN1" value="^java\.security\.AccessController$"/>
                                    <column refColumnId="SECURITY__BV__PCFM__CHECKED_METHODS__COLUMN2" value="^doPrivileged$"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__BV__PCFM__CHECKED_METHODS__COLUMN1" value="^java\.lang\.SecurityManager$"/>
                                    <column refColumnId="SECURITY__BV__PCFM__CHECKED_METHODS__COLUMN2" value=".*"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.PCL" header="Limit the number of lines in &quot;privileged&quot; code blocks." id="PCL" originalId="SECURITY.EAB.PCL" scope="LINE" severity="4" since="8.4">
                    <messages>
                        <msg index="1" value="&quot;run()&quot; method of class ''{0}'' has greater than ''{1}'' lines."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.000500.PCL.CHECK_PA" name="CHECK_PA" value="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <oldparam id="APSC_DV.000500.PCL.CHECK_PEA" name="CHECK_PEA" value="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                        <oldparam id="APSC_DV.000500.PCL.NUMBER_LINES" name="NUMBER_LINES" value="Limit number of lines in &quot;run()&quot; method to"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authorization p. 73</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/250.html" name="CWE">250</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="APSC_DV.000500.PCL.CHECK_PA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <param defaultValue="true" id="APSC_DV.000500.PCL.CHECK_PEA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                        <param defaultValue="10" id="APSC_DV.000500.PCL.NUMBER_LINES" inputType="integer" label="Limit number of lines in &quot;run()&quot; method to" min="1"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PAF" header="Declare subclasses of 'PrivilegedAction', 'PrivilegedExceptionAction', and 'PrivilegedActionException' &quot;final&quot;" id="PAF" originalId="SECURITY.WSC.PAF" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Class ''{0}'' extends ''{1}'' and should be declared &quot;final&quot;."/>
                        <msg index="2" value="Class ''{0}'' implements ''{1}'' and should be declared &quot;final&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.000500.PAF.CHECK_PAE" name="CHECK_PAE" value="Check subclasses of &quot;java.security.PrivilegedActionException&quot;"/>
                        <oldparam id="APSC_DV.000500.PAF.CHECK_PA" name="CHECK_PA" value="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <oldparam id="APSC_DV.000500.PAF.CHECK_PEA" name="CHECK_PEA" value="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                        <oldparam id="APSC_DV.000500.PAF.IGNORE_ENCLOSED_FINAL" name="IGNORE_ENCLOSED_FINAL" value="Ignore subclasses which are enclosed by a &quot;final&quot; outer class"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="APSC_DV.000500.PAF.CHECK_PA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <param defaultValue="true" id="APSC_DV.000500.PAF.CHECK_PEA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                        <param defaultValue="true" id="APSC_DV.000500.PAF.CHECK_PAE" inputType="checkbox" label="Check subclasses of &quot;java.security.PrivilegedActionException&quot;"/>
                        <param defaultValue="true" id="APSC_DV.000500.PAF.IGNORE_ENCLOSED_FINAL" inputType="checkbox" label="Ignore subclasses which are enclosed by a &quot;final&quot; outer class"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.PDLC" header="Avoid using dynamically loaded classes in &quot;privileged&quot; code blocks." id="PDLC" originalId="SECURITY.BV.PDLC" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Method ''{0}'' may dynamically load an untrusted class."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.000500.PDLC.CHECK_PA" name="CHECK_PA" value="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <oldparam id="APSC_DV.000500.PDLC.CHECK_PEA" name="CHECK_PEA" value="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authorization p. 73</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="APSC_DV.000500.PDLC.CHECK_PA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <param defaultValue="true" id="APSC_DV.000500.PDLC.CHECK_PEA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ACDP" header="Avoid using anonymous &quot;privileged&quot; classes when invoking &quot;AccessController.doPrivileged()&quot;." id="ACDP" originalId="SECURITY.WSC.ACDP" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Anonymous subclass of ''{0}'' used in &quot;AccessController.doPrivileged()&quot; invocation."/>
                    </messages>
                </rule>
         </category>
         <category description="APSC_DV.002590 The application must not be vulnerable to overflow attacks." name="002590">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CLP" header="Do not cast primitive data types to lower precision" id="CLP" originalId="PB.NUM.CLP" scope="LINE" severity="2" since="4.5">
                    <messages>
                        <msg index="1" value="&quot;{0}&quot; type cast to lower precision &quot;{1}&quot; type."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/197.html" name="CWE">197</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/681.html" name="CWE">681</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.IOF" header="Use unsigned right shift instead of division when overflow is possible." id="IOF" originalId="PB.NUM.IOF" scope="LINE" severity="3" since="8.2">
                    <messages>
                        <msg index="1" value="This integer computation may cause overflow."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Buffer Overruns and Overflow p. 112</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Strings and Integers p. 180</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/190.html" name="CWE">190</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ICO" header="Avoid calculations which result in overflow or NaN" id="ICO" originalId="PB.NUM.ICO" scope="LINE" severity="1" since="8.1">
                    <messages>
                        <msg index="1" value="This calculation will not produce an accurate result because it will result in overflow."/>
                        <msg index="2" value="This calculation will throw 'java.lang.ArithmeticException'."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Buffer Overruns and Overflow p. 112</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Strings and Integers p. 180</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/190.html" name="CWE">190</reference>
                    </references>
                </rule>
         </category>
         <category description="APSC_DV.002010 The application must implement NSA-approved cryptography to protect classified information in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards." name="002010">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AUNC" header="Avoid using the javax.crypto.NullCipher class in non-test classes." id="AUNC" originalId="SECURITY.WSC.AUNC" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The NullCipher class that does not encrypt the plaintext is used in a non-test class."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AISSAJAVA" header="Avoid using insecure cryptographic algorithms for data encryption with Spring" id="AISSAJAVA" originalId="SECURITY.WSC.AISSAJAVA" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The cryptographic class is insecure."/>
                        <msg index="2" value="The cryptographic algorithm used in the constructor of MessageDigestPasswordEncoder is insecure."/>
                    </messages>
                    <parameters>
                        <!-- <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_ENCODERS" inputType="stringList" defaultValue="org.springframework.security.crypto.password.LdapShaPasswordEncoder;org.springframework.security.crypto.password.Md5PasswordEncoder;org.springframework.security.crypto.password.Md4PasswordEncoder;org.springframework.security.crypto.password.NoOpPasswordEncoder;org.springframework.security.authentication.encoding.LdapShaPasswordEncoder;org.springframework.security.authentication.encoding.Md5PasswordEncoder;org.springframework.security.authentication.encoding.Md4PasswordEncoder" label="Insecure classes that should not be used for encryption" prevType="StringList"/>
                        <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_NAMES" inputType="stringList" defaultValue="MD2;MD5;SHA-1" label="Insecure algorithms in the MessageDigestPasswordEncoder class" prevType="StringList"/>-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="APSC_DV.002010.AISSAJAVA.BANNED_ALGO_ENCODERS" label="Insecure classes that should not be used for encryption" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" label="Fully Qualified Name of Insecure Class" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md5PasswordEncoder"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md4PasswordEncoder"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.NoOpPasswordEncoder"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>
                                </row>
                                <row id="7">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md4PasswordEncoder"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="APSC_DV.002010.AISSAJAVA.BANNED_ALGO_NAMES" label="Insecure algorithms in the MessageDigestPasswordEncoder class" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" label="Name of Insecure Algorithm" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD2"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD5"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="SHA-1"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ICA" header="Avoid using insecure algorithms for cryptography." id="ICA" originalId="SECURITY.WSC.ICA" scope="LINE" severity="1" since="8.3">
                    <messages>
                        <msg index="1" value="The &quot;{0}&quot; algorithm is not an acceptable cryptography algorithm for the &quot;{1}&quot; class."/>
                        <msg index="2" value="The cryptography algorithm is used without padding."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.002010.ICA.SUGGESTED_ALGS" name="SUGGESTED_ALGS" value="Safe Cryptography Algorithms"/>
                        <oldparam id="APSC_DV.002010.ICA.TYPE_NAME" name="TYPE_NAME" value="Fully Qualified Class Name"/>
                        <oldparam id="APSC_DV.002010.ICA.ALGORITHM_NAME" name="ALGORITHM_NAME" value="Algorithm Names (in regular expressions)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/328.html" name="CWE">328</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/780.html" name="CWE">780</reference>
                    </references>
                    <parameters>
                        <!--param id="SECURITY.WSC.ICA.SUGGESTED_ALGS" inputType="bigtext" defaultValue="java.security.KeyPairGenerator&lt;#&gt;RSA;java.security.MessageDigest&lt;#&gt;SHA-256#SHA-384#SHA-512;javax.crypto.Cipher&lt;#&gt;3DES#AES#ARCFOUR/RC4#Blowfish#ECIES#RC4#RC5#RSA(.*)OAEPWith(.*)And(.*)Padding;javax.crypto.KeyGenerator&lt;#&gt;AES#ARCFOUR/RC4#Blowfish#HmacSHA256#HmacSHA384#HmacSHA512#RC2" label="Safe Cryptography Algorithms" prevType="DuoList"/-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="APSC_DV.002010.ICA.SUGGESTED_ALGS" label="Secure Cryptographic Algorithms" prevType="DuoList" reader="SADuoList">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" label="Fully Qualified Class Name" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.KeyPairGenerator"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.MessageDigest"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.KeyGenerator"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.Cipher"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.net.ssl.SSLContext"/>
                                </row>
                            </predefinedRows>
                            <childTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="APSC_DV.002010.ICA.SUGGESTED_ALGS.CHILDTABLE1" label="">
                                <columns>
                                    <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" label="Name of Secure Algorithm (in regular expressions)" required="true"/>
                                </columns>
                                <predefinedRows refParentRowId="1">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="2">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-256"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-384"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-512"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="3">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA256"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA384"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA512"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC2"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESede"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="4">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="3DES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES/(.*)/PKCS5Padding"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ECIES"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC4"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC5"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA(.*)OAEPWith(.*)And(.*)Padding"/>
                                    </row>
                                    <row id="9">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESEDE/(.*)/PKCS5Padding"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="5">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="TLSv1.2"/>
                                    </row>
                                </predefinedRows>
                            </childTable>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CKTS" header="Avoid using cryptographic keys which are too short." id="CKTS" originalId="SECURITY.WSC.CKTS" scope="LINE" severity="2" since="8.4">
                    <messages>
                        <msg index="1" value="Key size ({0} bits) is below the recommended minimum key size ({1} bits) for the &quot;{2}&quot; algorithm."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.002010.CKTS.MIN_LENGTH_TABLE" name="MIN_LENGTH_TABLE" value="Minimum Key Size for Each Algorithm"/>
                        <oldparam id="APSC_DV.002010.CKTS.ALGORITHM_NAME" name="ALGORITHM_NAME" value="Algorithm Name"/>
                        <oldparam id="APSC_DV.002010.CKTS.MINIMUM_KEY_SIZE" name="MINIMUM_KEY_SIZE" value="Minimum Key Size (in Bits)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="APSC_DV.002010.CKTS.MIN_LENGTH_TABLE" label="Minimum Key Size for Each Algorithm" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" label="Algorithm Name" required="true"/>
                                <column columnType="text" defaultValue="128" editable="true" id="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" label="Minimum Key Size (in Bits)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" value="AES"/>
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" value="128"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" value="RSA"/>
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" value="1024"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="APSC_DV.000080 The application must automatically terminate the admin user session and log off admin users after a 10 minute idle time period is exceeded." name="000080">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.RUIM" header="Ensure proper session expiration" id="RUIM" originalId="SECURITY.IBA.RUIM" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The session expiration time used in this metod call is obtained form a servlet request"/>
                        <msg index="2" value="The negative timeout value used in this metod call prevents session expiration"/>
                    </messages>
                </rule>
         </category>
         <category description="APSC_DV.000460 The application must enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies." name="000460">
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.PERMIT" header="Avoid EJB 3 methods without security annotations" id="PERMIT" originalId="EJB.EJB3.PERMIT" scope="LINE" severity="1" since="9.2">
                    <messages>
                        <msg index="1" value="Method without permit (@RolesAllowed, @PermitAll, @DenyAll) annotations."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authorization p. 73</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A4" name="OWASP-2010">A4-Insecure Direct Object Reference</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A8" name="OWASP-2010">A8-Failure to Restrict URL Access</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/862.html" name="CWE">862</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/863.html" name="CWE">863</reference>
                    </references>
                </rule>
         </category>
         <category description="APSC_DV.002570 The application must generate error messages that provide information necessary for corrective actions without revealing information that could be exploited by adversaries." name="002570">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.CONSEN" header="Do not log confidential or sensitive information" id="CONSEN" originalId="SECURITY.ESD.CONSEN" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="''{0}'' should not be used by a logger, it can expose confidential info."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.002570.CONSEN.SUSPICIOUS_WORDS" name="SUSPICIOUS_WORDS" value="Regular expressions representing sensive data:"/>
                        <oldparam id="APSC_DV.002570.CONSEN.LOG_METHOD_EXPRESSIONS" name="LOG_METHOD_EXPRESSIONS" value="Logging method name in regular expression"/>
                        <oldparam id="APSC_DV.002570.CONSEN.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/533.html" name="CWE">533</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/534.html" name="CWE">534</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*ssn.*@delim@.*pass.*" id="APSC_DV.002570.CONSEN.SUSPICIOUS_WORDS" inputType="stringList" label="Regular expressions representing sensive data:" prevType="StringList"/>
                        <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="APSC_DV.002570.CONSEN.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                        <param defaultValue=".*log.*" id="APSC_DV.002570.CONSEN.LOG_METHOD_EXPRESSIONS" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
         <category description="APSC_DV.002220 The application must set the secure flag on session cookies." name="002220">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.UOSC" header="Use the ''getSecure()'' and ''setSecure()'' methods to enforce the use of secure cookies." id="UOSC" originalId="SECURITY.WSC.UOSC" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="The ''Cookie'' variable ''{0}'' may be used without making sure that it is a secure cookie."/>
                        <msg index="2" value="Make sure that the appropriate version of library is used."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Session Management p. 78</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010">A3-Broken Authentication and Session Management</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A5" name="OWASP-2010">A5-Cross Site Request Forgery (CSRF)</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/614.html" name="CWE">614</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/352.html" name="CWE">352</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE">807</reference>
                    </references>
                </rule>
         </category>
         <category description="APSC_DV.001995 The application must not be vulnerable to race conditions." name="001995">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.TOCTOU" header="Avoid Time-of-check Time-of-use (TOCTOU) Race Condition" id="TOCTOU" originalId="PB.CUB.TOCTOU" scope="LINE" severity="2" since="9.2">
                    <messages>
                        <msg index="1" value="This call is not preceeded by: ''{0}'' within {1} method calls."/>
                        <msg index="2" value="This call is not preceeded by: ''{0}'' before calling blocking instruction: ''{1}''."/>
                        <msg index="3" value="This call is not preceeded by: ''{0}'' within block scope."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.001995.TOCTOU.PAIRS_TABLE_HEADER" name="PAIRS_TABLE_HEADER" value="Pairs of instructions that need to be called right after each other"/>
                        <oldparam id="APSC_DV.001995.TOCTOU.PAIRS_TABLE_1ST" name="PAIRS_TABLE_1ST" value="First instruction"/>
                        <oldparam id="APSC_DV.001995.TOCTOU.PAIRS_TABLE_2ND" name="PAIRS_TABLE_2ND" value="Second instruction"/>
                        <oldparam id="APSC_DV.001995.TOCTOU.BLOCKING_TABLE_HEADER" name="BLOCKING_TABLE_HEADER" value="Blocking instructions"/>
                        <oldparam id="APSC_DV.001995.TOCTOU.BLOCKING_TABLE_1ST" name="BLOCKING_TABLE_1ST" value="Blocking instruction"/>
                        <oldparam id="APSC_DV.001995.TOCTOU.MAX_INSTRUCTIONS_COUNT" name="MAX_INSTRUCTIONS_COUNT" value="Maximum number of method calls that can occur between pairs of instructions"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Race Conditions p. 161</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/367.html" name="CWE">367</reference>
                    </references>
                    <parameters>
                        <param defaultValue="3" id="APSC_DV.001995.TOCTOU.MAX_INSTRUCTIONS_COUNT" inputType="integer" label="Maximum number of method calls between the pairs of methods" min="0"/>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="APSC_DV.001995.TOCTOU.PAIRS_TABLE_HEADER" label="Pairs of methods" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="PB__CUB__TOCTOU__PAIRS_TABLE_HEADER__COLUMN1" label="First instruction" required="true"/>
                                <column columnType="text" editable="true" id="PB__CUB__TOCTOU__PAIRS_TABLE_HEADER__COLUMN2" label="Second instruction" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="PB__CUB__TOCTOU__PAIRS_TABLE_HEADER__COLUMN1" value="java.io.File#canWrite()"/>
                                    <column refColumnId="PB__CUB__TOCTOU__PAIRS_TABLE_HEADER__COLUMN2" value="java.io.FileWriter#FileWriter(java.io.File)"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="APSC_DV.001995.TOCTOU.BLOCKING_TABLE_HEADER" label="Blocking instructions" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="PB__CUB__TOCTOU__BLOCKING_TABLE_HEADER__COLUMN1" label="Blocking instruction" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="PB__CUB__TOCTOU__BLOCKING_TABLE_HEADER__COLUMN1" value="java.lang.Thread#sleep(long)"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="PB__CUB__TOCTOU__BLOCKING_TABLE_HEADER__COLUMN1" value="java.lang.Thread#sleep(long,int)"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.DCL" header="Avoid unsafe implementations of the &quot;double-checked locking&quot; pattern." id="DCL" originalId="TRS.DCL" scope="LINE" severity="2" since="6.0">
                <messages>
                    <msg index="1" value="The &quot;double-checked locking&quot; pattern is used; this pattern can cause unexpected problems when compiler optimizations are performed."/>
                </messages>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Race Conditions p. 161</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/609.html" name="CWE">609</reference>
                </references>
            </rule>
         </category>
         <category description="APSC_DV.003110 The application must not contain embedded authentication data." name="003110">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HCCS" header="Avoid passing hardcoded usernames/passwords/URLs to database connection methods." id="HCCS" originalId="SECURITY.WSC.HCCS" scope="LINE" severity="1" since="8.1">
                    <messages>
                        <msg index="1" value="This call to ''{0}()'' may be dangerous because it passes in only hard-coded Strings."/>
                        <msg index="2" value="This call to ''{0}()'' may be dangerous because it uses a hard-coded password."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.003110.HCCS.CONNECT_METHS" name="CONNECT_METHS" value="Additional Database Connection Methods \n(in form of &lt;qualified name of declaring type&gt;#&lt;method name&gt;)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Java leading security practice p. 170</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/259.html" name="CWE">259</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/547.html" name="CWE">547</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/798.html" name="CWE">798</reference>
                    </references>
                    <parameters>
                        <param defaultValue="" description="Additional Database Connection Methods (in form of &lt;qualified name of declaring type&gt;#&lt;method name&gt;)" id="APSC_DV.003110.HCCS.CONNECT_METHS" inputType="stringList" label="Additional Database Connection Methods" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
         <category description="APSC_DV.001300 The application must protect audit information from unauthorized deletion." name="001300">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.UEHL.DCEMSL" header="Avoid untrusted input when logging messages with Seam Logging API" id="DCEMSL" originalId="SECURITY.UEHL.DCEMSL" scope="LINE" severity="1" since="10.4.3">
                    <messages>
                        <msg index="1" value="The ''{0}'' method called on the object of the Log class takes a dangerous argument."/>
                    </messages>
                    <parameters>
                        <param defaultValue="false" id="APSC_DV.001300.DCEMSL.CLASS_FIELDS_ARE_SAFE" inputType="checkbox" label="Consider class fields to be secure"/>
                    </parameters>
                </rule>
         </category>
         <category description="APSC_DV.003235 The application must not be subject to error handling vulnerabilities." name="003235">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CRRV" header="Check the return value of methods which read or skip input" id="CRRV" originalId="PB.LOGIC.CRRV" scope="LINE" severity="3" since="8.0">
                    <messages>
                        <msg index="1" value="The return value of this call to ''{0}()'' is not checked."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="APSC_DV.003235.CRRV.CHECKED_METHOD_LIST" name="CHECKED_METHOD_LIST" value="Methods to be checked: \n(in form of &lt;fully qualified type name&gt;#&lt;method&gt;(&lt;parameter1 type&gt;,&lt;parameter2 type&gt;))"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/252.html" name="CWE">252</reference>
                    </references>
                    <parameters>
                        <param defaultValue="java.io.InputStream#read();java.io.InputStream#read(byte[]);java.io.InputStream#read(byte[],int,int);java.io.InputStream#skip(long);java.io.DataInput#skipBytes(int)" description="Methods to be checked: (in form of &lt;fully qualified type name&gt;#&lt;method&gt;(&lt;parameter1 type&gt;,&lt;parameter2 type&gt;))" id="APSC_DV.003235.CRRV.CHECKED_METHOD_LIST" inputType="stringList" label="Methods to be checked:" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
         <category description="APSC_DV.002210 The application must set the HTTPOnly flag on session cookies." name="002210">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SCHTTP" header="Mark cookies as HttpOnly" id="SCHTTP" originalId="SECURITY.WSC.SCHTTP" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The cookie is not marked as 'HttpOnly'."/>
                        <msg index="2" value="The cookie is not marked as 'HttpOnly'. Call setHttpOnly(true) on the cookie object (available since Java Servlet 3.0)."/>
                    </messages>
                </rule>
         </category>
         <category description="APSC_DV.000070 The application must automatically terminate the non-privileged user session and log off non-privileged users after a 15 minute idle time period has elapsed." name="000070">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.RUIM" header="Ensure proper session expiration" id="RUIM" originalId="SECURITY.IBA.RUIM" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The session expiration time used in this metod call is obtained form a servlet request"/>
                        <msg index="2" value="The negative timeout value used in this metod call prevents session expiration"/>
                    </messages>
                </rule>
         </category>
      </category>
      <category description="Common Weakness Enumeration 4.5" name="CWE">
         <category description="CWE-347: Improper Verification of Cryptographic Signature" name="347">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.VJFS" header="Always verify JarFile signatures" id="VJFS" originalId="SECURITY.WSC.VJFS" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Consider using a JarFile constructor with verification enabled."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/347.html" name="CWE">347</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-325: Missing Cryptographic Step" name="325">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MCMDU" header="MessageDigest objects must process the data with the 'update' method" id="MCMDU" originalId="SECURITY.WSC.MCMDU" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The 'update' method is not called on the ''{0}'' variable after the message digest object is obtained"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SIKG" header="Initialize KeyGenerator instances " id="SIKG" originalId="SECURITY.WSC.SIKG" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The ''{0}'' object of the KeyGenerator class is created but not initialized"/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-328: Reversible One-Way Hash" name="328">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AISSAJAVA" header="Avoid using insecure cryptographic algorithms for data encryption with Spring" id="AISSAJAVA" originalId="SECURITY.WSC.AISSAJAVA" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The cryptographic class is insecure."/>
                        <msg index="2" value="The cryptographic algorithm used in the constructor of MessageDigestPasswordEncoder is insecure."/>
                    </messages>
                    <parameters>
                        <!-- <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_ENCODERS" inputType="stringList" defaultValue="org.springframework.security.crypto.password.LdapShaPasswordEncoder;org.springframework.security.crypto.password.Md5PasswordEncoder;org.springframework.security.crypto.password.Md4PasswordEncoder;org.springframework.security.crypto.password.NoOpPasswordEncoder;org.springframework.security.authentication.encoding.LdapShaPasswordEncoder;org.springframework.security.authentication.encoding.Md5PasswordEncoder;org.springframework.security.authentication.encoding.Md4PasswordEncoder" label="Insecure classes that should not be used for encryption" prevType="StringList"/>
                        <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_NAMES" inputType="stringList" defaultValue="MD2;MD5;SHA-1" label="Insecure algorithms in the MessageDigestPasswordEncoder class" prevType="StringList"/>-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="CWE.328.AISSAJAVA.BANNED_ALGO_ENCODERS" label="Insecure classes that should not be used for encryption" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" label="Fully Qualified Name of Insecure Class" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md5PasswordEncoder"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md4PasswordEncoder"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.NoOpPasswordEncoder"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>
                                </row>
                                <row id="7">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md4PasswordEncoder"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="CWE.328.AISSAJAVA.BANNED_ALGO_NAMES" label="Insecure algorithms in the MessageDigestPasswordEncoder class" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" label="Name of Insecure Algorithm" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD2"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD5"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="SHA-1"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AUNC" header="Avoid using the javax.crypto.NullCipher class in non-test classes." id="AUNC" originalId="SECURITY.WSC.AUNC" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The NullCipher class that does not encrypt the plaintext is used in a non-test class."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SRD" header="Use 'java.security.SecureRandom' instead of 'java.util.Random' or 'Math.random()'." id="SRD" originalId="SECURITY.WSC.SRD" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Avoid using the insecure ''{0}'' as a random number generator"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/330.html" name="CWE">330</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/338.html" name="CWE">338</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE">676</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ICA" header="Avoid using insecure algorithms for cryptography." id="ICA" originalId="SECURITY.WSC.ICA" scope="LINE" severity="1" since="8.3">
                    <messages>
                        <msg index="1" value="The &quot;{0}&quot; algorithm is not an acceptable cryptography algorithm for the &quot;{1}&quot; class."/>
                        <msg index="2" value="The cryptography algorithm is used without padding."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.328.ICA.SUGGESTED_ALGS" name="SUGGESTED_ALGS" value="Safe Cryptography Algorithms"/>
                        <oldparam id="CWE.328.ICA.TYPE_NAME" name="TYPE_NAME" value="Fully Qualified Class Name"/>
                        <oldparam id="CWE.328.ICA.ALGORITHM_NAME" name="ALGORITHM_NAME" value="Algorithm Names (in regular expressions)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/328.html" name="CWE">328</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/780.html" name="CWE">780</reference>
                    </references>
                    <parameters>
                        <!--param id="SECURITY.WSC.ICA.SUGGESTED_ALGS" inputType="bigtext" defaultValue="java.security.KeyPairGenerator&lt;#&gt;RSA;java.security.MessageDigest&lt;#&gt;SHA-256#SHA-384#SHA-512;javax.crypto.Cipher&lt;#&gt;3DES#AES#ARCFOUR/RC4#Blowfish#ECIES#RC4#RC5#RSA(.*)OAEPWith(.*)And(.*)Padding;javax.crypto.KeyGenerator&lt;#&gt;AES#ARCFOUR/RC4#Blowfish#HmacSHA256#HmacSHA384#HmacSHA512#RC2" label="Safe Cryptography Algorithms" prevType="DuoList"/-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="CWE.328.ICA.SUGGESTED_ALGS" label="Secure Cryptographic Algorithms" prevType="DuoList" reader="SADuoList">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" label="Fully Qualified Class Name" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.KeyPairGenerator"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.MessageDigest"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.KeyGenerator"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.Cipher"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.net.ssl.SSLContext"/>
                                </row>
                            </predefinedRows>
                            <childTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="CWE.328.ICA.SUGGESTED_ALGS.CHILDTABLE1" label="">
                                <columns>
                                    <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" label="Name of Secure Algorithm (in regular expressions)" required="true"/>
                                </columns>
                                <predefinedRows refParentRowId="1">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="2">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-256"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-384"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-512"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="3">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA256"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA384"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA512"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC2"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESede"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="4">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="3DES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES/(.*)/PKCS5Padding"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ECIES"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC4"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC5"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA(.*)OAEPWith(.*)And(.*)Padding"/>
                                    </row>
                                    <row id="9">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESEDE/(.*)/PKCS5Padding"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="5">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="TLSv1.2"/>
                                    </row>
                                </predefinedRows>
                            </childTable>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MDSALT" header="Use hash functions with a salt" id="MDSALT" originalId="SECURITY.WSC.MDSALT" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="A salt is not added to the digest"/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-350: Reliance on Reverse DNS Resolution for a Security-Critical Action" name="350">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.DNSL" header="Avoid DNS lookups for decision making" id="DNSL" originalId="SECURITY.WSC.DNSL" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="DNS lookup checked here."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/247.html" name="CWE">247</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/494.html" name="CWE">494</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE">807</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-397: Declaration of Throws for Generic Exception" name="397">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.NTX" header="Avoid declaring methods to throw general or unchecked Exception types" id="NTX" originalId="CODSTA.BP.NTX" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Throwing explicit ''{0}'' object in ''{1}()''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.397.NTX.CHECKED_EXCEPTS" name="CHECKED_EXCEPTS" value="Exception types which should not be declared to be thrown (fully qualified names)"/>
                        <oldparam id="CWE.397.NTX.SKIP_JUNIT" name="SKIP_JUNIT" value="Skip JUnit 'TestCase' classes."/>
                        <oldparam id="CWE.397.NTX.SUBCLASSES" name="SUBCLASSES" value="Check for exceptions which are subclasses of 'Error' and 'RuntimeException'."/>
                        <oldparam id="CWE.397.NTX.IGNORE_OVERRIDING" name="IGNORE_OVERRIDING" value="Ignore overriding methods."/>
                        <oldparam id="CWE.397.NTX.IGNORE_PROPAGATED" name="IGNORE_PROPAGATED" value="Ignore methods which propagate exception types of called methods."/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/397.html" name="CWE">397</reference>
                    </references>
                    <parameters>
                        <param defaultValue="java.lang.Exception;java.lang.Error;java.lang.Throwable;java.lang.RuntimeException" id="CWE.397.NTX.CHECKED_EXCEPTS" inputType="stringList" label="Exception types which should not be declared to be thrown (fully qualified names)" prevType="StringList"/>
                        <param defaultValue="false" id="CWE.397.NTX.SUBCLASSES" inputType="checkbox" label="Check for exceptions which are subclasses of 'Error' and 'RuntimeException'."/>
                        <param defaultValue="false" id="CWE.397.NTX.SKIP_JUNIT" inputType="checkbox" label="Skip JUnit classes."/>
                        <param defaultValue="true" id="CWE.397.NTX.IGNORE_OVERRIDING" inputType="checkbox" label="Ignore overriding methods."/>
                        <param defaultValue="true" id="CWE.397.NTX.IGNORE_PROPAGATED" inputType="checkbox" label="Ignore methods which propagate exception types of called methods."/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.NTERR" header="Do not throw exception types which are too general or are unchecked exceptions." id="NTERR" originalId="EXCEPT.NTERR" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Avoid throwing ''{0}''."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.397.NTERR.CHECKED_EXCEPTS" name="CHECKED_EXCEPTS" value="Exception types which should not be thrown (fully qualified names)"/>
                </oldparameters>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/397.html" name="CWE">397</reference>
                </references>
                <parameters>
                    <param defaultValue="java.lang.Exception;java.lang.Error;java.lang.Throwable;java.lang.RuntimeException" id="CWE.397.NTERR.CHECKED_EXCEPTS" inputType="stringList" label="Exception types which should not be thrown (fully qualified names)" prevType="StringList"/>
                </parameters>
            </rule>
         </category>
         <category description="CWE-245: J2EE Bad Practices: Direct Management of Connections" name="245">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SPRING.JDBCTEMPLATE" header="Avoid using native JDBC" id="JDBCTEMPLATE" originalId="SPRING.JDBCTEMPLATE" scope="LINE" severity="3" since="9.2">
                <messages>
                    <msg index="1" value="Avoid using native jdbc to open connection."/>
                    <msg index="2" value="Avoid using native jdbc to prepare statement."/>
                    <msg index="3" value="Avoid using native jdbc to execute statement."/>
                    <msg index="4" value="Avoid using native jdbc to close connection."/>
                    <msg index="5" value="Avoid using deprecated SimpleJdbcTemplate class."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.245.JDBCTEMPLATE.CHECK_SIMPLE_JDBC_TEMPLATE" name="CHECK_SIMPLE_JDBC_TEMPLATE" value="Avoid using SimpleJdbcTemplate (From Spring Framework 3.0.1 is deprecated)"/>
                </oldparameters>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Buffer Overruns and Overflow p. 112</reference>
                </references>
                <parameters>
                    <param defaultValue="true" id="CWE.245.JDBCTEMPLATE.CHECK_SIMPLE_JDBC_TEMPLATE" inputType="checkbox" label="Avoid using SimpleJdbcTemplate (From Spring Framework 3.0.1 is deprecated)"/>
                </parameters>
            </rule>
         </category>
         <category description="CWE-674: Uncontrolled Recursion" name="674">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.FLRC" header="Avoid infinite recursive method calls" id="FLRC" originalId="PB.LOGIC.FLRC" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="Method ''{0}'' {1}calls itself within the first statement of its definition, which may result in an infinite recursion."/>
                        <msg index="2" value="Method ''{0}'' {1}calls itself using the same arguments that were passed in, which may result in an infinite recursion."/>
                        <msg index="3" value="Method ''{0}'' {1}calls itself and does not have any parameters, which may result in an infinite recursion."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.674.FLRC.IGNORE_COND_STMT" name="IGNORE_COND_STMT" value="Allow recursive calls within the first statement if the call is in the &quot;then&quot; or &quot;else&quot; part of a conditional expression."/>
                        <oldparam id="CWE.674.FLRC.IGNORE_OVERRIDDEN" name="IGNORE_OVERRIDDEN" value="Ignore calls to potentially overridden methods where the calling object is not &quot;this&quot;."/>
                        <oldparam id="CWE.674.FLRC.ONLY_FIRST_STMT" name="ONLY_FIRST_STMT" value="Only check the first statement of each method."/>
                        <oldparam id="CWE.674.FLRC.POSSIBLY" name="POSSIBLY" value="possibly "/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/674.html" name="CWE">674</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CWE.674.FLRC.ONLY_FIRST_STMT" inputType="checkbox" label="Only check the first statement of each method.">
                            <param defaultValue="true" id="CWE.674.FLRC.IGNORE_COND_STMT" inputType="checkbox" label="Allow recursive calls within the first statement if the call is in the &quot;then&quot; or &quot;else&quot; part of a conditional expression."/>
                        </param>
                        <param defaultValue="true" id="CWE.674.FLRC.IGNORE_OVERRIDDEN" inputType="checkbox" label="Ignore calls to potentially overridden methods where the calling object is not &quot;this&quot;."/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-20: Improper Input Validation" name="20">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.CSVFV" header="Always call 'super.validate()' from validation methods in 'ActionForm' classes." id="CSVFV" originalId="SECURITY.IBA.CSVFV" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="This validation method does not call 'super.validate()'."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.AEAF" header="Do not extend from the Struts classes 'ActionForm' and 'DynaActionForm'." id="AEAF" originalId="SECURITY.IBA.AEAF" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="Consider extending 'DynaValidatorForm' or 'DynaValidatorActionForm'"/>
                        <msg index="2" value="Consider extending 'ValidatorForm' or 'ValidatorActionForm'"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for SQL Injection p. 121</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/104.html" name="CWE">104</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/89.html" name="CWE">89</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERVLET.UCO" header="Use a Context Object to manage HTTP request parameters" id="UCO" originalId="SERVLET.UCO" scope="LINE" severity="2" since="5.1">
                <messages>
                    <msg index="1" value="Consider using a &quot;Context&quot; Object instead of calling ''{0}()''."/>
                </messages>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/15.html" name="CWE">15</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/601.html" name="CWE">601</reference>
                </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.APIBS" header="Inspect usage of standard API calls that bypass security" id="APIBS" originalId="SECURITY.WSC.APIBS" scope="LINE" severity="3" since="9.0">
                    <messages>
                        <msg index="1" value="API call ''{0}'' has potential to bypass security."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.20.APIBS.CHECKED_METHODS" name="CHECKED_METHODS" value="Check the following methods:"/>
                        <oldparam id="CWE.20.APIBS.TYPE" name="TYPE" value="Type (qualified name)"/>
                        <oldparam id="CWE.20.APIBS.METHOD" name="METHOD" value="Method name (regular expression)"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/111.html" name="CWE">111</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/114.html" name="CWE">114</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/470.html" name="CWE">470</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.20.APIBS.CHECKED_METHODS" label="Check the following methods:" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" label="Type (qualified name)" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" label="Method name (regular expression)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newInstance"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getClassLoader"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getClasses"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getField[s]*"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getMethod[s]*"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getConstructor[s]*"/>
                                </row>
                                <row id="7">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getDeclaredClasses"/>
                                </row>
                                <row id="8">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getDeclaredField[s]*"/>
                                </row>
                                <row id="9">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getDeclaredMethod[s]*"/>
                                </row>
                                <row id="10">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getDeclaredConstructor[s]*"/>
                                </row>
                                <row id="11">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.ClassLoader"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getParent"/>
                                </row>
                                <row id="12">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.ClassLoader"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getSystemClassLoader"/>
                                </row>
                                <row id="13">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Thread"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getContextClassLoader"/>
                                </row>
                                <row id="14">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="forName"/>
                                </row>
                                <row id="15">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Package"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getPackage[s]*"/>
                                </row>
                                <row id="16">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Runtime"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="load"/>
                                </row>
                                <row id="17">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Runtime"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="loadLibrary"/>
                                </row>
                                <row id="18">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.System"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="load"/>
                                </row>
                                <row id="19">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.System"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="loadLibrary"/>
                                </row>
                                <row id="20">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.sql.DriverManager"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getConnection"/>
                                </row>
                                <row id="21">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.sql.DriverManager"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getDriver[s]*"/>
                                </row>
                                <row id="22">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.sql.DriverManager"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="deregisterDriver"/>
                                </row>
                                <row id="23">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.util.ResourceBundle"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getBundle"/>
                                </row>
                                <row id="24">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newInstance"/>
                                </row>
                                <row id="25">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Constructor"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newInstance"/>
                                </row>
                                <row id="26">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Field"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="get*"/>
                                </row>
                                <row id="27">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Field"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="set*"/>
                                </row>
                                <row id="28">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Method"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="invoke"/>
                                </row>
                                <row id="29">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.util.concurrent.atomic.AtomicIntegerFieldUpdater"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newUpdater"/>
                                </row>
                                <row id="30">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.util.concurrent.atomic.AtomicLongFieldUpdater"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newUpdater"/>
                                </row>
                                <row id="31">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.util.concurrent.atomic.AtomicReferenceFieldUpdater"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newUpdater"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CLP" header="Do not cast primitive data types to lower precision" id="CLP" originalId="PB.NUM.CLP" scope="LINE" severity="2" since="4.5">
                    <messages>
                        <msg index="1" value="&quot;{0}&quot; type cast to lower precision &quot;{1}&quot; type."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/197.html" name="CWE">197</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/681.html" name="CWE">681</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.NATIW" header="Use wrapper methods to secure native methods" id="NATIW" originalId="SECURITY.IBA.NATIW" scope="LINE" severity="3" since="9.0">
                    <messages>
                        <msg index="1" value="{0} should only be accessed using a wrapper method."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Buffer Overruns and Overflow p. 112</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/111.html" name="CWE">111</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.SYSP" header="Do not access or set System properties." id="SYSP" originalId="SECURITY.BV.SYSP" scope="LINE" severity="2" since="6.0">
                    <messages>
                        <msg index="1" value="{0} the System property &quot;{1}&quot;."/>
                        <msg index="2" value="{0} a System property."/>
                        <msg index="3" value="{0} the System properties."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/15.html" name="CWE">15</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CAI" header="Always check parameters before use in array access" id="CAI" originalId="PB.RE.CAI" scope="LINE" severity="3" since="9.0">
                    <messages>
                        <msg index="1" value="Array ''{0}'' accessed with ''{1}''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.20.CAI.IGNORE_PRIVATE" name="IGNORE_PRIVATE" value="Ignore private methods"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/129.html" name="CWE">129</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CWE.20.CAI.IGNORE_PRIVATE" inputType="checkbox" label="Ignore private methods"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PORT.NATV" header="Do not use user-defined &quot;native&quot; methods." id="NATV" originalId="PORT.NATV" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="User-defined &quot;native&quot; method: {0}."/>
                </messages>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Buffer Overruns and Overflow p. 112</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/111.html" name="CWE">111</reference>
                </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.IOF" header="Use unsigned right shift instead of division when overflow is possible." id="IOF" originalId="PB.NUM.IOF" scope="LINE" severity="3" since="8.2">
                    <messages>
                        <msg index="1" value="This integer computation may cause overflow."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Buffer Overruns and Overflow p. 112</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Strings and Integers p. 180</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/190.html" name="CWE">190</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ICO" header="Avoid calculations which result in overflow or NaN" id="ICO" originalId="PB.NUM.ICO" scope="LINE" severity="1" since="8.1">
                    <messages>
                        <msg index="1" value="This calculation will not produce an accurate result because it will result in overflow."/>
                        <msg index="2" value="This calculation will throw 'java.lang.ArithmeticException'."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Buffer Overruns and Overflow p. 112</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Strings and Integers p. 180</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/190.html" name="CWE">190</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.BSA" header="Do not use an integer outside the range of [0, 31] as the amount of a shift" id="BSA" originalId="PB.NUM.BSA" scope="LINE" severity="2" since="8.0">
                    <messages>
                        <msg index="1" value="The shift amount ''{0}'' is outside the range [0, 31]."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/190.html" name="CWE">190</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/191.html" name="CWE">191</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CACO" header="Avoid using compound assignment operators in cases which may cause overflow." id="CACO" originalId="PB.NUM.CACO" scope="LINE" severity="3" since="8.1">
                    <messages>
                        <msg index="1" value="Compound assignment operators should not be used when the destination type is ''{0}''."/>
                        <msg index="2" value="Compound assignment operators should not be used when the destination type is ''{0}'' and the operand type is ''{1}''."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Buffer Overruns and Overflow p. 112</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Strings and Integers p. 180</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/190.html" name="CWE">190</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.BUSSB" header="Prevent external processes from blocking on output or error streams" id="BUSSB" originalId="SECURITY.WSC.BUSSB" scope="LINE" severity="3" since="10.4.3">
                    <messages>
                        <msg index="1" value="The error stream of the process is not emptied or redirected"/>
                        <msg index="2" value="The output stream of the process is not emptied or redirected"/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-426: Untrusted Search Path" name="426">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PBRTE" header="Always specify absolute paths to execute commands" id="PBRTE" originalId="SECURITY.WSC.PBRTE" scope="LINE" severity="1" since="10.4.3">
                    <messages>
                        <msg index="1" value="The specified command is not an absolute path with separators"/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-383: J2EE Bad Practices: Direct Use of Threads" name="383">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.DRC.THR" header="Do not use threads in web components." id="THR" originalId="SECURITY.DRC.THR" scope="LINE" severity="3" since="7.5">
                    <messages>
                        <msg index="1" value="Thread created in a web component."/>
                        <msg index="2" value="Method ''{0}'' indirectly creates Thread in a web component."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.383.THR.DEPTH" name="DEPTH" value="Maximum depth to look for Thread usage"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Race Conditions p. 161</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/383.html" name="CWE">383</reference>
                    </references>
                    <parameters>
                        <param defaultValue="2" id="CWE.383.THR.DEPTH" inputType="integer" label="Maximum depth to look for Thread usage" max="5" min="1"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-502: Deserialization of Untrusted Data" name="502">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.VOBD" header="Validate objects before deserialization" id="VOBD" originalId="SERIAL.VOBD" scope="LINE" severity="3" since="10.4.3">
                <messages>
                    <msg index="1" value="The object read from the ObjectInputStream is not validated before deserialization"/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.MASP" header="Assign 'protected' accessibility to 'readResolve()' and 'writeReplace()' methods in serializable classes" id="MASP" originalId="PB.API.MASP" scope="METHOD" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Method is not &quot;protected&quot;: ''{0}''"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.SC" header="Disable LDAP deserialization" id="SC" originalId="SECURITY.IBA.SC" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The SearchControls object allows deserialization"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.RWAF" header="Ensure that all fields are assigned by the 'readObject()' method and written out by the 'writeObject()' method" id="RWAF" originalId="SERIAL.RWAF" scope="LINE" severity="3" since="8.1">
                <messages>
                    <msg index="1" value="The ''{0}'' field is not read by the ''readObject()'' method."/>
                    <msg index="2" value="The ''{0}'' field is not written out by the ''writeObject()'' method."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.502.RWAF.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="5" id="CWE.502.RWAF.MAX_LEVEL" inputType="integer" label="Maximum level of checking allowed" min="0"/>
                    <param defaultValue="true" id="CWE.502.RWAF.CHECK_WRITE" inputType="checkbox" label="Check 'writeObject' methods" min="0"/>
                    <param defaultValue="true" id="CWE.502.RWAF.CHECK_READ" inputType="checkbox" label="Check 'readObject' methods" min="0"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.AUXD" header="Avoid parsing untrusted data with XMLDecoder" id="AUXD" originalId="SECURITY.IBA.AUXD" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The XMLDecoder class is used."/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-190: Integer Overflow or Wraparound" name="190">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CACO" header="Avoid using compound assignment operators in cases which may cause overflow." id="CACO" originalId="PB.NUM.CACO" scope="LINE" severity="3" since="8.1">
                    <messages>
                        <msg index="1" value="Compound assignment operators should not be used when the destination type is ''{0}''."/>
                        <msg index="2" value="Compound assignment operators should not be used when the destination type is ''{0}'' and the operand type is ''{1}''."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Buffer Overruns and Overflow p. 112</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Strings and Integers p. 180</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/190.html" name="CWE">190</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ICO" header="Avoid calculations which result in overflow or NaN" id="ICO" originalId="PB.NUM.ICO" scope="LINE" severity="1" since="8.1">
                    <messages>
                        <msg index="1" value="This calculation will not produce an accurate result because it will result in overflow."/>
                        <msg index="2" value="This calculation will throw 'java.lang.ArithmeticException'."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Buffer Overruns and Overflow p. 112</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Strings and Integers p. 180</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/190.html" name="CWE">190</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.BSA" header="Do not use an integer outside the range of [0, 31] as the amount of a shift" id="BSA" originalId="PB.NUM.BSA" scope="LINE" severity="2" since="8.0">
                    <messages>
                        <msg index="1" value="The shift amount ''{0}'' is outside the range [0, 31]."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/190.html" name="CWE">190</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/191.html" name="CWE">191</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.IOF" header="Use unsigned right shift instead of division when overflow is possible." id="IOF" originalId="PB.NUM.IOF" scope="LINE" severity="3" since="8.2">
                    <messages>
                        <msg index="1" value="This integer computation may cause overflow."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Buffer Overruns and Overflow p. 112</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Strings and Integers p. 180</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/190.html" name="CWE">190</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CLP" header="Do not cast primitive data types to lower precision" id="CLP" originalId="PB.NUM.CLP" scope="LINE" severity="2" since="4.5">
                    <messages>
                        <msg index="1" value="&quot;{0}&quot; type cast to lower precision &quot;{1}&quot; type."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/197.html" name="CWE">197</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/681.html" name="CWE">681</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-315: Cleartext Storage of Sensitive Information in a Cookie" name="315">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.PLC" header="Avoid storing sensitive data in plaintext in a cookie" id="PLC" originalId="SECURITY.ESD.PLC" scope="LINE" severity="1" since="9.2">
                    <messages>
                        <msg index="1" value="Do not store important to safety data in cookie."/>
                        <msg index="2" value="Do not store sensitive data in plaintext in cookie."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.315.PLC.TABLE_HEADER" name="TABLE_HEADER" value="List of RegExp to check key in cookie"/>
                        <oldparam id="CWE.315.PLC.CHECK_VALUES_HEADER" name="CHECK_VALUES_HEADER" value="Check values"/>
                        <oldparam id="CWE.315.PLC.NAME_HEADER" name="NAME_HEADER" value="Key in cookie (RegExp)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010">A9-Insufficient Transport Layer Protection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/315.html" name="CWE">315</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE">807</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.315.PLC.TABLE_HEADER" label="List of RegExp to check key in cookie" reader="SATable">
                            <columns>
                                <column columnType="checkbox" defaultValue="true" editable="true" id="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" label="Check values" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" label="Key in cookie (RegExp)" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" value="false"/>
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" value=".*(pass|role).*"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" value="true"/>
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" value=".*(user|login|account).*"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-543: Use of Singleton Pattern Without Synchronization in a Multithreaded Context" name="543">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.ILI" header="Make lazy initializations thread-safe" id="ILI" originalId="TRS.ILI" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Lazy initialization is not thread-safe: {0}."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.IASF" header="Inspect accesses to &quot;static&quot; fields which may require synchronization" id="IASF" originalId="TRS.IASF" scope="LINE" severity="3" since="8.3">
                <messages>
                    <msg index="1" value="This code may not be thread-safe; setting and accessing the field ''{0}'' may require synchronization."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.543.IASF.CHECK_LOCALS" name="CHECK_LOCALS" value="Check non-static instance fields"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="false" id="CWE.543.IASF.CHECK_LOCALS" inputType="checkbox" label="Check non-static instance fields"/>
                </parameters>
            </rule>
         </category>
         <category description="CWE-613: Insufficient Session Expiration" name="613">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.RUIM" header="Ensure proper session expiration" id="RUIM" originalId="SECURITY.IBA.RUIM" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The session expiration time used in this metod call is obtained form a servlet request"/>
                        <msg index="2" value="The negative timeout value used in this metod call prevents session expiration"/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-209: Generation of Error Message Containing Sensitive Information" name="209">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ACPST" header="Do not call the 'printStackTrace()' method of &quot;Throwable&quot; objects." id="ACPST" originalId="SECURITY.WSC.ACPST" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="The 'printStackTrace()' method of a &quot;Throwable&quot; object is called here."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.209.ACPST.IGNORE_OVERRIDDEN" name="IGNORE_OVERRIDDEN" value="Ignore overridden versions of the 'printStackTrace()' methods"/>
                        <oldparam id="CWE.209.ACPST.IGNORE_OVERLOADED" name="IGNORE_OVERLOADED" value="Ignore overloaded versions of the 'printStackTrace()' method"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/209.html" name="CWE">209</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CWE.209.ACPST.IGNORE_OVERRIDDEN" inputType="checkbox" label="Ignore overridden methods"/>
                        <param defaultValue="true" id="CWE.209.ACPST.IGNORE_OVERLOADED" inputType="checkbox" label="Ignore overloaded methods"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.PEO" header="Do not pass exception messages into output in order to prevent the application from leaking sensitive information" id="PEO" originalId="SECURITY.ESD.PEO" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Print method ''{0}()'' is not allowed in a &quot;catch&quot; block."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.209.PEO.PRINT_METHOD_EXPRESSION" name="PRINT_METHOD_EXPRESSION" value="Print methods (Specify names in regular expressions)"/>
                        <oldparam id="CWE.209.PEO.EXCEPTIONS" name="EXCEPTIONS" value="Exceptions (Specify types and method names in regular expressions)"/>
                        <oldparam id="CWE.209.PEO.TYPE" name="TYPE" value="Type"/>
                        <oldparam id="CWE.209.PEO.METHOD" name="METHOD" value="Method"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/209.html" name="CWE">209</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/497.html" name="CWE">497</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*print.*;.*Print.*" id="CWE.209.PEO.PRINT_METHOD_EXPRESSION" inputType="stringList" label="Print methods (Specify names in regular expressions)" prevType="StringList"/>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.209.PEO.EXCEPTIONS" label="Exceptions (Specify types and method names in regular expressions)" reader="SATable">
                            <columns>
                                <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" label="Type" required="true"/>
                                <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" label="Method" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" value="^java\.util\.logging\.Logger$"/>
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" value="^.*$"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" value="^org\.apache\.log4j\.Logger$"/>
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" value="^.*$"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.SIO" header="Avoid calling print methods of 'System.err' or 'System.out'" id="SIO" originalId="SECURITY.ESD.SIO" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Make sure ''{0}'' is not a leftover debug statement."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.209.SIO.METHOD_SKIP_LIST" name="METHOD_SKIP_LIST" value="Methods to be excluded from this rule"/>
                    </oldparameters>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010">A3-Broken Authentication and Session Management</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="CWE.209.SIO.SCANNED_CLASS_TABLE" label="Include classes" reader="SATable">
                            <columns>
                                <column columnType="checkbox" defaultValue="true" editable="true" id="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN1" label="Base class/ interface" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN2" label="Class/interface name (regular expression)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN1" value="true"/>
                                    <column refColumnId="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN2" value=".*"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <param defaultValue="main;show;verbose" id="CWE.209.SIO.METHOD_SKIP_LIST" inputType="stringList" label="Exclude methods" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-676: Use of Potentially Dangerous Function" name="676">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SRD" header="Use 'java.security.SecureRandom' instead of 'java.util.Random' or 'Math.random()'." id="SRD" originalId="SECURITY.WSC.SRD" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Avoid using the insecure ''{0}'' as a random number generator"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/330.html" name="CWE">330</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/338.html" name="CWE">338</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE">676</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-832: Unlock of a Resource that is not Locked" name="832">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.LORD" header="Ensure that nested locks are ordered correctly" id="LORD" originalId="TRS.LORD" scope="LINE" severity="2" since="9.0">
                <messages>
                    <msg index="1" value="Lock ''{0}'' should not be wrapped by lock ''{1}''."/>
                </messages>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/832.html" name="CWE">832</reference>
                </references>
            </rule>
         </category>
         <category description="CWE-400: Uncontrolled Resource Consumption" name="400">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.DMDS" header="Avoid using the DriverManagerDataSource class in production code" id="DMDS" originalId="SECURITY.WSC.DMDS" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The DriverManagerDataSource class is not a pooled data source and should not be used in production code."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.ISTART" header="Do not call the 'start()' method directly on Thread class instances " id="ISTART" originalId="TRS.ISTART" scope="LINE" severity="4" since="10.4">
                <messages>
                    <msg index="1" value="A call to the Thread.start() method."/>
                </messages>
                <parameters>
                    <param defaultValue="true" id="CWE.400.ISTART.CHECK_ONLY_IN_LOOPS" inputType="checkbox" label="Ignore method calls outside of loops"/>
                </parameters>
            </rule>
         </category>
         <category description="CWE-287: Improper Authentication" name="287">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.VSI" header="Properly validate server identity" id="VSI" originalId="SECURITY.WSC.VSI" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="SMTP SSL does not check server identity."/>
                        <msg index="2" value="SMTP SSL does not check server identity. Ensure the library version allows you to configure the required options."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.DNSL" header="Avoid DNS lookups for decision making" id="DNSL" originalId="SECURITY.WSC.DNSL" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="DNS lookup checked here."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/247.html" name="CWE">247</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/494.html" name="CWE">494</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE">807</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CKTS" header="Avoid using cryptographic keys which are too short." id="CKTS" originalId="SECURITY.WSC.CKTS" scope="LINE" severity="2" since="8.4">
                    <messages>
                        <msg index="1" value="Key size ({0} bits) is below the recommended minimum key size ({1} bits) for the &quot;{2}&quot; algorithm."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.287.CKTS.MIN_LENGTH_TABLE" name="MIN_LENGTH_TABLE" value="Minimum Key Size for Each Algorithm"/>
                        <oldparam id="CWE.287.CKTS.ALGORITHM_NAME" name="ALGORITHM_NAME" value="Algorithm Name"/>
                        <oldparam id="CWE.287.CKTS.MINIMUM_KEY_SIZE" name="MINIMUM_KEY_SIZE" value="Minimum Key Size (in Bits)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.287.CKTS.MIN_LENGTH_TABLE" label="Minimum Key Size for Each Algorithm" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" label="Algorithm Name" required="true"/>
                                <column columnType="text" defaultValue="128" editable="true" id="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" label="Minimum Key Size (in Bits)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" value="AES"/>
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" value="128"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" value="RSA"/>
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" value="1024"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HTTPRHA" header="Do not rely on IP addresses obtained from HTTP request headers for authentication" id="HTTPRHA" originalId="SECURITY.WSC.HTTPRHA" scope="LINE" severity="3" since="2020.1">
                    <messages>
                        <msg index="1" value="The IP address retrieved from the HTTP request header is used for authentication"/>
                        <msg index="2" value="The IP address retrieved from the header using the 'getRemoteAddr()' method is used for authentication"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PBFA" header="Ensure sufficient protection against multiple failed authentication attempts" id="PBFA" originalId="SECURITY.WSC.PBFA" scope="LINE" severity="5" type="global">
                    <messages>
                        <msg index="1" value="This class uses the object of the AuthenticationFailureBadCredentialsEvent class. Ensure that sufficient protection against multiple failed authentication attempts is implemented."/>
                        <msg index="2" value="Ensure that the implementation of the 'onAuthenticationFailure()' method provides sufficient protection against multiple failed authentication attempts."/>
                        <msg index="3" value="Ensure that the implementation of the 'configure()' method provides sufficient protection against multiple failed authentication attempts."/>
                        <msg index="4" value="Ensure that the application code includes sufficient protection against multiple failed authentication attempts."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HCCK" header="Avoid using hard-coded cryptographic keys" id="HCCK" originalId="SECURITY.WSC.HCCK" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Hard-coded cryptographic key here."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.287.HCCK.MIN_LENGTH" name="MIN_LENGTH" value="Check keys whose length is greater than "/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/321.html" name="CWE">321</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/506.html" name="CWE">506</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/759.html" name="CWE">759</reference>
                    </references>
                    <parameters>
                        <param defaultValue="9" id="CWE.287.HCCK.MIN_LENGTH" inputType="integer" label="Check keys whose length is greater than " min="9"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HCCS" header="Avoid passing hardcoded usernames/passwords/URLs to database connection methods." id="HCCS" originalId="SECURITY.WSC.HCCS" scope="LINE" severity="1" since="8.1">
                    <messages>
                        <msg index="1" value="This call to ''{0}()'' may be dangerous because it passes in only hard-coded Strings."/>
                        <msg index="2" value="This call to ''{0}()'' may be dangerous because it uses a hard-coded password."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.287.HCCS.CONNECT_METHS" name="CONNECT_METHS" value="Additional Database Connection Methods \n(in form of &lt;qualified name of declaring type&gt;#&lt;method name&gt;)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Java leading security practice p. 170</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/259.html" name="CWE">259</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/547.html" name="CWE">547</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/798.html" name="CWE">798</reference>
                    </references>
                    <parameters>
                        <param defaultValue="" description="Additional Database Connection Methods (in form of &lt;qualified name of declaring type&gt;#&lt;method name&gt;)" id="CWE.287.HCCS.CONNECT_METHS" inputType="stringList" label="Additional Database Connection Methods" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.USC" header="Use the SSL-enabled version of classes when possible." id="USC" originalId="SECURITY.WSC.USC" scope="LINE" severity="3" since="7.5">
                    <messages>
                        <msg index="1" value="Consider using the SSL-enabled type ''SSLServerSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="2" value="Consider using the SSL-enabled type ''SSLSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="3" value="Consider using the SSL-enabled type ''HttpsURLConnection'' for the {0} ''{1}''."/>
                        <msg index="4" value="Consider using the SSL-enabled type ''SslRMIClientSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="5" value="Consider using the SSL-enabled type ''SslRMIServerSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="6" value="Consider using the SSL-enabled type ''SSLSocket'' for the {0} ''{1}''."/>
                        <msg index="7" value="Consider using the SSL-enabled type ''SSLServerSocket'' for the {0} ''{1}''."/>
                        <msg index="8" value="Consider using the SSL-enabled type ''SSLPermission'' for the {0} ''{1}''."/>
                    </messages>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010">A9-Insufficient Transport Layer Protection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/494.html" name="CWE">494</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HV" header="Ensure the HostnameVerifier.verify() method validates the certificate" id="HV" originalId="SECURITY.WSC.HV" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The certificate is not validated, because the 'verify' method always returns 'true'"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SSM" header="Ensure that an appropriate security manager is set" id="SSM" originalId="SECURITY.WSC.SSM" scope="LINe" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Security manager is missing, 'setSecurityManager' should be invoked"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authentication p. 66</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010">A3 - Broken Authentication and Session Management</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/180.html" name="CWE">180</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-337: Predictable Seed in Pseudo-Random Number Generator (PRNG)" name="337">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ENPP" header="Ensure arguments passed to certain methods come from predefined methods list." id="ENPP" originalId="SECURITY.WSC.ENPP" scope="LINE" severity="2" since="9.2">
                    <messages>
                        <msg index="1" value="Argument number {0} passed to method ''{1}'' is not an allowed method call."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.337.ENPP.PAIRS_TABLE_HEADER" name="PAIRS_TABLE_HEADER" value="Methods and arguments configuration"/>
                        <oldparam id="CWE.337.ENPP.PAIRS_TABLE_1ST" name="PAIRS_TABLE_1ST" value="Method to be checked (&lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,...)"/>
                        <oldparam id="CWE.337.ENPP.PAIRS_TABLE_INDEX" name="PAIRS_TABLE_INDEX" value="Argument Index to Check (''0''-based)"/>
                        <oldparam id="CWE.337.ENPP.PAIRS_TABLE_2ND" name="PAIRS_TABLE_2ND" value="Allowed method name (in Regular Expressions)"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/329.html" name="CWE">329</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/336.html" name="CWE">336</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/337.html" name="CWE">337</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE">676</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.337.ENPP.PAIRS_TABLE_HEADER" label="Methods and arguments configuration" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" label="Method to be checked (&lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,...)" required="true"/>
                                <column columnType="text" defaultValue="0" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" label="Argument Index to Check (''0''-based)" required="true" textSize="small"/>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" label="Allowed method name (in Regular Expressions)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#SecureRandom(byte[])"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#setSeed(byte[])"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#setSeed(long)"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="javax.crypto.spec.IvParameterSpec#IvParameterSpec(byte[])"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidIV"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="javax.crypto.spec.IvParameterSpec#IvParameterSpec(byte[],int,int)"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidIV"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-375: Returning a Mutable Object to an Untrusted Caller" name="375">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.RA" header="Avoid methods that might expose internal representations by returning arrays or other mutable fields" id="RA" originalId="SECURITY.ESD.RA" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="Exposing the internal representation of ''{0}'' through the array ''{1}''."/>
                        <msg index="2" value="Exposing the internal representation of ''{0}'' through the mutable field ''{1}''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.375.RA.CHECK_ARRAYS" name="CHECK_ARRAYS" value="Check arrays"/>
                        <oldparam id="CWE.375.RA.CHECK_MUTABLE_TYPES" name="CHECK_MUTABLE_TYPES" value="Check mutable types"/>
                    </oldparameters>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A4" name="OWASP-2010">A4-Insecure Direct Object Reference</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/495.html" name="CWE">495</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CWE.375.RA.CHECK_ARRAYS" inputType="checkbox" label="Check arrays"/>
                        <param defaultValue="false" id="CWE.375.RA.CHECK_MUTABLE_TYPES" inputType="checkbox" label="Check mutable types"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-193: Off-by-one Error" name="193">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AOBO" header="Avoid off-by-one errors in loop conditions" id="AOBO" originalId="PB.LOGIC.AOBO" scope="LINE" severity="2" since="9.0">
                    <messages>
                        <msg index="1" value="Loop condition may be off by one."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Strings and Integers p. 180</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/193.html" name="CWE">193</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" name="362">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.TOCTOU" header="Avoid Time-of-check Time-of-use (TOCTOU) Race Condition" id="TOCTOU" originalId="PB.CUB.TOCTOU" scope="LINE" severity="2" since="9.2">
                    <messages>
                        <msg index="1" value="This call is not preceeded by: ''{0}'' within {1} method calls."/>
                        <msg index="2" value="This call is not preceeded by: ''{0}'' before calling blocking instruction: ''{1}''."/>
                        <msg index="3" value="This call is not preceeded by: ''{0}'' within block scope."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.362.TOCTOU.PAIRS_TABLE_HEADER" name="PAIRS_TABLE_HEADER" value="Pairs of instructions that need to be called right after each other"/>
                        <oldparam id="CWE.362.TOCTOU.PAIRS_TABLE_1ST" name="PAIRS_TABLE_1ST" value="First instruction"/>
                        <oldparam id="CWE.362.TOCTOU.PAIRS_TABLE_2ND" name="PAIRS_TABLE_2ND" value="Second instruction"/>
                        <oldparam id="CWE.362.TOCTOU.BLOCKING_TABLE_HEADER" name="BLOCKING_TABLE_HEADER" value="Blocking instructions"/>
                        <oldparam id="CWE.362.TOCTOU.BLOCKING_TABLE_1ST" name="BLOCKING_TABLE_1ST" value="Blocking instruction"/>
                        <oldparam id="CWE.362.TOCTOU.MAX_INSTRUCTIONS_COUNT" name="MAX_INSTRUCTIONS_COUNT" value="Maximum number of method calls that can occur between pairs of instructions"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Race Conditions p. 161</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/367.html" name="CWE">367</reference>
                    </references>
                    <parameters>
                        <param defaultValue="3" id="CWE.362.TOCTOU.MAX_INSTRUCTIONS_COUNT" inputType="integer" label="Maximum number of method calls between the pairs of methods" min="0"/>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.362.TOCTOU.PAIRS_TABLE_HEADER" label="Pairs of methods" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="PB__CUB__TOCTOU__PAIRS_TABLE_HEADER__COLUMN1" label="First instruction" required="true"/>
                                <column columnType="text" editable="true" id="PB__CUB__TOCTOU__PAIRS_TABLE_HEADER__COLUMN2" label="Second instruction" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="PB__CUB__TOCTOU__PAIRS_TABLE_HEADER__COLUMN1" value="java.io.File#canWrite()"/>
                                    <column refColumnId="PB__CUB__TOCTOU__PAIRS_TABLE_HEADER__COLUMN2" value="java.io.FileWriter#FileWriter(java.io.File)"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.362.TOCTOU.BLOCKING_TABLE_HEADER" label="Blocking instructions" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="PB__CUB__TOCTOU__BLOCKING_TABLE_HEADER__COLUMN1" label="Blocking instruction" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="PB__CUB__TOCTOU__BLOCKING_TABLE_HEADER__COLUMN1" value="java.lang.Thread#sleep(long)"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="PB__CUB__TOCTOU__BLOCKING_TABLE_HEADER__COLUMN1" value="java.lang.Thread#sleep(long,int)"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.DCL" header="Avoid unsafe implementations of the &quot;double-checked locking&quot; pattern." id="DCL" originalId="TRS.DCL" scope="LINE" severity="2" since="6.0">
                <messages>
                    <msg index="1" value="The &quot;double-checked locking&quot; pattern is used; this pattern can cause unexpected problems when compiler optimizations are performed."/>
                </messages>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Race Conditions p. 161</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/609.html" name="CWE">609</reference>
                </references>
            </rule>
         </category>
         <category description="CWE-395: Use of NullPointerException Catch to Detect NULL Pointer Dereference" name="395">
            <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.NCNPE" header="Do not catch 'NullPointerException'" id="NCNPE" originalId="EXCEPT.NCNPE" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Avoid catching 'NullPointerException'"/>
                </messages>
            </rule>
         </category>
         <category description="CWE-200: Exposure of Sensitive Information to an Unauthorized Actor" name="200">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.SIO" header="Avoid calling print methods of 'System.err' or 'System.out'" id="SIO" originalId="SECURITY.ESD.SIO" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Make sure ''{0}'' is not a leftover debug statement."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.200.SIO.METHOD_SKIP_LIST" name="METHOD_SKIP_LIST" value="Methods to be excluded from this rule"/>
                    </oldparameters>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010">A3-Broken Authentication and Session Management</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="CWE.200.SIO.SCANNED_CLASS_TABLE" label="Include classes" reader="SATable">
                            <columns>
                                <column columnType="checkbox" defaultValue="true" editable="true" id="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN1" label="Base class/ interface" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN2" label="Class/interface name (regular expression)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN1" value="true"/>
                                    <column refColumnId="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN2" value=".*"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <param defaultValue="main;show;verbose" id="CWE.200.SIO.METHOD_SKIP_LIST" inputType="stringList" label="Exclude methods" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ACPST" header="Do not call the 'printStackTrace()' method of &quot;Throwable&quot; objects." id="ACPST" originalId="SECURITY.WSC.ACPST" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="The 'printStackTrace()' method of a &quot;Throwable&quot; object is called here."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.200.ACPST.IGNORE_OVERRIDDEN" name="IGNORE_OVERRIDDEN" value="Ignore overridden versions of the 'printStackTrace()' methods"/>
                        <oldparam id="CWE.200.ACPST.IGNORE_OVERLOADED" name="IGNORE_OVERLOADED" value="Ignore overloaded versions of the 'printStackTrace()' method"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/209.html" name="CWE">209</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CWE.200.ACPST.IGNORE_OVERRIDDEN" inputType="checkbox" label="Ignore overridden methods"/>
                        <param defaultValue="true" id="CWE.200.ACPST.IGNORE_OVERLOADED" inputType="checkbox" label="Ignore overloaded methods"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.PEO" header="Do not pass exception messages into output in order to prevent the application from leaking sensitive information" id="PEO" originalId="SECURITY.ESD.PEO" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Print method ''{0}()'' is not allowed in a &quot;catch&quot; block."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.200.PEO.PRINT_METHOD_EXPRESSION" name="PRINT_METHOD_EXPRESSION" value="Print methods (Specify names in regular expressions)"/>
                        <oldparam id="CWE.200.PEO.EXCEPTIONS" name="EXCEPTIONS" value="Exceptions (Specify types and method names in regular expressions)"/>
                        <oldparam id="CWE.200.PEO.TYPE" name="TYPE" value="Type"/>
                        <oldparam id="CWE.200.PEO.METHOD" name="METHOD" value="Method"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/209.html" name="CWE">209</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/497.html" name="CWE">497</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*print.*;.*Print.*" id="CWE.200.PEO.PRINT_METHOD_EXPRESSION" inputType="stringList" label="Print methods (Specify names in regular expressions)" prevType="StringList"/>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.200.PEO.EXCEPTIONS" label="Exceptions (Specify types and method names in regular expressions)" reader="SATable">
                            <columns>
                                <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" label="Type" required="true"/>
                                <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" label="Method" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" value="^java\.util\.logging\.Logger$"/>
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" value="^.*$"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" value="^org\.apache\.log4j\.Logger$"/>
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" value="^.*$"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.CONSEN" header="Do not log confidential or sensitive information" id="CONSEN" originalId="SECURITY.ESD.CONSEN" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="''{0}'' should not be used by a logger, it can expose confidential info."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.200.CONSEN.SUSPICIOUS_WORDS" name="SUSPICIOUS_WORDS" value="Regular expressions representing sensive data:"/>
                        <oldparam id="CWE.200.CONSEN.LOG_METHOD_EXPRESSIONS" name="LOG_METHOD_EXPRESSIONS" value="Logging method name in regular expression"/>
                        <oldparam id="CWE.200.CONSEN.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/533.html" name="CWE">533</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/534.html" name="CWE">534</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*ssn.*@delim@.*pass.*" id="CWE.200.CONSEN.SUSPICIOUS_WORDS" inputType="stringList" label="Regular expressions representing sensive data:" prevType="StringList"/>
                        <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="CWE.200.CONSEN.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                        <param defaultValue=".*log.*" id="CWE.200.CONSEN.LOG_METHOD_EXPRESSIONS" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.EWSSEC" header="Avoid debug information from Spring Security framework to logs" id="EWSSEC" originalId="SECURITY.WSC.EWSSEC" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="Debug features is activated in @EnableWebSecurity annotation"/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-391: Unchecked Error Condition" name="391">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AECB" header="Avoid &quot;try&quot;, &quot;catch&quot; and &quot;finally&quot; blocks with empty bodies" id="AECB" originalId="PB.TYPO.AECB" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="&quot;try&quot; block has an empty body."/>
                        <msg index="2" value="&quot;catch&quot; block has an empty body."/>
                        <msg index="3" value="&quot;finally&quot; block has an empty body."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.391.AECB.CHECK_FINALLY" name="CHECK_FINALLY" value="Check &quot;finally&quot; block."/>
                        <oldparam id="CWE.391.AECB.CHECK_TRY" name="CHECK_TRY" value="Check &quot;try&quot; block."/>
                        <oldparam id="CWE.391.AECB.CHECK_CATCH" name="CHECK_CATCH" value="Check &quot;catch&quot; block."/>
                        <oldparam id="CWE.391.AECB.CHECK_COMMENTS" name="CHECK_COMMENTS" value="Disallow blocks with comments as content."/>
                        <oldparam id="CWE.391.AECB.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="Regular expression of exception variable name. (enclosing catch block would be ignored if matches)"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/391.html" name="CWE">391</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CWE.391.AECB.CHECK_TRY" inputType="checkbox" label="Check &quot;try&quot; block."/>
                        <param defaultValue="true" id="CWE.391.AECB.CHECK_CATCH" inputType="checkbox" label="Check &quot;catch&quot; block."/>
                        <param defaultValue="true" id="CWE.391.AECB.CHECK_FINALLY" inputType="checkbox" label="Check &quot;finally&quot; block."/>
                        <param defaultValue="false" id="CWE.391.AECB.CHECK_COMMENTS" inputType="checkbox" label="Disallow blocks with comments as content."/>
                        <param defaultValue="%5Eignore%24;" id="CWE.391.AECB.REGULAR_EXPRESSION" inputType="stringList" label="Regular expression of exception variable name. (enclosing catch block would be ignored if matches)" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-64: Windows Shortcut Following (.LNK)" name="64">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.LNK" header="Validate shortcut target paths before use" id="LNK" originalId="SECURITY.WSC.LNK" scope="LINE" severity="4" since="2020.2">
                    <messages>
                        <msg index="1" value="The value returned by resolveTarget() is not validated"/>
                    </messages>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.64.LNK.VALIDATE_METHODS" label="Validating methods" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN1" label="Type (qualified name in regular expressions)" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN2" label="Method name (in regular expressions)" required="true"/>
                                <column columnType="checkbox" editable="true" id="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN3" label="Verify that resolveTarget() is checked by this method" required="true"/>
                                <column columnType="checkbox" editable="true" id="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN4" label="Verify that resolveTarget() is declared in this method" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN1" value=".*"/>
                                    <column refColumnId="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN2" value=".*[vV]alidate.*"/>
                                    <column refColumnId="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN3" value="true"/>
                                    <column refColumnId="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN4" value="true"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-114: Process Control" name="114">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.APIBS" header="Inspect usage of standard API calls that bypass security" id="APIBS" originalId="SECURITY.WSC.APIBS" scope="LINE" severity="3" since="9.0">
                    <messages>
                        <msg index="1" value="API call ''{0}'' has potential to bypass security."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.114.APIBS.CHECKED_METHODS" name="CHECKED_METHODS" value="Check the following methods:"/>
                        <oldparam id="CWE.114.APIBS.TYPE" name="TYPE" value="Type (qualified name)"/>
                        <oldparam id="CWE.114.APIBS.METHOD" name="METHOD" value="Method name (regular expression)"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/111.html" name="CWE">111</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/114.html" name="CWE">114</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/470.html" name="CWE">470</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.114.APIBS.CHECKED_METHODS" label="Check the following methods:" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" label="Type (qualified name)" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" label="Method name (regular expression)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newInstance"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getClassLoader"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getClasses"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getField[s]*"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getMethod[s]*"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getConstructor[s]*"/>
                                </row>
                                <row id="7">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getDeclaredClasses"/>
                                </row>
                                <row id="8">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getDeclaredField[s]*"/>
                                </row>
                                <row id="9">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getDeclaredMethod[s]*"/>
                                </row>
                                <row id="10">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getDeclaredConstructor[s]*"/>
                                </row>
                                <row id="11">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.ClassLoader"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getParent"/>
                                </row>
                                <row id="12">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.ClassLoader"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getSystemClassLoader"/>
                                </row>
                                <row id="13">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Thread"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getContextClassLoader"/>
                                </row>
                                <row id="14">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="forName"/>
                                </row>
                                <row id="15">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Package"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getPackage[s]*"/>
                                </row>
                                <row id="16">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Runtime"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="load"/>
                                </row>
                                <row id="17">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Runtime"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="loadLibrary"/>
                                </row>
                                <row id="18">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.System"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="load"/>
                                </row>
                                <row id="19">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.System"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="loadLibrary"/>
                                </row>
                                <row id="20">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.sql.DriverManager"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getConnection"/>
                                </row>
                                <row id="21">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.sql.DriverManager"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getDriver[s]*"/>
                                </row>
                                <row id="22">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.sql.DriverManager"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="deregisterDriver"/>
                                </row>
                                <row id="23">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.util.ResourceBundle"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getBundle"/>
                                </row>
                                <row id="24">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newInstance"/>
                                </row>
                                <row id="25">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Constructor"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newInstance"/>
                                </row>
                                <row id="26">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Field"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="get*"/>
                                </row>
                                <row id="27">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Field"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="set*"/>
                                </row>
                                <row id="28">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Method"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="invoke"/>
                                </row>
                                <row id="29">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.util.concurrent.atomic.AtomicIntegerFieldUpdater"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newUpdater"/>
                                </row>
                                <row id="30">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.util.concurrent.atomic.AtomicLongFieldUpdater"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newUpdater"/>
                                </row>
                                <row id="31">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.util.concurrent.atomic.AtomicReferenceFieldUpdater"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newUpdater"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-61: UNIX Symbolic Link (Symlink) Following" name="61">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.FOLLOW" header="Ensure that file target paths retrieved by resolving symbolic links are safe" id="FOLLOW" originalId="SECURITY.WSC.FOLLOW" scope="LINE" severity="5" since="2020.2">
                    <messages>
                        <msg index="1" value="Verify that the path retrieved by using FileVisitOption.FOLLOW_LINKS is within the intended control sphere"/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-492: Use of Inner Class Containing Sensitive Data" name="492">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.INNER" header="Make all member classes &quot;private&quot;." id="INNER" originalId="SECURITY.WSC.INNER" scope="CLASS" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Member class ''{0}'' is not &quot;private&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.492.INNER.IGNORE_STATIC" name="IGNORE_STATIC" value="Ignore &quot;static&quot; member classes"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="CWE.492.INNER.IGNORE_STATIC" inputType="checkbox" label="Ignore &quot;static&quot; member classes"/>
                        <param defaultValue="false" id="CWE.492.INNER.CHECK_INTERFACE" inputType="checkbox" label="Check member interfaces"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-582: Array Declared Public, Final, and Static" name="582">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.PSFA" header="Avoid using &quot;public static final&quot; array fields" id="PSFA" originalId="PB.CUB.PSFA" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Mutable &quot;public static final&quot; array field: ''{0}''."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/582.html" name="CWE">582</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.IMM" header="Ensure &quot;static&quot; &quot;final&quot; fields are immutable." id="IMM" originalId="PB.CUB.IMM" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="&quot;static&quot; &quot;final&quot; field ''{0}'' of ''{1}'' type is mutable."/>
                        <msg index="2" value="&quot;static&quot; &quot;final&quot; field ''{0}'' of ''{1}'' type is mutable, since array elements could be modified even if the array is declared as &quot;final&quot;."/>
                        <msg index="3" value="&quot;static&quot; mutable field ''{0}'' of ''{1}'' type is not declared &quot;private&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.582.IMM.CHECK_PRIVATE" name="CHECK_PRIVATE" value="Check &quot;static&quot; mutable fields are declared &quot;private&quot;"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="false" id="CWE.582.IMM.CHECK_PRIVATE" inputType="checkbox" label="Report mutable non-final &quot;static&quot; fields that are not declared &quot;private&quot;"/>
                        <param defaultValue="" id="CWE.582.IMM.IGNORE_TYPES" inputType="stringList" label="Ignore types"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-15: External Control of System or Configuration Setting" name="15">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.SYSP" header="Do not access or set System properties." id="SYSP" originalId="SECURITY.BV.SYSP" scope="LINE" severity="2" since="6.0">
                    <messages>
                        <msg index="1" value="{0} the System property &quot;{1}&quot;."/>
                        <msg index="2" value="{0} a System property."/>
                        <msg index="3" value="{0} the System properties."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/15.html" name="CWE">15</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERVLET.UCO" header="Use a Context Object to manage HTTP request parameters" id="UCO" originalId="SERVLET.UCO" scope="LINE" severity="2" since="5.1">
                <messages>
                    <msg index="1" value="Consider using a &quot;Context&quot; Object instead of calling ''{0}()''."/>
                </messages>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/15.html" name="CWE">15</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/601.html" name="CWE">601</reference>
                </references>
            </rule>
         </category>
         <category description="CWE-261: Weak Encoding for Password" name="261">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CKTS" header="Avoid using cryptographic keys which are too short." id="CKTS" originalId="SECURITY.WSC.CKTS" scope="LINE" severity="2" since="8.4">
                    <messages>
                        <msg index="1" value="Key size ({0} bits) is below the recommended minimum key size ({1} bits) for the &quot;{2}&quot; algorithm."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.261.CKTS.MIN_LENGTH_TABLE" name="MIN_LENGTH_TABLE" value="Minimum Key Size for Each Algorithm"/>
                        <oldparam id="CWE.261.CKTS.ALGORITHM_NAME" name="ALGORITHM_NAME" value="Algorithm Name"/>
                        <oldparam id="CWE.261.CKTS.MINIMUM_KEY_SIZE" name="MINIMUM_KEY_SIZE" value="Minimum Key Size (in Bits)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.261.CKTS.MIN_LENGTH_TABLE" label="Minimum Key Size for Each Algorithm" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" label="Algorithm Name" required="true"/>
                                <column columnType="text" defaultValue="128" editable="true" id="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" label="Minimum Key Size (in Bits)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" value="AES"/>
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" value="128"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" value="RSA"/>
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" value="1024"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition" name="367">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.TOCTOU" header="Avoid Time-of-check Time-of-use (TOCTOU) Race Condition" id="TOCTOU" originalId="PB.CUB.TOCTOU" scope="LINE" severity="2" since="9.2">
                    <messages>
                        <msg index="1" value="This call is not preceeded by: ''{0}'' within {1} method calls."/>
                        <msg index="2" value="This call is not preceeded by: ''{0}'' before calling blocking instruction: ''{1}''."/>
                        <msg index="3" value="This call is not preceeded by: ''{0}'' within block scope."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.367.TOCTOU.PAIRS_TABLE_HEADER" name="PAIRS_TABLE_HEADER" value="Pairs of instructions that need to be called right after each other"/>
                        <oldparam id="CWE.367.TOCTOU.PAIRS_TABLE_1ST" name="PAIRS_TABLE_1ST" value="First instruction"/>
                        <oldparam id="CWE.367.TOCTOU.PAIRS_TABLE_2ND" name="PAIRS_TABLE_2ND" value="Second instruction"/>
                        <oldparam id="CWE.367.TOCTOU.BLOCKING_TABLE_HEADER" name="BLOCKING_TABLE_HEADER" value="Blocking instructions"/>
                        <oldparam id="CWE.367.TOCTOU.BLOCKING_TABLE_1ST" name="BLOCKING_TABLE_1ST" value="Blocking instruction"/>
                        <oldparam id="CWE.367.TOCTOU.MAX_INSTRUCTIONS_COUNT" name="MAX_INSTRUCTIONS_COUNT" value="Maximum number of method calls that can occur between pairs of instructions"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Race Conditions p. 161</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/367.html" name="CWE">367</reference>
                    </references>
                    <parameters>
                        <param defaultValue="3" id="CWE.367.TOCTOU.MAX_INSTRUCTIONS_COUNT" inputType="integer" label="Maximum number of method calls between the pairs of methods" min="0"/>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.367.TOCTOU.PAIRS_TABLE_HEADER" label="Pairs of methods" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="PB__CUB__TOCTOU__PAIRS_TABLE_HEADER__COLUMN1" label="First instruction" required="true"/>
                                <column columnType="text" editable="true" id="PB__CUB__TOCTOU__PAIRS_TABLE_HEADER__COLUMN2" label="Second instruction" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="PB__CUB__TOCTOU__PAIRS_TABLE_HEADER__COLUMN1" value="java.io.File#canWrite()"/>
                                    <column refColumnId="PB__CUB__TOCTOU__PAIRS_TABLE_HEADER__COLUMN2" value="java.io.FileWriter#FileWriter(java.io.File)"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.367.TOCTOU.BLOCKING_TABLE_HEADER" label="Blocking instructions" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="PB__CUB__TOCTOU__BLOCKING_TABLE_HEADER__COLUMN1" label="Blocking instruction" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="PB__CUB__TOCTOU__BLOCKING_TABLE_HEADER__COLUMN1" value="java.lang.Thread#sleep(long)"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="PB__CUB__TOCTOU__BLOCKING_TABLE_HEADER__COLUMN1" value="java.lang.Thread#sleep(long,int)"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-546: Suspicious Comment" name="546">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.TODOJAVA" header="Ensure that comments do not contain task tags." id="TODOJAVA" originalId="CODSTA.ORG.TODOJAVA" scope="LINE" severity="4" since="10.4.2">
                    <messages>
                        <msg index="1" value="The code contains a &quot;{0}&quot; comment: &quot;{1}&quot;."/>
                        <msg index="2" value="The code contains a comment matching &quot;{0}&quot; (regular expression): &quot;{1}&quot;."/>
                    </messages>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="CWE.546.TODOJAVA.TABLE_HEADER" label="List of task tags:" reader="SATable">
                            <columns>
                                <column columnType="checkbox" defaultValue="true" editable="true" id="CODSTA__ORG__TODOJAVA__TABLE_HEADER__COLUMN1" label="Is reg expr" required="true"/>
                                <column columnType="text" editable="true" id="CODSTA__ORG__TODOJAVA__TABLE_HEADER__COLUMN2" label="Value" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="CODSTA__ORG__TODOJAVA__TABLE_HEADER__COLUMN1" value="false"/>
                                    <column refColumnId="CODSTA__ORG__TODOJAVA__TABLE_HEADER__COLUMN2" value="TODO"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="CODSTA__ORG__TODOJAVA__TABLE_HEADER__COLUMN1" value="false"/>
                                    <column refColumnId="CODSTA__ORG__TODOJAVA__TABLE_HEADER__COLUMN2" value="FIXME"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="CODSTA__ORG__TODOJAVA__TABLE_HEADER__COLUMN1" value="false"/>
                                    <column refColumnId="CODSTA__ORG__TODOJAVA__TABLE_HEADER__COLUMN2" value="XXX"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-772: Missing Release of Resource after Effective Lifetime" name="772">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CLOSE" header="Unrestricted lock resource" id="CLOSE" originalId="PB.CLOSE" scope="LINE" severity="1" since="9.2">
                <oldparameters>
                    <oldparam id="CWE.772.CLOSE.TABLE_HEADER" name="TABLE_HEADER" value="List of classes responsible for the resource and resource closing methods"/>
                    <oldparam id="CWE.772.CLOSE.CLASS_NAME_HEADER" name="CLASS_NAME_HEADER" value="Class name"/>
                    <oldparam id="CWE.772.CLOSE.METHOD_NAME_HEADER" name="METHOD_NAME_HEADER" value="Method name"/>
                </oldparameters>
                <messages>
                    <msg index="1" value="Variable ''{0}'' may not have a close resource."/>
                    <msg index="2" value="Variable ''{0}'' is rewrite without close resource."/>
                </messages>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE">404</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE">772</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/775.html" name="CWE">775</reference>
                </references>
                <parameters>
                    <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.772.CLOSE.TABLE_HEADER" label="List of classes responsible for the resource and resource closing methods" reader="SATable">
                        <columns>
                            <column columnType="text" editable="true" id="PB__CLOSE__TABLE_HEADER__COLUMN1" label="Class name" required="true"/>
                            <column columnType="text" editable="true" id="PB__CLOSE__TABLE_HEADER__COLUMN2" label="Method name" required="true"/>
                        </columns>
                        <predefinedRows>
                            <row id="1">
                                <column refColumnId="PB__CLOSE__TABLE_HEADER__COLUMN1" value="java.io.Closeable"/>
                                <column refColumnId="PB__CLOSE__TABLE_HEADER__COLUMN2" value="close"/>
                            </row>
                        </predefinedRows>
                    </complexParamTable>
                </parameters>
            </rule>
         </category>
         <category description="CWE-759: Use of a One-Way Hash without a Salt" name="759">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MDSALT" header="Use hash functions with a salt" id="MDSALT" originalId="SECURITY.WSC.MDSALT" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="A salt is not added to the digest"/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')" name="843">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.EQUS" header="Do not call 'equals()' methods that always return false" id="EQUS" originalId="PB.LOGIC.EQUS" scope="LINE" severity="1" since="5.1">
                    <messages>
                        <msg index="1" value="''equals()'' method would always return false, since calling object is type ''{0}'' and argument is type ''{1}''."/>
                        <msg index="2" value="''equals()'' method would always return false, since calling object is type anonymous class that extends ''{0}'' and argument is type ''{1}''."/>
                        <msg index="3" value="'equals()' method would always return false, since argument is null."/>
                        <msg index="4" value="''equals()'' method would always return false, since calling object is type ''{0}'' and argument is type ''{1}''."/>
                        <msg index="5" value="''equals()'' method would always return false, since calling object and argument do not refer to the same object."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Java gotchas p. 164</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-600: Uncaught Exception in Servlet" name="600">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERVLET.CETS" header="Catch all exceptions which may be thrown within Servlet methods" id="CETS" originalId="SERVLET.CETS" scope="LINE" severity="4">
                <messages>
                    <msg index="1" value="The method ''{0}()'' is declared to throw the exception type ''{1}'', but this exception is not caught."/>
                </messages>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/600.html" name="CWE">600</reference>
                </references>
            </rule>
         </category>
         <category description="CWE-250: Execution with Unnecessary Privileges" name="250">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.PCL" header="Limit the number of lines in &quot;privileged&quot; code blocks." id="PCL" originalId="SECURITY.EAB.PCL" scope="LINE" severity="4" since="8.4">
                    <messages>
                        <msg index="1" value="&quot;run()&quot; method of class ''{0}'' has greater than ''{1}'' lines."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.250.PCL.CHECK_PA" name="CHECK_PA" value="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <oldparam id="CWE.250.PCL.CHECK_PEA" name="CHECK_PEA" value="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                        <oldparam id="CWE.250.PCL.NUMBER_LINES" name="NUMBER_LINES" value="Limit number of lines in &quot;run()&quot; method to"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authorization p. 73</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/250.html" name="CWE">250</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CWE.250.PCL.CHECK_PA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <param defaultValue="true" id="CWE.250.PCL.CHECK_PEA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                        <param defaultValue="10" id="CWE.250.PCL.NUMBER_LINES" inputType="integer" label="Limit number of lines in &quot;run()&quot; method to" min="1"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.LDP" header="Limit the number of &quot;AccessController.doPrivileged&quot; calls per class." id="LDP" originalId="SECURITY.EAB.LDP" scope="LINE" severity="4" since="8.4">
                    <messages>
                        <msg index="1" value="Class ''{0}'' has greater than ''{1}'' calls to &quot;AccessController.doPrivileged&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.250.LDP.MAX_CALLS" name="MAX_CALLS" value="Limit the number of 'AccessController.doPrivileged' calls per class to"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authorization p. 73</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/250.html" name="CWE">250</reference>
                    </references>
                    <parameters>
                        <param defaultValue="3" id="CWE.250.LDP.MAX_CALLS" inputType="integer" label="Limit the number of 'AccessController.doPrivileged' calls per class to" min="0"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-486: Comparison of Classes by Name" name="486">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.AUG" header="Inspect usage of 'getName()' from 'java.lang.Class' object." id="AUG" originalId="SECURITY.BV.AUG" scope="LINE" severity="5" since="6.0">
                    <messages>
                        <msg index="1" value="Inspect usage of &quot;Class.getName()&quot; to ensure it is not used to compare classes."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.486.AUG.IGNORE_LOGGER" name="IGNORE_LOGGER" value="Ignore calls passed to logging methods"/>
                        <oldparam id="CWE.486.AUG.IGNORE_PRINT" name="IGNORE_PRINT" value="Ignore calls passed to &quot;print&quot; methods"/>
                        <oldparam id="CWE.486.AUG.IGNORE_THROW" name="IGNORE_THROW" value="Ignore calls passed to throw statements"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="false" id="CWE.486.AUG.IGNORE_LOGGER" inputType="checkbox" label="Ignore calls passed to logging methods"/>
                        <param defaultValue="false" id="CWE.486.AUG.IGNORE_PRINT" inputType="checkbox" label="Ignore calls passed to &quot;print&quot; methods"/>
                        <param defaultValue="false" id="CWE.486.AUG.IGNORE_THROW" inputType="checkbox" label="Ignore calls passed to throw statements"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.CMP" header="Do not compare Class objects by name." id="CMP" originalId="SECURITY.EAB.CMP" scope="LINE" severity="1" since="4.5">
                    <messages>
                        <msg index="1" value="Class object comparison by name."/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-269: Improper Privilege Management" name="269">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.PCL" header="Limit the number of lines in &quot;privileged&quot; code blocks." id="PCL" originalId="SECURITY.EAB.PCL" scope="LINE" severity="4" since="8.4">
                    <messages>
                        <msg index="1" value="&quot;run()&quot; method of class ''{0}'' has greater than ''{1}'' lines."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.269.PCL.CHECK_PA" name="CHECK_PA" value="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <oldparam id="CWE.269.PCL.CHECK_PEA" name="CHECK_PEA" value="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                        <oldparam id="CWE.269.PCL.NUMBER_LINES" name="NUMBER_LINES" value="Limit number of lines in &quot;run()&quot; method to"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authorization p. 73</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/250.html" name="CWE">250</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CWE.269.PCL.CHECK_PA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <param defaultValue="true" id="CWE.269.PCL.CHECK_PEA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                        <param defaultValue="10" id="CWE.269.PCL.NUMBER_LINES" inputType="integer" label="Limit number of lines in &quot;run()&quot; method to" min="1"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.LDP" header="Limit the number of &quot;AccessController.doPrivileged&quot; calls per class." id="LDP" originalId="SECURITY.EAB.LDP" scope="LINE" severity="4" since="8.4">
                    <messages>
                        <msg index="1" value="Class ''{0}'' has greater than ''{1}'' calls to &quot;AccessController.doPrivileged&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.269.LDP.MAX_CALLS" name="MAX_CALLS" value="Limit the number of 'AccessController.doPrivileged' calls per class to"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authorization p. 73</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/250.html" name="CWE">250</reference>
                    </references>
                    <parameters>
                        <param defaultValue="3" id="CWE.269.LDP.MAX_CALLS" inputType="integer" label="Limit the number of 'AccessController.doPrivileged' calls per class to" min="0"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-215: Insertion of Sensitive Information Into Debugging Code" name="215">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.EWSSEC" header="Avoid debug information from Spring Security framework to logs" id="EWSSEC" originalId="SECURITY.WSC.EWSSEC" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="Debug features is activated in @EnableWebSecurity annotation"/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-81: Improper Neutralization of Script in an Error Message Web Page" name="81">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ARXML" header="Process XML and HTML with a library instead of raw text " id="ARXML" originalId="SECURITY.WSC.ARXML" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="''{0}'' is processed using raw text instead of a library"/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/80.html" name="CWE">80</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/81.html" name="CWE">81</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-377: Insecure Temporary File" name="377">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.ATF" header="Avoid temporary files" id="ATF" originalId="SECURITY.IBA.ATF" scope="LINE" severity="3" since="9.0">
                    <messages>
                        <msg index="1" value="A temporary file has been created"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Secure application deployment p. 95</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-581: Object Model Violation: Just One of Equals and Hashcode Defined" name="581">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.OVERRIDE" header="Override 'Object.hashCode()' when you override 'Object.equals()' and vice versa" id="OVERRIDE" originalId="CODSTA.OIM.OVERRIDE" scope="CLASS" severity="1" since="4.5">
                    <messages>
                        <msg index="1" value="Class overriding ''equals(Object)'' does not override ''hashCode()'': {0}."/>
                        <msg index="2" value="Class inherits overridden version of ''equals(Object)'' but does not override ''hashCode()'': {0}."/>
                        <msg index="3" value="Class overriding ''hashCode()'' does not override ''equals(Object)'': {0}."/>
                        <msg index="4" value="Class inherits overridden version of ''hashCode()'' but does not override ''equals(Object)'': {0}."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.581.OVERRIDE.CODSTA.OVERRIDE" name="CODSTA.OVERRIDE" value="Check that 'hashCode()' is overridden whenever 'equals()' is overridden."/>
                        <oldparam id="CWE.581.OVERRIDE.CODSTA.OVERRIDE2" name="CODSTA.OVERRIDE2" value="Check that 'equals()' is overridden whenever 'hashCode()' is overridden."/>
                        <oldparam id="CWE.581.OVERRIDE.CHECK_INHERITED" name="CHECK_INHERITED" value="Include methods inherited from &quot;abstract&quot; superclasses in the checking."/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Java gotchas p. 164</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/581.html" name="CWE">581</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CWE.581.OVERRIDE.CODSTA.OVERRIDE" inputType="checkbox" label="Check that 'hashCode()' is overridden whenever 'equals()' is overridden."/>
                        <param defaultValue="true" id="CWE.581.OVERRIDE.CODSTA.OVERRIDE2" inputType="checkbox" label="Check that 'equals()' is overridden whenever 'hashCode()' is overridden."/>
                        <param defaultValue="false" id="CWE.581.OVERRIDE.CHECK_INHERITED" inputType="checkbox" label="Include methods inherited from &quot;abstract&quot; superclasses in the checking."/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-246: J2EE Bad Practices: Direct Use of Sockets" name="246">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SS" header="Do not use sockets in web components." id="SS" originalId="SECURITY.WSC.SS" scope="LINE" severity="3" since="7.5">
                    <messages>
                        <msg index="1" value="''{0}'' used in a web component."/>
                        <msg index="2" value="Call to ''{0}'' indirectly uses a socket in a web component."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.246.SS.DEPTH" name="DEPTH" value="Maximum depth to look for socket usage"/>
                        <oldparam id="CWE.246.SS.CHECK_SOCKET" name="CHECK_SOCKET" value="Check Sockets"/>
                        <oldparam id="CWE.246.SS.CHECK_SERVERSOCKET" name="CHECK_SERVERSOCKET" value="Check ServerSockets"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authorization p. 73</reference>
                    </references>
                    <parameters>
                        <param defaultValue="2" id="CWE.246.SS.DEPTH" inputType="integer" label="Maximum depth to look for socket usage" max="5" min="1"/>
                        <param defaultValue="true" id="CWE.246.SS.CHECK_SOCKET" inputType="checkbox" label="Check Sockets"/>
                        <param defaultValue="true" id="CWE.246.SS.CHECK_SERVERSOCKET" inputType="checkbox" label="Check ServerSockets"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.AUS" header="Do not use sockets in EJBs." id="AUS" originalId="EJB.AUS" scope="LINE" severity="3" since="8.4">
                <messages>
                    <msg index="1" value="Socket method ''{0}'' called in a bean."/>
                    <msg index="2" value="Call to ''{0}'' indirectly uses a socket."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.246.AUS.DEPTH" name="DEPTH" value="Maximum depth to check for socket usage"/>
                    <oldparam id="CWE.246.AUS.CHECK_SOCKET" name="CHECK_SOCKET" value="Check Sockets"/>
                    <oldparam id="CWE.246.AUS.CHECK_SERVERSOCKET" name="CHECK_SERVERSOCKET" value="Check ServerSockets"/>
                </oldparameters>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/577.html" name="CWE">577</reference>
                </references>
                <parameters>
                    <param defaultValue="2" id="CWE.246.AUS.DEPTH" inputType="integer" label="Maximum depth to check for socket usage" max="5" min="1"/>
                    <param defaultValue="true" id="CWE.246.AUS.CHECK_SOCKET" inputType="checkbox" label="Check Sockets"/>
                    <param defaultValue="true" id="CWE.246.AUS.CHECK_SERVERSOCKET" inputType="checkbox" label="Check ServerSockets"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.NSF" header="Do not call 'Socket.setSocketImplFactory()' or 'URL.setURLStreamHandlerFactory()' in a web component." id="NSF" originalId="SECURITY.BV.NSF" scope="LINE" severity="3" since="7.5">
                    <messages>
                        <msg index="1" value="Call to ''{0}()'' in a web component."/>
                        <msg index="2" value="Method ''{0}'' indirectly calls set factory method in a web component."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.246.NSF.DEPTH" name="DEPTH" value="Maximum depth to look for set factory calls"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="2" id="CWE.246.NSF.DEPTH" inputType="integer" label="Maximum depth to look for set factory calls" max="5" min="1"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-579: J2EE Bad Practices: Non-serializable Object Stored in Session" name="579">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ONS" header="Ensure method arguments are serializable" id="ONS" originalId="PB.API.ONS" scope="LINE" severity="1" since="8.2">
                    <messages>
                        <msg index="1" value="This object of type ''{0}'' may not be serializable."/>
                        <msg index="2" value="This object of type ''{0}'' may not be completely serializable."/>
                    </messages>
                    <parameters>
                        <param defaultValue="false" id="CWE.579.ONS.CHECK_INTERFACES" inputType="checkbox" label="Check implementations of interface method arguments (slow)"/>
                        <param defaultValue="true" id="CWE.579.ONS.IGNORE_PARAM_COLLECTION" inputType="checkbox" label="Ignore Collections or Maps with Serializable type arguments"/>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.579.ONS.SERIAL_LIST" label="List of methods to be checked: " reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="PB__API__ONS__SERIAL_LIST__COLUMN1" label="Type" required="true"/>
                                <column columnType="text" editable="true" id="PB__API__ONS__SERIAL_LIST__COLUMN2" label="Method" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN1" value="javax.servlet.http.HttpSession"/>
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN2" value="setAttribute"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN1" value="java.io.ObjectOutputStream"/>
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN2" value="writeObject"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN1" value="java.io.ObjectOutputStream"/>
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN2" value="writeObjectOverride"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN1" value="java.io.ObjectOutputStream"/>
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN2" value="writeUnshared"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <param defaultValue="^java\.util\.Collection$;^java\.util\.Map$;^java\.lang\.Object$" id="CWE.579.ONS.IGNORE_TYPE_LIST" inputType="stringList" label="Ignore method arguments of the following types (specify as regular expression):"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.SNSO" header="Do not store non-serializable objects as HttpSession attributes" id="SNSO" originalId="SERIAL.SNSO" scope="LINE" severity="1" since="8.4">
                <messages>
                    <msg index="1" value="Argument ''{0}'' to method &quot;setAttribute&quot; is non-serializable."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.579.SNSO.IGNORE_NULL" name="IGNORE_NULL" value="Ignore &quot;null&quot; values"/>
                    <oldparam id="CWE.579.SNSO.CHECK_ABSTRACT" name="CHECK_ABSTRACT" value="Check abstract classes"/>
                    <oldparam id="CWE.579.SNSO.CHECK_INTERFACE" name="CHECK_INTERFACE" value="Check interfaces"/>
                    <oldparam id="CWE.579.SNSO.CHECK_COLLECTION" name="CHECK_COLLECTION" value="Check Collections"/>
                    <oldparam id="CWE.579.SNSO.CHECK_MAP" name="CHECK_MAP" value="Check Maps"/>
                </oldparameters>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/579.html" name="CWE">579</reference>
                </references>
                <parameters>
                    <param defaultValue="true" id="CWE.579.SNSO.IGNORE_NULL" inputType="checkbox" label="Ignore &quot;null&quot; values"/>
                    <param defaultValue="true" id="CWE.579.SNSO.CHECK_ABSTRACT" inputType="checkbox" label="Check abstract classes"/>
                    <param defaultValue="true" id="CWE.579.SNSO.CHECK_INTERFACE" inputType="checkbox" label="Check interfaces"/>
                    <param defaultValue="false" id="CWE.579.SNSO.CHECK_COLLECTION" inputType="checkbox" label="Check Collections"/>
                    <param defaultValue="false" id="CWE.579.SNSO.CHECK_MAP" inputType="checkbox" label="Check Maps"/>
                </parameters>
            </rule>
         </category>
         <category description="CWE-103: Struts: Incomplete validate() Method Definition" name="103">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.CSVFV" header="Always call 'super.validate()' from validation methods in 'ActionForm' classes." id="CSVFV" originalId="SECURITY.IBA.CSVFV" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="This validation method does not call 'super.validate()'."/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-770: Allocation of Resources Without Limits or Throttling" name="770">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.ISTART" header="Do not call the 'start()' method directly on Thread class instances " id="ISTART" originalId="TRS.ISTART" scope="LINE" severity="4" since="10.4">
                <messages>
                    <msg index="1" value="A call to the Thread.start() method."/>
                </messages>
                <parameters>
                    <param defaultValue="true" id="CWE.770.ISTART.CHECK_ONLY_IN_LOOPS" inputType="checkbox" label="Ignore method calls outside of loops"/>
                </parameters>
            </rule>
         </category>
         <category description="CWE-297: Improper Validation of Certificate with Host Mismatch" name="297">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.VSI" header="Properly validate server identity" id="VSI" originalId="SECURITY.WSC.VSI" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="SMTP SSL does not check server identity."/>
                        <msg index="2" value="SMTP SSL does not check server identity. Ensure the library version allows you to configure the required options."/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-580: clone() Method Without super.clone()" name="580">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.SCLONE" header="Call 'super.clone()' in all 'clone()' methods." id="SCLONE" originalId="CODSTA.EPC.SCLONE" severity="1" since="4.5">
                    <messages>
                        <msg index="1" value="'clone()' method does not call 'super.clone()'"/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/580.html" name="CWE">580</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-584: Return Inside Finally Block" name="584">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ARCF" header="Avoid using 'return's inside 'finally blocks if thare are other 'return's inside the try-catch block." id="ARCF" originalId="PB.CUB.ARCF" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Avoid multiple 'return' if a 'return' is present inside finally block."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.584.ARCF.ALSO_CATCH" name="ALSO_CATCH" value="Only flag return statements when they are in try-catch blocks"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/584.html" name="CWE">584</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CWE.584.ARCF.ALSO_CATCH" inputType="checkbox" label="Only flag return statements when they are in try-catch blocks"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-319: Cleartext Transmission of Sensitive Information" name="319">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.USC" header="Use the SSL-enabled version of classes when possible." id="USC" originalId="SECURITY.WSC.USC" scope="LINE" severity="3" since="7.5">
                    <messages>
                        <msg index="1" value="Consider using the SSL-enabled type ''SSLServerSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="2" value="Consider using the SSL-enabled type ''SSLSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="3" value="Consider using the SSL-enabled type ''HttpsURLConnection'' for the {0} ''{1}''."/>
                        <msg index="4" value="Consider using the SSL-enabled type ''SslRMIClientSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="5" value="Consider using the SSL-enabled type ''SslRMIServerSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="6" value="Consider using the SSL-enabled type ''SSLSocket'' for the {0} ''{1}''."/>
                        <msg index="7" value="Consider using the SSL-enabled type ''SSLServerSocket'' for the {0} ''{1}''."/>
                        <msg index="8" value="Consider using the SSL-enabled type ''SSLPermission'' for the {0} ''{1}''."/>
                    </messages>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010">A9-Insufficient Transport Layer Protection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/494.html" name="CWE">494</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-295: Improper Certificate Validation" name="295">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.VSI" header="Properly validate server identity" id="VSI" originalId="SECURITY.WSC.VSI" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="SMTP SSL does not check server identity."/>
                        <msg index="2" value="SMTP SSL does not check server identity. Ensure the library version allows you to configure the required options."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HV" header="Ensure the HostnameVerifier.verify() method validates the certificate" id="HV" originalId="SECURITY.WSC.HV" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The certificate is not validated, because the 'verify' method always returns 'true'"/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-94: Improper Control of Generation of Code ('Code Injection')" name="94">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ASAPI" header="Prevent the scripting API from executing untrusted code" id="ASAPI" originalId="SECURITY.WSC.ASAPI" scope="LINE" severity="3" since="9.0">
                    <messages>
                        <msg index="1" value="Ensure that the use of the scripting API does not allow untrusted dynamic code execution."/>
                        <msg index="2" value="The eval() method is called on the scriptEngine object and may execute untrusted dynamic code."/>
                    </messages>
                    <parameters>
                        <param defaultValue="true" id="CWE.94.ASAPI.REPORT_ON_EVAL" inputType="checkbox" label="Report violation on eval method invocation"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.UEHL.DCEMSL" header="Avoid untrusted input when logging messages with Seam Logging API" id="DCEMSL" originalId="SECURITY.UEHL.DCEMSL" scope="LINE" severity="1" since="10.4.3">
                    <messages>
                        <msg index="1" value="The ''{0}'' method called on the object of the Log class takes a dangerous argument."/>
                    </messages>
                    <parameters>
                        <param defaultValue="false" id="CWE.94.DCEMSL.CLASS_FIELDS_ARE_SAFE" inputType="checkbox" label="Consider class fields to be secure"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-213: Exposure of Sensitive Information Due to Incompatible Policies" name="213">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.CONSEN" header="Do not log confidential or sensitive information" id="CONSEN" originalId="SECURITY.ESD.CONSEN" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="''{0}'' should not be used by a logger, it can expose confidential info."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.213.CONSEN.SUSPICIOUS_WORDS" name="SUSPICIOUS_WORDS" value="Regular expressions representing sensive data:"/>
                        <oldparam id="CWE.213.CONSEN.LOG_METHOD_EXPRESSIONS" name="LOG_METHOD_EXPRESSIONS" value="Logging method name in regular expression"/>
                        <oldparam id="CWE.213.CONSEN.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/533.html" name="CWE">533</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/534.html" name="CWE">534</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*ssn.*@delim@.*pass.*" id="CWE.213.CONSEN.SUSPICIOUS_WORDS" inputType="stringList" label="Regular expressions representing sensive data:" prevType="StringList"/>
                        <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="CWE.213.CONSEN.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                        <param defaultValue=".*log.*" id="CWE.213.CONSEN.LOG_METHOD_EXPRESSIONS" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-572: Call to Thread run() instead of start()" name="572">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.IRUN" header="Do not call the 'run()' method directly on classes extending 'java.lang.Thread' or implementing 'java.lang.Runnable'." id="IRUN" originalId="TRS.IRUN" scope="LINE" severity="1" since="6.0">
                <messages>
                    <msg index="1" value="''{0}'', which extends 'java.lang.Thread', calls method 'run()'."/>
                    <msg index="2" value="''{0}'', which implements 'java.lang.Runnable' calls method 'run()'."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.572.IRUN.CHECK_RUNNABLE" name="CHECK_RUNNABLE" value="Check classes implementing 'java.lang.Runnable'"/>
                </oldparameters>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/572.html" name="CWE">572</reference>
                </references>
                <parameters>
                    <param defaultValue="false" id="CWE.572.IRUN.CHECK_RUNNABLE" inputType="checkbox" label="Check classes implementing 'java.lang.Runnable'"/>
                </parameters>
            </rule>
         </category>
         <category description="CWE-601: URL Redirection to Untrusted Site ('Open Redirect')" name="601">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERVLET.UCO" header="Use a Context Object to manage HTTP request parameters" id="UCO" originalId="SERVLET.UCO" scope="LINE" severity="2" since="5.1">
                <messages>
                    <msg index="1" value="Consider using a &quot;Context&quot; Object instead of calling ''{0}()''."/>
                </messages>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/15.html" name="CWE">15</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/601.html" name="CWE">601</reference>
                </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.VRD" header="Encapsulate all redirect and forward URLs with a validation function" id="VRD" originalId="SECURITY.IBA.VRD" scope="LINE" severity="2" since="9.0">
                    <messages>
                        <msg index="1" value="No validation check in redirect URL."/>
                        <msg index="2" value="No validation check in forward URL."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.601.VRD.VALIDATE_METHODS" name="VALIDATE_METHODS" value="Validation methods (in regular expressions)\n[qualified name of declaring type#method name]"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Input Validation p. 81</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A10" name="OWASP-2010">A10-Unvalidated Redirects and Forwards</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/601.html" name="CWE">601</reference>
                    </references>
                    <parameters>
                        <param defaultValue="" description="Validation methods (in regular expressions) [qualified name of declaring type#method name]" id="CWE.601.VRD.VALIDATE_METHODS" inputType="stringList" label="Validation methods (in regular expressions)" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-396: Declaration of Catch for Generic Exception" name="396">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.NCE" header="Do not catch exception types which are too general or are unchecked exceptions." id="NCE" originalId="CODSTA.EPC.NCE" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="&quot;catch&quot; statement directly catches the general exception type ''{0}''."/>
                        <msg index="2" value="&quot;catch&quot; statement directly catches the unchecked exception type ''{0}''."/>
                        <msg index="3" value="&quot;catch&quot; statement catches general parent exception type: ''{0}''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.396.NCE.GENERAL" name="GENERAL" value="Check for general exception types."/>
                        <oldparam id="CWE.396.NCE.UNCHECKED" name="UNCHECKED" value="Check for unchecked exception types."/>
                        <oldparam id="CWE.396.NCE.NUM_CHILDREN" name="NUM_CHILDREN" value="Check for parent exceptions caught where number of child exceptions thrown is less than"/>
                        <oldparam id="CWE.396.NCE.IGNORE_EXCEPTIONS" name="IGNORE_EXCEPTIONS" value="Ignore exceptions with names matching the following regular expression(s):"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/396.html" name="CWE">396</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CWE.396.NCE.GENERAL" inputType="checkbox" label="Check for general exception types."/>
                        <param defaultValue="false" id="CWE.396.NCE.UNCHECKED" inputType="checkbox" label="Check for unchecked exception types."/>
                        <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="CWE.396.NCE.NUM_CHILDREN" label="Check for parent exceptions caught where number of child exceptions thrown is less than" prevType="InputValueWithCheckBox" reader="SATable">
                            <columns>
                                <column columnType="checkbox" editable="true" id="CODSTA__EPC__NCE__NUM_CHILDREN__COLUMN1" label="" required="true"/>
                                <column columnType="text" editable="true" id="CODSTA__EPC__NCE__NUM_CHILDREN__COLUMN2" label="" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="CODSTA__EPC__NCE__NUM_CHILDREN__COLUMN1" value="true"/>
                                    <column refColumnId="CODSTA__EPC__NCE__NUM_CHILDREN__COLUMN2" value="3"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <param defaultValue="^ignore$" id="CWE.396.NCE.IGNORE_EXCEPTIONS" inputType="stringList" label="Ignore exceptions with names matching the following regular expression(s):" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-346: Origin Validation Error" name="346">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.JXCORS" header="Restrict cross-origin resource sharing to secure origins" id="JXCORS" originalId="SECURITY.WSC.JXCORS" scope="LINE" severity="4" since="2020.1">
                    <messages>
                        <msg index="1" value="The &quot;Access-Control-Allow-Origin&quot; header is set to allow unrestricted access to cross-origin resources"/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-807: Reliance on Untrusted Inputs in a Security Decision" name="807">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.PLC" header="Avoid storing sensitive data in plaintext in a cookie" id="PLC" originalId="SECURITY.ESD.PLC" scope="LINE" severity="1" since="9.2">
                    <messages>
                        <msg index="1" value="Do not store important to safety data in cookie."/>
                        <msg index="2" value="Do not store sensitive data in plaintext in cookie."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.807.PLC.TABLE_HEADER" name="TABLE_HEADER" value="List of RegExp to check key in cookie"/>
                        <oldparam id="CWE.807.PLC.CHECK_VALUES_HEADER" name="CHECK_VALUES_HEADER" value="Check values"/>
                        <oldparam id="CWE.807.PLC.NAME_HEADER" name="NAME_HEADER" value="Key in cookie (RegExp)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010">A9-Insufficient Transport Layer Protection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/315.html" name="CWE">315</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE">807</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.807.PLC.TABLE_HEADER" label="List of RegExp to check key in cookie" reader="SATable">
                            <columns>
                                <column columnType="checkbox" defaultValue="true" editable="true" id="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" label="Check values" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" label="Key in cookie (RegExp)" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" value="false"/>
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" value=".*(pass|role).*"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" value="true"/>
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" value=".*(user|login|account).*"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HGRSI" header="Avoid using the 'getRequestedSessionId' method from the 'HttpServletRequest' class" id="HGRSI" originalId="SECURITY.WSC.HGRSI" scope="LINE" severity="4" since="10.4.2">
                    <messages>
                        <msg index="1" value="The 'getRequestedSessionId' method may return untrusted data"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.UOSC" header="Use the ''getSecure()'' and ''setSecure()'' methods to enforce the use of secure cookies." id="UOSC" originalId="SECURITY.WSC.UOSC" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="The ''Cookie'' variable ''{0}'' may be used without making sure that it is a secure cookie."/>
                        <msg index="2" value="Make sure that the appropriate version of library is used."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Session Management p. 78</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010">A3-Broken Authentication and Session Management</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A5" name="OWASP-2010">A5-Cross Site Request Forgery (CSRF)</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/614.html" name="CWE">614</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/352.html" name="CWE">352</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE">807</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-681: Incorrect Conversion between Numeric Types" name="681">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.IDCD" header="Do not assign the result of an integer division to a floating point variable" id="IDCD" originalId="PB.NUM.IDCD" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="Assigning the result of this integer division to a floating point variable will not increase the precision of the result."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/681.html" name="CWE">681</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CLP" header="Do not cast primitive data types to lower precision" id="CLP" originalId="PB.NUM.CLP" scope="LINE" severity="2" since="4.5">
                    <messages>
                        <msg index="1" value="&quot;{0}&quot; type cast to lower precision &quot;{1}&quot; type."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/197.html" name="CWE">197</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/681.html" name="CWE">681</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-111: Direct Use of Unsafe JNI" name="111">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PORT.NATV" header="Do not use user-defined &quot;native&quot; methods." id="NATV" originalId="PORT.NATV" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="User-defined &quot;native&quot; method: {0}."/>
                </messages>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Buffer Overruns and Overflow p. 112</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/111.html" name="CWE">111</reference>
                </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.NATIW" header="Use wrapper methods to secure native methods" id="NATIW" originalId="SECURITY.IBA.NATIW" scope="LINE" severity="3" since="9.0">
                    <messages>
                        <msg index="1" value="{0} should only be accessed using a wrapper method."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Buffer Overruns and Overflow p. 112</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/111.html" name="CWE">111</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-327: Use of a Broken or Risky Cryptographic Algorithm" name="327">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SRD" header="Use 'java.security.SecureRandom' instead of 'java.util.Random' or 'Math.random()'." id="SRD" originalId="SECURITY.WSC.SRD" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Avoid using the insecure ''{0}'' as a random number generator"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/330.html" name="CWE">330</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/338.html" name="CWE">338</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE">676</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ICA" header="Avoid using insecure algorithms for cryptography." id="ICA" originalId="SECURITY.WSC.ICA" scope="LINE" severity="1" since="8.3">
                    <messages>
                        <msg index="1" value="The &quot;{0}&quot; algorithm is not an acceptable cryptography algorithm for the &quot;{1}&quot; class."/>
                        <msg index="2" value="The cryptography algorithm is used without padding."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.327.ICA.SUGGESTED_ALGS" name="SUGGESTED_ALGS" value="Safe Cryptography Algorithms"/>
                        <oldparam id="CWE.327.ICA.TYPE_NAME" name="TYPE_NAME" value="Fully Qualified Class Name"/>
                        <oldparam id="CWE.327.ICA.ALGORITHM_NAME" name="ALGORITHM_NAME" value="Algorithm Names (in regular expressions)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/328.html" name="CWE">328</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/780.html" name="CWE">780</reference>
                    </references>
                    <parameters>
                        <!--param id="SECURITY.WSC.ICA.SUGGESTED_ALGS" inputType="bigtext" defaultValue="java.security.KeyPairGenerator&lt;#&gt;RSA;java.security.MessageDigest&lt;#&gt;SHA-256#SHA-384#SHA-512;javax.crypto.Cipher&lt;#&gt;3DES#AES#ARCFOUR/RC4#Blowfish#ECIES#RC4#RC5#RSA(.*)OAEPWith(.*)And(.*)Padding;javax.crypto.KeyGenerator&lt;#&gt;AES#ARCFOUR/RC4#Blowfish#HmacSHA256#HmacSHA384#HmacSHA512#RC2" label="Safe Cryptography Algorithms" prevType="DuoList"/-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="CWE.327.ICA.SUGGESTED_ALGS" label="Secure Cryptographic Algorithms" prevType="DuoList" reader="SADuoList">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" label="Fully Qualified Class Name" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.KeyPairGenerator"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.MessageDigest"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.KeyGenerator"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.Cipher"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.net.ssl.SSLContext"/>
                                </row>
                            </predefinedRows>
                            <childTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="CWE.327.ICA.SUGGESTED_ALGS.CHILDTABLE1" label="">
                                <columns>
                                    <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" label="Name of Secure Algorithm (in regular expressions)" required="true"/>
                                </columns>
                                <predefinedRows refParentRowId="1">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="2">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-256"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-384"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-512"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="3">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA256"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA384"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA512"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC2"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESede"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="4">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="3DES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES/(.*)/PKCS5Padding"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ECIES"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC4"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC5"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA(.*)OAEPWith(.*)And(.*)Padding"/>
                                    </row>
                                    <row id="9">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESEDE/(.*)/PKCS5Padding"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="5">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="TLSv1.2"/>
                                    </row>
                                </predefinedRows>
                            </childTable>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AUNC" header="Avoid using the javax.crypto.NullCipher class in non-test classes." id="AUNC" originalId="SECURITY.WSC.AUNC" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The NullCipher class that does not encrypt the plaintext is used in a non-test class."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ACMD" header="Avoid using custom MessageDigest implementations" id="ACMD" originalId="SECURITY.WSC.ACMD" scope="LINE" severity="4" since="10.4.2">
                    <messages>
                        <msg index="1" value="The class that extends MessageDigest may provide unsafe algorithms"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AISSAJAVA" header="Avoid using insecure cryptographic algorithms for data encryption with Spring" id="AISSAJAVA" originalId="SECURITY.WSC.AISSAJAVA" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The cryptographic class is insecure."/>
                        <msg index="2" value="The cryptographic algorithm used in the constructor of MessageDigestPasswordEncoder is insecure."/>
                    </messages>
                    <parameters>
                        <!-- <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_ENCODERS" inputType="stringList" defaultValue="org.springframework.security.crypto.password.LdapShaPasswordEncoder;org.springframework.security.crypto.password.Md5PasswordEncoder;org.springframework.security.crypto.password.Md4PasswordEncoder;org.springframework.security.crypto.password.NoOpPasswordEncoder;org.springframework.security.authentication.encoding.LdapShaPasswordEncoder;org.springframework.security.authentication.encoding.Md5PasswordEncoder;org.springframework.security.authentication.encoding.Md4PasswordEncoder" label="Insecure classes that should not be used for encryption" prevType="StringList"/>
                        <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_NAMES" inputType="stringList" defaultValue="MD2;MD5;SHA-1" label="Insecure algorithms in the MessageDigestPasswordEncoder class" prevType="StringList"/>-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="CWE.327.AISSAJAVA.BANNED_ALGO_ENCODERS" label="Insecure classes that should not be used for encryption" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" label="Fully Qualified Name of Insecure Class" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md5PasswordEncoder"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md4PasswordEncoder"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.NoOpPasswordEncoder"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>
                                </row>
                                <row id="7">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md4PasswordEncoder"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="CWE.327.AISSAJAVA.BANNED_ALGO_NAMES" label="Insecure algorithms in the MessageDigestPasswordEncoder class" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" label="Name of Insecure Algorithm" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD2"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD5"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="SHA-1"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-129: Improper Validation of Array Index" name="129">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CAI" header="Always check parameters before use in array access" id="CAI" originalId="PB.RE.CAI" scope="LINE" severity="3" since="9.0">
                    <messages>
                        <msg index="1" value="Array ''{0}'' accessed with ''{1}''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.129.CAI.IGNORE_PRIVATE" name="IGNORE_PRIVATE" value="Ignore private methods"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/129.html" name="CWE">129</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CWE.129.CAI.IGNORE_PRIVATE" inputType="checkbox" label="Ignore private methods"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-563: Assignment to Variable without Use" name="563">
            <rule class="com.parasoft.jtest.standards.rules.builtin.UC.AURV" header="Avoid local variables that are never read" id="AURV" originalId="UC.AURV" scope="LINE" severity="3" since="8.1">
                <messages>
                    <msg index="1" value="Variable ''{0}'' is never used."/>
                    <msg index="2" value="Variable ''{0}'' is assigned but never read."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.563.AURV.UC.AVNR" name="UC.AVNR" value="Check for variables which are assigned but never read."/>
                    <oldparam id="CWE.563.AURV.UC.AUV" name="UC.AUV" value="Check for variables which are never used."/>
                </oldparameters>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/563.html" name="CWE">563</reference>
                </references>
                <parameters>
                    <param defaultValue="true" id="CWE.563.AURV.UC.AUV" inputType="checkbox" label="Check for variables which are never used."/>
                    <param defaultValue="true" id="CWE.563.AURV.UC.AVNR" inputType="checkbox" label="Check for variables which are assigned but never read."/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.UC.PF" header="Avoid unused &quot;private&quot; fields" id="PF" originalId="UC.PF" scope="CLASS" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Unused &quot;private&quot; field: {0}."/>
                    <msg index="2" value="&quot;Private&quot; field is never set to a non-null value: {0}."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.563.PF.CHECK_INIT_NULL" name="CHECK_INIT_NULL" value="Check for fields which are never set to a non-null value."/>
                    <oldparam id="CWE.563.PF.IGNORE_FINAL" name="IGNORE_FINAL" value="Ignore &quot;final&quot; fields"/>
                </oldparameters>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/563.html" name="CWE">563</reference>
                </references>
                <parameters>
                    <param defaultValue="true" id="CWE.563.PF.IGNORE_FINAL" inputType="checkbox" label="Ignore &quot;final&quot; fields"/>
                    <param defaultValue="false" id="CWE.563.PF.CHECK_INIT_NULL" inputType="checkbox" label="Check for fields which are never set to a non-null value."/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.upxf.UPPF" header="Avoid globally unused &quot;public/protected&quot; fields" id="UPPF" originalId="GLOBAL.UPPF" scope="LINE" severity="4" since="4.5" type="global">
                <messages>
                    <msg index="1" value="Globally unused {1} field: {0}."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.563.UPPF.IGNORE_FINAL" name="IGNORE_FINAL" value="Ignore &quot;final&quot; fields"/>
                </oldparameters>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/563.html" name="CWE">563</reference>
                </references>
                <parameters>
                    <param defaultValue="true" id="CWE.563.UPPF.IGNORE_FINAL" inputType="checkbox" label="Ignore &quot;final&quot; fields"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.UC.UP" header="Avoid unused parameters" id="UP" originalId="UC.UP" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Unused parameter: {0}."/>
                    <msg index="2" value="Unused parameter: {1}."/>
                    <msg index="3" value="Unused parameter: {2}."/>
                </messages>
               <oldparameters>
                    <param name="CHECK_PROTECTED" value="Check &quot;protected&quot; methods."/>
                    <param name="CHECK_PUBLIC" value="Check &quot;public&quot; methods."/>
                    <param name="CHECK_PACKAGE" value="Check package-private methods."/>
                    <param name="CHECK_PRIVATE" value="Check &quot;private&quot; methods."/>
                    <param name="CHECK_READ" value="Check that the parameter is read for parameters with primitive types."/>
                    <param name="CHECK_EMPTY" value="Check &quot;empty&quot; methods."/>
                </oldparameters>
                <parameters>
                    <param defaultValue="true" id="CWE.563.UP.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods."/>
                    <param defaultValue="false" id="CWE.563.UP.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods."/>
                    <param defaultValue="true" id="CWE.563.UP.CHECK_PACKAGE" inputType="checkbox" label="Check package-private methods."/>
                    <param defaultValue="true" id="CWE.563.UP.CHECK_PRIVATE" inputType="checkbox" label="Check &quot;private&quot; methods."/>
                    <param defaultValue="false" id="CWE.563.UP.CHECK_READ" inputType="checkbox" label="Check that the parameter is read for parameters with primitive types."/>
                    <param defaultValue="false" id="CWE.563.UP.CHECK_EMPTY" inputType="checkbox" label="Check &quot;empty&quot; methods."/>
                </parameters>
            </rule>
         </category>
         <category description="CWE-577: EJB Bad Practices: Use of Sockets" name="577">
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.AUS" header="Do not use sockets in EJBs." id="AUS" originalId="EJB.AUS" scope="LINE" severity="3" since="8.4">
                <messages>
                    <msg index="1" value="Socket method ''{0}'' called in a bean."/>
                    <msg index="2" value="Call to ''{0}'' indirectly uses a socket."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.577.AUS.DEPTH" name="DEPTH" value="Maximum depth to check for socket usage"/>
                    <oldparam id="CWE.577.AUS.CHECK_SOCKET" name="CHECK_SOCKET" value="Check Sockets"/>
                    <oldparam id="CWE.577.AUS.CHECK_SERVERSOCKET" name="CHECK_SERVERSOCKET" value="Check ServerSockets"/>
                </oldparameters>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/577.html" name="CWE">577</reference>
                </references>
                <parameters>
                    <param defaultValue="2" id="CWE.577.AUS.DEPTH" inputType="integer" label="Maximum depth to check for socket usage" max="5" min="1"/>
                    <param defaultValue="true" id="CWE.577.AUS.CHECK_SOCKET" inputType="checkbox" label="Check Sockets"/>
                    <param defaultValue="true" id="CWE.577.AUS.CHECK_SERVERSOCKET" inputType="checkbox" label="Check ServerSockets"/>
                </parameters>
            </rule>
         </category>
         <category description="CWE-290: Authentication Bypass by Spoofing" name="290">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HTTPRHA" header="Do not rely on IP addresses obtained from HTTP request headers for authentication" id="HTTPRHA" originalId="SECURITY.WSC.HTTPRHA" scope="LINE" severity="3" since="2020.1">
                    <messages>
                        <msg index="1" value="The IP address retrieved from the HTTP request header is used for authentication"/>
                        <msg index="2" value="The IP address retrieved from the header using the 'getRemoteAddr()' method is used for authentication"/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-491: Public cloneable() Method Without Final ('Object Hijack')" name="491">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CLONE" header="Make your 'clone()' method &quot;final&quot; for security." id="CLONE" originalId="SECURITY.WSC.CLONE" scope="LINE" severity="4" since="4.5">
                    <messages>
                        <msg index="1" value="'clone()' method is not &quot;final&quot;."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/491.html" name="CWE">491</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-506: Embedded Malicious Code" name="506">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HCCK" header="Avoid using hard-coded cryptographic keys" id="HCCK" originalId="SECURITY.WSC.HCCK" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Hard-coded cryptographic key here."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.506.HCCK.MIN_LENGTH" name="MIN_LENGTH" value="Check keys whose length is greater than "/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/321.html" name="CWE">321</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/506.html" name="CWE">506</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/759.html" name="CWE">759</reference>
                    </references>
                    <parameters>
                        <param defaultValue="9" id="CWE.506.HCCK.MIN_LENGTH" inputType="integer" label="Check keys whose length is greater than " min="9"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-833: Deadlock" name="833">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.RLF" header="Release Locks in a &quot;finally&quot; block." id="RLF" originalId="TRS.RLF" scope="LINE" severity="1" since="8.4">
                <messages>
                    <msg index="1" value="Lock ''{0}'' not released from &quot;finally&quot; block."/>
                </messages>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Race Conditions p. 161</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/832.html" name="CWE">832</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/833.html" name="CWE">833</reference>
                </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.UWNA" header="Use 'wait()' and 'notifyAll()' instead of polling loops." id="UWNA" originalId="TRS.UWNA" scope="CLASS" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Found 'sleep()' in a loop.  You may want to use 'wait()' and 'notifyAll()' instead"/>
                </messages>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/833.html" name="CWE">833</reference>
                </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.CSFS" header="Do not cause deadlocks by calling a &quot;synchronized&quot; method from a &quot;synchronized&quot; method" id="CSFS" originalId="TRS.CSFS" scope="LINE" severity="1" since="4.5">
                <messages>
                    <msg index="1" value="Calling &quot;synchronized&quot; method from a &quot;synchronized&quot; method."/>
                </messages>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Race Conditions p. 161</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/833.html" name="CWE">833</reference>
                </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.STR" header="Do not perform synchronization nor call semaphore methods on an Object's 'this' reference" id="STR" originalId="TRS.STR" scope="LINE" severity="3" since="8.0">
                <messages>
                    <msg index="1" value="The semaphore method ''{0}'' is invoked on the ''this'' reference; this may break multithread correctness."/>
                    <msg index="2" value="This 'synchronized' block performs synchronization on the 'this' reference; this may break multithread correctness."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.833.STR.CHECK_SYNCHRONIZE" name="CHECK_SYNCHRONIZE" value="Check synchronize on 'this'"/>
                    <oldparam id="CWE.833.STR.CHECK_METHODS" name="CHECK_METHODS" value="Check 'wait()', 'notify()', and 'notifyAll()' calls on 'this'"/>
                </oldparameters>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/833.html" name="CWE">833</reference>
                </references>
                <parameters>
                    <param defaultValue="true" id="CWE.833.STR.CHECK_SYNCHRONIZE" inputType="checkbox" label="Check synchronize on 'this'"/>
                    <param defaultValue="true" id="CWE.833.STR.CHECK_METHODS" inputType="checkbox" label="Check 'wait()', 'notify()', and 'notifyAll()' calls on 'this'"/>
                </parameters>
            </rule>
         </category>
         <category description="CWE-279: Incorrect Execution-Assigned Permissions" name="279">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.IDP" header="Avoid setting the write or execute file permissions to unintended users" id="IDP" originalId="SECURITY.WSC.IDP" scope="LINE" severity="5" since="2020.2">
                    <messages>
                        <msg index="1" value="The ''{0}'' method is set to grant the {1} permissions to everybody."/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-755: Improper Handling of Exceptional Conditions" name="755">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.CIET" header="Do not catch InterruptedException except in classes extending Thread." id="CIET" originalId="TRS.CIET" scope="LINE" severity="4" since="8.4">
                <messages>
                    <msg index="1" value="Catching InterruptedException in class: ''{0}'', which does not extend Thread."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.755.CIET.ALLOW_RETHROW" name="ALLOW_RETHROW" value="Allow rethrowing an exception of any type."/>
                    <oldparam id="CWE.755.CIET.ALLOW_LOGGING" name="ALLOW_LOGGING" value="Allow logging without rethrowing or resetting status."/>
                    <oldparam id="CWE.755.CIET.LOGGER_LIST" name="LOGGER_LIST" value="Specify loggers with fully qualified name."/>
                </oldparameters>
                <parameters>
                    <param defaultValue="false" id="CWE.755.CIET.ALLOW_RETHROW" inputType="checkbox" label="Allow rethrowing an exception of any type."/>
                    <param defaultValue="false" id="CWE.755.CIET.ALLOW_LOGGING" inputType="checkbox" label="Allow logging without rethrowing or resetting status.">
                        <param defaultValue="java.util.logging.Logger" id="CWE.755.CIET.LOGGER_LIST" inputType="stringList" label="Specify loggers with fully qualified name." prevType="StringList"/>
                    </param>
                </parameters>
            </rule>
         </category>
         <category description="CWE-483: Incorrect Block Delimitation" name="483">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.EBI" header="Avoid erroneously placing statements outside blocks." id="EBI" originalId="PB.CUB.EBI" scope="LINE" severity="2" since="8.4">
                    <messages>
                        <msg index="1" value="Statement has indentation matching or greater than the previous line, but is outside the ''{0}'' statement."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.483.EBI.CHECK_IF" name="CHECK_IF" value="Check &quot;if&quot; statements"/>
                        <oldparam id="CWE.483.EBI.CHECK_ELSE" name="CHECK_ELSE" value="Check &quot;else&quot; statements"/>
                        <oldparam id="CWE.483.EBI.CHECK_FOR" name="CHECK_FOR" value="Check &quot;for&quot; statements"/>
                        <oldparam id="CWE.483.EBI.CHECK_WHILE" name="CHECK_WHILE" value="Check &quot;while&quot; statements"/>
                        <oldparam id="CWE.483.EBI.CHECK_DO" name="CHECK_DO" value="Check &quot;do-while&quot; statements"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/483.html" name="CWE">483</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CWE.483.EBI.CHECK_IF" inputType="checkbox" label="Check &quot;if&quot; statements"/>
                        <param defaultValue="true" id="CWE.483.EBI.CHECK_ELSE" inputType="checkbox" label="Check &quot;else&quot; statements"/>
                        <param defaultValue="true" id="CWE.483.EBI.CHECK_FOR" inputType="checkbox" label="Check &quot;for&quot; statements"/>
                        <param defaultValue="true" id="CWE.483.EBI.CHECK_WHILE" inputType="checkbox" label="Check &quot;while&quot; statements"/>
                        <param defaultValue="true" id="CWE.483.EBI.CHECK_DO" inputType="checkbox" label="Check &quot;do-while&quot; statements"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.BLK" header="Provide a '{}' block for conditional statements" id="BLK" originalId="CODSTA.BP.BLK" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="&quot;{0}&quot; statement without a &quot;'{' '}'&quot; block."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.483.BLK.BLKELSE" name="BLKELSE" value="Check &quot;else&quot; statements"/>
                        <oldparam id="CWE.483.BLK.BLKFOR" name="BLKFOR" value="Check &quot;for&quot; statements"/>
                        <oldparam id="CWE.483.BLK.BLKWHL" name="BLKWHL" value="Check &quot;while&quot; statements"/>
                        <oldparam id="CWE.483.BLK.BLKDOWHL" name="BLKDOWHL" value="Check &quot;do-while&quot; statements"/>
                        <oldparam id="CWE.483.BLK.BLKIF" name="BLKIF" value="Check &quot;if&quot; statements"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/483.html" name="CWE">483</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CWE.483.BLK.BLKIF" inputType="checkbox" label="Check &quot;if&quot; statements"/>
                        <param defaultValue="true" id="CWE.483.BLK.BLKELSE" inputType="checkbox" label="Check &quot;else&quot; statements"/>
                        <param defaultValue="true" id="CWE.483.BLK.BLKFOR" inputType="checkbox" label="Check &quot;for&quot; statements"/>
                        <param defaultValue="true" id="CWE.483.BLK.BLKWHL" inputType="checkbox" label="Check &quot;while&quot; statements"/>
                        <param defaultValue="true" id="CWE.483.BLK.BLKDOWHL" inputType="checkbox" label="Check &quot;do-while&quot; statements"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.EB" header="Avoid control statements with empty bodies" id="EB" originalId="PB.TYPO.EB" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="''{0}'' statement with an empty body."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.483.EB.CHECK_EMPTY_STATEMENT" name="CHECK_EMPTY_STATEMENT" value="empty statement"/>
                        <oldparam id="CWE.483.EB.CHECK_TYPE_TABLE" name="CHECK_TYPE_TABLE" value="Flag as empty body:"/>
                        <oldparam id="CWE.483.EB.CHECK_TYPE" name="CHECK_TYPE" value="Conditional statement type"/>
                        <oldparam id="CWE.483.EB.CHECK_EMPTY_BLOCK" name="CHECK_EMPTY_BLOCK" value="empty block"/>
                        <oldparam id="CWE.483.EB.SAME_LINE_ONLY" name="SAME_LINE_ONLY" value="Report only if the empty statement is on the same line as the control statement."/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/483.html" name="CWE">483</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.483.EB.CHECK_TYPE_TABLE" label="Flag as empty body:" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN1" label="Conditional statement type" required="true"/>
                                <column columnType="checkbox" editable="true" id="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN2" label="empty statement" required="true"/>
                                <column columnType="checkbox" editable="true" id="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN3" label="empty block" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN1" value="if"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN2" value="true"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN3" value="false"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN1" value="else"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN2" value="true"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN3" value="false"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN1" value="for"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN2" value="true"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN3" value="false"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN1" value="while"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN2" value="true"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN3" value="false"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN1" value="do while"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN2" value="true"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN3" value="false"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN1" value="switch"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN2" value="true"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN3" value="false"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>

                        <param defaultValue="true" id="CWE.483.EB.SAME_LINE_ONLY" inputType="checkbox" label="Report only if the empty statement is on the same line as the control statement."/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-838: Inappropriate Encoding for Output Context" name="838">
            <rule class="com.parasoft.jtest.standards.rules.builtin.INTER.SEO" header="Avoid calling methods and constructors which do not allow you to specify a character encoding option." id="SEO" originalId="INTER.SEO" scope="LINE" severity="3" since="8.1">
                <messages>
                    <msg index="1" value="You may not want to use this constructor for ''{0}'' because it does not allow you to specify an encoding option."/>
                    <msg index="2" value="You may not want to use the method ''{0}()'' because it does not allow you to specify an encoding option."/>
                    <msg index="3" value="You may not want to use the type ''{0}'' because it does not allow you to specify an encoding option."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.838.SEO.METHODS_TO_CHECK" name="METHODS_TO_CHECK" value="Methods and Constructors to Avoid (in form of\n&lt;fully qualified type name&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,&lt;parameter2 fully qualified type&gt;)):"/>
                    <oldparam id="CWE.838.SEO.TYPES_TO_CHECK" name="TYPES_TO_CHECK" value="Types to Avoid (Fully Qualified Names):"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="java.io.InputStreamReader#InputStreamReader(java.io.InputStream);java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream);java.lang.String#getBytes();java.lang.String#String(byte[]);java.lang.String#String(byte[],int,int);javax.mail.internet.MimeBodyPart#setDescription(java.lang.String);javax.mail.internet.MimeBodyPart#setText(java.lang.String);javax.mail.internet.MimeMessage#setDescription(java.lang.String);javax.mail.internet.MimeMessage#setSubject(java.lang.String);javax.mail.internet.MimeMessage#setText(java.lang.String)" description="Methods and Constructors to Avoid (in form of &lt;fully qualified type name&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,&lt;parameter2 fully qualified type&gt;))" id="CWE.838.SEO.METHODS_TO_CHECK" inputType="stringList" label="Methods and Constructors to Avoid:" prevType="StringList"/>
                    <param defaultValue="java.io.FileReader;java.io.FileWriter" id="CWE.838.SEO.TYPES_TO_CHECK" inputType="stringList" label="Types to Avoid (Fully Qualified Names):" prevType="StringList"/>
                </parameters>
            </rule>
         </category>
         <category description="CWE-749: Exposed Dangerous Method or Function" name="749">
            <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.spxm.SPAM" header="Declare a package-private method &quot;final&quot; if it is not overridden" id="SPAM" originalId="GLOBAL.SPAM" scope="METHOD" severity="2" since="4.5" type="global">
                <messages>
                    <msg index="1" value="Method ''{0}()'' should be declared &quot;final&quot;."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.749.SPAM.CHECK_ABSTRACT" name="CHECK_ABSTRACT" value="Check methods in abstract classes"/>
                    <oldparam id="CWE.749.SPAM.CHECK_ANONYMOUS" name="CHECK_ANONYMOUS" value="Check methods in anonymous classes"/>
                    <oldparam id="CWE.749.SPAM.CHECK_LOCAL" name="CHECK_LOCAL" value="Check methods in local classes"/>
                    <oldparam id="CWE.749.SPAM.CHECK_UNUSED" name="CHECK_UNUSED" value="Check unused methods"/>
                    <oldparam id="CWE.749.SPAM.CHECK_STATIC_METHOD" name="CHECK_STATIC_METHOD" value="Check static methods"/>
                </oldparameters>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Java leading security practice p. 170</reference>
                </references>
                <parameters>
                    <param defaultValue="false" id="CWE.749.SPAM.CHECK_ABSTRACT" inputType="checkbox" label="Check methods in abstract classes"/>
                    <param defaultValue="false" id="CWE.749.SPAM.CHECK_ANONYMOUS" inputType="checkbox" label="Check methods in anonymous classes"/>
                    <param defaultValue="false" id="CWE.749.SPAM.CHECK_LOCAL" inputType="checkbox" label="Check methods in local classes"/>
                    <param defaultValue="false" id="CWE.749.SPAM.CHECK_UNUSED" inputType="checkbox" label="Check unused methods"/>
                    <param defaultValue="false" id="CWE.749.SPAM.CHECK_STATIC_METHOD" inputType="checkbox" label="Check static methods"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.dpxm.DPAM" header="Declare package-private methods as inaccessible as possible" id="DPAM" originalId="GLOBAL.DPAM" scope="METHOD" severity="2" type="global">
                <messages>
                    <msg index="1" value="Method ''{0}()'' should be declared {1}."/>
                    <msg index="2" value="Constructor ''{0}()'' should be declared {1}."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.749.DPAM.CHECK_ANONYMOUS" name="CHECK_ANONYMOUS" value="Check methods in anonymous classes"/>
                    <oldparam id="CWE.749.DPAM.CHECK_LOCAL" name="CHECK_LOCAL" value="Check methods in local classes"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="false" id="CWE.749.DPAM.CHECK_ANONYMOUS" inputType="checkbox" label="Check methods in anonymous classes"/>
                    <param defaultValue="false" id="CWE.749.DPAM.CHECK_LOCAL" inputType="checkbox" label="Check methods in local classes"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.dpxm.DPPM" header="Declare &quot;public/protected&quot; methods as inaccessible as possible" id="DPPM" originalId="GLOBAL.DPPM" scope="METHOD" severity="4" type="global">
                <messages>
                    <msg index="1" value="Method ''{0}()'' should be declared {1}."/>
                    <msg index="2" value="Constructor ''{0}()'' should be declared {1}."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.749.DPPM.IGNORE_PROTECTED_PP" name="IGNORE_PROTECTED_PP" value="Ignore &quot;protected&quot; methods which can be made package-private"/>
                    <oldparam id="CWE.749.DPPM.CHECK_ANONYMOUS" name="CHECK_ANONYMOUS" value="Check methods in anonymous classes"/>
                    <oldparam id="CWE.749.DPPM.CHECK_LOCAL" name="CHECK_LOCAL" value="Check methods in local classes"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="false" hidden="true" id="CWE.749.DPPM.IGNORE_OVERLOADED" inputType="checkbox" label="Ignore &quot;overloaded&quot; methods"/>
                    <param defaultValue="false" id="CWE.749.DPPM.IGNORE_PROTECTED_PP" inputType="checkbox" label="Ignore &quot;protected&quot; methods which can be made package-private"/>
                    <param defaultValue="false" id="CWE.749.DPPM.CHECK_ANONYMOUS" inputType="checkbox" label="Check methods in anonymous classes"/>
                    <param defaultValue="false" id="CWE.749.DPPM.CHECK_LOCAL" inputType="checkbox" label="Check methods in local classes"/>
                </parameters>
            </rule>
         </category>
         <category description="CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer" name="212">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.FT" header="Avoid declaring &quot;transient&quot; fields in non-serializable classes" id="FT" originalId="SERIAL.FT" scope="LINE" severity="3" since="8.2">
                <messages>
                    <msg index="1" value="field ''{0}'' is &quot;transient&quot;"/>
                </messages>
            </rule>
         </category>
         <category description="CWE-511: Logic/Time Bomb" name="511">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.RDM" header="Inspect 'Random' objects or 'Math.random()' methods that could indicate areas where malicious code has been placed." id="RDM" originalId="SECURITY.WSC.RDM" scope="LINE" severity="5" since="6.0">
                    <messages>
                        <msg index="1" value="Inspect usage of 'Random' object or method that might lead to unpredictable behavior"/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/511.html" name="CWE">511</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-611: Improper Restriction of XML External Entity Reference" name="611">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.DXXE" header="Disable XML external entity injection." id="DXXE" originalId="SECURITY.IBA.DXXE" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="XXE injection has not been disabled."/>
                        <msg index="2" value="XXE injection has not been disabled. Ensure your parser version allows you to configure the required options."/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-185: Incorrect Regular Expression" name="185">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.API.REP" header="Avoid using &quot;.&quot; as a regular expression in 'String.replaceAll()' and 'String.replaceFirst()'" id="REP" originalId="PB.API.REP" severity="2" since="8.2">
                    <messages>
                        <msg index="1" value="Regular expression &quot;{0}&quot; will replace all string character to &quot;{1}&quot;"/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-352: Cross-Site Request Forgery (CSRF)" name="352">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SPRING.REQMAP" header="Ensure that methods annotated with @RequestMapping specify the HTTP request method they call" id="REQMAP" originalId="SPRING.REQMAP" scope="LINE" severity="2" since="10.4.3">
                <messages>
                    <msg index="1" value="The ''{0}'' method annotated with @RequestMapping does not explicitly specify the HTTP request method it calls"/>
                    <msg index="2" value="The ''{0}'' method annotated with @RequestMapping calls more than one HTTP request method."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.UOSC" header="Use the ''getSecure()'' and ''setSecure()'' methods to enforce the use of secure cookies." id="UOSC" originalId="SECURITY.WSC.UOSC" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="The ''Cookie'' variable ''{0}'' may be used without making sure that it is a secure cookie."/>
                        <msg index="2" value="Make sure that the appropriate version of library is used."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Session Management p. 78</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010">A3-Broken Authentication and Session Management</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A5" name="OWASP-2010">A5-Cross Site Request Forgery (CSRF)</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/614.html" name="CWE">614</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/352.html" name="CWE">352</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE">807</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SPRING.DCSRFJAVA" header="Do not disable CSRF protection" id="DCSRFJAVA" originalId="SPRING.DCSRFJAVA" scope="LINE" severity="2" since="10.4.3">
                <messages>
                    <msg index="1" value="CSRF protection is disabled."/>
                </messages>
            </rule>
         </category>
         <category description="CWE-798: Use of Hard-coded Credentials" name="798">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HCCK" header="Avoid using hard-coded cryptographic keys" id="HCCK" originalId="SECURITY.WSC.HCCK" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Hard-coded cryptographic key here."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.798.HCCK.MIN_LENGTH" name="MIN_LENGTH" value="Check keys whose length is greater than "/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/321.html" name="CWE">321</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/506.html" name="CWE">506</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/759.html" name="CWE">759</reference>
                    </references>
                    <parameters>
                        <param defaultValue="9" id="CWE.798.HCCK.MIN_LENGTH" inputType="integer" label="Check keys whose length is greater than " min="9"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HCCS" header="Avoid passing hardcoded usernames/passwords/URLs to database connection methods." id="HCCS" originalId="SECURITY.WSC.HCCS" scope="LINE" severity="1" since="8.1">
                    <messages>
                        <msg index="1" value="This call to ''{0}()'' may be dangerous because it passes in only hard-coded Strings."/>
                        <msg index="2" value="This call to ''{0}()'' may be dangerous because it uses a hard-coded password."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.798.HCCS.CONNECT_METHS" name="CONNECT_METHS" value="Additional Database Connection Methods \n(in form of &lt;qualified name of declaring type&gt;#&lt;method name&gt;)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Java leading security practice p. 170</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/259.html" name="CWE">259</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/547.html" name="CWE">547</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/798.html" name="CWE">798</reference>
                    </references>
                    <parameters>
                        <param defaultValue="" description="Additional Database Connection Methods (in form of &lt;qualified name of declaring type&gt;#&lt;method name&gt;)" id="CWE.798.HCCS.CONNECT_METHS" inputType="stringList" label="Additional Database Connection Methods" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-83: Improper Neutralization of Script in Attributes in a Web Page" name="83">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ARXML" header="Process XML and HTML with a library instead of raw text " id="ARXML" originalId="SECURITY.WSC.ARXML" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="''{0}'' is processed using raw text instead of a library"/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/80.html" name="CWE">80</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/81.html" name="CWE">81</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-191: Integer Underflow (Wrap or Wraparound)" name="191">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.BSA" header="Do not use an integer outside the range of [0, 31] as the amount of a shift" id="BSA" originalId="PB.NUM.BSA" scope="LINE" severity="2" since="8.0">
                    <messages>
                        <msg index="1" value="The shift amount ''{0}'' is outside the range [0, 31]."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/190.html" name="CWE">190</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/191.html" name="CWE">191</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-522: Insufficiently Protected Credentials" name="522">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.USC" header="Use the SSL-enabled version of classes when possible." id="USC" originalId="SECURITY.WSC.USC" scope="LINE" severity="3" since="7.5">
                    <messages>
                        <msg index="1" value="Consider using the SSL-enabled type ''SSLServerSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="2" value="Consider using the SSL-enabled type ''SSLSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="3" value="Consider using the SSL-enabled type ''HttpsURLConnection'' for the {0} ''{1}''."/>
                        <msg index="4" value="Consider using the SSL-enabled type ''SslRMIClientSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="5" value="Consider using the SSL-enabled type ''SslRMIServerSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="6" value="Consider using the SSL-enabled type ''SSLSocket'' for the {0} ''{1}''."/>
                        <msg index="7" value="Consider using the SSL-enabled type ''SSLServerSocket'' for the {0} ''{1}''."/>
                        <msg index="8" value="Consider using the SSL-enabled type ''SSLPermission'' for the {0} ''{1}''."/>
                    </messages>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010">A9-Insufficient Transport Layer Protection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/494.html" name="CWE">494</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" name="614">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.UOSC" header="Use the ''getSecure()'' and ''setSecure()'' methods to enforce the use of secure cookies." id="UOSC" originalId="SECURITY.WSC.UOSC" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="The ''Cookie'' variable ''{0}'' may be used without making sure that it is a secure cookie."/>
                        <msg index="2" value="Make sure that the appropriate version of library is used."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Session Management p. 78</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010">A3-Broken Authentication and Session Management</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A5" name="OWASP-2010">A5-Cross Site Request Forgery (CSRF)</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/614.html" name="CWE">614</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/352.html" name="CWE">352</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE">807</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-595: Comparison of Object References Instead of Object Contents" name="595">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.UEIC" header="Do not use '==' or '!=' to compare objects" id="UEIC" originalId="PB.CUB.UEIC" scope="LINE" severity="2" since="4.5">
                    <messages>
                        <msg index="1" value="&quot;==&quot; is used when comparing Objects. 'equals()' should be used instead."/>
                        <msg index="2" value="&quot;!=&quot; is used when comparing Objects. 'equals()' should be used instead."/>
                        <msg index="3" value="&quot;==&quot; is used when comparing 'String' Objects. 'equals()' should be used instead."/>
                        <msg index="4" value="&quot;!=&quot; is used when comparing 'String' Objects. 'equals()' should be used instead."/>
                        <msg index="5" value="The 'equals()' method of class 'Object' is used when comparing array Objects. 'java.util.Arrays.equals (Object[], Object[])' should be used instead."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.595.UEIC.STRING_ONLY" name="STRING_ONLY" value="Only 'String' objects "/>
                        <oldparam id="CWE.595.UEIC.CHECK_ARRAYS" name="CHECK_ARRAYS" value="Check for calls to the 'equals()' method of class Object on arrays"/>
                        <oldparam id="CWE.595.UEIC.ALL" name="ALL" value="All objects"/>
                        <oldparam id="CWE.595.UEIC.SCOPE" name="SCOPE" value="Scope of checking:"/>
                        <oldparam id="CWE.595.UEIC.IGNORE_TYPES" name="IGNORE_TYPES" value="Allow &quot;==&quot; and &quot;!=&quot; operators when compared object is type:"/>
                        <oldparam id="CWE.595.UEIC.CHECK_STATICFINAL" name="CHECK_STATICFINAL" value="Check comparisons to &quot;static&quot; &quot;final&quot; objects"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Java gotchas p. 164</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/597.html" name="CWE">597</reference>
                    </references>
                    <parameters>
                        <radioGroup id="CWE.595.UEIC.SCOPE" label="Scope of checking:" prevType="MultipleChoice" showLabel="true">
                            <radioItem defaultValue="checked" label="All objects" value="0"/>
                            <radioItem label="Only 'String' objects " value="1"/>
                        </radioGroup>
                        <param defaultValue="java.lang.Class;java.lang.Thread" id="CWE.595.UEIC.IGNORE_TYPES" inputType="stringList" label="Allow &quot;==&quot; and &quot;!=&quot; operators when compared object is type:" prevType="StringList"/>
                        <param defaultValue="true" id="CWE.595.UEIC.CHECK_ARRAYS" inputType="checkbox" label="Check for calls to the 'equals()' method of class Object on arrays"/>
                        <param defaultValue="false" id="CWE.595.UEIC.CHECK_STATICFINAL" inputType="checkbox" label="Check comparisons to &quot;static&quot; &quot;final&quot; objects"/>
                        <param defaultValue="false" id="CWE.595.UEIC.CHECK_EQUALS_METHOD" inputType="checkbox" label="Check comparisons in equals() methods"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-496: Public Data Assigned to Private Array-Typed Field" name="496">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CAP" header="Always clone array parameters which are stored to fields" id="CAP" originalId="SECURITY.WSC.CAP" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Array parameter ''{0}'' is not cloned before it is stored."/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-495: Private Data Structure Returned From A Public Method" name="495">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.RA" header="Avoid methods that might expose internal representations by returning arrays or other mutable fields" id="RA" originalId="SECURITY.ESD.RA" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="Exposing the internal representation of ''{0}'' through the array ''{1}''."/>
                        <msg index="2" value="Exposing the internal representation of ''{0}'' through the mutable field ''{1}''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.495.RA.CHECK_ARRAYS" name="CHECK_ARRAYS" value="Check arrays"/>
                        <oldparam id="CWE.495.RA.CHECK_MUTABLE_TYPES" name="CHECK_MUTABLE_TYPES" value="Check mutable types"/>
                    </oldparameters>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A4" name="OWASP-2010">A4-Insecure Direct Object Reference</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/495.html" name="CWE">495</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CWE.495.RA.CHECK_ARRAYS" inputType="checkbox" label="Check arrays"/>
                        <param defaultValue="false" id="CWE.495.RA.CHECK_MUTABLE_TYPES" inputType="checkbox" label="Check mutable types"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-477: Use of Obsolete Function" name="477">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.DPRAPI" header="Do not use deprecated APIs" id="DPRAPI" originalId="PB.API.DPRAPI" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Using deprecated {0}: ''{1}''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.477.DPRAPI.FIELD_LIST" name="FIELD_LIST" value="Deprecated field list\n(in form of &lt;fully qualified type name&gt;#&lt;field name&gt;)"/>
                        <oldparam id="CWE.477.DPRAPI.CLASS" name="CLASS" value="Class/Interface"/>
                        <oldparam id="CWE.477.DPRAPI.FIELD" name="FIELD" value="Field"/>
                        <oldparam id="CWE.477.DPRAPI.FIELD_LOWER" name="FIELD_LOWER" value="field"/>
                        <oldparam id="CWE.477.DPRAPI.CONSTRUCTOR_LOWER" name="CONSTRUCTOR_LOWER" value="constructor"/>
                        <oldparam id="CWE.477.DPRAPI.METHOD" name="METHOD" value="Method"/>
                        <oldparam id="CWE.477.DPRAPI.METHOD_LOWER" name="METHOD_LOWER" value="method"/>
                        <oldparam id="CWE.477.DPRAPI.METHOD_LIST" name="METHOD_LIST" value="Deprecated method list \n(in form of &lt;fully qualified type name&gt;#&lt;method&gt;(&lt;parameter1 type&gt;,&lt;parameter2 type&gt;))"/>
                        <oldparam id="CWE.477.DPRAPI.CLASS_LIST" name="CLASS_LIST" value="Deprecated class/interface list"/>
                        <oldparam id="CWE.477.DPRAPI.CHECK_SEE" name="CHECK_SEE" value="Check for usage of deprecated APIs in Javadoc &quot;@see&quot; tags"/>
                        <oldparam id="CWE.477.DPRAPI.IGNORE_USER_DEFINED" name="IGNORE_USER_DEFINED" value="Ignore user-defined types, methods, and fields"/>
                        <oldparam id="CWE.477.DPRAPI.IGNORE_NOT_LISTED" name="IGNORE_NOT_LISTED" value="Ignore all types, methods, and fields not listed above"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/477.html" name="CWE">477</reference>
                    </references>
                    <parameters>
                        <group collapsible="false" id="CWE.477.DPRAPI.tab.CLASS" label="Class/Interface">
                            <param defaultValue="" id="CWE.477.DPRAPI.CLASS_LIST" inputType="stringList" label="Deprecated class/interface list" prevType="StringList"/>
                        </group>
                        <group collapsible="false" id="CWE.477.DPRAPI.tab.FIELD" label="Field">
                            <param defaultValue="" description="Deprecated field list (in form of &lt;fully qualified type name&gt;#&lt;field name&gt;)" id="CWE.477.DPRAPI.FIELD_LIST" inputType="stringList" label="Deprecated field list" prevType="StringList"/>
                        </group>
                        <group collapsible="false" id="CWE.477.DPRAPI.tab.METHOD" label="Method">
                            <param defaultValue="" description="Deprecated method list (in form of &lt;fully qualified type name&gt;#&lt;method&gt;(&lt;parameter1 type&gt;,&lt;parameter2 type&gt;))" id="CWE.477.DPRAPI.METHOD_LIST" inputType="stringList" label="Deprecated method list" prevType="StringList"/>
                        </group>
                        <param defaultValue="false" id="CWE.477.DPRAPI.CHECK_SEE" inputType="checkbox" label="Check for usage of deprecated APIs in Javadoc &quot;@see&quot; tags"/>
                        <param defaultValue="false" id="CWE.477.DPRAPI.IGNORE_USER_DEFINED" inputType="checkbox" label="Ignore user-defined types, methods, and fields"/>
                        <param defaultValue="false" id="CWE.477.DPRAPI.IGNORE_NOT_LISTED" inputType="checkbox" label="Ignore all types, methods, and fields not listed above"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-104: Struts: Form Bean Does Not Extend Validation Class" name="104">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.AEAF" header="Do not extend from the Struts classes 'ActionForm' and 'DynaActionForm'." id="AEAF" originalId="SECURITY.IBA.AEAF" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="Consider extending 'DynaValidatorForm' or 'DynaValidatorActionForm'"/>
                        <msg index="2" value="Consider extending 'ValidatorForm' or 'ValidatorActionForm'"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for SQL Injection p. 121</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/104.html" name="CWE">104</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/89.html" name="CWE">89</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-732: Incorrect Permission Assignment for Critical Resource" name="732">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SCHTTP" header="Mark cookies as HttpOnly" id="SCHTTP" originalId="SECURITY.WSC.SCHTTP" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The cookie is not marked as 'HttpOnly'."/>
                        <msg index="2" value="The cookie is not marked as 'HttpOnly'. Call setHttpOnly(true) on the cookie object (available since Java Servlet 3.0)."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.IDP" header="Avoid setting the write or execute file permissions to unintended users" id="IDP" originalId="SECURITY.WSC.IDP" scope="LINE" severity="5" since="2020.2">
                    <messages>
                        <msg index="1" value="The ''{0}'' method is set to grant the {1} permissions to everybody."/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-576: EJB Bad Practices: Use of Java I/O" name="576">
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.JIO" header="Do not use types from the &quot;java.io&quot; package within bean classes." id="JIO" originalId="EJB.JIO" scope="LINE" severity="2" since="8.2">
                <messages>
                    <msg index="1" value="New instance of type ''{0}'' created in a bean class."/>
                    <msg index="2" value="Call to &quot;java.io&quot; method ''{0}'' in a bean class."/>
                    <msg index="3" value="Method ''{0}'' indirectly uses the &quot;java.io&quot; package in a bean class."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.576.JIO.DEPTH" name="DEPTH" value="Maximum depth to check for &quot;java.io&quot; usage"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="2" id="CWE.576.JIO.DEPTH" inputType="integer" label="Maximum depth to check for &quot;java.io&quot; usage" max="5" min="1"/>
                </parameters>
            </rule>
         </category>
         <category description="CWE-382: J2EE Bad Practices: Use of System.exit()" name="382">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.EXIT" header="Do not call methods which terminates Java Virtual Machine" id="EXIT" originalId="CODSTA.BP.EXIT" scope="LINE" severity="3" since="10.4">
                    <messages>
                        <msg index="1" value="'System.exit()' called."/>
                        <msg index="2" value="'Runtime.exit()' called."/>
                        <msg index="3" value="'Runtime.halt()' called."/>
                    </messages>
                    <parameters>
                        <param defaultValue="true" id="CWE.382.EXIT.IGNORE_IN_MAIN" inputType="checkbox" label="Ignore in the 'main()' method"/>
                        <param defaultValue="false" id="CWE.382.EXIT.IGNORE_IF_COMMENT" inputType="checkbox" label="Ignore if the method call is followed by a comment on the same line"/>
                        <param defaultValue="false" id="CWE.382.EXIT.IGNORE_IF_COMMENT_ABOVE" inputType="checkbox" label="Ignore if the line above the method call contains a comment"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.JVM" header="Do not stop the JVM in a web component." id="JVM" originalId="SECURITY.EAB.JVM" scope="LINE" severity="1" since="7.5">
                    <messages>
                        <msg index="1" value="Call to ''System.{0}()'' in a web component."/>
                        <msg index="2" value="Method ''{0}'' indirectly calls &quot;System.exit()&quot; in a web component."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.382.JVM.DEPTH" name="DEPTH" value="Maximum depth to look for &quot;System.exit()&quot; calls"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/382.html" name="CWE">382</reference>
                    </references>
                    <parameters>
                        <param defaultValue="2" id="CWE.382.JVM.DEPTH" inputType="integer" label="Maximum depth to look for &quot;System.exit()&quot; calls" max="5" min="1"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-523: Unprotected Transport of Credentials" name="523">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.USC" header="Use the SSL-enabled version of classes when possible." id="USC" originalId="SECURITY.WSC.USC" scope="LINE" severity="3" since="7.5">
                    <messages>
                        <msg index="1" value="Consider using the SSL-enabled type ''SSLServerSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="2" value="Consider using the SSL-enabled type ''SSLSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="3" value="Consider using the SSL-enabled type ''HttpsURLConnection'' for the {0} ''{1}''."/>
                        <msg index="4" value="Consider using the SSL-enabled type ''SslRMIClientSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="5" value="Consider using the SSL-enabled type ''SslRMIServerSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="6" value="Consider using the SSL-enabled type ''SSLSocket'' for the {0} ''{1}''."/>
                        <msg index="7" value="Consider using the SSL-enabled type ''SSLServerSocket'' for the {0} ''{1}''."/>
                        <msg index="8" value="Consider using the SSL-enabled type ''SSLPermission'' for the {0} ''{1}''."/>
                    </messages>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010">A9-Insufficient Transport Layer Protection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/494.html" name="CWE">494</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-680: Integer Overflow to Buffer Overflow" name="680">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.BSA" header="Do not use an integer outside the range of [0, 31] as the amount of a shift" id="BSA" originalId="PB.NUM.BSA" scope="LINE" severity="2" since="8.0">
                    <messages>
                        <msg index="1" value="The shift amount ''{0}'' is outside the range [0, 31]."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/190.html" name="CWE">190</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/191.html" name="CWE">191</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')" name="835">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.PCIF" header="Declare &quot;for&quot; loops with an initializer, conditional, and updater statements" id="PCIF" originalId="CODSTA.READ.PCIF" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Missing conditional expression in &quot;for&quot; loop."/>
                        <msg index="2" value="Missing updater expression in &quot;for&quot; loop."/>
                        <msg index="3" value="Missing initializer expression in &quot;for&quot; loop."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.835.PCIF.CHECK_INITIALIZER" name="CHECK_INITIALIZER" value="Check initializer"/>
                        <oldparam id="CWE.835.PCIF.CHECK_CONDITIONAL" name="CHECK_CONDITIONAL" value="Check conditional"/>
                        <oldparam id="CWE.835.PCIF.CHECK_UPDATER" name="CHECK_UPDATER" value="Check updater"/>
                        <oldparam id="CWE.835.PCIF.IGNORE_ENUMERATION" name="IGNORE_ENUMERATION" value="Ignore &quot;for&quot; loops with 'Enumeration' or 'Iterator' method &quot;has...&quot; as condition."/>
                        <oldparam id="CWE.835.PCIF.IGNORE_INFINITE_LOOP" name="IGNORE_INFINITE_LOOP" value="Ignore infinite &quot;for&quot; loops in form of 'for (;;)'"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/833.html" name="CWE">833</reference>
                    </references>
                    <parameters>
                        <param defaultValue="false" id="CWE.835.PCIF.CHECK_INITIALIZER" inputType="checkbox" label="Check initializer"/>
                        <param defaultValue="true" id="CWE.835.PCIF.CHECK_CONDITIONAL" inputType="checkbox" label="Check conditional"/>
                        <param defaultValue="true" id="CWE.835.PCIF.CHECK_UPDATER" inputType="checkbox" label="Check updater"/>
                        <param defaultValue="true" id="CWE.835.PCIF.IGNORE_ENUMERATION" inputType="checkbox" label="Ignore &quot;for&quot; loops with 'Enumeration' or 'Iterator' method &quot;has...&quot; as condition."/>
                        <param defaultValue="false" id="CWE.835.PCIF.IGNORE_INFINITE_LOOP" inputType="checkbox" label="Ignore infinite &quot;for&quot; loops in form of 'for (;;)'"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AIL" header="Avoid infinite loops" id="AIL" originalId="PB.LOGIC.AIL" scope="LINE" severity="2" since="8.0">
                    <messages>
                        <msg index="1" value="Possible infinite loop: the loop's condition will always evaluate to &quot;true&quot;, and there is no other exit from the loop."/>
                        <msg index="2" value="Possible infinite loop: the loop's condition will always evaluate to 'true' and there is no other exit from the loop."/>
                        <msg index="3" value="Possible infinite loop: the loop''s condition uses the variable &quot;{0}&quot;, but this variable is not modified within the loop''s body."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.835.AIL.DEPTH_ITERATOR" name="DEPTH_ITERATOR" value="Maximum depth of checking for nested calls to 'Iterator.next()' or 'Iterator.remove()'"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/835.html" name="CWE">835</reference>
                    </references>
                    <parameters>
                        <param defaultValue="5" id="CWE.835.AIL.DEPTH_ITERATOR" inputType="integer" label="Maximum depth of checking for nested calls to 'Iterator.next()' or 'Iterator.remove()'" min="0"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-532: Insertion of Sensitive Information into Log File" name="532">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.CONSEN" header="Do not log confidential or sensitive information" id="CONSEN" originalId="SECURITY.ESD.CONSEN" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="''{0}'' should not be used by a logger, it can expose confidential info."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.532.CONSEN.SUSPICIOUS_WORDS" name="SUSPICIOUS_WORDS" value="Regular expressions representing sensive data:"/>
                        <oldparam id="CWE.532.CONSEN.LOG_METHOD_EXPRESSIONS" name="LOG_METHOD_EXPRESSIONS" value="Logging method name in regular expression"/>
                        <oldparam id="CWE.532.CONSEN.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/533.html" name="CWE">533</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/534.html" name="CWE">534</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*ssn.*@delim@.*pass.*" id="CWE.532.CONSEN.SUSPICIOUS_WORDS" inputType="stringList" label="Regular expressions representing sensive data:" prevType="StringList"/>
                        <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="CWE.532.CONSEN.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                        <param defaultValue=".*log.*" id="CWE.532.CONSEN.LOG_METHOD_EXPRESSIONS" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-307: Improper Restriction of Excessive Authentication Attempts" name="307">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PBFA" header="Ensure sufficient protection against multiple failed authentication attempts" id="PBFA" originalId="SECURITY.WSC.PBFA" scope="LINE" severity="5" type="global">
                    <messages>
                        <msg index="1" value="This class uses the object of the AuthenticationFailureBadCredentialsEvent class. Ensure that sufficient protection against multiple failed authentication attempts is implemented."/>
                        <msg index="2" value="Ensure that the implementation of the 'onAuthenticationFailure()' method provides sufficient protection against multiple failed authentication attempts."/>
                        <msg index="3" value="Ensure that the implementation of the 'configure()' method provides sufficient protection against multiple failed authentication attempts."/>
                        <msg index="4" value="Ensure that the application code includes sufficient protection against multiple failed authentication attempts."/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-862: Missing Authorization" name="862">
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.PERMIT" header="Avoid EJB 3 methods without security annotations" id="PERMIT" originalId="EJB.EJB3.PERMIT" scope="LINE" severity="1" since="9.2">
                    <messages>
                        <msg index="1" value="Method without permit (@RolesAllowed, @PermitAll, @DenyAll) annotations."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authorization p. 73</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A4" name="OWASP-2010">A4-Insecure Direct Object Reference</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A8" name="OWASP-2010">A8-Failure to Restrict URL Access</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/862.html" name="CWE">862</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/863.html" name="CWE">863</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-329: Generation of Predictable IV with CBC Mode" name="329">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.IVR" header="Avoid non-random &quot;byte[]&quot; when using IvParameterSpec." id="IVR" originalId="SECURITY.WSC.IVR" scope="LINE" severity="2" since="8.4">
                    <messages>
                        <msg index="1" value="IvParameterSpec instantiated with non-random value ''{0}''."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/329.html" name="CWE">329</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ENPP" header="Ensure arguments passed to certain methods come from predefined methods list." id="ENPP" originalId="SECURITY.WSC.ENPP" scope="LINE" severity="2" since="9.2">
                    <messages>
                        <msg index="1" value="Argument number {0} passed to method ''{1}'' is not an allowed method call."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.329.ENPP.PAIRS_TABLE_HEADER" name="PAIRS_TABLE_HEADER" value="Methods and arguments configuration"/>
                        <oldparam id="CWE.329.ENPP.PAIRS_TABLE_1ST" name="PAIRS_TABLE_1ST" value="Method to be checked (&lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,...)"/>
                        <oldparam id="CWE.329.ENPP.PAIRS_TABLE_INDEX" name="PAIRS_TABLE_INDEX" value="Argument Index to Check (''0''-based)"/>
                        <oldparam id="CWE.329.ENPP.PAIRS_TABLE_2ND" name="PAIRS_TABLE_2ND" value="Allowed method name (in Regular Expressions)"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/329.html" name="CWE">329</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/336.html" name="CWE">336</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/337.html" name="CWE">337</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE">676</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.329.ENPP.PAIRS_TABLE_HEADER" label="Methods and arguments configuration" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" label="Method to be checked (&lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,...)" required="true"/>
                                <column columnType="text" defaultValue="0" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" label="Argument Index to Check (''0''-based)" required="true" textSize="small"/>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" label="Allowed method name (in Regular Expressions)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#SecureRandom(byte[])"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#setSeed(byte[])"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#setSeed(long)"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="javax.crypto.spec.IvParameterSpec#IvParameterSpec(byte[])"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidIV"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="javax.crypto.spec.IvParameterSpec#IvParameterSpec(byte[],int,int)"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidIV"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)" name="338">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SRD" header="Use 'java.security.SecureRandom' instead of 'java.util.Random' or 'Math.random()'." id="SRD" originalId="SECURITY.WSC.SRD" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Avoid using the insecure ''{0}'' as a random number generator"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/330.html" name="CWE">330</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/338.html" name="CWE">338</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE">676</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-384: Session Fixation" name="384">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ISL" header="Always call 'HttpSession.invalidate()' before 'LoginContext.login()'" id="ISL" originalId="SECURITY.WSC.ISL" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Login without session invalidation."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Session Management p. 78</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/384.html" name="CWE">384</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer" name="119">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.BUSSB" header="Prevent external processes from blocking on output or error streams" id="BUSSB" originalId="SECURITY.WSC.BUSSB" scope="LINE" severity="3" since="10.4.3">
                    <messages>
                        <msg index="1" value="The error stream of the process is not emptied or redirected"/>
                        <msg index="2" value="The output stream of the process is not emptied or redirected"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.BSA" header="Do not use an integer outside the range of [0, 31] as the amount of a shift" id="BSA" originalId="PB.NUM.BSA" scope="LINE" severity="2" since="8.0">
                    <messages>
                        <msg index="1" value="The shift amount ''{0}'' is outside the range [0, 31]."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/190.html" name="CWE">190</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/191.html" name="CWE">191</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-609: Double-Checked Locking" name="609">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.DCL" header="Avoid unsafe implementations of the &quot;double-checked locking&quot; pattern." id="DCL" originalId="TRS.DCL" scope="LINE" severity="2" since="6.0">
                <messages>
                    <msg index="1" value="The &quot;double-checked locking&quot; pattern is used; this pattern can cause unexpected problems when compiler optimizations are performed."/>
                </messages>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Race Conditions p. 161</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/609.html" name="CWE">609</reference>
                </references>
            </rule>
         </category>
         <category description="CWE-586: Explicit Call to Finalize()" name="586">
            <rule class="com.parasoft.jtest.standards.rules.builtin.GC.NCF" header="Do not call 'finalize()' explicitly." id="NCF" originalId="GC.NCF" scope="LINE" severity="1" since="4.5">
                <messages>
                    <msg index="1" value="'finalize()' called explicitly."/>
                </messages>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/586.html" name="CWE">586</reference>
                </references>
            </rule>
         </category>
         <category description="CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere" name="497">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.PEO" header="Do not pass exception messages into output in order to prevent the application from leaking sensitive information" id="PEO" originalId="SECURITY.ESD.PEO" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Print method ''{0}()'' is not allowed in a &quot;catch&quot; block."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.497.PEO.PRINT_METHOD_EXPRESSION" name="PRINT_METHOD_EXPRESSION" value="Print methods (Specify names in regular expressions)"/>
                        <oldparam id="CWE.497.PEO.EXCEPTIONS" name="EXCEPTIONS" value="Exceptions (Specify types and method names in regular expressions)"/>
                        <oldparam id="CWE.497.PEO.TYPE" name="TYPE" value="Type"/>
                        <oldparam id="CWE.497.PEO.METHOD" name="METHOD" value="Method"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/209.html" name="CWE">209</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/497.html" name="CWE">497</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*print.*;.*Print.*" id="CWE.497.PEO.PRINT_METHOD_EXPRESSION" inputType="stringList" label="Print methods (Specify names in regular expressions)" prevType="StringList"/>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.497.PEO.EXCEPTIONS" label="Exceptions (Specify types and method names in regular expressions)" reader="SATable">
                            <columns>
                                <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" label="Type" required="true"/>
                                <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" label="Method" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" value="^java\.util\.logging\.Logger$"/>
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" value="^.*$"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" value="^org\.apache\.log4j\.Logger$"/>
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" value="^.*$"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-561: Dead Code" name="561">
            <rule class="com.parasoft.jtest.standards.rules.builtin.UC.PM" header="Avoid unused &quot;private&quot; methods" id="PM" originalId="UC.PM" scope="CLASS" severity="3">
                <messages>
                    <msg index="1" value="Unused &quot;private&quot; method: {0}."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.561.PM.IGNORE_LIST" name="IGNORE_LIST" value="Ignore methods with names (in regular expression):"/>
                    <oldparam id="CWE.561.PM.IGNORE_JCONTRACT" name="IGNORE_JCONTRACT" value="Ignore methods which are used within a Jcontract tag"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="" id="CWE.561.PM.IGNORE_LIST" inputType="stringList" label="Ignore methods with names (in regular expression):" prevType="StringList"/>
                    <param defaultValue="javafx.fxml.FXML" id="CWE.561.PM.IGNORED_ANNOTATIONS" inputType="stringList" label="Ignore methods preceded by annotations with qualified names:" prevType="StringList"/>
                    <param defaultValue="false" id="CWE.561.PM.IGNORE_JCONTRACT" inputType="checkbox" label="Ignore methods which are used within a Jcontract tag"/>
                </parameters>
            </rule>
         </category>
         <category description="CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')" name="470">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.APIBS" header="Inspect usage of standard API calls that bypass security" id="APIBS" originalId="SECURITY.WSC.APIBS" scope="LINE" severity="3" since="9.0">
                    <messages>
                        <msg index="1" value="API call ''{0}'' has potential to bypass security."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.470.APIBS.CHECKED_METHODS" name="CHECKED_METHODS" value="Check the following methods:"/>
                        <oldparam id="CWE.470.APIBS.TYPE" name="TYPE" value="Type (qualified name)"/>
                        <oldparam id="CWE.470.APIBS.METHOD" name="METHOD" value="Method name (regular expression)"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/111.html" name="CWE">111</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/114.html" name="CWE">114</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/470.html" name="CWE">470</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.470.APIBS.CHECKED_METHODS" label="Check the following methods:" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" label="Type (qualified name)" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" label="Method name (regular expression)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newInstance"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getClassLoader"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getClasses"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getField[s]*"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getMethod[s]*"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getConstructor[s]*"/>
                                </row>
                                <row id="7">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getDeclaredClasses"/>
                                </row>
                                <row id="8">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getDeclaredField[s]*"/>
                                </row>
                                <row id="9">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getDeclaredMethod[s]*"/>
                                </row>
                                <row id="10">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getDeclaredConstructor[s]*"/>
                                </row>
                                <row id="11">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.ClassLoader"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getParent"/>
                                </row>
                                <row id="12">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.ClassLoader"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getSystemClassLoader"/>
                                </row>
                                <row id="13">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Thread"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getContextClassLoader"/>
                                </row>
                                <row id="14">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="forName"/>
                                </row>
                                <row id="15">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Package"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getPackage[s]*"/>
                                </row>
                                <row id="16">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Runtime"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="load"/>
                                </row>
                                <row id="17">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Runtime"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="loadLibrary"/>
                                </row>
                                <row id="18">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.System"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="load"/>
                                </row>
                                <row id="19">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.System"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="loadLibrary"/>
                                </row>
                                <row id="20">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.sql.DriverManager"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getConnection"/>
                                </row>
                                <row id="21">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.sql.DriverManager"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getDriver[s]*"/>
                                </row>
                                <row id="22">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.sql.DriverManager"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="deregisterDriver"/>
                                </row>
                                <row id="23">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.util.ResourceBundle"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="getBundle"/>
                                </row>
                                <row id="24">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newInstance"/>
                                </row>
                                <row id="25">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Constructor"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newInstance"/>
                                </row>
                                <row id="26">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Field"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="get*"/>
                                </row>
                                <row id="27">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Field"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="set*"/>
                                </row>
                                <row id="28">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Method"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="invoke"/>
                                </row>
                                <row id="29">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.util.concurrent.atomic.AtomicIntegerFieldUpdater"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newUpdater"/>
                                </row>
                                <row id="30">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.util.concurrent.atomic.AtomicLongFieldUpdater"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newUpdater"/>
                                </row>
                                <row id="31">
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN1" value="java.util.concurrent.atomic.AtomicReferenceFieldUpdater"/>
                                    <column refColumnId="SECURITY__WSC__APIBS__CHECKED_METHODS__COLUMN2" value="newUpdater"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-487: Reliance on Package-level Scope" name="487">
            <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.AF" header="Avoid &quot;public&quot;/&quot;protected&quot;/package-private fields" id="AF" originalId="OOP.AF" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="{0} field is declared {1}: {2}."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.487.AF.OOP.APROF" name="OOP.APROF" value="Check &quot;protected&quot; field"/>
                    <oldparam id="CWE.487.AF.OOP.APF" name="OOP.APF" value="Check &quot;public&quot; field"/>
                    <oldparam id="CWE.487.AF.OOP.APPF" name="OOP.APPF" value="Check package-private field"/>
                    <oldparam id="CWE.487.AF.CHECK_INSTANCE" name="CHECK_INSTANCE" value="Check instance fields."/>
                    <oldparam id="CWE.487.AF.CHECK_STATIC" name="CHECK_STATIC" value="Check non-final &quot;static&quot; fields."/>
                    <oldparam id="CWE.487.AF.CHECK_PUBLIC_IN_CHILD_CLASS" name="CHECK_PUBLIC_IN_CHILD_CLASS" value="Check member class"/>
                    <oldparam id="CWE.487.AF.CHECK_PACKAGE_IN_TOP_LEVEL_CLASS" name="CHECK_PACKAGE_IN_TOP_LEVEL_CLASS" value="Check top-level class"/>
                    <oldparam id="CWE.487.AF.CHECK_PROTECTED_IN_CHILD_CLASS" name="CHECK_PROTECTED_IN_CHILD_CLASS" value="Check member class"/>
                    <oldparam id="CWE.487.AF.CHECK_PUBLIC_IN_TOP_LEVEL_CLASS" name="CHECK_PUBLIC_IN_TOP_LEVEL_CLASS" value="Check top-level class"/>
                    <oldparam id="CWE.487.AF.CHECK_PACKAGE_IN_CHILD_CLASS" name="CHECK_PACKAGE_IN_CHILD_CLASS" value="Check member class"/>
                    <oldparam id="CWE.487.AF.CHECK_PROTECTED_IN_TOP_LEVEL_CLASS" name="CHECK_PROTECTED_IN_TOP_LEVEL_CLASS" value="Check top-level class"/>
                    <oldparam id="CWE.487.AF.WHAT_TO_CHECK" name="WHAT_TO_CHECK" value="What to Check"/>
                    <oldparam id="CWE.487.AF.ACCESSIBILITY" name="ACCESSIBILITY" value="Accessibility"/>
                </oldparameters>
                <parameters>
                    <group collapsible="false" id="CWE.487.AF.group.0" label="What to Check">
                        <param defaultValue="true" id="CWE.487.AF.CHECK_INSTANCE" inputType="checkbox" label="Check instance fields."/>
                        <param defaultValue="true" id="CWE.487.AF.CHECK_STATIC" inputType="checkbox" label="Check non-final &quot;static&quot; fields."/>
                    </group>
                    <group collapsible="false" id="CWE.487.AF.group.1" label="Accessibility">
                        <param defaultValue="true" id="CWE.487.AF.OOP.APF" inputType="checkbox" label="Check &quot;public&quot; field">
                            <param defaultValue="true" id="CWE.487.AF.CHECK_PUBLIC_IN_TOP_LEVEL_CLASS" inputType="checkbox" label="Check top-level class"/>
                            <param defaultValue="true" id="CWE.487.AF.CHECK_PUBLIC_IN_CHILD_CLASS" inputType="checkbox" label="Check member class"/>
                        </param>
                        <param defaultValue="false" id="CWE.487.AF.OOP.APROF" inputType="checkbox" label="Check &quot;protected&quot; field">
                            <param defaultValue="true" id="CWE.487.AF.CHECK_PROTECTED_IN_TOP_LEVEL_CLASS" inputType="checkbox" label="Check top-level class"/>
                            <param defaultValue="true" id="CWE.487.AF.CHECK_PROTECTED_IN_CHILD_CLASS" inputType="checkbox" label="Check member class"/>
                        </param>
                        <param defaultValue="false" id="CWE.487.AF.OOP.APPF" inputType="checkbox" label="Check package-private field">
                            <param defaultValue="true" id="CWE.487.AF.CHECK_PACKAGE_IN_TOP_LEVEL_CLASS" inputType="checkbox" label="Check top-level class"/>
                            <param defaultValue="true" id="CWE.487.AF.CHECK_PACKAGE_IN_CHILD_CLASS" inputType="checkbox" label="Check member class"/>
                        </param>
                    </group>
                </parameters>
            </rule>
         </category>
         <category description="CWE-457: Use of Uninitialized Variable" name="457">
            <rule class="com.parasoft.jtest.standards.rules.builtin.INIT.UIRC" header="Avoid uninitialized reads of fields before or during constructor execution" id="UIRC" originalId="INIT.UIRC" scope="LINE" severity="1" since="6.0">
                <messages>
                    <msg index="1" value="Field ''{0}'' is not initialized by the time of this read access."/>
                    <msg index="2" value="Field ''{0}'' is not explicitly initialized by the time of this read access."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.457.UIRC.CHECK_NON_STATIC" name="CHECK_NON_STATIC" value="Check non-static fields."/>
                    <oldparam id="CWE.457.UIRC.MAX_CHECKING_LEVEL" name="MAX_CHECKING_LEVEL" value="Maximum level of checking allowed"/>
                    <oldparam id="CWE.457.UIRC.CHECK_STATIC" name="CHECK_STATIC" value="Check static fields."/>
                    <oldparam id="CWE.457.UIRC.IGNORE_PRIMITIVE" name="IGNORE_PRIMITIVE" value="Ignore fields of primitive types."/>
                </oldparameters>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/457.html" name="CWE">457</reference>
                </references>
                <parameters>
                    <param defaultValue="4" id="CWE.457.UIRC.MAX_CHECKING_LEVEL" inputType="integer" label="Maximum level of checking allowed" min="1"/>
                    <param defaultValue="true" id="CWE.457.UIRC.CHECK_NON_STATIC" inputType="checkbox" label="Check non-static fields."/>
                    <param defaultValue="true" id="CWE.457.UIRC.CHECK_STATIC" inputType="checkbox" label="Check static fields."/>
                    <param defaultValue="false" id="CWE.457.UIRC.IGNORE_PRIMITIVE" inputType="checkbox" label="Ignore fields of primitive types."/>
                </parameters>
            </rule>
         </category>
         <category description="CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" name="89">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.UPS" header="Use 'prepareCall' or 'prepareStatement' instead of 'createStatement'" id="UPS" originalId="SECURITY.IBA.UPS" scope="LINe" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="Consider using 'prepareCall()' or 'prepareStatement()' to prevent SQL injection vulnerabilities"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for SQL Injection p. 121</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A1" name="OWASP-2010">A1-Injection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/89.html" name="CWE">89</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-252: Unchecked Return Value" name="252">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CRRV" header="Check the return value of methods which read or skip input" id="CRRV" originalId="PB.LOGIC.CRRV" scope="LINE" severity="3" since="8.0">
                    <messages>
                        <msg index="1" value="The return value of this call to ''{0}()'' is not checked."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.252.CRRV.CHECKED_METHOD_LIST" name="CHECKED_METHOD_LIST" value="Methods to be checked: \n(in form of &lt;fully qualified type name&gt;#&lt;method&gt;(&lt;parameter1 type&gt;,&lt;parameter2 type&gt;))"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/252.html" name="CWE">252</reference>
                    </references>
                    <parameters>
                        <param defaultValue="java.io.InputStream#read();java.io.InputStream#read(byte[]);java.io.InputStream#read(byte[],int,int);java.io.InputStream#skip(long);java.io.DataInput#skipBytes(int)" description="Methods to be checked: (in form of &lt;fully qualified type name&gt;#&lt;method&gt;(&lt;parameter1 type&gt;,&lt;parameter2 type&gt;))" id="CWE.252.CRRV.CHECKED_METHOD_LIST" inputType="stringList" label="Methods to be checked:" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-404: Improper Resource Shutdown or Release" name="404">
            <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.CRWD" header="Close resources as early as possible" id="CRWD" originalId="OPT.CRWD" scope="LINE" severity="3" since="8.0">
                <messages>
                    <msg index="1" value="It may be possible to move this call to &quot;close&quot; earlier in the method."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.404.CRWD.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
                    <oldparam id="CWE.404.CRWD.ADDITIONAL_CLOSE_METHODS" name="ADDITIONAL_CLOSE_METHODS" value="Additional resource closing methods (in regular expression)"/>
                    <oldparam id="CWE.404.CRWD.METHOD" name="METHOD" value="Method name"/>
                    <oldparam id="CWE.404.CRWD.TYPE" name="TYPE" value="Declaring type"/>
                </oldparameters>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE">404</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE">772</reference>
                </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.JDBC.ODBIL" header="Do not open or close JDBC connections in loops" id="ODBIL" originalId="JDBC.ODBIL" scope="LINE" severity="3" since="8.0">
                <messages>
                    <msg index="1" value="The method ''{0}'' opens a JDBC connection and is called in a loop."/>
                    <msg index="2" value="The method ''{0}'' closes a JDBC connection and is called in a loop."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.404.ODBIL.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
                    <oldparam id="CWE.404.ODBIL.ADDITIONAL_CLOSE_METHODS" name="ADDITIONAL_CLOSE_METHODS" value="Additional JDBC connection closing methods (in regular expression)"/>
                    <oldparam id="CWE.404.ODBIL.ADDITIONAL_OPEN_METHODS" name="ADDITIONAL_OPEN_METHODS" value="Additional JDBC connection opening methods (in regular expression)"/>
                    <oldparam id="CWE.404.ODBIL.METHOD" name="METHOD" value="Method name"/>
                    <oldparam id="CWE.404.ODBIL.TYPE" name="TYPE" value="Declaring type"/>
                </oldparameters>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE">404</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE">772</reference>
                </references>
                <parameters>
                    <param defaultValue="1" id="CWE.404.ODBIL.MAX_LEVEL" inputType="integer" label="Maximum level of checking allowed" min="0"/>
                    <!--param id="JDBC.ODBIL.ADDITIONAL_OPEN_METHODS" inputType="bigtext" defaultValue="" label="Additional JDBC connection opening methods (in regular expression)"/-->
                    <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.404.ODBIL.ADDITIONAL_OPEN_METHODS" label="Additional JDBC connection opening methods (in regular expression)" reader="SATable">
                        <columns>
                            <column columnType="text" defaultValue=".*" editable="true" id="JDBC__ODBIL__ADDITIONAL_OPEN_METHODS__COLUMN1" label="Declaring type" required="true"/>
                            <column columnType="text" defaultValue=".*" editable="true" id="JDBC__ODBIL__ADDITIONAL_OPEN_METHODS__COLUMN2" label="Method name" required="true"/>
                        </columns>
                    </complexParamTable>
                    <!--param id="JDBC.ODBIL.ADDITIONAL_CLOSE_METHODS" inputType="bigtext" defaultValue="" label="Additional JDBC connection closing methods (in regular expression)"/-->
                    <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.404.ODBIL.ADDITIONAL_CLOSE_METHODS" label="Additional JDBC connection closing methods (in regular expression)" reader="SATable">
                        <columns>
                            <column columnType="text" defaultValue=".*" editable="true" id="JDBC__ODBIL__ADDITIONAL_CLOSE_METHODS__COLUMN1" label="Declaring type" required="true"/>
                            <column columnType="text" defaultValue=".*" editable="true" id="JDBC__ODBIL__ADDITIONAL_CLOSE_METHODS__COLUMN2" label="Method name" required="true"/>
                        </columns>
                    </complexParamTable>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.JDBC.COCO" header="Close JDBC objects in the correct order." id="COCO" originalId="JDBC.COCO" scope="LINE" severity="3" since="8.0">
                <messages>
                    <msg index="1" value="Possible incorrect order: {0} ''{1}'' closed after {2} ''{3}''."/>
                </messages>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE">404</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE">772</reference>
                </references>
            </rule>
         </category>
         <category description="CWE-704: Incorrect Type Conversion or Cast" name="704">
            <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.CPTS" header="Do not convert a value to a String by concatenating the empty String." id="CPTS" originalId="OPT.CPTS" scope="LINE" severity="3" since="8.0">
                <messages>
                    <msg index="1" value="The value ''{0}'' is converted to a String here by concatenation with the empty String."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.704.CPTS.CHECK_TYPE" name="CHECK_TYPE" value="What to check"/>
                    <oldparam id="CWE.704.CPTS.CHECK_PRIMITIVE" name="CHECK_PRIMITIVE" value="Check primitive types"/>
                    <oldparam id="CWE.704.CPTS.CHECK_ALL" name="CHECK_ALL" value="Check all types"/>
                </oldparameters>
                <parameters>
                    <radioGroup id="CWE.704.CPTS.CHECK_TYPE" label="What to check" prevType="MultipleChoice" showLabel="true">
                        <radioItem label="Check all types" value="0"/>
                        <radioItem defaultValue="checked" label="Check primitive types" value="1"/>
                    </radioGroup>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.AGBPT" header="Avoid conversions from parameterized types to raw types" id="AGBPT" originalId="CODSTA.EPC.AGBPT" scope="LINE" severity="3" since="8.0">
                    <messages>
                        <msg index="1" value="Do not assign an expression with a parameterized type to a variable with a non-parameterized type."/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-571: Expression is Always True" name="571">
            <rule class="com.parasoft.jtest.standards.rules.builtin.UC.UCIF" header="Avoid unnecessary 'if' statements." id="UCIF" originalId="UC.UCIF" scope="LINE" severity="3">
                <messages>
                    <msg index="1" value="Unconditional &quot;if&quot; statement."/>
                    <msg index="2" value="Unconditionally true &quot;if&quot; statement."/>
                    <msg index="3" value="Unconditionally false &quot;if&quot; statement."/>
                </messages>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/563.html" name="CWE">563</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/570.html" name="CWE">570</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/571.html" name="CWE">571</reference>
                </references>
            </rule>
         </category>
         <category description="CWE-691: Insufficient Control Flow Management" name="691">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.ANL" header="Avoid using negative logic in if-else statement" id="ANL" originalId="CODSTA.READ.ANL" scope="LINE" severity="4" since="6.0">
                    <messages>
                        <msg index="1" value="Negative logic is used in if-else logic, revising the logic is suggested."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.691.ANL.IGNORE_SPECIAL_CASES" name="IGNORE_SPECIAL_CASES" value="Ignore special cases (see rule description for definition)"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="CWE.691.ANL.IGNORE_SPECIAL_CASES" inputType="checkbox" label="Ignore special cases (see rule description for definition)"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" name="80">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ARXML" header="Process XML and HTML with a library instead of raw text " id="ARXML" originalId="SECURITY.WSC.ARXML" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="''{0}'' is processed using raw text instead of a library"/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/80.html" name="CWE">80</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/81.html" name="CWE">81</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-607: Public Static Final Field References Mutable Object" name="607">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.RMO" header="Avoid referencing mutable fields" id="RMO" originalId="PB.CUB.RMO" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="''{0}'' is a mutable field."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.607.RMO.STATIC_FINAL_FIELD_ONLY" name="STATIC_FINAL_FIELD_ONLY" value="Check &quot;static final&quot; fields only"/>
                        <oldparam id="CWE.607.RMO.ACCESSIBILITY_LABEL" name="ACCESSIBILITY_LABEL" value="Check fields of accessibility"/>
                        <oldparam id="CWE.607.RMO.PUBLIC_FIELD" name="PUBLIC_FIELD" value="public"/>
                        <oldparam id="CWE.607.RMO.PROTECTED_FIELD" name="PROTECTED_FIELD" value="protected"/>
                        <oldparam id="CWE.607.RMO.PACKAGE_FIELD" name="PACKAGE_FIELD" value="package-private"/>
                        <oldparam id="CWE.607.RMO.PRIVATE_FIELD" name="PRIVATE_FIELD" value="private"/>
                        <oldparam id="CWE.607.RMO.IGNORE_LIST" name="IGNORE_LIST" value="Ignore fields of the following classes: (Glob expression)"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="false" id="CWE.607.RMO.STATIC_FINAL_FIELD_ONLY" inputType="checkbox" label="Check &quot;static final&quot; fields only"/>
                        <group collapsible="false" id="CWE.607.RMO.group.0" label="Check fields of accessibility">
                            <param defaultValue="true" id="CWE.607.RMO.PUBLIC_FIELD" inputType="checkbox" label="public"/>
                            <param defaultValue="false" id="CWE.607.RMO.PROTECTED_FIELD" inputType="checkbox" label="protected"/>
                            <param defaultValue="false" id="CWE.607.RMO.PACKAGE_FIELD" inputType="checkbox" label="package-private"/>
                            <param defaultValue="false" id="CWE.607.RMO.PRIVATE_FIELD" inputType="checkbox" label="private"/>
                        </group>
                        <param defaultValue="java.lang.System;java.util.Locale" id="CWE.607.RMO.IGNORE_LIST" inputType="stringList" label="Ignore fields of the following classes: (Glob expression)" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.IMM" header="Ensure &quot;static&quot; &quot;final&quot; fields are immutable." id="IMM" originalId="PB.CUB.IMM" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="&quot;static&quot; &quot;final&quot; field ''{0}'' of ''{1}'' type is mutable."/>
                        <msg index="2" value="&quot;static&quot; &quot;final&quot; field ''{0}'' of ''{1}'' type is mutable, since array elements could be modified even if the array is declared as &quot;final&quot;."/>
                        <msg index="3" value="&quot;static&quot; mutable field ''{0}'' of ''{1}'' type is not declared &quot;private&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.607.IMM.CHECK_PRIVATE" name="CHECK_PRIVATE" value="Check &quot;static&quot; mutable fields are declared &quot;private&quot;"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="false" id="CWE.607.IMM.CHECK_PRIVATE" inputType="checkbox" label="Report mutable non-final &quot;static&quot; fields that are not declared &quot;private&quot;"/>
                        <param defaultValue="" id="CWE.607.IMM.IGNORE_TYPES" inputType="stringList" label="Ignore types"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-390: Detection of Error Condition Without Action" name="390">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.UEHL.LGE" header="Ensure all exceptions are either logged with a standard logger or rethrown" id="LGE" originalId="SECURITY.UEHL.LGE" scope="LINE" severity="2" since="6.0">
                    <messages>
                        <msg index="1" value="The exception is not logged in the &quot;catch&quot; clause."/>
                        <msg index="2" value="The exception is neither logged nor rethrown in the &quot;catch&quot; clause."/>
                        <msg index="3" value="The exception is neither logged nor rethrown in the &quot;catch&quot; clause. Add a comment to the clause if this is expected."/>
                        <msg index="4" value="The ''{0}'' exception is not passed to the logging method called in the &quot;catch&quot; clause."/>
                        <msg index="5" value="The information passed from the ''{0}'' exception to the logging method may be incomplete."/>
                        <msg index="6" value="The ''{0}'' exception is not rethrown in the &quot;catch&quot; block or passed to the new exception as an argument."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.390.LGE.FLAG_LEVEL" name="FLAG_LEVEL" value="Catch clause should contain:"/>
                        <oldparam id="CWE.390.LGE.FLAG_IF_NO_LOG" name="FLAG_IF_NO_LOG" value="Logging method."/>
                        <oldparam id="CWE.390.LGE.FLAG_IF_NO_LOG_AND_THROW" name="FLAG_IF_NO_LOG_AND_THROW" value="Logging method or exception rethrow statement."/>
                        <oldparam id="CWE.390.LGE.FLAG_IF_NO_LOG_AND_THROW_AND_COMMENT" name="FLAG_IF_NO_LOG_AND_THROW_AND_COMMENT" value="Logging method, comment or exception rethrow statement."/>
                        <oldparam id="CWE.390.LGE.LOG_METHOD_EXPRESSION" name="LOG_METHOD_EXPRESSION" value="Logging method name in regular expression"/>
                        <oldparam id="CWE.390.LGE.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                        <oldparam id="CWE.390.LGE.CHECK_EXCEPT_LOGGED" name="CHECK_EXCEPT_LOGGED" value="Check that the exception is passed into the logging method call"/>
                        <oldparam id="CWE.390.LGE.IGNORE_LIST" name="IGNORE_LIST" value="Ignore exception variables matching the following regular expression(s):"/>
                        <oldparam id="CWE.390.LGE.LOGGERS_TAB" name="LOGGERS_TAB" value="Loggers"/>
                        <oldparam id="CWE.390.LGE.IGNORE_LIST_TAB" name="IGNORE_LIST_TAB" value="Ignore List"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/390.html" name="CWE">390</reference>
                    </references>
                    <parameters>
                        <group collapsible="false" id="CWE.390.LGE.tab.LOGGERS_TAB" label="Loggers">
                            <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger;org.apache.logging.log4j.Logger;org.slf4j.Logger" id="CWE.390.LGE.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                            <param defaultValue="^log.*" id="CWE.390.LGE.LOG_METHOD_EXPRESSION" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                        </group>
                        <group collapsible="false" id="CWE.390.LGE.tab.IGNORE_LIST_TAB" label="Ignore List">
                            <param defaultValue="^ignore$" id="CWE.390.LGE.IGNORE_LIST" inputType="stringList" label="Ignore exception variables matching the following regular expression(s):" prevType="StringList"/>
                        </group>
                        <radioGroup id="CWE.390.LGE.FLAG_LEVEL" label="Catch clause should contain:" prevType="MultipleChoice" showLabel="true">
                            <radioItem label="Logging method." value="0"/>
                            <radioItem defaultValue="checked" label="Logging method or &quot;throw&quot; exception statement." value="1"/>
                            <radioItem label="Logging method, comment, or &quot;throw&quot; exception statement." value="2"/>
                        </radioGroup>
                        <param defaultValue="false" id="CWE.390.LGE.CHECK_EXCEPT_LOGGED" inputType="checkbox" label="Check if the exception is passed into the logging method call"/>
                        <param defaultValue="false" id="CWE.390.LGE.CHECK_EXCEPT_FULL_PASSED" inputType="checkbox" label="Check if the exception passed to the logging method is complete"/>
                        <param defaultValue="false" id="CWE.390.LGE.CHECK_EXCEPT_THROW" inputType="checkbox" label="Check if the caught exception is passed to a new exception or rethrown"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-456: Missing Initialization of a Variable" name="456">
            <rule class="com.parasoft.jtest.standards.rules.builtin.INIT.LV" header="Initialize all local variables explicitly at the declaration statement" id="LV" originalId="INIT.LV" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Local variable not initialized: {0}"/>
                </messages>
            </rule>
         </category>
         <category description="CWE-306: Missing Authentication for Critical Function" name="306">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SSM" header="Ensure that an appropriate security manager is set" id="SSM" originalId="SECURITY.WSC.SSM" scope="LINe" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Security manager is missing, 'setSecurityManager' should be invoked"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authentication p. 66</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010">A3 - Broken Authentication and Session Management</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/180.html" name="CWE">180</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-583: finalize() Method Declared Public" name="583">
            <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.MFP" header="Give &quot;finalize()&quot; methods &quot;protected&quot; access." id="MFP" originalId="OOP.MFP" scope="LINE" severity="3" since="8.0">
                <messages>
                    <msg index="1" value="This &quot;finalize()&quot; method has &quot;public&quot; access"/>
                </messages>
            </rule>
         </category>
         <category description="CWE-311: Missing Encryption of Sensitive Data" name="311">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.USC" header="Use the SSL-enabled version of classes when possible." id="USC" originalId="SECURITY.WSC.USC" scope="LINE" severity="3" since="7.5">
                    <messages>
                        <msg index="1" value="Consider using the SSL-enabled type ''SSLServerSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="2" value="Consider using the SSL-enabled type ''SSLSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="3" value="Consider using the SSL-enabled type ''HttpsURLConnection'' for the {0} ''{1}''."/>
                        <msg index="4" value="Consider using the SSL-enabled type ''SslRMIClientSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="5" value="Consider using the SSL-enabled type ''SslRMIServerSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="6" value="Consider using the SSL-enabled type ''SSLSocket'' for the {0} ''{1}''."/>
                        <msg index="7" value="Consider using the SSL-enabled type ''SSLServerSocket'' for the {0} ''{1}''."/>
                        <msg index="8" value="Consider using the SSL-enabled type ''SSLPermission'' for the {0} ''{1}''."/>
                    </messages>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010">A9-Insufficient Transport Layer Protection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/494.html" name="CWE">494</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-427: Uncontrolled Search Path Element" name="427">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PBRTE" header="Always specify absolute paths to execute commands" id="PBRTE" originalId="SECURITY.WSC.PBRTE" scope="LINE" severity="1" since="10.4.3">
                    <messages>
                        <msg index="1" value="The specified command is not an absolute path with separators"/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-321: Use of Hard-coded Cryptographic Key" name="321">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HCCK" header="Avoid using hard-coded cryptographic keys" id="HCCK" originalId="SECURITY.WSC.HCCK" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Hard-coded cryptographic key here."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.321.HCCK.MIN_LENGTH" name="MIN_LENGTH" value="Check keys whose length is greater than "/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/321.html" name="CWE">321</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/506.html" name="CWE">506</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/759.html" name="CWE">759</reference>
                    </references>
                    <parameters>
                        <param defaultValue="9" id="CWE.321.HCCK.MIN_LENGTH" inputType="integer" label="Check keys whose length is greater than " min="9"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-594: J2EE Framework: Saving Unserializable Objects to Disk" name="594">
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.SIVS" header="Ensure instance variables of @Stateful beans are Serializable." id="SIVS" originalId="EJB.EJB3.SIVS" scope="LINE" severity="2" since="8.4">
                    <messages>
                        <msg index="1" value="Instance variable ''{0}'' of @Stateful bean ''{1}'' is not Serializable."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.594.SIVS.CHECK_FOLLOWING" name="CHECK_FOLLOWING" value="Check the following:"/>
                        <oldparam id="CWE.594.SIVS.CHECK_ANNOTATIONS" name="CHECK_ANNOTATIONS" value="Check annotations"/>
                        <oldparam id="CWE.594.SIVS.CHECK_BOTH" name="CHECK_BOTH" value="Check annotations and deployment descriptors"/>
                        <oldparam id="CWE.594.SIVS.SCAN_TYPE" name="SCAN_TYPE" value="Check deployment descriptors in the following location:"/>
                        <oldparam id="CWE.594.SIVS.SCAN_TYPE_PROJECT" name="SCAN_TYPE_PROJECT" value="Check project"/>
                        <oldparam id="CWE.594.SIVS.SCAN_TYPE_PACKAGE" name="SCAN_TYPE_PACKAGE" value="Check package"/>
                    </oldparameters>
                    <parameters>
                        <radioGroup id="CWE.594.SIVS.CHECK_FOLLOWING" label="Check the following:" prevType="MultipleChoice" showLabel="true">
                            <radioItem label="Check annotations" value="0"/>
                            <radioItem defaultValue="checked" label="Check annotations and deployment descriptors" value="1">
                                <radioGroup id="CWE.594.SIVS.SCAN_TYPE" label="Check deployment descriptors in the following location:" prevType="MultipleChoice" showLabel="true">
                                    <radioItem defaultValue="checked" label="Check project" value="0"/>
                                    <radioItem label="Check package" value="1"/>
                                </radioGroup>
                            </radioItem>
                        </radioGroup>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-841: Improper Enforcement of Behavioral Workflow" name="841">
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.PERMIT" header="Avoid EJB 3 methods without security annotations" id="PERMIT" originalId="EJB.EJB3.PERMIT" scope="LINE" severity="1" since="9.2">
                    <messages>
                        <msg index="1" value="Method without permit (@RolesAllowed, @PermitAll, @DenyAll) annotations."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authorization p. 73</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A4" name="OWASP-2010">A4-Insecure Direct Object Reference</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A8" name="OWASP-2010">A8-Failure to Restrict URL Access</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/862.html" name="CWE">862</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/863.html" name="CWE">863</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag" name="1004">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SCHTTP" header="Mark cookies as HttpOnly" id="SCHTTP" originalId="SECURITY.WSC.SCHTTP" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The cookie is not marked as 'HttpOnly'."/>
                        <msg index="2" value="The cookie is not marked as 'HttpOnly'. Call setHttpOnly(true) on the cookie object (available since Java Servlet 3.0)."/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-484: Omitted Break Statement in Switch" name="484">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.SBC" header="Do not use a &quot;switch&quot; statement with a bad &quot;case&quot;" id="SBC" originalId="PB.CUB.SBC" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="&quot;{0}&quot; is missing either &quot;break&quot;, &quot;return&quot;, or &quot;/* falls through */&quot;."/>
                        <msg index="2" value="&quot;default&quot; case is missing either &quot;break&quot;, &quot;return&quot;, or &quot;/* falls through */&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.484.SBC.IGNORE_LAST_SWITCH_CASE" name="IGNORE_LAST_SWITCH_CASE" value="Ignore last &quot;switch&quot; case"/>
                        <oldparam id="CWE.484.SBC.IGNORE_EMPTY" name="IGNORE_EMPTY" value="Ignore &quot;case&quot; statements with empty bodies"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/484.html" name="CWE">484</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CWE.484.SBC.IGNORE_LAST_SWITCH_CASE" inputType="checkbox" label="Ignore last &quot;switch&quot; case"/>
                        <param defaultValue="true" id="CWE.484.SBC.IGNORE_EMPTY" inputType="checkbox" label="Ignore &quot;case&quot; statements with empty bodies"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.DAV" header="Avoid assigning same variable in the fall-through switch case." id="DAV" originalId="PB.TYPO.DAV" scope="LINE" severity="3" since="8.2">
                    <messages>
                        <msg index="1" value="variable ''{0}'' has been assigned in previous switch case."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/484.html" name="CWE">484</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-500: Public Static Field Not Marked Final" name="500">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.SPFF" header="Inspect 'static' fields which may have intended to be declared 'static final'." id="SPFF" originalId="SECURITY.EAB.SPFF" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Field ''{0}'' may have been intended to be &quot;static final&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.500.SPFF.ACCESSIBILITY" name="ACCESSIBILITY" value="Check fields of accessibility"/>
                        <oldparam id="CWE.500.SPFF.PUBLIC_FIELD" name="PUBLIC_FIELD" value="public"/>
                        <oldparam id="CWE.500.SPFF.PROTECTED_FIELD" name="PROTECTED_FIELD" value="protected"/>
                        <oldparam id="CWE.500.SPFF.PACKAGE_FIELD" name="PACKAGE_FIELD" value="package-private"/>
                        <oldparam id="CWE.500.SPFF.PRIVATE_FIELD" name="PRIVATE_FIELD" value="private"/>
                        <oldparam id="CWE.500.SPFF.CHECK_SCOPE" name="CHECK_SCOPE" value="Check fields of type"/>
                        <oldparam id="CWE.500.SPFF.PRIMITIVE_CHECK" name="PRIMITIVE_CHECK" value="primitive type"/>
                        <oldparam id="CWE.500.SPFF.PRIMITIVE_WRAPPER_CHECK" name="PRIMITIVE_WRAPPER_CHECK" value="primitive wrapper type"/>
                        <oldparam id="CWE.500.SPFF.STRING_CHECK" name="STRING_CHECK" value="java.lang.String"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Java leading security practice p. 170</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/500.html" name="CWE">500</reference>
                    </references>
                    <parameters>
                        <group collapsible="false" id="CWE.500.SPFF.group.1" label="Check fields of accessibility">
                            <param defaultValue="true" id="CWE.500.SPFF.PUBLIC_FIELD" inputType="checkbox" label="public"/>
                            <param defaultValue="false" id="CWE.500.SPFF.PROTECTED_FIELD" inputType="checkbox" label="protected"/>
                            <param defaultValue="false" id="CWE.500.SPFF.PACKAGE_FIELD" inputType="checkbox" label="package-private"/>
                            <param defaultValue="false" id="CWE.500.SPFF.PRIVATE_FIELD" inputType="checkbox" label="private"/>
                        </group>
                        <group collapsible="false" id="CWE.500.SPFF.group.0" label="Check fields of type">
                            <param defaultValue="true" id="CWE.500.SPFF.PRIMITIVE_CHECK" inputType="checkbox" label="primitive type"/>
                            <param defaultValue="true" id="CWE.500.SPFF.PRIMITIVE_WRAPPER_CHECK" inputType="checkbox" label="primitive wrapper type"/>
                            <param defaultValue="true" id="CWE.500.SPFF.STRING_CHECK" inputType="checkbox" label="java.lang.String"/>
                        </group>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-359: Exposure of Private Personal Information to an Unauthorized Actor" name="359">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.CONSEN" header="Do not log confidential or sensitive information" id="CONSEN" originalId="SECURITY.ESD.CONSEN" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="''{0}'' should not be used by a logger, it can expose confidential info."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.359.CONSEN.SUSPICIOUS_WORDS" name="SUSPICIOUS_WORDS" value="Regular expressions representing sensive data:"/>
                        <oldparam id="CWE.359.CONSEN.LOG_METHOD_EXPRESSIONS" name="LOG_METHOD_EXPRESSIONS" value="Logging method name in regular expression"/>
                        <oldparam id="CWE.359.CONSEN.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/533.html" name="CWE">533</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/534.html" name="CWE">534</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*ssn.*@delim@.*pass.*" id="CWE.359.CONSEN.SUSPICIOUS_WORDS" inputType="stringList" label="Regular expressions representing sensive data:" prevType="StringList"/>
                        <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="CWE.359.CONSEN.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                        <param defaultValue=".*log.*" id="CWE.359.CONSEN.LOG_METHOD_EXPRESSIONS" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-652: Improper Neutralization of Data within XQuery Expressions ('XQuery Injection')" name="652">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.XPIJ" header="Avoid XPath injection when evaluating XPath queries" id="XPIJ" originalId="SECURITY.IBA.XPIJ" scope="LINE" severity="1" since="8.4">
                    <messages>
                        <msg index="1" value="Avoid using variable ''{0}'' in XPath query."/>
                        <msg index="2" value="'XPathVariableResolver' is not set in XPath variable ''{0}''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.652.XPIJ.CHECK_VAR_RESOLVER" name="CHECK_VAR_RESOLVER" value="Check if 'XPathVariableResolver' is not set in XPath objects"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="CWE.652.XPIJ.CHECK_VAR_RESOLVER" inputType="checkbox" label="Check if 'XPathVariableResolver' is not set in XPath objects"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-481: Assigning instead of Comparing" name="481">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ASI" header="Avoid assignment within a condition" id="ASI" originalId="PB.TYPO.ASI" scope="LINE" severity="1" since="4.5">
                    <messages>
                        <msg index="1" value="Assignment within an &quot;if&quot; condition."/>
                        <msg index="2" value="Assignment within a loop condition."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.481.ASI.CHECK_BOOLEAN_ONLY" name="CHECK_BOOLEAN_ONLY" value="Flag assignments to &quot;boolean&quot; objects only"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Java gotchas p. 164</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/481.html" name="CWE">481</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CWE.481.ASI.CHECK_BOOLEAN_ONLY" inputType="checkbox" label="Flag assignments to &quot;boolean&quot; objects only"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-617: Reachable Assertion" name="617">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.ASSERT" header="Do not use assertions in production code" id="ASSERT" originalId="CODSTA.ORG.ASSERT" scope="LINE" severity="3" since="10.4">
                    <messages>
                        <msg index="1" value="'assert' statement should not be used in production code."/>
                    </messages>
                    <parameters>
                        <param defaultValue="true" id="CWE.617.ASSERT.PUBLIC_METHOD_ONLY" inputType="checkbox" label="Check only public methods"/>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-806: Buffer Access Using Size of Source Buffer" name="806">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.BUSSB" header="Prevent external processes from blocking on output or error streams" id="BUSSB" originalId="SECURITY.WSC.BUSSB" scope="LINE" severity="3" since="10.4.3">
                    <messages>
                        <msg index="1" value="The error stream of the process is not emptied or redirected"/>
                        <msg index="2" value="The output stream of the process is not emptied or redirected"/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-605: Multiple Binds to the Same Port" name="605">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PORT.HCNA" header="Do not hard-code IP addresses and port numbers." id="HCNA" originalId="PORT.HCNA" scope="LINE" severity="3" since="9.0">
                <messages>
                    <msg index="1" value="Hard-coded IP address ''{0}''."/>
                    <msg index="2" value="Hard-coded port number ''{0}''."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.605.HCNA.IP" name="IP" value="Do not hard-code IP addresses"/>
                    <oldparam id="CWE.605.HCNA.PORT" name="PORT" value="Do not hard-code port numbers"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="true" id="CWE.605.HCNA.IP" inputType="checkbox" label="Do not hard-code IP addresses"/>
                    <param defaultValue="true" id="CWE.605.HCNA.PORT" inputType="checkbox" label="Do not hard-code port numbers"/>
                </parameters>
            </rule>
         </category>
         <category description="CWE-198: Use of Incorrect Byte Ordering" name="198">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.NUM.PMRWLED" header="Provide methods to read and write little-endian data" id="PMRWLED" originalId="PB.NUM.PMRWLED" scope="LINE" severity="4" since="2021.1">
                    <messages>
                        <msg index="1" value="The ''{0}'' is insecure, because it cannot handle little-endian data."/>
                    </messages>
                </rule>
         </category>
         <category description="CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" name="79">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ARXML" header="Process XML and HTML with a library instead of raw text " id="ARXML" originalId="SECURITY.WSC.ARXML" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="''{0}'' is processed using raw text instead of a library"/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/80.html" name="CWE">80</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/81.html" name="CWE">81</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-585: Empty Synchronized Block" name="585">
            <rule class="com.parasoft.jtest.standards.rules.builtin.UC.SNE" header="Avoid empty &quot;synchronized&quot; statements." id="SNE" originalId="UC.SNE" scope="line" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Avoid empty synchronized statement."/>
                </messages>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/585.html" name="CWE">585</reference>
                </references>
            </rule>
         </category>
         <category description="CWE-413: Improper Resource Locking" name="413">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.LORD" header="Ensure that nested locks are ordered correctly" id="LORD" originalId="TRS.LORD" scope="LINE" severity="2" since="9.0">
                <messages>
                    <msg index="1" value="Lock ''{0}'' should not be wrapped by lock ''{1}''."/>
                </messages>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/832.html" name="CWE">832</reference>
                </references>
            </rule>
         </category>
         <category description="CWE-778: Insufficient Logging" name="778">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.ENFL" header="Ensure all sensitive method invocations are logged" id="ENFL" originalId="SECURITY.BV.ENFL" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="''{0}'' is invoked without being logged in the previous statement."/>
                        <msg index="2" value="''{0}'' is invoked without being logged in the next statement."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.778.ENFL.LOG_TAG" name="LOG_TAG" value="Loggers"/>
                        <oldparam id="CWE.778.ENFL.PRE_LOG_METHODS" name="PRE_LOG_METHODS" value="Method invocations that need logging in previous statement"/>
                        <oldparam id="CWE.778.ENFL.LOG_METHOD_EXPRESSIONS" name="LOG_METHOD_EXPRESSIONS" value="Logging method name in regular expression"/>
                        <oldparam id="CWE.778.ENFL.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                        <oldparam id="CWE.778.ENFL.POST_LOG_TAG" name="POST_LOG_TAG" value="Next statement"/>
                        <oldparam id="CWE.778.ENFL.METHOD" name="METHOD" value="Method"/>
                        <oldparam id="CWE.778.ENFL.PRE_LOG_TAG" name="PRE_LOG_TAG" value="Previous statement"/>
                        <oldparam id="CWE.778.ENFL.POST_LOG_METHODS" name="POST_LOG_METHODS" value="Method invocations that need logging in next statement"/>
                        <oldparam id="CWE.778.ENFL.TYPE" name="TYPE" value="Type"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                    </references>
                    <parameters>
                        <group collapsible="false" id="CWE.778.ENFL.tab.PRE_LOG_TAG" label="Previous statement">
                            <!--param id="SECURITY.BV.ENFL.PRE_LOG_METHODS" inputType="bigtext" defaultValue="true;javax.security.auth.login.LoginContext;false;login;false;true;javax.security.auth.Subject;false;doAs;false;true;javax.security.auth.Subject;false;doAsPrivileged;false" label="Method invocations that need logging in previous statement"/-->
                            <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.778.ENFL.PRE_LOG_METHODS" label="Method invocations that need logging in previous statement" reader="SATable">
                                <columns>
                                    <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" label="Type" required="true"/>
                                    <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" label="Method" required="true"/>
                                </columns>
                                <predefinedRows>
                                    <row id="1">
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" value="javax.security.auth.login.LoginContext"/>
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" value="login"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" value="javax.security.auth.Subject"/>
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" value="doAs"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" value="javax.security.auth.Subject"/>
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" value="doAsPrivileged"/>
                                    </row>
                                </predefinedRows>
                            </complexParamTable>
                        </group>
                        <group collapsible="false" id="CWE.778.ENFL.tab.POST_LOG_TAG" label="Next statement">
                            <!--param id="SECURITY.BV.ENFL.POST_LOG_METHODS" inputType="bigtext" defaultValue="true;javax.security.auth.login.LoginContext;false;logout;false" label="Method invocations that need logging in next statement"/-->
                            <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.778.ENFL.POST_LOG_METHODS" label="Method invocations that need logging in next statement" reader="SATable">
                                <columns>
                                    <column columnType="text" defaultValue="unknown" editable="false" id="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN1" label="Type" required="true"/>
                                    <column columnType="text" defaultValue="unknown" editable="false" id="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN2" label="Method" required="true"/>
                                </columns>
                                <predefinedRows>
                                    <row id="1">
                                        <column refColumnId="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN1" value="javax.security.auth.login.LoginContext"/>
                                        <column refColumnId="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN2" value="logout"/>
                                    </row>
                                </predefinedRows>
                            </complexParamTable>
                        </group>
                        <group collapsible="false" id="CWE.778.ENFL.tab.LOG_TAG" label="Loggers">
                            <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="CWE.778.ENFL.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                            <param defaultValue="^log$" id="CWE.778.ENFL.LOG_METHOD_EXPRESSIONS" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                        </group>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-568: finalize() Method Without super.finalize()" name="568">
            <rule class="com.parasoft.jtest.standards.rules.builtin.GC.FCF" header="Call 'super.finalize()' from 'finalize()'." id="FCF" originalId="GC.FCF" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Missing call to ''super.finalize()'' in ''finalize()''."/>
                </messages>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/568.html" name="CWE">568</reference>
                </references>
            </rule>
         </category>
         <category description="CWE-478: Missing Default Case in Switch Statement" name="478">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.PDS" header="Provide &quot;default:&quot; for each &quot;switch&quot; statement" id="PDS" originalId="PB.PDS" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="&quot;switch&quot; is missing &quot;default:&quot; label."/>
                </messages>
            </rule>
         </category>
         <category description="CWE-667: Improper Locking" name="667">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CLOSE" header="Unrestricted lock resource" id="CLOSE" originalId="PB.CLOSE" scope="LINE" severity="1" since="9.2">
                <oldparameters>
                    <oldparam id="CWE.667.CLOSE.TABLE_HEADER" name="TABLE_HEADER" value="List of classes responsible for the resource and resource closing methods"/>
                    <oldparam id="CWE.667.CLOSE.CLASS_NAME_HEADER" name="CLASS_NAME_HEADER" value="Class name"/>
                    <oldparam id="CWE.667.CLOSE.METHOD_NAME_HEADER" name="METHOD_NAME_HEADER" value="Method name"/>
                </oldparameters>
                <messages>
                    <msg index="1" value="Variable ''{0}'' may not have a close resource."/>
                    <msg index="2" value="Variable ''{0}'' is rewrite without close resource."/>
                </messages>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE">404</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE">772</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/775.html" name="CWE">775</reference>
                </references>
                <parameters>
                    <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.667.CLOSE.TABLE_HEADER" label="List of classes responsible for the resource and resource closing methods" reader="SATable">
                        <columns>
                            <column columnType="text" editable="true" id="PB__CLOSE__TABLE_HEADER__COLUMN1" label="Class name" required="true"/>
                            <column columnType="text" editable="true" id="PB__CLOSE__TABLE_HEADER__COLUMN2" label="Method name" required="true"/>
                        </columns>
                        <predefinedRows>
                            <row id="1">
                                <column refColumnId="PB__CLOSE__TABLE_HEADER__COLUMN1" value="java.io.Closeable"/>
                                <column refColumnId="PB__CLOSE__TABLE_HEADER__COLUMN2" value="close"/>
                            </row>
                        </predefinedRows>
                    </complexParamTable>
                </parameters>
            </rule>
         </category>
         <category description="CWE-499: Serializable Class Containing Sensitive Data" name="499">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.SIF" header="Inspect instance fields of serializable objects to make sure they will not expose sensitive information" id="SIF" originalId="SECURITY.ESD.SIF" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Inspect field ''{0}'' to ensure it will not expose sensitive data."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.499.SIF.IGNORE_FINAL" name="IGNORE_FINAL" value="Ignore &quot;final&quot; fields"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/499.html" name="CWE">499</reference>
                    </references>
                    <parameters>
                        <param defaultValue="false" id="CWE.499.SIF.IGNORE_FINAL" inputType="checkbox" label="Ignore &quot;final&quot; fields"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SER" header="Make your classes nonserializeable." id="SER" originalId="SECURITY.WSC.SER" scope="CLASS" severity="5" since="4.5">
                    <messages>
                        <msg index="1" value="'writeObject()' method is missing"/>
                        <msg index="2" value="'writeObject()' method is not &quot;final&quot;."/>
                        <msg index="3" value="java.io.IOException is not thrown."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Java leading security practice p. 170</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/499.html" name="CWE">499</reference>
                    </references>
                </rule>
         </category>
         <category description="CWE-336: Same Seed in Pseudo-Random Number Generator (PRNG)" name="336">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ENPP" header="Ensure arguments passed to certain methods come from predefined methods list." id="ENPP" originalId="SECURITY.WSC.ENPP" scope="LINE" severity="2" since="9.2">
                    <messages>
                        <msg index="1" value="Argument number {0} passed to method ''{1}'' is not an allowed method call."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CWE.336.ENPP.PAIRS_TABLE_HEADER" name="PAIRS_TABLE_HEADER" value="Methods and arguments configuration"/>
                        <oldparam id="CWE.336.ENPP.PAIRS_TABLE_1ST" name="PAIRS_TABLE_1ST" value="Method to be checked (&lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,...)"/>
                        <oldparam id="CWE.336.ENPP.PAIRS_TABLE_INDEX" name="PAIRS_TABLE_INDEX" value="Argument Index to Check (''0''-based)"/>
                        <oldparam id="CWE.336.ENPP.PAIRS_TABLE_2ND" name="PAIRS_TABLE_2ND" value="Allowed method name (in Regular Expressions)"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/329.html" name="CWE">329</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/336.html" name="CWE">336</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/337.html" name="CWE">337</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE">676</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.336.ENPP.PAIRS_TABLE_HEADER" label="Methods and arguments configuration" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" label="Method to be checked (&lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,...)" required="true"/>
                                <column columnType="text" defaultValue="0" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" label="Argument Index to Check (''0''-based)" required="true" textSize="small"/>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" label="Allowed method name (in Regular Expressions)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#SecureRandom(byte[])"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#setSeed(byte[])"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#setSeed(long)"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="javax.crypto.spec.IvParameterSpec#IvParameterSpec(byte[])"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidIV"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="javax.crypto.spec.IvParameterSpec#IvParameterSpec(byte[],int,int)"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidIV"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-570: Expression is Always False" name="570">
            <rule class="com.parasoft.jtest.standards.rules.builtin.UC.UCIF" header="Avoid unnecessary 'if' statements." id="UCIF" originalId="UC.UCIF" scope="LINE" severity="3">
                <messages>
                    <msg index="1" value="Unconditional &quot;if&quot; statement."/>
                    <msg index="2" value="Unconditionally true &quot;if&quot; statement."/>
                    <msg index="3" value="Unconditionally false &quot;if&quot; statement."/>
                </messages>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/563.html" name="CWE">563</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/570.html" name="CWE">570</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/571.html" name="CWE">571</reference>
                </references>
            </rule>
         </category>
         <category description="CWE-59: Improper Link Resolution Before File Access ('Link Following')" name="59">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.FOLLOW" header="Ensure that file target paths retrieved by resolving symbolic links are safe" id="FOLLOW" originalId="SECURITY.WSC.FOLLOW" scope="LINE" severity="5" since="2020.2">
                    <messages>
                        <msg index="1" value="Verify that the path retrieved by using FileVisitOption.FOLLOW_LINKS is within the intended control sphere"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.LNK" header="Validate shortcut target paths before use" id="LNK" originalId="SECURITY.WSC.LNK" scope="LINE" severity="4" since="2020.2">
                    <messages>
                        <msg index="1" value="The value returned by resolveTarget() is not validated"/>
                    </messages>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CWE.59.LNK.VALIDATE_METHODS" label="Validating methods" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN1" label="Type (qualified name in regular expressions)" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN2" label="Method name (in regular expressions)" required="true"/>
                                <column columnType="checkbox" editable="true" id="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN3" label="Verify that resolveTarget() is checked by this method" required="true"/>
                                <column columnType="checkbox" editable="true" id="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN4" label="Verify that resolveTarget() is declared in this method" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN1" value=".*"/>
                                    <column refColumnId="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN2" value=".*[vV]alidate.*"/>
                                    <column refColumnId="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN3" value="true"/>
                                    <column refColumnId="SECURITY__WSC__LNK__CHECKED_METHODS__COLUMN4" value="true"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="CWE-578: EJB Bad Practices: Use of Class Loader" name="578">
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.ACL" header="Do not access, use, or create a class loader within a bean class." id="ACL" originalId="EJB.ACL" scope="LINE" severity="2" since="8.2">
                <messages>
                    <msg index="1" value="&quot;Class.getClassLoader()&quot; called within a bean class."/>
                    <msg index="2" value="ClassLoader method ''{0}'' called within a bean class."/>
                    <msg index="3" value="''{0}'' created within a bean class."/>
                    <msg index="4" value="Method ''{0}'' indirectly calls &quot;Class.getClassLoader()&quot;."/>
                    <msg index="5" value="Method ''{0}'' indirectly calls ClassLoader method."/>
                    <msg index="6" value="Method ''{0}'' indirectly creates a ClassLoader."/>
                </messages>
                <oldparameters>
                    <oldparam id="CWE.578.ACL.DEPTH" name="DEPTH" value="Maximum depth to check for ClassLoader usage"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="2" id="CWE.578.ACL.DEPTH" inputType="integer" label="Maximum depth to check for ClassLoader usage" max="5" min="1"/>
                </parameters>
            </rule>
         </category>
      </category>
      <category description="OWASP API Security Top 10 (2019)" name="OWASP2019">
         <category description="API3-Excessive Data Exposure" name="API3">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SCSER" header="Enforce 'SecurityManager' checks in methods of 'Serializable' classes" id="SCSER" originalId="SECURITY.WSC.SCSER" scope="METHOD" severity="1" since="8.4">
                    <messages>
                        <msg index="1" value="Missing 'SecurityManager' check in readObject() method."/>
                        <msg index="2" value="Missing 'SecurityManager' check in readObjectNoData() method."/>
                        <msg index="3" value="Missing 'SecurityManager' check in writeObject() method."/>
                        <msg index="4" value="Missing 'SecurityManager' check in constructor."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API3.SCSER.PARAM_LEVEL" name="PARAM_LEVEL" value="Maximum depth to look for 'SecurityManager' check"/>
                        <oldparam id="OWASP2019.API3.SCSER.SUPER_CLASS_CHECK" name="SUPER_CLASS_CHECK" value="Check indirect 'SecurityManager' checks in super constructor(s)"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/732.html" name="CWE">732</reference>
                    </references>
                    <parameters>
                        <param defaultValue="1" id="OWASP2019.API3.SCSER.PARAM_LEVEL" inputType="integer" label="Maximum depth to look for 'SecurityManager' check" min="0"/>
                        <param defaultValue="false" id="OWASP2019.API3.SCSER.SUPER_CLASS_CHECK" inputType="checkbox" label="Check indirect 'SecurityManager' checks in super constructor(s)"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.VRD" header="Encapsulate all redirect and forward URLs with a validation function" id="VRD" originalId="SECURITY.IBA.VRD" scope="LINE" severity="2" since="9.0">
                    <messages>
                        <msg index="1" value="No validation check in redirect URL."/>
                        <msg index="2" value="No validation check in forward URL."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API3.VRD.VALIDATE_METHODS" name="VALIDATE_METHODS" value="Validation methods (in regular expressions)\n[qualified name of declaring type#method name]"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Input Validation p. 81</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A10" name="OWASP-2010">A10-Unvalidated Redirects and Forwards</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/601.html" name="CWE">601</reference>
                    </references>
                    <parameters>
                        <param defaultValue="" description="Validation methods (in regular expressions) [qualified name of declaring type#method name]" id="OWASP2019.API3.VRD.VALIDATE_METHODS" inputType="stringList" label="Validation methods (in regular expressions)" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SCLONE" header="Enforce 'SecurityManager' checks in methods of 'Cloneable' classes" id="SCLONE" originalId="SECURITY.WSC.SCLONE" scope="METHOD" severity="1" since="8.4">
                    <messages>
                        <msg index="1" value="Missing 'SecurityManager' check in clone() method."/>
                        <msg index="2" value="Missing 'SecurityManager' check in constructor."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API3.SCLONE.PARAM_LEVEL" name="PARAM_LEVEL" value="Maximum depth to look for 'SecurityManager' checks"/>
                        <oldparam id="OWASP2019.API3.SCLONE.SUPER_CLASS_CHECK" name="SUPER_CLASS_CHECK" value="Check indirect 'SecurityManager' checks in super constructor(s)"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="1" id="OWASP2019.API3.SCLONE.PARAM_LEVEL" inputType="integer" label="Maximum depth to look for 'SecurityManager' checks" min="0"/>
                        <param defaultValue="false" id="OWASP2019.API3.SCLONE.SUPER_CLASS_CHECK" inputType="checkbox" label="Check indirect 'SecurityManager' checks in super constructor(s)"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.PEO" header="Do not pass exception messages into output in order to prevent the application from leaking sensitive information" id="PEO" originalId="SECURITY.ESD.PEO" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Print method ''{0}()'' is not allowed in a &quot;catch&quot; block."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API3.PEO.PRINT_METHOD_EXPRESSION" name="PRINT_METHOD_EXPRESSION" value="Print methods (Specify names in regular expressions)"/>
                        <oldparam id="OWASP2019.API3.PEO.EXCEPTIONS" name="EXCEPTIONS" value="Exceptions (Specify types and method names in regular expressions)"/>
                        <oldparam id="OWASP2019.API3.PEO.TYPE" name="TYPE" value="Type"/>
                        <oldparam id="OWASP2019.API3.PEO.METHOD" name="METHOD" value="Method"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/209.html" name="CWE">209</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/497.html" name="CWE">497</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*print.*;.*Print.*" id="OWASP2019.API3.PEO.PRINT_METHOD_EXPRESSION" inputType="stringList" label="Print methods (Specify names in regular expressions)" prevType="StringList"/>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2019.API3.PEO.EXCEPTIONS" label="Exceptions (Specify types and method names in regular expressions)" reader="SATable">
                            <columns>
                                <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" label="Type" required="true"/>
                                <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" label="Method" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" value="^java\.util\.logging\.Logger$"/>
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" value="^.*$"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" value="^org\.apache\.log4j\.Logger$"/>
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" value="^.*$"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.VSI" header="Properly validate server identity" id="VSI" originalId="SECURITY.WSC.VSI" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="SMTP SSL does not check server identity."/>
                        <msg index="2" value="SMTP SSL does not check server identity. Ensure the library version allows you to configure the required options."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PRMF" header="Declare the 'run()' method of 'PrivilegedAction' and 'PrivilegedExceptionAction' implementations &quot;final&quot;" id="PRMF" originalId="SECURITY.WSC.PRMF" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="&quot;run()&quot; method of class ''{0}'' should be declared &quot;final&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API3.PRMF.CHECK_PA" name="CHECK_PA" value="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <oldparam id="OWASP2019.API3.PRMF.CHECK_PEA" name="CHECK_PEA" value="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                        <oldparam id="OWASP2019.API3.PRMF.IGNORE_FINAL_CLASS" name="IGNORE_FINAL_CLASS" value="Ignore &quot;final&quot; classes"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="OWASP2019.API3.PRMF.CHECK_PA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <param defaultValue="true" id="OWASP2019.API3.PRMF.CHECK_PEA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                        <param defaultValue="true" id="OWASP2019.API3.PRMF.IGNORE_FINAL_CLASS" inputType="checkbox" label="Ignore &quot;final&quot; classes"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.TFP" header="Declare &quot;transient&quot; fields &quot;private&quot;." id="TFP" originalId="SECURITY.ESD.TFP" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="&quot;transient&quot; field ''{0}'' should be declared private"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PAF" header="Declare subclasses of 'PrivilegedAction', 'PrivilegedExceptionAction', and 'PrivilegedActionException' &quot;final&quot;" id="PAF" originalId="SECURITY.WSC.PAF" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Class ''{0}'' extends ''{1}'' and should be declared &quot;final&quot;."/>
                        <msg index="2" value="Class ''{0}'' implements ''{1}'' and should be declared &quot;final&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API3.PAF.CHECK_PAE" name="CHECK_PAE" value="Check subclasses of &quot;java.security.PrivilegedActionException&quot;"/>
                        <oldparam id="OWASP2019.API3.PAF.CHECK_PA" name="CHECK_PA" value="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <oldparam id="OWASP2019.API3.PAF.CHECK_PEA" name="CHECK_PEA" value="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                        <oldparam id="OWASP2019.API3.PAF.IGNORE_ENCLOSED_FINAL" name="IGNORE_ENCLOSED_FINAL" value="Ignore subclasses which are enclosed by a &quot;final&quot; outer class"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="OWASP2019.API3.PAF.CHECK_PA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <param defaultValue="true" id="OWASP2019.API3.PAF.CHECK_PEA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                        <param defaultValue="true" id="OWASP2019.API3.PAF.CHECK_PAE" inputType="checkbox" label="Check subclasses of &quot;java.security.PrivilegedActionException&quot;"/>
                        <param defaultValue="true" id="OWASP2019.API3.PAF.IGNORE_ENCLOSED_FINAL" inputType="checkbox" label="Ignore subclasses which are enclosed by a &quot;final&quot; outer class"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.PDLC" header="Avoid using dynamically loaded classes in &quot;privileged&quot; code blocks." id="PDLC" originalId="SECURITY.BV.PDLC" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Method ''{0}'' may dynamically load an untrusted class."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API3.PDLC.CHECK_PA" name="CHECK_PA" value="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <oldparam id="OWASP2019.API3.PDLC.CHECK_PEA" name="CHECK_PEA" value="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authorization p. 73</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="OWASP2019.API3.PDLC.CHECK_PA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedAction&quot;"/>
                        <param defaultValue="true" id="OWASP2019.API3.PDLC.CHECK_PEA" inputType="checkbox" label="Check implementations of &quot;java.security.PrivilegedExceptionAction&quot;"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.UOSC" header="Use the ''getSecure()'' and ''setSecure()'' methods to enforce the use of secure cookies." id="UOSC" originalId="SECURITY.WSC.UOSC" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="The ''Cookie'' variable ''{0}'' may be used without making sure that it is a secure cookie."/>
                        <msg index="2" value="Make sure that the appropriate version of library is used."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Session Management p. 78</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010">A3-Broken Authentication and Session Management</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A5" name="OWASP-2010">A5-Cross Site Request Forgery (CSRF)</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/614.html" name="CWE">614</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/352.html" name="CWE">352</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE">807</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.FOLLOW" header="Ensure that file target paths retrieved by resolving symbolic links are safe" id="FOLLOW" originalId="SECURITY.WSC.FOLLOW" scope="LINE" severity="5" since="2020.2">
                    <messages>
                        <msg index="1" value="Verify that the path retrieved by using FileVisitOption.FOLLOW_LINKS is within the intended control sphere"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SMSTR" header="Ensure 'SecurityManager' checks before 'Socket' transfers or retrievals" id="SMSTR" originalId="SECURITY.WSC.SMSTR" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Missing &quot;SecurityManager&quot; check before call to ''{0}''."/>
                    </messages>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010">A9-Insufficient Transport Layer Protection</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.dpxm.DPAM" header="Declare package-private methods as inaccessible as possible" id="DPAM" originalId="GLOBAL.DPAM" scope="METHOD" severity="2" type="global">
                <messages>
                    <msg index="1" value="Method ''{0}()'' should be declared {1}."/>
                    <msg index="2" value="Constructor ''{0}()'' should be declared {1}."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2019.API3.DPAM.CHECK_ANONYMOUS" name="CHECK_ANONYMOUS" value="Check methods in anonymous classes"/>
                    <oldparam id="OWASP2019.API3.DPAM.CHECK_LOCAL" name="CHECK_LOCAL" value="Check methods in local classes"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="false" id="OWASP2019.API3.DPAM.CHECK_ANONYMOUS" inputType="checkbox" label="Check methods in anonymous classes"/>
                    <param defaultValue="false" id="OWASP2019.API3.DPAM.CHECK_LOCAL" inputType="checkbox" label="Check methods in local classes"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PBPSF" header="Declare subclasses of 'Permission' and 'BasicPermission' &quot;final&quot;." id="PBPSF" originalId="SECURITY.WSC.PBPSF" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Class ''{0}'' extends ''{1}'' and should be declared &quot;final&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API3.PBPSF.CHECK_PERMISSION" name="CHECK_PERMISSION" value="Check subclasses of &quot;java.security.Permission&quot;"/>
                        <oldparam id="OWASP2019.API3.PBPSF.CHECK_BASICPERMISSION" name="CHECK_BASICPERMISSION" value="Check implementations of &quot;java.security.BasicPermission&quot;"/>
                        <oldparam id="OWASP2019.API3.PBPSF.IGNORE_ENCLOSED_FINAL" name="IGNORE_ENCLOSED_FINAL" value="Ignore subclasses which are enclosed by a &quot;final&quot; outer class"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="OWASP2019.API3.PBPSF.CHECK_PERMISSION" inputType="checkbox" label="Check subclasses of &quot;java.security.Permission&quot;"/>
                        <param defaultValue="true" id="OWASP2019.API3.PBPSF.CHECK_BASICPERMISSION" inputType="checkbox" label="Check implementations of &quot;java.security.BasicPermission&quot;"/>
                        <param defaultValue="true" id="OWASP2019.API3.PBPSF.IGNORE_ENCLOSED_FINAL" inputType="checkbox" label="Ignore subclasses which are enclosed by a &quot;final&quot; outer class"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.NTNPE" header="Do not throw 'NullPointerException'." id="NTNPE" originalId="EXCEPT.NTNPE" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Avoid throwing 'NullPointerException'"/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SCSM" header="Ensure 'SecurityManager' check in constructor of &quot;public&quot; non-&quot;final&quot; sensitive type" id="SCSM" originalId="SECURITY.WSC.SCSM" scope="LINE" severity="1" since="8.4">
                    <messages>
                        <msg index="1" value="Constructor ''{0}'' does not perform a SecurityManager check."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API3.SCSM.JAVA_OPTION" name="JAVA_OPTION" value="Use normal style or Java 6 style"/>
                        <oldparam id="OWASP2019.API3.SCSM.before6" name="before6" value="Ensure that the final constructor performs a SecurityManager check"/>
                        <oldparam id="OWASP2019.API3.SCSM.after6" name="after6" value="Enforce Java 6 style, requiring the 'SecurityManager' check to be first.  If Java 6 is not in use then nothing is flagged"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authorization p. 73</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/732.html" name="CWE">732</reference>
                    </references>
                    <parameters>
                        <radioGroup id="OWASP2019.API3.SCSM.JAVA_OPTION" label="Use normal style or Java 6 style" prevType="MultipleChoice" showLabel="true">
                            <radioItem defaultValue="checked" label="Ensure that the final constructor performs a SecurityManager check" value="0"/>
                            <radioItem label="Enforce Java 6 style, requiring the 'SecurityManager' check to be first.  If Java 6 is not in use then nothing is flagged" value="1"/>
                        </radioGroup>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.TSPF" header="Avoid &quot;transient&quot; fields in serialPersistentFields array." id="TSPF" originalId="SECURITY.ESD.TSPF" scope="LINE" severity="2" since="8.4">
                    <messages>
                        <msg index="1" value="Referenced field ''{0}'' of serialPersistentFields array is &quot;transient&quot;."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.SPF" header="Declare 'serialPersistentFields' &quot;private static final&quot;" id="SPF" originalId="SERIAL.SPF" scope="LINE" severity="2" since="8.4">
                <messages>
                    <msg index="1" value="&quot;serialPersistentFields&quot; of class ''{0}'' should be declared &quot;private static final&quot;."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.BEAN.SERIALIZABLE" header="Ensure that JavaBean classes implement 'java.io.Serializable'" id="SERIALIZABLE" originalId="BEAN.SERIALIZABLE" scope="LINE" severity="3" since="5.0">
                <messages>
                    <msg index="1" value="Bean class does not implement 'java.io.Serializable': ''{0}''"/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.SPI" header="Do not interrogate or modify security policy information in a web component" id="SPI" originalId="SECURITY.ESD.SPI" scope="LINE" severity="1" since="7.5">
                    <messages>
                        <msg index="1" value="Call to ''Policy.{0}()'' in a web component."/>
                        <msg index="2" value="Method ''{0}'' indirectly calls &quot;getPolicy()&quot; or &quot;setPolicy()&quot; in a web component."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API3.SPI.DEPTH" name="DEPTH" value="Maximum depth to look for Policy usage"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                    </references>
                    <parameters>
                        <param defaultValue="2" id="OWASP2019.API3.SPI.DEPTH" inputType="integer" label="Maximum depth to look for Policy usage" max="5" min="1"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERVLET.SOP" header="Minimize usage of System.out and System.err in Servlets" id="SOP" originalId="SERVLET.SOP" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="System.out or System.err used in a Servlet"/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PBRTE" header="Always specify absolute paths to execute commands" id="PBRTE" originalId="SECURITY.WSC.PBRTE" scope="LINE" severity="1" since="10.4.3">
                    <messages>
                        <msg index="1" value="The specified command is not an absolute path with separators"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.SDM" header="Store sensitive data in mutable objects." id="SDM" originalId="SECURITY.ESD.SDM" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="''{0}'' returns a String, should use &quot;getPassword()&quot; instead."/>
                        <msg index="2" value="String initialized with password here, should leave as &quot;char[]&quot;."/>
                        <msg index="3" value="String initialized with password ''{0}'' here, should leave as &quot;char[]&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API3.SDM.CHECK_JPASSWORDFIELD_STRING" name="CHECK_JPASSWORDFIELD_STRING" value="Check JPasswordField methods which return a String value"/>
                        <oldparam id="OWASP2019.API3.SDM.CHECK_STRING_INITIALIZE" name="CHECK_STRING_INITIALIZE" value="Check Strings initialized with a &quot;char[]&quot; password"/>
                        <oldparam id="OWASP2019.API3.SDM.CHECKED_METHODS" name="CHECKED_METHODS" value="Methods returning &quot;char[]&quot; password:"/>
                        <oldparam id="OWASP2019.API3.SDM.TYPE" name="TYPE" value="Type (qualified name)"/>
                        <oldparam id="OWASP2019.API3.SDM.METHOD" name="METHOD" value="Method (regular expression)"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="OWASP2019.API3.SDM.CHECK_JPASSWORDFIELD_STRING" inputType="checkbox" label="Check JPasswordField methods which return a String value"/>
                        <param defaultValue="true" id="OWASP2019.API3.SDM.CHECK_STRING_INITIALIZE" inputType="checkbox" label="Check Strings initialized with a &quot;char[]&quot; password">
                            <!-- param id="SECURITY.ESD.SDM.CHECKED_METHODS" inputType="bigtext" defaultValue="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;table version=&quot;1.0&quot;&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.io.Console&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;^readPassword$&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;javax.swing.JPasswordField&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;^getPassword$&quot;/&gt;&lt;/row&gt;&lt;/table&gt;" label="Methods returning &quot;char[]&quot; password:"/-->
                            <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2019.API3.SDM.CHECKED_METHODS" label="Methods returning &quot;char[]&quot; password:" reader="SATable">
                                <columns>
                                    <column columnType="text" editable="true" id="SECURITY__ESD__SDM__CHECKED_METHODS__COLUMN1" label="Type (qualified name)" required="true"/>
                                    <column columnType="text" editable="true" id="SECURITY__ESD__SDM__CHECKED_METHODS__COLUMN2" label="Method (regular expression)" required="true"/>
                                </columns>
                                <predefinedRows>
                                    <row id="1">
                                        <column refColumnId="SECURITY__ESD__SDM__CHECKED_METHODS__COLUMN1" value="java.io.Console"/>
                                        <column refColumnId="SECURITY__ESD__SDM__CHECKED_METHODS__COLUMN2" value="^readPassword$"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__ESD__SDM__CHECKED_METHODS__COLUMN1" value="javax.swing.JPasswordField"/>
                                        <column refColumnId="SECURITY__ESD__SDM__CHECKED_METHODS__COLUMN2" value="^getPassword$"/>
                                    </row>
                                </predefinedRows>
                            </complexParamTable>
                        </param>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERVLET.NSSS" header="Do not use static variables in servlets without synchronization" id="NSSS" originalId="SERVLET.NSSS" scope="LINE" severity="2">
                <messages>
                    <msg index="1" value="Static variable ''{0}'' used in servlet without synchronization"/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SCF" header="Enforce 'SecurityManager' checks before setting or getting fields" id="SCF" originalId="SECURITY.WSC.SCF" scope="METHOD" severity="1" since="8.4">
                    <messages>
                        <msg index="1" value="Missing ''SecurityManager'' check before setting field in method ''{0}()''."/>
                        <msg index="2" value="Missing ''SecurityManager'' check before getting field in method ''{0}()''."/>
                        <msg index="3" value="Method ''{0}'' is not declared &quot;final&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API3.SCF.PARAM_LEVEL" name="PARAM_LEVEL" value="Maximum depth to look for 'SecurityManager' check"/>
                        <oldparam id="OWASP2019.API3.SCF.CHECK_NON_FINAL_METHOD" name="CHECK_NON_FINAL_METHOD" value="Ensure methods containing 'SecurityManager' checks are declared &quot;final&quot;"/>
                        <oldparam id="OWASP2019.API3.SCF.FINAL_CLASS" name="FINAL_CLASS" value="Check non-&quot;final&quot; classes only"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/732.html" name="CWE">732</reference>
                    </references>
                    <parameters>
                        <param defaultValue="1" id="OWASP2019.API3.SCF.PARAM_LEVEL" inputType="integer" label="Maximum depth to look for 'SecurityManager' check" min="0"/>
                        <param defaultValue="true" id="OWASP2019.API3.SCF.CHECK_NON_FINAL_METHOD" inputType="checkbox" label="Ensure methods containing 'SecurityManager' checks are declared &quot;final&quot;">
                            <param defaultValue="true" id="OWASP2019.API3.SCF.FINAL_CLASS" inputType="checkbox" label="Check non-&quot;final&quot; classes only"/>
                        </param>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.spxm.SPAM" header="Declare a package-private method &quot;final&quot; if it is not overridden" id="SPAM" originalId="GLOBAL.SPAM" scope="METHOD" severity="2" since="4.5" type="global">
                <messages>
                    <msg index="1" value="Method ''{0}()'' should be declared &quot;final&quot;."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2019.API3.SPAM.CHECK_ABSTRACT" name="CHECK_ABSTRACT" value="Check methods in abstract classes"/>
                    <oldparam id="OWASP2019.API3.SPAM.CHECK_ANONYMOUS" name="CHECK_ANONYMOUS" value="Check methods in anonymous classes"/>
                    <oldparam id="OWASP2019.API3.SPAM.CHECK_LOCAL" name="CHECK_LOCAL" value="Check methods in local classes"/>
                    <oldparam id="OWASP2019.API3.SPAM.CHECK_UNUSED" name="CHECK_UNUSED" value="Check unused methods"/>
                    <oldparam id="OWASP2019.API3.SPAM.CHECK_STATIC_METHOD" name="CHECK_STATIC_METHOD" value="Check static methods"/>
                </oldparameters>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Java leading security practice p. 170</reference>
                </references>
                <parameters>
                    <param defaultValue="false" id="OWASP2019.API3.SPAM.CHECK_ABSTRACT" inputType="checkbox" label="Check methods in abstract classes"/>
                    <param defaultValue="false" id="OWASP2019.API3.SPAM.CHECK_ANONYMOUS" inputType="checkbox" label="Check methods in anonymous classes"/>
                    <param defaultValue="false" id="OWASP2019.API3.SPAM.CHECK_LOCAL" inputType="checkbox" label="Check methods in local classes"/>
                    <param defaultValue="false" id="OWASP2019.API3.SPAM.CHECK_UNUSED" inputType="checkbox" label="Check unused methods"/>
                    <param defaultValue="false" id="OWASP2019.API3.SPAM.CHECK_STATIC_METHOD" inputType="checkbox" label="Check static methods"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.JDBC.UPSC" header="Use &quot;PreparedStatements&quot; correctly." id="UPSC" originalId="JDBC.UPSC" scope="LINE" severity="1" since="8.2">
                <messages>
                    <msg index="1" value="The query String for this &quot;PreparedStatement&quot; contains {0} ?''s, but there are {1} calls to ''set'' methods."/>
                    <msg index="2" value="The query String for this &quot;PreparedStatement&quot; contains {0} ?''s, but there is {1} call to ''set'' method."/>
                    <msg index="3" value="''set'' methods are called in the incorrect order: ''set'' method with argument {0} comes after ''set'' method with argument {1}."/>
                    <msg index="4" value="Invalid argument: the first argument to the ''{0}()'' method must be &gt;= 1."/>
                    <msg index="5" value="Invalid argument: the first argument to ''{0}()'' is {1}, but there are only {2} ?''s in the corresponding query String."/>
                    <msg index="6" value="Misuse &quot;PreparedStatement&quot;: missing '?' in query string."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2019.API3.UPSC.WRONG_ORDER" name="WRONG_ORDER" value="Check that 'set' methods are called in the correct order"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="true" id="OWASP2019.API3.UPSC.WRONG_ORDER" inputType="checkbox" label="Check that 'set' methods are called in the correct order"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERVLET.CETS" header="Catch all exceptions which may be thrown within Servlet methods" id="CETS" originalId="SERVLET.CETS" scope="LINE" severity="4">
                <messages>
                    <msg index="1" value="The method ''{0}()'' is declared to throw the exception type ''{1}'', but this exception is not caught."/>
                </messages>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/600.html" name="CWE">600</reference>
                </references>
            </rule>
         </category>
         <category description="API10-Insufficient Logging &amp; Monitoring" name="API10">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.CONSEN" header="Do not log confidential or sensitive information" id="CONSEN" originalId="SECURITY.ESD.CONSEN" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="''{0}'' should not be used by a logger, it can expose confidential info."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API10.CONSEN.SUSPICIOUS_WORDS" name="SUSPICIOUS_WORDS" value="Regular expressions representing sensive data:"/>
                        <oldparam id="OWASP2019.API10.CONSEN.LOG_METHOD_EXPRESSIONS" name="LOG_METHOD_EXPRESSIONS" value="Logging method name in regular expression"/>
                        <oldparam id="OWASP2019.API10.CONSEN.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/533.html" name="CWE">533</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/534.html" name="CWE">534</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*ssn.*@delim@.*pass.*" id="OWASP2019.API10.CONSEN.SUSPICIOUS_WORDS" inputType="stringList" label="Regular expressions representing sensive data:" prevType="StringList"/>
                        <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="OWASP2019.API10.CONSEN.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                        <param defaultValue=".*log.*" id="OWASP2019.API10.CONSEN.LOG_METHOD_EXPRESSIONS" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ACPST" header="Do not call the 'printStackTrace()' method of &quot;Throwable&quot; objects." id="ACPST" originalId="SECURITY.WSC.ACPST" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="The 'printStackTrace()' method of a &quot;Throwable&quot; object is called here."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API10.ACPST.IGNORE_OVERRIDDEN" name="IGNORE_OVERRIDDEN" value="Ignore overridden versions of the 'printStackTrace()' methods"/>
                        <oldparam id="OWASP2019.API10.ACPST.IGNORE_OVERLOADED" name="IGNORE_OVERLOADED" value="Ignore overloaded versions of the 'printStackTrace()' method"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/209.html" name="CWE">209</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="OWASP2019.API10.ACPST.IGNORE_OVERRIDDEN" inputType="checkbox" label="Ignore overridden methods"/>
                        <param defaultValue="true" id="OWASP2019.API10.ACPST.IGNORE_OVERLOADED" inputType="checkbox" label="Ignore overloaded methods"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.SIO" header="Avoid calling print methods of 'System.err' or 'System.out'" id="SIO" originalId="SECURITY.ESD.SIO" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Make sure ''{0}'' is not a leftover debug statement."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API10.SIO.METHOD_SKIP_LIST" name="METHOD_SKIP_LIST" value="Methods to be excluded from this rule"/>
                    </oldparameters>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010">A3-Broken Authentication and Session Management</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="OWASP2019.API10.SIO.SCANNED_CLASS_TABLE" label="Include classes" reader="SATable">
                            <columns>
                                <column columnType="checkbox" defaultValue="true" editable="true" id="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN1" label="Base class/ interface" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN2" label="Class/interface name (regular expression)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN1" value="true"/>
                                    <column refColumnId="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN2" value=".*"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <param defaultValue="main;show;verbose" id="OWASP2019.API10.SIO.METHOD_SKIP_LIST" inputType="stringList" label="Exclude methods" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.ENFL" header="Ensure all sensitive method invocations are logged" id="ENFL" originalId="SECURITY.BV.ENFL" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="''{0}'' is invoked without being logged in the previous statement."/>
                        <msg index="2" value="''{0}'' is invoked without being logged in the next statement."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API10.ENFL.LOG_TAG" name="LOG_TAG" value="Loggers"/>
                        <oldparam id="OWASP2019.API10.ENFL.PRE_LOG_METHODS" name="PRE_LOG_METHODS" value="Method invocations that need logging in previous statement"/>
                        <oldparam id="OWASP2019.API10.ENFL.LOG_METHOD_EXPRESSIONS" name="LOG_METHOD_EXPRESSIONS" value="Logging method name in regular expression"/>
                        <oldparam id="OWASP2019.API10.ENFL.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                        <oldparam id="OWASP2019.API10.ENFL.POST_LOG_TAG" name="POST_LOG_TAG" value="Next statement"/>
                        <oldparam id="OWASP2019.API10.ENFL.METHOD" name="METHOD" value="Method"/>
                        <oldparam id="OWASP2019.API10.ENFL.PRE_LOG_TAG" name="PRE_LOG_TAG" value="Previous statement"/>
                        <oldparam id="OWASP2019.API10.ENFL.POST_LOG_METHODS" name="POST_LOG_METHODS" value="Method invocations that need logging in next statement"/>
                        <oldparam id="OWASP2019.API10.ENFL.TYPE" name="TYPE" value="Type"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                    </references>
                    <parameters>
                        <group collapsible="false" id="OWASP2019.API10.ENFL.tab.PRE_LOG_TAG" label="Previous statement">
                            <!--param id="SECURITY.BV.ENFL.PRE_LOG_METHODS" inputType="bigtext" defaultValue="true;javax.security.auth.login.LoginContext;false;login;false;true;javax.security.auth.Subject;false;doAs;false;true;javax.security.auth.Subject;false;doAsPrivileged;false" label="Method invocations that need logging in previous statement"/-->
                            <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2019.API10.ENFL.PRE_LOG_METHODS" label="Method invocations that need logging in previous statement" reader="SATable">
                                <columns>
                                    <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" label="Type" required="true"/>
                                    <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" label="Method" required="true"/>
                                </columns>
                                <predefinedRows>
                                    <row id="1">
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" value="javax.security.auth.login.LoginContext"/>
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" value="login"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" value="javax.security.auth.Subject"/>
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" value="doAs"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" value="javax.security.auth.Subject"/>
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" value="doAsPrivileged"/>
                                    </row>
                                </predefinedRows>
                            </complexParamTable>
                        </group>
                        <group collapsible="false" id="OWASP2019.API10.ENFL.tab.POST_LOG_TAG" label="Next statement">
                            <!--param id="SECURITY.BV.ENFL.POST_LOG_METHODS" inputType="bigtext" defaultValue="true;javax.security.auth.login.LoginContext;false;logout;false" label="Method invocations that need logging in next statement"/-->
                            <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2019.API10.ENFL.POST_LOG_METHODS" label="Method invocations that need logging in next statement" reader="SATable">
                                <columns>
                                    <column columnType="text" defaultValue="unknown" editable="false" id="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN1" label="Type" required="true"/>
                                    <column columnType="text" defaultValue="unknown" editable="false" id="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN2" label="Method" required="true"/>
                                </columns>
                                <predefinedRows>
                                    <row id="1">
                                        <column refColumnId="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN1" value="javax.security.auth.login.LoginContext"/>
                                        <column refColumnId="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN2" value="logout"/>
                                    </row>
                                </predefinedRows>
                            </complexParamTable>
                        </group>
                        <group collapsible="false" id="OWASP2019.API10.ENFL.tab.LOG_TAG" label="Loggers">
                            <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="OWASP2019.API10.ENFL.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                            <param defaultValue="^log$" id="OWASP2019.API10.ENFL.LOG_METHOD_EXPRESSIONS" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                        </group>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.AUML" header="Avoid using multiple loggers, use logging levels instead" id="AUML" originalId="CODSTA.BP.AUML" scope="CLASS" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Class ''{0}'' defines multiple loggers: ''{1}''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API10.AUML.TYPES_TO_CHECK" name="TYPES_TO_CHECK" value="Logger Types to Check (Specify Fully Qualified Names):"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="OWASP2019.API10.AUML.TYPES_TO_CHECK" inputType="stringList" label="Logger Types to Check (Specify Fully Qualified Names):" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.ACW" header="Avoid writing to Consoles" id="ACW" originalId="SECURITY.ESD.ACW" scope="LINE" severity="5" since="9.0">
                    <messages>
                        <msg index="1" value="Method ''{0}'' writes to Console ''{1}''."/>
                        <msg index="2" value="Method ''{0}'' writes to Console."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/497.html" name="CWE">497</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.LLM" header="Ensure that the logging level checked matches the level of the called logging method." id="LLM" originalId="PB.LOGIC.LLM" scope="LINE" severity="3" since="8.2">
                    <messages>
                        <msg index="1" value="The logging level checked in this method call is &quot;{0}&quot;, but the logging method called has the level &quot;{1}&quot;."/>
                        <msg index="2" value="The logging level checked in this comparison is &quot;{0}&quot;, but the logging method called has the level &quot;{1}&quot;."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.UEHL.LGE" header="Ensure all exceptions are either logged with a standard logger or rethrown" id="LGE" originalId="SECURITY.UEHL.LGE" scope="LINE" severity="2" since="6.0">
                    <messages>
                        <msg index="1" value="The exception is not logged in the &quot;catch&quot; clause."/>
                        <msg index="2" value="The exception is neither logged nor rethrown in the &quot;catch&quot; clause."/>
                        <msg index="3" value="The exception is neither logged nor rethrown in the &quot;catch&quot; clause. Add a comment to the clause if this is expected."/>
                        <msg index="4" value="The ''{0}'' exception is not passed to the logging method called in the &quot;catch&quot; clause."/>
                        <msg index="5" value="The information passed from the ''{0}'' exception to the logging method may be incomplete."/>
                        <msg index="6" value="The ''{0}'' exception is not rethrown in the &quot;catch&quot; block or passed to the new exception as an argument."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API10.LGE.FLAG_LEVEL" name="FLAG_LEVEL" value="Catch clause should contain:"/>
                        <oldparam id="OWASP2019.API10.LGE.FLAG_IF_NO_LOG" name="FLAG_IF_NO_LOG" value="Logging method."/>
                        <oldparam id="OWASP2019.API10.LGE.FLAG_IF_NO_LOG_AND_THROW" name="FLAG_IF_NO_LOG_AND_THROW" value="Logging method or exception rethrow statement."/>
                        <oldparam id="OWASP2019.API10.LGE.FLAG_IF_NO_LOG_AND_THROW_AND_COMMENT" name="FLAG_IF_NO_LOG_AND_THROW_AND_COMMENT" value="Logging method, comment or exception rethrow statement."/>
                        <oldparam id="OWASP2019.API10.LGE.LOG_METHOD_EXPRESSION" name="LOG_METHOD_EXPRESSION" value="Logging method name in regular expression"/>
                        <oldparam id="OWASP2019.API10.LGE.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                        <oldparam id="OWASP2019.API10.LGE.CHECK_EXCEPT_LOGGED" name="CHECK_EXCEPT_LOGGED" value="Check that the exception is passed into the logging method call"/>
                        <oldparam id="OWASP2019.API10.LGE.IGNORE_LIST" name="IGNORE_LIST" value="Ignore exception variables matching the following regular expression(s):"/>
                        <oldparam id="OWASP2019.API10.LGE.LOGGERS_TAB" name="LOGGERS_TAB" value="Loggers"/>
                        <oldparam id="OWASP2019.API10.LGE.IGNORE_LIST_TAB" name="IGNORE_LIST_TAB" value="Ignore List"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/390.html" name="CWE">390</reference>
                    </references>
                    <parameters>
                        <group collapsible="false" id="OWASP2019.API10.LGE.tab.LOGGERS_TAB" label="Loggers">
                            <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger;org.apache.logging.log4j.Logger;org.slf4j.Logger" id="OWASP2019.API10.LGE.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                            <param defaultValue="^log.*" id="OWASP2019.API10.LGE.LOG_METHOD_EXPRESSION" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                        </group>
                        <group collapsible="false" id="OWASP2019.API10.LGE.tab.IGNORE_LIST_TAB" label="Ignore List">
                            <param defaultValue="^ignore$" id="OWASP2019.API10.LGE.IGNORE_LIST" inputType="stringList" label="Ignore exception variables matching the following regular expression(s):" prevType="StringList"/>
                        </group>
                        <radioGroup id="OWASP2019.API10.LGE.FLAG_LEVEL" label="Catch clause should contain:" prevType="MultipleChoice" showLabel="true">
                            <radioItem label="Logging method." value="0"/>
                            <radioItem defaultValue="checked" label="Logging method or &quot;throw&quot; exception statement." value="1"/>
                            <radioItem label="Logging method, comment, or &quot;throw&quot; exception statement." value="2"/>
                        </radioGroup>
                        <param defaultValue="false" id="OWASP2019.API10.LGE.CHECK_EXCEPT_LOGGED" inputType="checkbox" label="Check if the exception is passed into the logging method call"/>
                        <param defaultValue="false" id="OWASP2019.API10.LGE.CHECK_EXCEPT_FULL_PASSED" inputType="checkbox" label="Check if the exception passed to the logging method is complete"/>
                        <param defaultValue="false" id="OWASP2019.API10.LGE.CHECK_EXCEPT_THROW" inputType="checkbox" label="Check if the caught exception is passed to a new exception or rethrown"/>
                    </parameters>
                </rule>
         </category>
         <category description="API2-Broken User Authentication" name="API2">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PAC" header="Call authentication methods to enforce consistency" id="PAC" originalId="SECURITY.WSC.PAC" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="''{0}()'' does not invoke authentication checking method."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API2.PAC.ENFORCED_METHOD_LIST" name="ENFORCED_METHOD_LIST" value="Centralized authentication method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                        <oldparam id="OWASP2019.API2.PAC.DANGEROUS_METHOD_LIST" name="DANGEROUS_METHOD_LIST" value="Authentication checking method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authentication p. 66</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing code for Cross-Site Request Forgery issues p. 148</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A1" name="OWASP-2010">A1-Injection</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A2" name="OWASP-2010">A2-Cross Site Scripting (XSS)</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A4" name="OWASP-2010">A4-Insecure Direct Object Reference</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A5" name="OWASP-2010">A5-Cross Site Request Forgery (CSRF)</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A8" name="OWASP-2010">A8-Failure to Restrict URL Access</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/352.html" name="CWE">352</reference>
                    </references>
                    <parameters>
                        <param defaultValue="" description="Authentication checking method names (in regular expressions) [qualified name of declaring type#method name]" id="OWASP2019.API2.PAC.DANGEROUS_METHOD_LIST" inputType="stringList" label="Authentication checking method names (in regular expressions)" prevType="StringList"/>
                        <param defaultValue="" description="Centralized authentication method names (in regular expressions) [qualified name of declaring type#method name]" id="OWASP2019.API2.PAC.ENFORCED_METHOD_LIST" inputType="stringList" label="Centralized authentication method names (in regular expressions)" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AHCA" header="Avoid hard-coding the arguments to certain methods" id="AHCA" originalId="SECURITY.WSC.AHCA" scope="LINE" severity="1" since="8.4">
                    <messages>
                        <msg index="1" value="Argument # {0} to the method ''{1}()'' should not be hard-coded."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API2.AHCA.DANGEROUS_METHODS" name="DANGEROUS_METHODS" value="Methods to Check (Press &quot;Ctrl-Space&quot; for Content Assist)"/>
                        <oldparam id="OWASP2019.API2.AHCA.METHOD" name="METHOD" value="Method (Specify &lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,&lt;parameter2 fully qualified type&gt;,...)"/>
                        <oldparam id="OWASP2019.API2.AHCA.INDEX" name="INDEX" value="Argument Index to Check (&quot;0&quot;-based)"/>
                    </oldparameters>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2019.API2.AHCA.DANGEROUS_METHODS" label="Methods to Check" reader="SATable">
                            <columns>
                                <column columnType="text" description="Specify &lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,&lt;parameter2 fully qualified type&gt;,...)" editable="true" id="SECURITY__WSC__AHCA__DANGEROUS_METHODS__COLUMN1" label="Method" required="true" textSize="large"/>
                                <column columnType="text" editable="true" id="SECURITY__WSC__AHCA__DANGEROUS_METHODS__COLUMN2" label="Argument Index to Check (&quot;0&quot;-based)" required="true" textSize="small"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__AHCA__DANGEROUS_METHODS__COLUMN1" value="org.owasp.esapi.Encryptor#hash(java.lang.String,java.lang.String)"/>
                                    <column refColumnId="SECURITY__WSC__AHCA__DANGEROUS_METHODS__COLUMN2" value="1"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HGRSI" header="Avoid using the 'getRequestedSessionId' method from the 'HttpServletRequest' class" id="HGRSI" originalId="SECURITY.WSC.HGRSI" scope="LINE" severity="4" since="10.4.2">
                    <messages>
                        <msg index="1" value="The 'getRequestedSessionId' method may return untrusted data"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CAM" header="Keep all authentication methods centralized to enforce consistency" id="CAM" originalId="SECURITY.WSC.CAM" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="''{0}()'' is not allowed to be invoked within ''{1}()'', it should only be invoked inside centralized authentication method declarations."/>
                        <msg index="2" value="''{0}()'' is not allowed to be invoked unless enclosed by centralized access control methods."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API2.CAM.ENCLOSING_METHOD_LIST" name="ENCLOSING_METHOD_LIST" value="Centralized authentication method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                        <oldparam id="OWASP2019.API2.CAM.DANGEROUS_METHOD_LIST" name="DANGEROUS_METHOD_LIST" value="Authentication method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authentication p. 66</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A8" name="OWASP-2010">A8-Failure to Restrict URL Access</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                    </references>
                    <parameters>
                        <param defaultValue="javax.security.auth.login.LoginContext#getSubject.*;javax.security.auth.login.LoginContext#login.*;" description="Authentication method names (in regular expressions) [qualified name of declaring type#method name]" id="OWASP2019.API2.CAM.DANGEROUS_METHOD_LIST" inputType="stringList" label="Authentication method names (in regular expressions)" prevType="StringList"/>
                        <param defaultValue=".*#login.*;" description="Centralized authentication method names (in regular expressions) [qualified name of declaring type#method name]" id="OWASP2019.API2.CAM.ENCLOSING_METHOD_LIST" inputType="stringList" label="Centralized authentication method names (in regular expressions)" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CKTS" header="Avoid using cryptographic keys which are too short." id="CKTS" originalId="SECURITY.WSC.CKTS" scope="LINE" severity="2" since="8.4">
                    <messages>
                        <msg index="1" value="Key size ({0} bits) is below the recommended minimum key size ({1} bits) for the &quot;{2}&quot; algorithm."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API2.CKTS.MIN_LENGTH_TABLE" name="MIN_LENGTH_TABLE" value="Minimum Key Size for Each Algorithm"/>
                        <oldparam id="OWASP2019.API2.CKTS.ALGORITHM_NAME" name="ALGORITHM_NAME" value="Algorithm Name"/>
                        <oldparam id="OWASP2019.API2.CKTS.MINIMUM_KEY_SIZE" name="MINIMUM_KEY_SIZE" value="Minimum Key Size (in Bits)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2019.API2.CKTS.MIN_LENGTH_TABLE" label="Minimum Key Size for Each Algorithm" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" label="Algorithm Name" required="true"/>
                                <column columnType="text" defaultValue="128" editable="true" id="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" label="Minimum Key Size (in Bits)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" value="AES"/>
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" value="128"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" value="RSA"/>
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" value="1024"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ICA" header="Avoid using insecure algorithms for cryptography." id="ICA" originalId="SECURITY.WSC.ICA" scope="LINE" severity="1" since="8.3">
                    <messages>
                        <msg index="1" value="The &quot;{0}&quot; algorithm is not an acceptable cryptography algorithm for the &quot;{1}&quot; class."/>
                        <msg index="2" value="The cryptography algorithm is used without padding."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API2.ICA.SUGGESTED_ALGS" name="SUGGESTED_ALGS" value="Safe Cryptography Algorithms"/>
                        <oldparam id="OWASP2019.API2.ICA.TYPE_NAME" name="TYPE_NAME" value="Fully Qualified Class Name"/>
                        <oldparam id="OWASP2019.API2.ICA.ALGORITHM_NAME" name="ALGORITHM_NAME" value="Algorithm Names (in regular expressions)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/328.html" name="CWE">328</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/780.html" name="CWE">780</reference>
                    </references>
                    <parameters>
                        <!--param id="SECURITY.WSC.ICA.SUGGESTED_ALGS" inputType="bigtext" defaultValue="java.security.KeyPairGenerator&lt;#&gt;RSA;java.security.MessageDigest&lt;#&gt;SHA-256#SHA-384#SHA-512;javax.crypto.Cipher&lt;#&gt;3DES#AES#ARCFOUR/RC4#Blowfish#ECIES#RC4#RC5#RSA(.*)OAEPWith(.*)And(.*)Padding;javax.crypto.KeyGenerator&lt;#&gt;AES#ARCFOUR/RC4#Blowfish#HmacSHA256#HmacSHA384#HmacSHA512#RC2" label="Safe Cryptography Algorithms" prevType="DuoList"/-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="OWASP2019.API2.ICA.SUGGESTED_ALGS" label="Secure Cryptographic Algorithms" prevType="DuoList" reader="SADuoList">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" label="Fully Qualified Class Name" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.KeyPairGenerator"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.MessageDigest"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.KeyGenerator"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.Cipher"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.net.ssl.SSLContext"/>
                                </row>
                            </predefinedRows>
                            <childTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="OWASP2019.API2.ICA.SUGGESTED_ALGS.CHILDTABLE1" label="">
                                <columns>
                                    <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" label="Name of Secure Algorithm (in regular expressions)" required="true"/>
                                </columns>
                                <predefinedRows refParentRowId="1">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="2">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-256"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-384"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-512"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="3">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA256"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA384"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA512"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC2"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESede"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="4">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="3DES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES/(.*)/PKCS5Padding"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ECIES"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC4"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC5"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA(.*)OAEPWith(.*)And(.*)Padding"/>
                                    </row>
                                    <row id="9">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESEDE/(.*)/PKCS5Padding"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="5">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="TLSv1.2"/>
                                    </row>
                                </predefinedRows>
                            </childTable>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HCCS" header="Avoid passing hardcoded usernames/passwords/URLs to database connection methods." id="HCCS" originalId="SECURITY.WSC.HCCS" scope="LINE" severity="1" since="8.1">
                    <messages>
                        <msg index="1" value="This call to ''{0}()'' may be dangerous because it passes in only hard-coded Strings."/>
                        <msg index="2" value="This call to ''{0}()'' may be dangerous because it uses a hard-coded password."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API2.HCCS.CONNECT_METHS" name="CONNECT_METHS" value="Additional Database Connection Methods \n(in form of &lt;qualified name of declaring type&gt;#&lt;method name&gt;)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Java leading security practice p. 170</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/259.html" name="CWE">259</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/547.html" name="CWE">547</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/798.html" name="CWE">798</reference>
                    </references>
                    <parameters>
                        <param defaultValue="" description="Additional Database Connection Methods (in form of &lt;qualified name of declaring type&gt;#&lt;method name&gt;)" id="OWASP2019.API2.HCCS.CONNECT_METHS" inputType="stringList" label="Additional Database Connection Methods" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HCCK" header="Avoid using hard-coded cryptographic keys" id="HCCK" originalId="SECURITY.WSC.HCCK" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Hard-coded cryptographic key here."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API2.HCCK.MIN_LENGTH" name="MIN_LENGTH" value="Check keys whose length is greater than "/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/321.html" name="CWE">321</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/506.html" name="CWE">506</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/759.html" name="CWE">759</reference>
                    </references>
                    <parameters>
                        <param defaultValue="9" id="OWASP2019.API2.HCCK.MIN_LENGTH" inputType="integer" label="Check keys whose length is greater than " min="9"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MDSALT" header="Use hash functions with a salt" id="MDSALT" originalId="SECURITY.WSC.MDSALT" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="A salt is not added to the digest"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AUNC" header="Avoid using the javax.crypto.NullCipher class in non-test classes." id="AUNC" originalId="SECURITY.WSC.AUNC" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The NullCipher class that does not encrypt the plaintext is used in a non-test class."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SCHTTP" header="Mark cookies as HttpOnly" id="SCHTTP" originalId="SECURITY.WSC.SCHTTP" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The cookie is not marked as 'HttpOnly'."/>
                        <msg index="2" value="The cookie is not marked as 'HttpOnly'. Call setHttpOnly(true) on the cookie object (available since Java Servlet 3.0)."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.CSD" header="Clear sensitive data after use." id="CSD" originalId="SECURITY.ESD.CSD" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="''{0}'' is assigned sensitive data but never cleared."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.PLC" header="Avoid storing sensitive data in plaintext in a cookie" id="PLC" originalId="SECURITY.ESD.PLC" scope="LINE" severity="1" since="9.2">
                    <messages>
                        <msg index="1" value="Do not store important to safety data in cookie."/>
                        <msg index="2" value="Do not store sensitive data in plaintext in cookie."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API2.PLC.TABLE_HEADER" name="TABLE_HEADER" value="List of RegExp to check key in cookie"/>
                        <oldparam id="OWASP2019.API2.PLC.CHECK_VALUES_HEADER" name="CHECK_VALUES_HEADER" value="Check values"/>
                        <oldparam id="OWASP2019.API2.PLC.NAME_HEADER" name="NAME_HEADER" value="Key in cookie (RegExp)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010">A9-Insufficient Transport Layer Protection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/315.html" name="CWE">315</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE">807</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2019.API2.PLC.TABLE_HEADER" label="List of RegExp to check key in cookie" reader="SATable">
                            <columns>
                                <column columnType="checkbox" defaultValue="true" editable="true" id="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" label="Check values" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" label="Key in cookie (RegExp)" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" value="false"/>
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" value=".*(pass|role).*"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" value="true"/>
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" value=".*(user|login|account).*"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.PERMIT" header="Avoid EJB 3 methods without security annotations" id="PERMIT" originalId="EJB.EJB3.PERMIT" scope="LINE" severity="1" since="9.2">
                    <messages>
                        <msg index="1" value="Method without permit (@RolesAllowed, @PermitAll, @DenyAll) annotations."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authorization p. 73</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A4" name="OWASP-2010">A4-Insecure Direct Object Reference</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A8" name="OWASP-2010">A8-Failure to Restrict URL Access</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/862.html" name="CWE">862</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/863.html" name="CWE">863</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AISSAJAVA" header="Avoid using insecure cryptographic algorithms for data encryption with Spring" id="AISSAJAVA" originalId="SECURITY.WSC.AISSAJAVA" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The cryptographic class is insecure."/>
                        <msg index="2" value="The cryptographic algorithm used in the constructor of MessageDigestPasswordEncoder is insecure."/>
                    </messages>
                    <parameters>
                        <!-- <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_ENCODERS" inputType="stringList" defaultValue="org.springframework.security.crypto.password.LdapShaPasswordEncoder;org.springframework.security.crypto.password.Md5PasswordEncoder;org.springframework.security.crypto.password.Md4PasswordEncoder;org.springframework.security.crypto.password.NoOpPasswordEncoder;org.springframework.security.authentication.encoding.LdapShaPasswordEncoder;org.springframework.security.authentication.encoding.Md5PasswordEncoder;org.springframework.security.authentication.encoding.Md4PasswordEncoder" label="Insecure classes that should not be used for encryption" prevType="StringList"/>
                        <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_NAMES" inputType="stringList" defaultValue="MD2;MD5;SHA-1" label="Insecure algorithms in the MessageDigestPasswordEncoder class" prevType="StringList"/>-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="OWASP2019.API2.AISSAJAVA.BANNED_ALGO_ENCODERS" label="Insecure classes that should not be used for encryption" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" label="Fully Qualified Name of Insecure Class" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md5PasswordEncoder"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md4PasswordEncoder"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.NoOpPasswordEncoder"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>
                                </row>
                                <row id="7">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md4PasswordEncoder"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="OWASP2019.API2.AISSAJAVA.BANNED_ALGO_NAMES" label="Insecure algorithms in the MessageDigestPasswordEncoder class" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" label="Name of Insecure Algorithm" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD2"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD5"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="SHA-1"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="API7-Security Misconfiguration" name="API7">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.NTX" header="Avoid declaring methods to throw general or unchecked Exception types" id="NTX" originalId="CODSTA.BP.NTX" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Throwing explicit ''{0}'' object in ''{1}()''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API7.NTX.CHECKED_EXCEPTS" name="CHECKED_EXCEPTS" value="Exception types which should not be declared to be thrown (fully qualified names)"/>
                        <oldparam id="OWASP2019.API7.NTX.SKIP_JUNIT" name="SKIP_JUNIT" value="Skip JUnit 'TestCase' classes."/>
                        <oldparam id="OWASP2019.API7.NTX.SUBCLASSES" name="SUBCLASSES" value="Check for exceptions which are subclasses of 'Error' and 'RuntimeException'."/>
                        <oldparam id="OWASP2019.API7.NTX.IGNORE_OVERRIDING" name="IGNORE_OVERRIDING" value="Ignore overriding methods."/>
                        <oldparam id="OWASP2019.API7.NTX.IGNORE_PROPAGATED" name="IGNORE_PROPAGATED" value="Ignore methods which propagate exception types of called methods."/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/397.html" name="CWE">397</reference>
                    </references>
                    <parameters>
                        <param defaultValue="java.lang.Exception;java.lang.Error;java.lang.Throwable;java.lang.RuntimeException" id="OWASP2019.API7.NTX.CHECKED_EXCEPTS" inputType="stringList" label="Exception types which should not be declared to be thrown (fully qualified names)" prevType="StringList"/>
                        <param defaultValue="false" id="OWASP2019.API7.NTX.SUBCLASSES" inputType="checkbox" label="Check for exceptions which are subclasses of 'Error' and 'RuntimeException'."/>
                        <param defaultValue="false" id="OWASP2019.API7.NTX.SKIP_JUNIT" inputType="checkbox" label="Skip JUnit classes."/>
                        <param defaultValue="true" id="OWASP2019.API7.NTX.IGNORE_OVERRIDING" inputType="checkbox" label="Ignore overriding methods."/>
                        <param defaultValue="true" id="OWASP2019.API7.NTX.IGNORE_PROPAGATED" inputType="checkbox" label="Ignore methods which propagate exception types of called methods."/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ACMD" header="Avoid using custom MessageDigest implementations" id="ACMD" originalId="SECURITY.WSC.ACMD" scope="LINE" severity="4" since="10.4.2">
                    <messages>
                        <msg index="1" value="The class that extends MessageDigest may provide unsafe algorithms"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PACC" header="Call access control methods to enforce consistency" id="PACC" originalId="SECURITY.WSC.PACC" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="''{0}()'' does not invoke access control method."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API7.PACC.ENFORCED_METHOD_LIST" name="ENFORCED_METHOD_LIST" value="Centralized access control method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                        <oldparam id="OWASP2019.API7.PACC.DANGEROUS_METHOD_LIST" name="DANGEROUS_METHOD_LIST" value="Access checking method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authorization p. 73</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A1" name="OWASP-2010">A1-Injection</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A2" name="OWASP-2010">A2-Cross Site Scripting (XSS)</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A4" name="OWASP-2010">A4-Insecure Direct Object Reference</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A5" name="OWASP-2010">A5-Cross Site Request Forgery (CSRF)</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A6" name="OWASP-2010">A6-Security Misconfiguration</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A8" name="OWASP-2010">A8-Failure to Restrict URL Access</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/352.html" name="CWE">352</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/732.html" name="CWE">732</reference>
                    </references>
                    <parameters>
                        <param defaultValue="" description="Access checking method names (in regular expressions) [qualified name of declaring type#method name]" id="OWASP2019.API7.PACC.DANGEROUS_METHOD_LIST" inputType="stringList" label="Access checking method names (in regular expressions)" prevType="StringList"/>
                        <param defaultValue="" description="Centralized access control method names (in regular expressions) [qualified name of declaring type#method name]" id="OWASP2019.API7.PACC.ENFORCED_METHOD_LIST" inputType="stringList" label="Centralized access control method names (in regular expressions)" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MCMDU" header="MessageDigest objects must process the data with the 'update' method" id="MCMDU" originalId="SECURITY.WSC.MCMDU" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The 'update' method is not called on the ''{0}'' variable after the message digest object is obtained"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.IVR" header="Avoid non-random &quot;byte[]&quot; when using IvParameterSpec." id="IVR" originalId="SECURITY.WSC.IVR" scope="LINE" severity="2" since="8.4">
                    <messages>
                        <msg index="1" value="IvParameterSpec instantiated with non-random value ''{0}''."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/329.html" name="CWE">329</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ENPP" header="Ensure arguments passed to certain methods come from predefined methods list." id="ENPP" originalId="SECURITY.WSC.ENPP" scope="LINE" severity="2" since="9.2">
                    <messages>
                        <msg index="1" value="Argument number {0} passed to method ''{1}'' is not an allowed method call."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API7.ENPP.PAIRS_TABLE_HEADER" name="PAIRS_TABLE_HEADER" value="Methods and arguments configuration"/>
                        <oldparam id="OWASP2019.API7.ENPP.PAIRS_TABLE_1ST" name="PAIRS_TABLE_1ST" value="Method to be checked (&lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,...)"/>
                        <oldparam id="OWASP2019.API7.ENPP.PAIRS_TABLE_INDEX" name="PAIRS_TABLE_INDEX" value="Argument Index to Check (''0''-based)"/>
                        <oldparam id="OWASP2019.API7.ENPP.PAIRS_TABLE_2ND" name="PAIRS_TABLE_2ND" value="Allowed method name (in Regular Expressions)"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/329.html" name="CWE">329</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/336.html" name="CWE">336</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/337.html" name="CWE">337</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE">676</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2019.API7.ENPP.PAIRS_TABLE_HEADER" label="Methods and arguments configuration" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" label="Method to be checked (&lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,...)" required="true"/>
                                <column columnType="text" defaultValue="0" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" label="Argument Index to Check (''0''-based)" required="true" textSize="small"/>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" label="Allowed method name (in Regular Expressions)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#SecureRandom(byte[])"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#setSeed(byte[])"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#setSeed(long)"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="javax.crypto.spec.IvParameterSpec#IvParameterSpec(byte[])"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidIV"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="javax.crypto.spec.IvParameterSpec#IvParameterSpec(byte[],int,int)"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidIV"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SPRING.JDBCTEMPLATE" header="Avoid using native JDBC" id="JDBCTEMPLATE" originalId="SPRING.JDBCTEMPLATE" scope="LINE" severity="3" since="9.2">
                <messages>
                    <msg index="1" value="Avoid using native jdbc to open connection."/>
                    <msg index="2" value="Avoid using native jdbc to prepare statement."/>
                    <msg index="3" value="Avoid using native jdbc to execute statement."/>
                    <msg index="4" value="Avoid using native jdbc to close connection."/>
                    <msg index="5" value="Avoid using deprecated SimpleJdbcTemplate class."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2019.API7.JDBCTEMPLATE.CHECK_SIMPLE_JDBC_TEMPLATE" name="CHECK_SIMPLE_JDBC_TEMPLATE" value="Avoid using SimpleJdbcTemplate (From Spring Framework 3.0.1 is deprecated)"/>
                </oldparameters>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Buffer Overruns and Overflow p. 112</reference>
                </references>
                <parameters>
                    <param defaultValue="true" id="OWASP2019.API7.JDBCTEMPLATE.CHECK_SIMPLE_JDBC_TEMPLATE" inputType="checkbox" label="Avoid using SimpleJdbcTemplate (From Spring Framework 3.0.1 is deprecated)"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SRD" header="Use 'java.security.SecureRandom' instead of 'java.util.Random' or 'Math.random()'." id="SRD" originalId="SECURITY.WSC.SRD" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Avoid using the insecure ''{0}'' as a random number generator"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/330.html" name="CWE">330</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/338.html" name="CWE">338</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE">676</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.SMSN" header="Do not set or create a new SecurityManager in EJBs" id="SMSN" originalId="EJB.SMSN" scope="LINE" severity="2" since="8.4">
                <messages>
                    <msg index="1" value="&quot;System.setSecurityManager()&quot; called in bean class."/>
                    <msg index="2" value="New ''{0}'' created in bean class."/>
                    <msg index="3" value="Call to ''{0}'' indirectly sets or creates a SecurityManager."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2019.API7.SMSN.DEPTH" name="DEPTH" value="Maximum depth to check for SecurityManager setting or creation"/>
                </oldparameters>
                <references>
                    <reference href="https://www.owasp.org/index.php/Top_10_2010-A6" name="OWASP-2010">A6-Security Misconfiguration</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/732.html" name="CWE">732</reference>
                </references>
                <parameters>
                    <param defaultValue="2" id="OWASP2019.API7.SMSN.DEPTH" inputType="integer" label="Maximum depth to check for SecurityManager setting or creation" max="5" min="1"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SIKG" header="Initialize KeyGenerator instances " id="SIKG" originalId="SECURITY.WSC.SIKG" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The ''{0}'' object of the KeyGenerator class is created but not initialized"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.USC" header="Use the SSL-enabled version of classes when possible." id="USC" originalId="SECURITY.WSC.USC" scope="LINE" severity="3" since="7.5">
                    <messages>
                        <msg index="1" value="Consider using the SSL-enabled type ''SSLServerSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="2" value="Consider using the SSL-enabled type ''SSLSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="3" value="Consider using the SSL-enabled type ''HttpsURLConnection'' for the {0} ''{1}''."/>
                        <msg index="4" value="Consider using the SSL-enabled type ''SslRMIClientSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="5" value="Consider using the SSL-enabled type ''SslRMIServerSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="6" value="Consider using the SSL-enabled type ''SSLSocket'' for the {0} ''{1}''."/>
                        <msg index="7" value="Consider using the SSL-enabled type ''SSLServerSocket'' for the {0} ''{1}''."/>
                        <msg index="8" value="Consider using the SSL-enabled type ''SSLPermission'' for the {0} ''{1}''."/>
                    </messages>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010">A9-Insufficient Transport Layer Protection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/494.html" name="CWE">494</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SPRING.DCSRFJAVA" header="Do not disable CSRF protection" id="DCSRFJAVA" originalId="SPRING.DCSRFJAVA" scope="LINE" severity="2" since="10.4.3">
                <messages>
                    <msg index="1" value="CSRF protection is disabled."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.AMSC" header="Do not access or modify security configuration objects." id="AMSC" originalId="EJB.AMSC" scope="LINE" severity="2" since="4.5">
                <messages>
                    <msg index="1" value="Security method was called"/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AECB" header="Avoid &quot;try&quot;, &quot;catch&quot; and &quot;finally&quot; blocks with empty bodies" id="AECB" originalId="PB.TYPO.AECB" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="&quot;try&quot; block has an empty body."/>
                        <msg index="2" value="&quot;catch&quot; block has an empty body."/>
                        <msg index="3" value="&quot;finally&quot; block has an empty body."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API7.AECB.CHECK_FINALLY" name="CHECK_FINALLY" value="Check &quot;finally&quot; block."/>
                        <oldparam id="OWASP2019.API7.AECB.CHECK_TRY" name="CHECK_TRY" value="Check &quot;try&quot; block."/>
                        <oldparam id="OWASP2019.API7.AECB.CHECK_CATCH" name="CHECK_CATCH" value="Check &quot;catch&quot; block."/>
                        <oldparam id="OWASP2019.API7.AECB.CHECK_COMMENTS" name="CHECK_COMMENTS" value="Disallow blocks with comments as content."/>
                        <oldparam id="OWASP2019.API7.AECB.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="Regular expression of exception variable name. (enclosing catch block would be ignored if matches)"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/391.html" name="CWE">391</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="OWASP2019.API7.AECB.CHECK_TRY" inputType="checkbox" label="Check &quot;try&quot; block."/>
                        <param defaultValue="true" id="OWASP2019.API7.AECB.CHECK_CATCH" inputType="checkbox" label="Check &quot;catch&quot; block."/>
                        <param defaultValue="true" id="OWASP2019.API7.AECB.CHECK_FINALLY" inputType="checkbox" label="Check &quot;finally&quot; block."/>
                        <param defaultValue="false" id="OWASP2019.API7.AECB.CHECK_COMMENTS" inputType="checkbox" label="Disallow blocks with comments as content."/>
                        <param defaultValue="%5Eignore%24;" id="OWASP2019.API7.AECB.REGULAR_EXPRESSION" inputType="stringList" label="Regular expression of exception variable name. (enclosing catch block would be ignored if matches)" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.EWSSEC" header="Avoid debug information from Spring Security framework to logs" id="EWSSEC" originalId="SECURITY.WSC.EWSSEC" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="Debug features is activated in @EnableWebSecurity annotation"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.NCNPE" header="Do not catch 'NullPointerException'" id="NCNPE" originalId="EXCEPT.NCNPE" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Avoid catching 'NullPointerException'"/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.JXCORS" header="Restrict cross-origin resource sharing to secure origins" id="JXCORS" originalId="SECURITY.WSC.JXCORS" scope="LINE" severity="4" since="2020.1">
                    <messages>
                        <msg index="1" value="The &quot;Access-Control-Allow-Origin&quot; header is set to allow unrestricted access to cross-origin resources"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HV" header="Ensure the HostnameVerifier.verify() method validates the certificate" id="HV" originalId="SECURITY.WSC.HV" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The certificate is not validated, because the 'verify' method always returns 'true'"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.NTERR" header="Do not throw exception types which are too general or are unchecked exceptions." id="NTERR" originalId="EXCEPT.NTERR" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Avoid throwing ''{0}''."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2019.API7.NTERR.CHECKED_EXCEPTS" name="CHECKED_EXCEPTS" value="Exception types which should not be thrown (fully qualified names)"/>
                </oldparameters>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/397.html" name="CWE">397</reference>
                </references>
                <parameters>
                    <param defaultValue="java.lang.Exception;java.lang.Error;java.lang.Throwable;java.lang.RuntimeException" id="OWASP2019.API7.NTERR.CHECKED_EXCEPTS" inputType="stringList" label="Exception types which should not be thrown (fully qualified names)" prevType="StringList"/>
                </parameters>
            </rule>
         </category>
         <category description="API9-Improper Assets Management" name="API9">
            <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.JNJD" header="Do not insert non-Javadoc comments between Javadoc comments and declarations" id="JNJD" originalId="JAVADOC.JNJD" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Avoid inserting non-Javadoc comments between Javadoc comments and declarations."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.THROW" header="Use the '@throws' or '@exception' Javadoc tag in methods" id="THROW" originalId="JAVADOC.THROW" scope="METHOD" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Method ''{0}'' is missing ''@throws {1}'' in Javadoc comment."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2019.API9.THROW.CHECK_PUBLIC" name="CHECK_PUBLIC" value="Check &quot;public&quot; methods"/>
                    <oldparam id="OWASP2019.API9.THROW.CHECK_PRIVATE" name="CHECK_PRIVATE" value="Check &quot;private&quot; methods"/>
                    <oldparam id="OWASP2019.API9.THROW.CHECK_PROTECTED" name="CHECK_PROTECTED" value="Check &quot;protected&quot; methods"/>
                    <oldparam id="OWASP2019.API9.THROW.CHECK_PACKAGE" name="CHECK_PACKAGE" value="Check &quot;package-private&quot; methods"/>
                    <oldparam id="OWASP2019.API9.THROW.INHERITED_TAG" name="INHERITED_TAG" value="Use these tags for overriding and implementing methods:"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="true" id="OWASP2019.API9.THROW.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods"/>
                    <param defaultValue="false" id="OWASP2019.API9.THROW.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods"/>
                    <param defaultValue="false" id="OWASP2019.API9.THROW.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; methods"/>
                    <param defaultValue="false" id="OWASP2019.API9.THROW.CHECK_PRIVATE" inputType="checkbox" label="Check &quot;private&quot; methods"/>
                    <param defaultValue="@see,@inheritDoc" id="OWASP2019.API9.THROW.INHERITED_TAG" inputType="text" label="Use these tags for overriding and implementing methods:"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.JUNIT.UPJT" header="Include an appropriate Javadoc tag in the Javadoc for JUnit test methods" id="UPJT" originalId="JUNIT.UPJT" scope="LINE" severity="3" since="7.5">
                <messages>
                    <msg index="1" value="Test method ''{0}'' does not contain any of the required tags in its Javadoc."/>
                    <msg index="2" value="Test method ''{0}'' does not have any Javadoc."/>
                    <msg index="3" value="The Javadoc for the test method ''{0}'' has one of the required Javadoc tags, but it is not followed by a token."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2019.API9.UPJT.REQUIRE_TOKEN" name="REQUIRE_TOKEN" value="Javadoc tag must be followed by a token."/>
                    <oldparam id="OWASP2019.API9.UPJT.REQUIRED_TAGS" name="REQUIRED_TAGS" value="Include one of the following tags in the Javadoc for each JUnit test method:"/>
                    <oldparam id="OWASP2019.API9.UPJT.CASE_SENSITIVE" name="CASE_SENSITIVE" value="Make tag checking case sensitive."/>
                </oldparameters>
                <parameters>
                    <param defaultValue="@pr;@fr" id="OWASP2019.API9.UPJT.REQUIRED_TAGS" inputType="stringList" label="Include one of the following tags in the Javadoc for each JUnit test method:" prevType="StringList"/>
                    <param defaultValue="true" id="OWASP2019.API9.UPJT.REQUIRE_TOKEN" inputType="checkbox" label="Javadoc tag must be followed by a token."/>
                    <param defaultValue="false" id="OWASP2019.API9.UPJT.CASE_SENSITIVE" inputType="checkbox" label="Make tag checking case sensitive."/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.VMCR" header="Avoid using the '@return' Javadoc tag on &quot;void&quot; methods." id="VMCR" originalId="JAVADOC.VMCR" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="&quot;void&quot; method has ''@return'' tag: ''{0} ()''."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.ORDER" header="Order Javadoc tags appropriately" id="ORDER" originalId="JAVADOC.ORDER" scope="LINE" severity="3" since="5.0">
                <messages>
                    <msg index="1" value="Invalid Javadoc tag order in ''{0}''."/>
                    <msg index="2" value="''{0}'' tag should be placed before ''{1}'' tag in ''{2}()''."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2019.API9.ORDER.CHECK" name="CHECK" value="check"/>
                    <oldparam id="OWASP2019.API9.ORDER.TAG_ORDER" name="TAG_ORDER" value="Javadoc Tag Order"/>
                    <oldparam id="OWASP2019.API9.ORDER.ORDER_LIST" name="ORDER_LIST" value="Javadoc tag table"/>
                    <oldparam id="OWASP2019.API9.ORDER.IGNORE" name="IGNORE" value="Ignore tag"/>
                </oldparameters>
                <parameters>
                    <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2019.API9.ORDER.ORDER_LIST" label="Javadoc tag table" reader="SATable">
                        <columns>
                            <column columnType="checkbox" editable="true" id="JAVADOC__ORDER__ORDER_LIST__COLUMN1" label="Ignore tag" required="true"/>
                            <column columnType="text" editable="true" id="JAVADOC__ORDER__ORDER_LIST__COLUMN2" label="Javadoc Tag Order" required="true"/>
                        </columns>
                        <predefinedRows>
                            <row id="1">
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@author"/>
                            </row>
                            <row id="2">
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@version"/>
                            </row>
                            <row id="3">
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@concurrency"/>
                            </row>
                            <row id="4">
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@param"/>
                            </row>
                            <row id="5">
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@return"/>
                            </row>
                            <row id="6">
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@exception"/>
                            </row>
                            <row id="7">
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@throws"/>
                            </row>
                            <row id="8">
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@see"/>
                            </row>
                            <row id="9">
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@since"/>
                            </row>
                            <row id="10">
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@serial"/>
                            </row>
                            <row id="11">
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@serialData"/>
                            </row>
                            <row id="12">
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@serialField"/>
                            </row>
                            <row id="13">
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN1" value="true"/>
                                <column refColumnId="JAVADOC__ORDER__ORDER_LIST__COLUMN2" value="@deprecated"/>
                            </row>
                        </predefinedRows>
                    </complexParamTable>

                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.MISFORMAT" header="Avoid misformatted Javadoc tags" id="MISFORMAT" originalId="JAVADOC.MISFORMAT" scope="METHOD" severity="3">
                <messages>
                    <msg index="1" value="Probably ''{0}'' is misformatted Javadoc tag."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2019.API9.MISFORMAT.JAVADOC.MISFORMAT.PUBLIC" name="JAVADOC.MISFORMAT.PUBLIC" value="Check &quot;public&quot; methods"/>
                    <oldparam id="OWASP2019.API9.MISFORMAT.JAVADOC.MISFORMAT.PROTECTED" name="JAVADOC.MISFORMAT.PROTECTED" value="Check &quot;protected&quot; methods"/>
                    <oldparam id="OWASP2019.API9.MISFORMAT.JAVADOC.MISFORMAT.PACKAGE" name="JAVADOC.MISFORMAT.PACKAGE" value="Check &quot;package-private&quot; methods"/>
                    <oldparam id="OWASP2019.API9.MISFORMAT.JAVADOC.MISFORMAT.PRIVATE" name="JAVADOC.MISFORMAT.PRIVATE" value="Check &quot;private&quot; methods"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="true" id="OWASP2019.API9.MISFORMAT.JAVADOC.MISFORMAT.PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods"/>
                    <param defaultValue="true" id="OWASP2019.API9.MISFORMAT.JAVADOC.MISFORMAT.PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods"/>
                    <param defaultValue="true" id="OWASP2019.API9.MISFORMAT.JAVADOC.MISFORMAT.PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; methods"/>
                    <param defaultValue="false" id="OWASP2019.API9.MISFORMAT.JAVADOC.MISFORMAT.PRIVATE" inputType="checkbox" label="Check &quot;private&quot; methods"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.SRRP" header="Specify 'RUNTIME' as the retention policy when using the '@Documented' annotation." id="SRRP" originalId="JAVADOC.SRRP" scope="LINE" severity="3" since="8.0">
                <messages>
                    <msg index="1" value="The '@Documented' annotation is used here without specifying 'RUNTIME' as the retention policy."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.TSOL" header="Ensure that certain Javadoc tags only span one line." id="TSOL" originalId="JAVADOC.TSOL" scope="LINE" severity="3" since="8.1">
                <messages>
                    <msg index="1" value="This ''{0}'' tag spans multiple lines. Ensure that this is correct."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2019.API9.TSOL.TAG_LIST" name="TAG_LIST" value="Tags which should not span multiple lines"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="@author;@since" id="OWASP2019.API9.TSOL.TAG_LIST" inputType="stringList" label="Tags which should not span multiple lines" prevType="StringList"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.DPMT" header="Avoid unused Javadoc tags" id="DPMT" originalId="JAVADOC.DPMT" scope="LINE" severity="3" since="5.0">
                <messages>
                    <msg index="1" value="''{0}'' doesn''t match the return type of ''{1}''."/>
                    <msg index="2" value="''{0}'' doesn''t match any Java element."/>
                    <msg index="3" value="''{0}'' doesn''t match any parameter in ''{1}''."/>
                    <msg index="4" value="''{0}'' doesn''t match any exception thrown by ''{1}''."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2019.API9.DPMT.CHECK_SEE" name="CHECK_SEE" value="Check unused @see and @link tags"/>
                    <oldparam id="OWASP2019.API9.DPMT.CHECK_THROWS" name="CHECK_THROWS" value="Check unused @throws and @exception tags"/>
                    <oldparam id="OWASP2019.API9.DPMT.CHECK_PARAM" name="CHECK_PARAM" value="Check unused @param tags"/>
                    <oldparam id="OWASP2019.API9.DPMT.IGNORE_RUNTIME_EXCEPTION" name="IGNORE_RUNTIME_EXCEPTION" value="Ignore @throws and @exception tags of 'RuntimeException'"/>
                    <oldparam id="OWASP2019.API9.DPMT.CHECK_RETURN" name="CHECK_RETURN" value="Check unused @return tags"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="true" id="OWASP2019.API9.DPMT.CHECK_PARAM" inputType="checkbox" label="Check unused @param tags"/>
                    <param defaultValue="true" id="OWASP2019.API9.DPMT.CHECK_RETURN" inputType="checkbox" label="Check unused @return tags"/>
                    <param defaultValue="true" id="OWASP2019.API9.DPMT.CHECK_THROWS" inputType="checkbox" label="Check unused @throws and @exception tags">
                        <param defaultValue="true" id="OWASP2019.API9.DPMT.IGNORE_RUNTIME_EXCEPTION" inputType="checkbox" label="Ignore @throws and @exception tags of 'RuntimeException'"/>
                    </param>
                    <param defaultValue="true" id="OWASP2019.API9.DPMT.CHECK_SEE" inputType="checkbox" label="Check unused @see and @link tags"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.SMJT" header="Use the '@concurrency' Javadoc tag on &quot;synchronized&quot; methods and blocks" id="SMJT" originalId="JAVADOC.SMJT" scope="METHOD" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Missing '@concurrency' Javadoc comment for &quot;synchronized&quot; method: {0}."/>
                    <msg index="2" value="Missing '@concurrency' Javadoc comment for method with &quot;synchronized&quot; block: {0}."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2019.API9.SMJT.JAVADOC.SMJT" name="JAVADOC.SMJT" value="Check &quot;public&quot; methods"/>
                    <oldparam id="OWASP2019.API9.SMJT.JAVADOC.SMJT2" name="JAVADOC.SMJT2" value="Check &quot;protected&quot; methods"/>
                    <oldparam id="OWASP2019.API9.SMJT.JAVADOC.SMJT3" name="JAVADOC.SMJT3" value="Check &quot;package-private&quot; methods"/>
                    <oldparam id="OWASP2019.API9.SMJT.JAVADOC.SMJT4" name="JAVADOC.SMJT4" value="Check &quot;private&quot; methods"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="true" id="OWASP2019.API9.SMJT.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods"/>
                    <param defaultValue="true" id="OWASP2019.API9.SMJT.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods"/>
                    <param defaultValue="true" id="OWASP2019.API9.SMJT.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; methods"/>
                    <param defaultValue="false" id="OWASP2019.API9.SMJT.CHECK_PRIVATE" inputType="checkbox" label="Check &quot;private&quot; methods"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.JAVADOC.TSMJT" header="Provide a Javadoc comment for 'toString()' methods." id="TSMJT" originalId="JAVADOC.TSMJT" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Missing Javadoc for 'toString()'"/>
                    <msg index="2" value="Missing Javadoc header for 'toString()'"/>
                </messages>
            </rule>
         </category>
         <category description="API8-Injection" name="API8">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.ARM" header="Avoid using reflection methods" id="ARM" originalId="CODSTA.BP.ARM" scope="LINE" severity="4" since="9.0">
                    <messages>
                        <msg index="1" value="Reflection method ''{0}'' called."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API8.ARM.CHECKED_METHODS" name="CHECKED_METHODS" value="Check the following methods:"/>
                        <oldparam id="OWASP2019.API8.ARM.TYPE" name="TYPE" value="Type (qualified name)"/>
                        <oldparam id="OWASP2019.API8.ARM.METHOD" name="METHOD" value="Method name (regular expression)"/>
                    </oldparameters>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2019.API8.ARM.CHECKED_METHODS" label="Check the following methods:" reader="SATable">
                            <columns>
                                <column columnType="text" defaultValue="unknown" editable="true" id="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" label="Type (qualified name)" required="true"/>
                                <column columnType="text" defaultValue="unknown" editable="true" id="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" label="Method name (regular expression)" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" value="get(Declared)?(Constructor|Field|Method)(s)?"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" value="newInstance"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Constructor"/>
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" value="setAccessible"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Constructor"/>
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" value="newInstance"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Method"/>
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" value="invoke"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Method"/>
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" value="setAccessible"/>
                                </row>
                                <row id="7">
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Field"/>
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" value="set.*"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.CDBV" header="Canonicalize all data before validation." id="CDBV" originalId="SECURITY.IBA.CDBV" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="The data in ''{0}'' may not have been canonicalized before being validated."/>
                        <msg index="2" value="The return value of this call to ''{0}'' may not have been canonicalized before being validated."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API8.CDBV.CANON_METHS" name="CANON_METHS" value="Canonicalization method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                        <oldparam id="OWASP2019.API8.CDBV.VALID_METHS" name="VALID_METHS" value="Validation method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                        <oldparam id="OWASP2019.API8.CDBV.VALID_CLASSES" name="VALID_CLASSES" value="Only check calls within the following classes\n[regular expressions for fully qualified class name]"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Input Validation p. 81</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A1" name="OWASP-2010">A1-Injection</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A2" name="OWASP-2010">A2-Cross Site Scripting (XSS)</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/79.html" name="CWE">79</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*#canonicalize" description="Canonicalization method names (in regular expressions) [qualified name of declaring type#method name]" id="OWASP2019.API8.CDBV.CANON_METHS" inputType="stringList" label="Canonicalization method names (in regular expressions)" prevType="StringList"/>
                        <param defaultValue=".*#^validate" description="Validation method names (in regular expressions) [qualified name of declaring type#method name]" id="OWASP2019.API8.CDBV.VALID_METHS" inputType="stringList" label="Validation method names (in regular expressions)" prevType="StringList"/>
                        <param defaultValue=".*" description="Only check calls within the following classes [regular expressions for fully qualified class name]" id="OWASP2019.API8.CDBV.VALID_CLASSES" inputType="stringList" label="Only check calls within the following classes" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ASAPI" header="Prevent the scripting API from executing untrusted code" id="ASAPI" originalId="SECURITY.WSC.ASAPI" scope="LINE" severity="3" since="9.0">
                    <messages>
                        <msg index="1" value="Ensure that the use of the scripting API does not allow untrusted dynamic code execution."/>
                        <msg index="2" value="The eval() method is called on the scriptEngine object and may execute untrusted dynamic code."/>
                    </messages>
                    <parameters>
                        <param defaultValue="true" id="OWASP2019.API8.ASAPI.REPORT_ON_EVAL" inputType="checkbox" label="Report violation on eval method invocation"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.UEHL.DCEMSL" header="Avoid untrusted input when logging messages with Seam Logging API" id="DCEMSL" originalId="SECURITY.UEHL.DCEMSL" scope="LINE" severity="1" since="10.4.3">
                    <messages>
                        <msg index="1" value="The ''{0}'' method called on the object of the Log class takes a dangerous argument."/>
                    </messages>
                    <parameters>
                        <param defaultValue="false" id="OWASP2019.API8.DCEMSL.CLASS_FIELDS_ARE_SAFE" inputType="checkbox" label="Consider class fields to be secure"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.AEAF" header="Do not extend from the Struts classes 'ActionForm' and 'DynaActionForm'." id="AEAF" originalId="SECURITY.IBA.AEAF" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="Consider extending 'DynaValidatorForm' or 'DynaValidatorActionForm'"/>
                        <msg index="2" value="Consider extending 'ValidatorForm' or 'ValidatorActionForm'"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for SQL Injection p. 121</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/104.html" name="CWE">104</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/89.html" name="CWE">89</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.EDPM" header="Encapsulate constructor arguments with a validation function" id="EDPM" originalId="SECURITY.IBA.EDPM" scope="METHOD" severity="2" since="10.2">
                    <messages>
                        <msg index="1" value="The constructor for &quot;{0}&quot; returns dangerous data and its arguments should be encapsulated by a validation method."/>
                    </messages>
                    <parameters>
                        <param defaultValue="" id="OWASP2019.API8.EDPM.DANGEROUS_TYPES_LIST" inputType="stringList" label="User-defined types to be inspected (in regular expressions)\n[qualified name of declaring type]"/>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2019.API8.EDPM.ENCAPSULATE_METHOD_LIST" label="Validation method names (in regular expressions)\n[qualified name of declaring type and method name]" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__IBA__EDPM__ENCAPSULATE_METHOD_LIST__COLUMN1" label="Additional dangerous types" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__IBA__EDPM__ENCAPSULATE_METHOD_LIST__COLUMN2" label="Validation Methods" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__IBA__EDPM__ENCAPSULATE_METHOD_LIST__COLUMN1" value=".*"/>
                                    <column refColumnId="SECURITY__IBA__EDPM__ENCAPSULATE_METHOD_LIST__COLUMN2" value="validate.*"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/15.html" name="CWE">15</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.VJFS" header="Always verify JarFile signatures" id="VJFS" originalId="SECURITY.WSC.VJFS" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Consider using a JarFile constructor with verification enabled."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/347.html" name="CWE">347</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.DXXE" header="Disable XML external entity injection." id="DXXE" originalId="SECURITY.IBA.DXXE" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="XXE injection has not been disabled."/>
                        <msg index="2" value="XXE injection has not been disabled. Ensure your parser version allows you to configure the required options."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.INTER.SEO" header="Avoid calling methods and constructors which do not allow you to specify a character encoding option." id="SEO" originalId="INTER.SEO" scope="LINE" severity="3" since="8.1">
                <messages>
                    <msg index="1" value="You may not want to use this constructor for ''{0}'' because it does not allow you to specify an encoding option."/>
                    <msg index="2" value="You may not want to use the method ''{0}()'' because it does not allow you to specify an encoding option."/>
                    <msg index="3" value="You may not want to use the type ''{0}'' because it does not allow you to specify an encoding option."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2019.API8.SEO.METHODS_TO_CHECK" name="METHODS_TO_CHECK" value="Methods and Constructors to Avoid (in form of\n&lt;fully qualified type name&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,&lt;parameter2 fully qualified type&gt;)):"/>
                    <oldparam id="OWASP2019.API8.SEO.TYPES_TO_CHECK" name="TYPES_TO_CHECK" value="Types to Avoid (Fully Qualified Names):"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="java.io.InputStreamReader#InputStreamReader(java.io.InputStream);java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream);java.lang.String#getBytes();java.lang.String#String(byte[]);java.lang.String#String(byte[],int,int);javax.mail.internet.MimeBodyPart#setDescription(java.lang.String);javax.mail.internet.MimeBodyPart#setText(java.lang.String);javax.mail.internet.MimeMessage#setDescription(java.lang.String);javax.mail.internet.MimeMessage#setSubject(java.lang.String);javax.mail.internet.MimeMessage#setText(java.lang.String)" description="Methods and Constructors to Avoid (in form of &lt;fully qualified type name&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,&lt;parameter2 fully qualified type&gt;))" id="OWASP2019.API8.SEO.METHODS_TO_CHECK" inputType="stringList" label="Methods and Constructors to Avoid:" prevType="StringList"/>
                    <param defaultValue="java.io.FileReader;java.io.FileWriter" id="OWASP2019.API8.SEO.TYPES_TO_CHECK" inputType="stringList" label="Types to Avoid (Fully Qualified Names):" prevType="StringList"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.UPS" header="Use 'prepareCall' or 'prepareStatement' instead of 'createStatement'" id="UPS" originalId="SECURITY.IBA.UPS" scope="LINe" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="Consider using 'prepareCall()' or 'prepareStatement()' to prevent SQL injection vulnerabilities"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for SQL Injection p. 121</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A1" name="OWASP-2010">A1-Injection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/89.html" name="CWE">89</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.XPIJ" header="Avoid XPath injection when evaluating XPath queries" id="XPIJ" originalId="SECURITY.IBA.XPIJ" scope="LINE" severity="1" since="8.4">
                    <messages>
                        <msg index="1" value="Avoid using variable ''{0}'' in XPath query."/>
                        <msg index="2" value="'XPathVariableResolver' is not set in XPath variable ''{0}''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API8.XPIJ.CHECK_VAR_RESOLVER" name="CHECK_VAR_RESOLVER" value="Check if 'XPathVariableResolver' is not set in XPath objects"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="OWASP2019.API8.XPIJ.CHECK_VAR_RESOLVER" inputType="checkbox" label="Check if 'XPathVariableResolver' is not set in XPath objects"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.AUXD" header="Avoid parsing untrusted data with XMLDecoder" id="AUXD" originalId="SECURITY.IBA.AUXD" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The XMLDecoder class is used."/>
                    </messages>
                </rule>
         </category>
         <category description="API4-Lack of Resources &amp; Rate Limiting" name="API4">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.DMDS" header="Avoid using the DriverManagerDataSource class in production code" id="DMDS" originalId="SECURITY.WSC.DMDS" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The DriverManagerDataSource class is not a pooled data source and should not be used in production code."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.JDBC.ODBIL" header="Do not open or close JDBC connections in loops" id="ODBIL" originalId="JDBC.ODBIL" scope="LINE" severity="3" since="8.0">
                <messages>
                    <msg index="1" value="The method ''{0}'' opens a JDBC connection and is called in a loop."/>
                    <msg index="2" value="The method ''{0}'' closes a JDBC connection and is called in a loop."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2019.API4.ODBIL.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
                    <oldparam id="OWASP2019.API4.ODBIL.ADDITIONAL_CLOSE_METHODS" name="ADDITIONAL_CLOSE_METHODS" value="Additional JDBC connection closing methods (in regular expression)"/>
                    <oldparam id="OWASP2019.API4.ODBIL.ADDITIONAL_OPEN_METHODS" name="ADDITIONAL_OPEN_METHODS" value="Additional JDBC connection opening methods (in regular expression)"/>
                    <oldparam id="OWASP2019.API4.ODBIL.METHOD" name="METHOD" value="Method name"/>
                    <oldparam id="OWASP2019.API4.ODBIL.TYPE" name="TYPE" value="Declaring type"/>
                </oldparameters>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE">404</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE">772</reference>
                </references>
                <parameters>
                    <param defaultValue="1" id="OWASP2019.API4.ODBIL.MAX_LEVEL" inputType="integer" label="Maximum level of checking allowed" min="0"/>
                    <!--param id="JDBC.ODBIL.ADDITIONAL_OPEN_METHODS" inputType="bigtext" defaultValue="" label="Additional JDBC connection opening methods (in regular expression)"/-->
                    <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2019.API4.ODBIL.ADDITIONAL_OPEN_METHODS" label="Additional JDBC connection opening methods (in regular expression)" reader="SATable">
                        <columns>
                            <column columnType="text" defaultValue=".*" editable="true" id="JDBC__ODBIL__ADDITIONAL_OPEN_METHODS__COLUMN1" label="Declaring type" required="true"/>
                            <column columnType="text" defaultValue=".*" editable="true" id="JDBC__ODBIL__ADDITIONAL_OPEN_METHODS__COLUMN2" label="Method name" required="true"/>
                        </columns>
                    </complexParamTable>
                    <!--param id="JDBC.ODBIL.ADDITIONAL_CLOSE_METHODS" inputType="bigtext" defaultValue="" label="Additional JDBC connection closing methods (in regular expression)"/-->
                    <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2019.API4.ODBIL.ADDITIONAL_CLOSE_METHODS" label="Additional JDBC connection closing methods (in regular expression)" reader="SATable">
                        <columns>
                            <column columnType="text" defaultValue=".*" editable="true" id="JDBC__ODBIL__ADDITIONAL_CLOSE_METHODS__COLUMN1" label="Declaring type" required="true"/>
                            <column columnType="text" defaultValue=".*" editable="true" id="JDBC__ODBIL__ADDITIONAL_CLOSE_METHODS__COLUMN2" label="Method name" required="true"/>
                        </columns>
                    </complexParamTable>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.CRWD" header="Close resources as early as possible" id="CRWD" originalId="OPT.CRWD" scope="LINE" severity="3" since="8.0">
                <messages>
                    <msg index="1" value="It may be possible to move this call to &quot;close&quot; earlier in the method."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2019.API4.CRWD.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
                    <oldparam id="OWASP2019.API4.CRWD.ADDITIONAL_CLOSE_METHODS" name="ADDITIONAL_CLOSE_METHODS" value="Additional resource closing methods (in regular expression)"/>
                    <oldparam id="OWASP2019.API4.CRWD.METHOD" name="METHOD" value="Method name"/>
                    <oldparam id="OWASP2019.API4.CRWD.TYPE" name="TYPE" value="Declaring type"/>
                </oldparameters>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE">404</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE">772</reference>
                </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.ISTART" header="Do not call the 'start()' method directly on Thread class instances " id="ISTART" originalId="TRS.ISTART" scope="LINE" severity="4" since="10.4">
                <messages>
                    <msg index="1" value="A call to the Thread.start() method."/>
                </messages>
                <parameters>
                    <param defaultValue="true" id="OWASP2019.API4.ISTART.CHECK_ONLY_IN_LOOPS" inputType="checkbox" label="Ignore method calls outside of loops"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PBFA" header="Ensure sufficient protection against multiple failed authentication attempts" id="PBFA" originalId="SECURITY.WSC.PBFA" scope="LINE" severity="5" type="global">
                    <messages>
                        <msg index="1" value="This class uses the object of the AuthenticationFailureBadCredentialsEvent class. Ensure that sufficient protection against multiple failed authentication attempts is implemented."/>
                        <msg index="2" value="Ensure that the implementation of the 'onAuthenticationFailure()' method provides sufficient protection against multiple failed authentication attempts."/>
                        <msg index="3" value="Ensure that the implementation of the 'configure()' method provides sufficient protection against multiple failed authentication attempts."/>
                        <msg index="4" value="Ensure that the application code includes sufficient protection against multiple failed authentication attempts."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.NSYN" header="Ensure 'wait()', 'notify()' and 'notifyAll()' are invoked on an object that is clearly synchronized in its enclosing mod scope." id="NSYN" originalId="TRS.NSYN" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="''{0}()'' might throw ''IllegalMonitorStateException'' as it's not enclosed in corresponding &quot;synchronized&quot; block or method."/>
                </messages>
            </rule>
         </category>
         <category description="API5-Broken Function Level Authorization" name="API5">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CACM" header="Keep all access control methods centralized to enforce consistency" id="CACM" originalId="SECURITY.WSC.CACM" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="''{0}()'' is not allowed to be invoked within ''{1}()'', it should only be invoked inside centralized access control method declarations."/>
                        <msg index="2" value="''{0}()'' is not allowed to be invoked unless enclosed by centralized access control methods."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2019.API5.CACM.ENCLOSING_METHOD_LIST" name="ENCLOSING_METHOD_LIST" value="Centralized access control method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                        <oldparam id="OWASP2019.API5.CACM.DANGEROUS_METHOD_LIST" name="DANGEROUS_METHOD_LIST" value="Access control method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authorization p. 73</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A6" name="OWASP-2010">A6-Security Misconfiguration</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A8" name="OWASP-2010">A8-Failure to Restrict URL Access</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/732.html" name="CWE">732</reference>
                    </references>
                    <parameters>
                        <param defaultValue="javax.servlet.*ServletRequest.*#getRemoteUser.*;javax.servlet.*ServletRequest.*#isUserInRole.*;java.security.Principal#getUserPrincipal.*;javax.security.auth.Subject#doAs.*;javax.security.auth.Subject#getPrincipals.*;javax.security.auth.Subject#get.*Credentials.*;javax.security.auth.Subject#getSubject.*;" description="Access control method names (in regular expressions) [qualified name of declaring type#method name]" id="OWASP2019.API5.CACM.DANGEROUS_METHOD_LIST" inputType="stringList" label="Access control method names (in regular expressions)" prevType="StringList"/>
                        <param defaultValue=".*Servlet.*#doGet.*" description="Centralized access control method names (in regular expressions) [qualified name of declaring type#method name]" id="OWASP2019.API5.CACM.ENCLOSING_METHOD_LIST" inputType="stringList" label="Centralized access control method names (in regular expressions)" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
      </category>
      <category description="SEI CERT Oracle Coding Standard for Java" name="CERT">
         <category description="OBJ04-J: Provide mutable classes with copy functionality to safely allow passing instances to untrusted code" name="OBJ04">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.CPCL" header="Enforce returning a defensive copy in 'clone()' methods" id="CPCL" originalId="SECURITY.EAB.CPCL" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Field ''{0}'' is not initialized as a defensive copy."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CLONE" header="Make your 'clone()' method &quot;final&quot; for security." id="CLONE" originalId="SECURITY.WSC.CLONE" scope="LINE" severity="4" since="4.5">
                    <messages>
                        <msg index="1" value="'clone()' method is not &quot;final&quot;."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/491.html" name="CWE">491</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.MPT" header="Do not pass user-given mutable objects directly to certain types" id="MPT" originalId="SECURITY.EAB.MPT" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="New instance of type ''{0}'' is passed mutable parameter ''{1}'' directly."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.OBJ04.MPT.CHECK_PROTECTED" name="CHECK_PROTECTED" value="Check &quot;protected&quot; methods"/>
                        <oldparam id="CERT.OBJ04.MPT.CHECK_PUBLIC" name="CHECK_PUBLIC" value="Check &quot;public&quot; methods"/>
                        <oldparam id="CERT.OBJ04.MPT.CHECK_PACKAGE" name="CHECK_PACKAGE" value="Check &quot;package-private&quot; methods"/>
                        <oldparam id="CERT.OBJ04.MPT.CHECK_ARRAYS" name="CHECK_ARRAYS" value="Check arrays"/>
                        <oldparam id="CERT.OBJ04.MPT.CHECK_MUTABLE_TYPES" name="CHECK_MUTABLE_TYPES" value="Check mutable types"/>
                        <oldparam id="CERT.OBJ04.MPT.CHECKED_CONSTRUCTORS" name="CHECKED_CONSTRUCTORS" value="Check for values passed to new instances of the following types:"/>
                        <oldparam id="CERT.OBJ04.MPT.TYPES_TO_CHECK" name="TYPES_TO_CHECK" value="Types to check"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="CERT.OBJ04.MPT.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods"/>
                        <param defaultValue="false" id="CERT.OBJ04.MPT.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods"/>
                        <param defaultValue="false" id="CERT.OBJ04.MPT.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; methods"/>
                        <group collapsible="false" id="CERT.OBJ04.MPT.group.0" label="Types to check">
                            <param defaultValue="true" id="CERT.OBJ04.MPT.CHECK_ARRAYS" inputType="checkbox" label="Check arrays"/>
                            <param defaultValue="true" id="CERT.OBJ04.MPT.CHECK_MUTABLE_TYPES" inputType="checkbox" label="Check mutable types"/>
                        </group>
                        <param defaultValue="java\.security\.PrivilegedAction;java\.security\.PrivilegedExceptionAction" id="CERT.OBJ04.MPT.CHECKED_CONSTRUCTORS" inputType="stringList" label="Check for values passed to new instances of the following types:" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.MUCOP" header="Provide mutable classes with copy functionality" id="MUCOP" originalId="OOP.MUCOP" scope="LINE" severity="3" since="9.0">
                <messages>
                    <msg index="1" value="{0} missing."/>
                </messages>
                <oldparameters>
                    <oldparam id="CERT.OBJ04.MUCOP.PUBLIC_CLONE" name="PUBLIC_CLONE" value="Provide a public clone method(relevant for final classes)"/>
                    <oldparam id="CERT.OBJ04.MUCOP.COPY_CONSTRUCTOR" name="COPY_CONSTRUCTOR" value="Provide a copy constructor"/>
                    <oldparam id="CERT.OBJ04.MUCOP.STATIC_CREATION" name="STATIC_CREATION" value="Provide a static creation method"/>
                    <oldparam id="CERT.OBJ04.MUCOP.SELECT_OPTIONS" name="SELECT_OPTIONS" value="Select which options to require"/>
                </oldparameters>
                <parameters>
                    <group collapsible="false" id="CERT.OBJ04.MUCOP.group.0" label="Select which options to require">
                        <param defaultValue="true" id="CERT.OBJ04.MUCOP.PUBLIC_CLONE" inputType="checkbox" label="Provide a public clone method(relevant for final classes)"/>
                        <param defaultValue="true" id="CERT.OBJ04.MUCOP.STATIC_CREATION" inputType="checkbox" label="Provide a static creation method"/>
                        <param defaultValue="true" id="CERT.OBJ04.MUCOP.COPY_CONSTRUCTOR" inputType="checkbox" label="Provide a copy constructor"/>
                    </group>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.SMO" header="Do not store user-given mutable objects directly into variables" id="SMO" originalId="SECURITY.EAB.SMO" scope="LINE" severity="3" since="8.0">
                    <messages>
                        <msg index="1" value="This assignment may store the original parameter ''{0}'' rather than a copy of the parameter into the field ''{1}''."/>
                        <msg index="2" value="This assignment may store the original parameter ''{0}'' rather than a copy of the parameter into the variable ''{1}''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.OBJ04.SMO.CHECK_PROTECTED" name="CHECK_PROTECTED" value="Check &quot;protected&quot; methods"/>
                        <oldparam id="CERT.OBJ04.SMO.CHECK_PUBLIC" name="CHECK_PUBLIC" value="Check &quot;public&quot; methods"/>
                        <oldparam id="CERT.OBJ04.SMO.CHECK_PACKAGE" name="CHECK_PACKAGE" value="Check &quot;package-private&quot; methods"/>
                        <oldparam id="CERT.OBJ04.SMO.CHECK_ARRAYS" name="CHECK_ARRAYS" value="Check arrays"/>
                        <oldparam id="CERT.OBJ04.SMO.CHECK_MUTABLE_TYPES" name="CHECK_MUTABLE_TYPES" value="Check mutable types"/>
                        <oldparam id="CERT.OBJ04.SMO.TYPES_TO_CHECK" name="TYPES_TO_CHECK" value="Types to check"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="CERT.OBJ04.SMO.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods"/>
                        <param defaultValue="false" id="CERT.OBJ04.SMO.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods"/>
                        <param defaultValue="false" id="CERT.OBJ04.SMO.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; methods"/>
                        <group collapsible="false" id="CERT.OBJ04.SMO.group.0" label="Types to check">
                            <param defaultValue="true" id="CERT.OBJ04.SMO.CHECK_ARRAYS" inputType="checkbox" label="Check arrays"/>
                            <param defaultValue="true" id="CERT.OBJ04.SMO.CHECK_MUTABLE_TYPES" inputType="checkbox" label="Check mutable types"/>
                        </group>
                    </parameters>
                </rule>
         </category>
         <category description="OBJ08-J: Do not expose private members of an outer class from within a nested class" name="OBJ08">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.INNER" header="Make all member classes &quot;private&quot;." id="INNER" originalId="SECURITY.WSC.INNER" scope="CLASS" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Member class ''{0}'' is not &quot;private&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.OBJ08.INNER.IGNORE_STATIC" name="IGNORE_STATIC" value="Ignore &quot;static&quot; member classes"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="CERT.OBJ08.INNER.IGNORE_STATIC" inputType="checkbox" label="Ignore &quot;static&quot; member classes"/>
                        <param defaultValue="false" id="CERT.OBJ08.INNER.CHECK_INTERFACE" inputType="checkbox" label="Check member interfaces"/>
                    </parameters>
                </rule>
         </category>
         <category description="STR02-J: Specify an appropriate locale when comparing locale-dependent data" name="STR02">
            <rule class="com.parasoft.jtest.standards.rules.builtin.INTER.CCL" header="Use the optional java.util.Locale parameter" id="CCL" originalId="INTER.CCL" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="The ''{0}'' method is called without the java.util.Locale parameter"/>
                </messages>
                <parameters>
                    <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CERT.STR02.CCL.CANDIDATES_TABLE" label="List of methods with optional java.util.Locale parameter" reader="SATable">
                        <columns>
                            <column columnType="text" editable="true" id="INTER__CCL__CANDIDATES_TABLE__COLUMN1" label="Type" required="true"/>
                            <column columnType="text" editable="true" id="INTER__CCL__CANDIDATES_TABLE__COLUMN2" label="Method" required="true"/>
                        </columns>
                        <predefinedRows>
                            <row id="1">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.awt.Font"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getFamily"/>
                            </row>
                            <row id="2">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.awt.Font"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getFontName"/>
                            </row>
                            <row id="3">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.awt.GraphicsEnvironment"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getAvailableFontFamilyNames"/>
                            </row>
                            <row id="4">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.io.PrintStream"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="format"/>
                            </row>
                            <row id="5">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.io.PrintStream"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="printf"/>
                            </row>
                            <row id="6">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.io.PrintWriter"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="format"/>
                            </row>
                            <row id="7">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.io.PrintWriter"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="printf"/>
                            </row>
                            <row id="8">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.lang.String"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="format"/>
                            </row>
							<row id="9">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.lang.String"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="toLowerCase"/>
                            </row>
							<row id="10">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.lang.String"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="toUpperCase"/>
                            </row>
							<row id="11">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.nio.charset.Charset"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="displayName"/>
                            </row>
							<row id="12">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.BreakIterator"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getCharacterInstance"/>
                            </row>
							<row id="13">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.BreakIterator"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getLineInstance"/>
                            </row>
							<row id="14">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.BreakIterator"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getSentenceInstance"/>
                            </row>
							<row id="15">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.BreakIterator"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getWordInstance"/>
                            </row>
							<row id="16">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.Collator"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getInstance"/>
                            </row>
							<row id="17">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.DateFormat"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getDateInstance"/>
                            </row>
							<row id="18">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.DateFormat"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getDateTimeInstance"/>
                            </row>
							<row id="19">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.DateFormat"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getTimeInstance"/>
                            </row>
							<row id="20">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.DateFormatSymbols"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getInstance"/>
                            </row>
							<row id="21">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.DecimalFormatSymbols"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getInstance"/>
                            </row>
							<row id="22">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.NumberFormat"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getInstance"/>
                            </row>
							<row id="23">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.NumberFormat"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getIntegerInstance"/>
                            </row>
							<row id="24">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.NumberFormat"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getNumberInstance"/>
                            </row>
							<row id="25">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.NumberFormat"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getPercentInstance"/>
                            </row>
							<row id="26">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.NumberFormat"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getScientificInstance"/>
                            </row>
							<row id="27">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.text.NumberFormat"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getCurrencyInstance"/>
                            </row>
							<row id="28">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.time.format.DateTimeFormatter"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="ofPattern"/>
                            </row>
							<row id="29">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.time.format.DateTimeFormatterBuilder"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="toFormatter"/>
                            </row>
							<row id="30">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.time.format.ZoneName"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="toZid"/>
                            </row>
							<row id="31">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.util.Calendar"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getInstance"/>
                            </row>
							<row id="32">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.util.Currency"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getDisplayName"/>
                            </row>
							<row id="33">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.util.Currency"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getInstance"/>
                            </row>
							<row id="34">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.util.Currency"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getSymbol"/>
                            </row>
							<row id="35">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.util.Formatter"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="format"/>
                            </row>
							<row id="36">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="java.util.TimeZone"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getDisplayName"/>
                            </row>
							<row id="37">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javafx.beans.binding.Bindings"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="format"/>
                            </row>
							<row id="38">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javafx.beans.binding.NumberExpression"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="asString"/>
                            </row>
							<row id="39">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javafx.beans.binding.NumberExpressionBase"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="asString"/>
                            </row>
							<row id="40">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javafx.beans.binding.ObjectExpression"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="asString"/>
                            </row>
							<row id="41">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.accessibility.AccessibleBundle"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="toDisplayString"/>
                            </row>
							<row id="42">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.MultiUIDefaults"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="get"/>
                            </row>
							<row id="43">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.UIDefaults"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="get"/>
                            </row>
							<row id="44">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.UIDefaults"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getBoolean"/>
                            </row>
							<row id="45">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.UIDefaults"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getBorder"/>
                            </row>
							<row id="46">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.UIDefaults"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getColor"/>
                            </row>
							<row id="47">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.UIDefaults"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getDimension"/>
                            </row>
							<row id="48">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.UIDefaults"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getFont"/>
                            </row>
							<row id="49">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.UIDefaults"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getIcon"/>
                            </row>
							<row id="50">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.UIDefaults"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getInsets"/>
                            </row>
							<row id="51">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.UIDefaults"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getInt"/>
                            </row>
							<row id="52">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.swing.UIDefaults"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="getString"/>
                            </row>
							<row id="53">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.xml.soap.SOAPBody"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="addFault"/>
                            </row>
							<row id="54">
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN1" value="javax.xml.soap.SOAPFault"/>
                                <column refColumnId="INTER__CCL__CANDIDATES_TABLE__COLUMN2" value="setFaultString"/>
                            </row>
                        </predefinedRows>
                    </complexParamTable>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.INTER.CTLC" header="Do not call 'Character.toLowerCase(char)' or 'Character.toUpperCase(char)' in an internationalized environment." id="CTLC" index="1" originalId="INTER.CTLC" scope="LINE" severity="3" since="8.1">
                <messages>
                    <msg index="1" value="Called 'Character.toLowerCase(char)'"/>
                    <msg index="2" value="Called 'Character.toUpperCase(char)'"/>
                </messages>
            </rule>
         </category>
         <category description="MSC03-J: Never hard code sensitive information" name="MSC03">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HCCK" header="Avoid using hard-coded cryptographic keys" id="HCCK" originalId="SECURITY.WSC.HCCK" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Hard-coded cryptographic key here."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.MSC03.HCCK.MIN_LENGTH" name="MIN_LENGTH" value="Check keys whose length is greater than "/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/321.html" name="CWE">321</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/506.html" name="CWE">506</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/759.html" name="CWE">759</reference>
                    </references>
                    <parameters>
                        <param defaultValue="9" id="CERT.MSC03.HCCK.MIN_LENGTH" inputType="integer" label="Check keys whose length is greater than " min="9"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HCCS" header="Avoid passing hardcoded usernames/passwords/URLs to database connection methods." id="HCCS" originalId="SECURITY.WSC.HCCS" scope="LINE" severity="1" since="8.1">
                    <messages>
                        <msg index="1" value="This call to ''{0}()'' may be dangerous because it passes in only hard-coded Strings."/>
                        <msg index="2" value="This call to ''{0}()'' may be dangerous because it uses a hard-coded password."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.MSC03.HCCS.CONNECT_METHS" name="CONNECT_METHS" value="Additional Database Connection Methods \n(in form of &lt;qualified name of declaring type&gt;#&lt;method name&gt;)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Java leading security practice p. 170</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/259.html" name="CWE">259</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/547.html" name="CWE">547</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/798.html" name="CWE">798</reference>
                    </references>
                    <parameters>
                        <param defaultValue="" description="Additional Database Connection Methods (in form of &lt;qualified name of declaring type&gt;#&lt;method name&gt;)" id="CERT.MSC03.HCCS.CONNECT_METHS" inputType="stringList" label="Additional Database Connection Methods" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AHCA" header="Avoid hard-coding the arguments to certain methods" id="AHCA" originalId="SECURITY.WSC.AHCA" scope="LINE" severity="1" since="8.4">
                    <messages>
                        <msg index="1" value="Argument # {0} to the method ''{1}()'' should not be hard-coded."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.MSC03.AHCA.DANGEROUS_METHODS" name="DANGEROUS_METHODS" value="Methods to Check (Press &quot;Ctrl-Space&quot; for Content Assist)"/>
                        <oldparam id="CERT.MSC03.AHCA.METHOD" name="METHOD" value="Method (Specify &lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,&lt;parameter2 fully qualified type&gt;,...)"/>
                        <oldparam id="CERT.MSC03.AHCA.INDEX" name="INDEX" value="Argument Index to Check (&quot;0&quot;-based)"/>
                    </oldparameters>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CERT.MSC03.AHCA.DANGEROUS_METHODS" label="Methods to Check" reader="SATable">
                            <columns>
                                <column columnType="text" description="Specify &lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,&lt;parameter2 fully qualified type&gt;,...)" editable="true" id="SECURITY__WSC__AHCA__DANGEROUS_METHODS__COLUMN1" label="Method" required="true" textSize="large"/>
                                <column columnType="text" editable="true" id="SECURITY__WSC__AHCA__DANGEROUS_METHODS__COLUMN2" label="Argument Index to Check (&quot;0&quot;-based)" required="true" textSize="small"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__AHCA__DANGEROUS_METHODS__COLUMN1" value="org.owasp.esapi.Encryptor#hash(java.lang.String,java.lang.String)"/>
                                    <column refColumnId="SECURITY__WSC__AHCA__DANGEROUS_METHODS__COLUMN2" value="1"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="EXP05-J: Do not follow a write by a subsequent write or read of the same object within an expression" name="EXP05">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.READ.CID" header="Avoid using increment or decrement operators in nested expressions." id="CID" originalId="CODSTA.READ.CID" scop="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="Increment operator is embedded in another expression."/>
                        <msg index="2" value="Decrement operator is embedded in another expression."/>
                    </messages>
                </rule>
         </category>
         <category description="LCK02-J: Do not synchronize on the class object returned by getClass()" name="LCK02">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.SGC" header="Do not synchronize on the class object returned by the 'getClass' method" id="SGC" originalId="TRS.SGC" scope="LINE" severity="3" since="10.4">
                <messages>
                    <msg index="1" value="This 'synchronized' block synchronizes on the class object returned by the 'getClass()' method."/>
                </messages>
            </rule>
         </category>
         <category description="MSC07-J: Prevent multiple instantiations of singleton objects" name="MSC07">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.ILI" header="Make lazy initializations thread-safe" id="ILI" originalId="TRS.ILI" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Lazy initialization is not thread-safe: {0}."/>
                </messages>
            </rule>
         </category>
         <category description="FIO14-J: Perform proper cleanup at program termination" name="FIO14">
            <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.CCR" header="Close all &quot;java.io.Closeable&quot; resources in a &quot;finally&quot; block." id="CCR" originalId="OPT.CCR" scope="LINE" severity="3" since="8.1">
                <messages>
                    <msg index="1" value="Resource ''{0}'' is opened but is not closed in a &quot;finally&quot; block."/>
                </messages>
                <oldparameters>
                    <oldparam id="CERT.FIO14.CCR.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
                    <oldparam id="CERT.FIO14.CCR.ADDITIONAL_CLOSE_METHODS" name="ADDITIONAL_CLOSE_METHODS" value="Additional resource closing methods (in regular expression)"/>
                    <oldparam id="CERT.FIO14.CCR.METHOD" name="METHOD" value="Method name"/>
                    <oldparam id="CERT.FIO14.CCR.TYPE" name="TYPE" value="Declaring type"/>
                    <oldparam id="CERT.FIO14.CCR.IGNORE_TYPES" name="IGNORE_TYPES" value="Ignored types (Specify fully qualified names)"/>
                </oldparameters>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE">404</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE">772</reference>
                </references>
                <parameters>
                    <param defaultValue="java.io.ByteArrayInputStream;java.io.ByteArrayOutputStream;java.io.CharArrayWriter;java.io.StringBufferInputStream;java.io.StringReader;java.io.StringWriter;" id="CERT.FIO14.CCR.IGNORE_TYPES" inputType="stringList" label="Ignored types (Specify fully qualified names)" prevType="StringList"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.CRWD" header="Close resources as early as possible" id="CRWD" originalId="OPT.CRWD" scope="LINE" severity="3" since="8.0">
                <messages>
                    <msg index="1" value="It may be possible to move this call to &quot;close&quot; earlier in the method."/>
                </messages>
                <oldparameters>
                    <oldparam id="CERT.FIO14.CRWD.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
                    <oldparam id="CERT.FIO14.CRWD.ADDITIONAL_CLOSE_METHODS" name="ADDITIONAL_CLOSE_METHODS" value="Additional resource closing methods (in regular expression)"/>
                    <oldparam id="CERT.FIO14.CRWD.METHOD" name="METHOD" value="Method name"/>
                    <oldparam id="CERT.FIO14.CRWD.TYPE" name="TYPE" value="Declaring type"/>
                </oldparameters>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE">404</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE">772</reference>
                </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.CIO" header="Close input and output resources in &quot;finally&quot; blocks" id="CIO" originalId="OPT.CIO" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Variable ''{0}'' is not closed within a &quot;finally&quot; block."/>
                </messages>
                <oldparameters>
                    <oldparam id="CERT.FIO14.CIO.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
                    <oldparam id="CERT.FIO14.CIO.ADDITIONAL_CLOSE_METHODS" name="ADDITIONAL_CLOSE_METHODS" value="Additional resource closing methods (in regular expression)"/>
                    <oldparam id="CERT.FIO14.CIO.METHOD" name="METHOD" value="Method name"/>
                    <oldparam id="CERT.FIO14.CIO.TYPE" name="TYPE" value="Declaring type"/>
                    <oldparam id="CERT.FIO14.CIO.IGNORE_TYPES" name="IGNORE_TYPES" value="Ignored types (Specify fully qualified names)"/>
                </oldparameters>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE">404</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE">772</reference>
                </references>
                <parameters>
                    <param defaultValue="java.io.ByteArrayInputStream;java.io.ByteArrayOutputStream;java.io.CharArrayWriter;java.io.StringBufferInputStream;java.io.StringReader;java.io.StringWriter;" id="CERT.FIO14.CIO.IGNORE_TYPES" inputType="stringList" label="Ignored types (Specify fully qualified names)" prevType="StringList"/>
                    <!--param id="OPT.CIO.ADDITIONAL_CLOSE_METHODS" inputType="bigtext" defaultValue="" label="Additional resource closing methods (in regular expression)"/-->
                    <!--  complexParamTable id="OPT.CIO.ADDITIONAL_CLOSE_METHODS" reader="SATable" label="Additional resource closing methods (in regular expression)" canAddRow="true" canRemoveRow="true" canEditRow="true" canSetOrdering="true">
                        <columns>
                            <column id="OPT__CIO__ADDITIONAL_CLOSE_METHODS__COLUMN1" label="Declaring type" columnType="text" defaultValue=".*" editable="true" required="true" />
                            <column id="OPT__CIO__ADDITIONAL_CLOSE_METHODS__COLUMN2" label="Method name" columnType="text" defaultValue=".*" editable="true" required="true" />
                        </columns>
                    </complexParamTable>-->
                </parameters>
            </rule>
         </category>
         <category description="ERR01-J: Do not allow exceptions to expose sensitive data" name="ERR01">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERVLET.CETS" header="Catch all exceptions which may be thrown within Servlet methods" id="CETS" originalId="SERVLET.CETS" scope="LINE" severity="4">
                <messages>
                    <msg index="1" value="The method ''{0}()'' is declared to throw the exception type ''{1}'', but this exception is not caught."/>
                </messages>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/600.html" name="CWE">600</reference>
                </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.ACW" header="Avoid writing to Consoles" id="ACW" originalId="SECURITY.ESD.ACW" scope="LINE" severity="5" since="9.0">
                    <messages>
                        <msg index="1" value="Method ''{0}'' writes to Console ''{1}''."/>
                        <msg index="2" value="Method ''{0}'' writes to Console."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/497.html" name="CWE">497</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ACPST" header="Do not call the 'printStackTrace()' method of &quot;Throwable&quot; objects." id="ACPST" originalId="SECURITY.WSC.ACPST" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="The 'printStackTrace()' method of a &quot;Throwable&quot; object is called here."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.ERR01.ACPST.IGNORE_OVERRIDDEN" name="IGNORE_OVERRIDDEN" value="Ignore overridden versions of the 'printStackTrace()' methods"/>
                        <oldparam id="CERT.ERR01.ACPST.IGNORE_OVERLOADED" name="IGNORE_OVERLOADED" value="Ignore overloaded versions of the 'printStackTrace()' method"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/209.html" name="CWE">209</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CERT.ERR01.ACPST.IGNORE_OVERRIDDEN" inputType="checkbox" label="Ignore overridden methods"/>
                        <param defaultValue="true" id="CERT.ERR01.ACPST.IGNORE_OVERLOADED" inputType="checkbox" label="Ignore overloaded methods"/>
                    </parameters>
                </rule>
         </category>
         <category description="NUM12-J: Ensure conversions of numeric types to narrower types do not result in lost or misinterpreted data" name="NUM12">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CLP" header="Do not cast primitive data types to lower precision" id="CLP" originalId="PB.NUM.CLP" scope="LINE" severity="2" since="4.5">
                    <messages>
                        <msg index="1" value="&quot;{0}&quot; type cast to lower precision &quot;{1}&quot; type."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/197.html" name="CWE">197</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/681.html" name="CWE">681</reference>
                    </references>
                </rule>
         </category>
         <category description="THI02-J: Notify all waiting threads rather than a single thread" name="THI02">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.ANF" header="Do not use 'notify()'; use 'notifyAll()' instead so that all waiting threads will be notified." id="ANF" originalId="TRS.ANF" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="'notify()' is called in the method: 'notifyThread'"/>
                </messages>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Race Conditions p. 161</reference>
                </references>
            </rule>
         </category>
         <category description="FIO16-J: Canonicalize path names before validating them." name="FIO16">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.CDBV" header="Canonicalize all data before validation." id="CDBV" originalId="SECURITY.IBA.CDBV" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="The data in ''{0}'' may not have been canonicalized before being validated."/>
                        <msg index="2" value="The return value of this call to ''{0}'' may not have been canonicalized before being validated."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.FIO16.CDBV.CANON_METHS" name="CANON_METHS" value="Canonicalization method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                        <oldparam id="CERT.FIO16.CDBV.VALID_METHS" name="VALID_METHS" value="Validation method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                        <oldparam id="CERT.FIO16.CDBV.VALID_CLASSES" name="VALID_CLASSES" value="Only check calls within the following classes\n[regular expressions for fully qualified class name]"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Input Validation p. 81</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A1" name="OWASP-2010">A1-Injection</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A2" name="OWASP-2010">A2-Cross Site Scripting (XSS)</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/79.html" name="CWE">79</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*#canonicalize" description="Canonicalization method names (in regular expressions) [qualified name of declaring type#method name]" id="CERT.FIO16.CDBV.CANON_METHS" inputType="stringList" label="Canonicalization method names (in regular expressions)" prevType="StringList"/>
                        <param defaultValue=".*#^validate" description="Validation method names (in regular expressions) [qualified name of declaring type#method name]" id="CERT.FIO16.CDBV.VALID_METHS" inputType="stringList" label="Validation method names (in regular expressions)" prevType="StringList"/>
                        <param defaultValue=".*" description="Only check calls within the following classes [regular expressions for fully qualified class name]" id="CERT.FIO16.CDBV.VALID_CLASSES" inputType="stringList" label="Only check calls within the following classes" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
         <category description="MET02-J: Do not use deprecated or obsolete classes or methods" name="MET02">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.THRD" header="Avoid calling unsafe deprecated methods of 'Thread' and 'Runtime'." id="THRD" originalId="TRS.THRD" scope="LINE" severity="2" since="4.5">
                <messages>
                    <msg index="1" value="Unsafe method ''{0}'' was called."/>
                    <msg index="2" value="''{0}'' should not be used because it only exists for use with the deadlock-prone ''suspend()'' method."/>
                    <msg index="3" value="Deadlock-prone method ''{0}'' was called."/>
                    <msg index="4" value="Deprecated method ''{0}'' was called"/>
                </messages>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Race Conditions p. 161</reference>
                </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.DPRAPI" header="Do not use deprecated APIs" id="DPRAPI" originalId="PB.API.DPRAPI" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Using deprecated {0}: ''{1}''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.MET02.DPRAPI.FIELD_LIST" name="FIELD_LIST" value="Deprecated field list\n(in form of &lt;fully qualified type name&gt;#&lt;field name&gt;)"/>
                        <oldparam id="CERT.MET02.DPRAPI.CLASS" name="CLASS" value="Class/Interface"/>
                        <oldparam id="CERT.MET02.DPRAPI.FIELD" name="FIELD" value="Field"/>
                        <oldparam id="CERT.MET02.DPRAPI.FIELD_LOWER" name="FIELD_LOWER" value="field"/>
                        <oldparam id="CERT.MET02.DPRAPI.CONSTRUCTOR_LOWER" name="CONSTRUCTOR_LOWER" value="constructor"/>
                        <oldparam id="CERT.MET02.DPRAPI.METHOD" name="METHOD" value="Method"/>
                        <oldparam id="CERT.MET02.DPRAPI.METHOD_LOWER" name="METHOD_LOWER" value="method"/>
                        <oldparam id="CERT.MET02.DPRAPI.METHOD_LIST" name="METHOD_LIST" value="Deprecated method list \n(in form of &lt;fully qualified type name&gt;#&lt;method&gt;(&lt;parameter1 type&gt;,&lt;parameter2 type&gt;))"/>
                        <oldparam id="CERT.MET02.DPRAPI.CLASS_LIST" name="CLASS_LIST" value="Deprecated class/interface list"/>
                        <oldparam id="CERT.MET02.DPRAPI.CHECK_SEE" name="CHECK_SEE" value="Check for usage of deprecated APIs in Javadoc &quot;@see&quot; tags"/>
                        <oldparam id="CERT.MET02.DPRAPI.IGNORE_USER_DEFINED" name="IGNORE_USER_DEFINED" value="Ignore user-defined types, methods, and fields"/>
                        <oldparam id="CERT.MET02.DPRAPI.IGNORE_NOT_LISTED" name="IGNORE_NOT_LISTED" value="Ignore all types, methods, and fields not listed above"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/477.html" name="CWE">477</reference>
                    </references>
                    <parameters>
                        <group collapsible="false" id="CERT.MET02.DPRAPI.tab.CLASS" label="Class/Interface">
                            <param defaultValue="" id="CERT.MET02.DPRAPI.CLASS_LIST" inputType="stringList" label="Deprecated class/interface list" prevType="StringList"/>
                        </group>
                        <group collapsible="false" id="CERT.MET02.DPRAPI.tab.FIELD" label="Field">
                            <param defaultValue="" description="Deprecated field list (in form of &lt;fully qualified type name&gt;#&lt;field name&gt;)" id="CERT.MET02.DPRAPI.FIELD_LIST" inputType="stringList" label="Deprecated field list" prevType="StringList"/>
                        </group>
                        <group collapsible="false" id="CERT.MET02.DPRAPI.tab.METHOD" label="Method">
                            <param defaultValue="" description="Deprecated method list (in form of &lt;fully qualified type name&gt;#&lt;method&gt;(&lt;parameter1 type&gt;,&lt;parameter2 type&gt;))" id="CERT.MET02.DPRAPI.METHOD_LIST" inputType="stringList" label="Deprecated method list" prevType="StringList"/>
                        </group>
                        <param defaultValue="false" id="CERT.MET02.DPRAPI.CHECK_SEE" inputType="checkbox" label="Check for usage of deprecated APIs in Javadoc &quot;@see&quot; tags"/>
                        <param defaultValue="false" id="CERT.MET02.DPRAPI.IGNORE_USER_DEFINED" inputType="checkbox" label="Ignore user-defined types, methods, and fields"/>
                        <param defaultValue="false" id="CERT.MET02.DPRAPI.IGNORE_NOT_LISTED" inputType="checkbox" label="Ignore all types, methods, and fields not listed above"/>
                    </parameters>
                </rule>
         </category>
         <category description="SER00-J: Enable serialization compatibility during class evolution" name="SER00">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.DUID" header="Create a 'serialVersionUID' for all 'Serializable' classes." id="DUID" originalId="SERIAL.DUID" scope="CLASS" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="No 'serialVersionUID' declared in class ''{0}''."/>
                    <msg index="2" value="'serialVersionUID' must be declared &quot;static final long&quot;, otherwise it will not be used."/>
                    <msg index="3" value="'serialVersionUID' should be declared &quot;private&quot;."/>
                </messages>
                <oldparameters>
                    <oldparam id="CERT.SER00.DUID.CHECK_PRIVATE" name="CHECK_PRIVATE" value="Check if serialVersionUID is &quot;private&quot;"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="false" id="CERT.SER00.DUID.CHECK_PRIVATE" inputType="checkbox" label="Check if serialVersionUID is &quot;private&quot;"/>
                </parameters>
            </rule>
         </category>
         <category description="ERR08-J: Do not catch NullPointerExceptions or any of its ancestors" name="ERR08">
            <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.NCNPE" header="Do not catch 'NullPointerException'" id="NCNPE" originalId="EXCEPT.NCNPE" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Avoid catching 'NullPointerException'"/>
                </messages>
            </rule>
         </category>
         <category description="FIO12-J: Provide methods to read a write little-endian data" name="FIO12">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.NUM.PMRWLED" header="Provide methods to read and write little-endian data" id="PMRWLED" originalId="PB.NUM.PMRWLED" scope="LINE" severity="4" since="2021.1">
                    <messages>
                        <msg index="1" value="The ''{0}'' is insecure, because it cannot handle little-endian data."/>
                    </messages>
                </rule>
         </category>
         <category description="OBJ10-J: Do not use public static nonfinal variables" name="OBJ10">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.SPFF" header="Inspect 'static' fields which may have intended to be declared 'static final'." id="SPFF" originalId="SECURITY.EAB.SPFF" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Field ''{0}'' may have been intended to be &quot;static final&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.OBJ10.SPFF.ACCESSIBILITY" name="ACCESSIBILITY" value="Check fields of accessibility"/>
                        <oldparam id="CERT.OBJ10.SPFF.PUBLIC_FIELD" name="PUBLIC_FIELD" value="public"/>
                        <oldparam id="CERT.OBJ10.SPFF.PROTECTED_FIELD" name="PROTECTED_FIELD" value="protected"/>
                        <oldparam id="CERT.OBJ10.SPFF.PACKAGE_FIELD" name="PACKAGE_FIELD" value="package-private"/>
                        <oldparam id="CERT.OBJ10.SPFF.PRIVATE_FIELD" name="PRIVATE_FIELD" value="private"/>
                        <oldparam id="CERT.OBJ10.SPFF.CHECK_SCOPE" name="CHECK_SCOPE" value="Check fields of type"/>
                        <oldparam id="CERT.OBJ10.SPFF.PRIMITIVE_CHECK" name="PRIMITIVE_CHECK" value="primitive type"/>
                        <oldparam id="CERT.OBJ10.SPFF.PRIMITIVE_WRAPPER_CHECK" name="PRIMITIVE_WRAPPER_CHECK" value="primitive wrapper type"/>
                        <oldparam id="CERT.OBJ10.SPFF.STRING_CHECK" name="STRING_CHECK" value="java.lang.String"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Java leading security practice p. 170</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/500.html" name="CWE">500</reference>
                    </references>
                    <parameters>
                        <group collapsible="false" id="CERT.OBJ10.SPFF.group.1" label="Check fields of accessibility">
                            <param defaultValue="true" id="CERT.OBJ10.SPFF.PUBLIC_FIELD" inputType="checkbox" label="public"/>
                            <param defaultValue="false" id="CERT.OBJ10.SPFF.PROTECTED_FIELD" inputType="checkbox" label="protected"/>
                            <param defaultValue="false" id="CERT.OBJ10.SPFF.PACKAGE_FIELD" inputType="checkbox" label="package-private"/>
                            <param defaultValue="false" id="CERT.OBJ10.SPFF.PRIVATE_FIELD" inputType="checkbox" label="private"/>
                        </group>
                        <group collapsible="false" id="CERT.OBJ10.SPFF.group.0" label="Check fields of type">
                            <param defaultValue="true" id="CERT.OBJ10.SPFF.PRIMITIVE_CHECK" inputType="checkbox" label="primitive type"/>
                            <param defaultValue="true" id="CERT.OBJ10.SPFF.PRIMITIVE_WRAPPER_CHECK" inputType="checkbox" label="primitive wrapper type"/>
                            <param defaultValue="true" id="CERT.OBJ10.SPFF.STRING_CHECK" inputType="checkbox" label="java.lang.String"/>
                        </group>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.RMO" header="Avoid referencing mutable fields" id="RMO" originalId="PB.CUB.RMO" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="''{0}'' is a mutable field."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.OBJ10.RMO.STATIC_FINAL_FIELD_ONLY" name="STATIC_FINAL_FIELD_ONLY" value="Check &quot;static final&quot; fields only"/>
                        <oldparam id="CERT.OBJ10.RMO.ACCESSIBILITY_LABEL" name="ACCESSIBILITY_LABEL" value="Check fields of accessibility"/>
                        <oldparam id="CERT.OBJ10.RMO.PUBLIC_FIELD" name="PUBLIC_FIELD" value="public"/>
                        <oldparam id="CERT.OBJ10.RMO.PROTECTED_FIELD" name="PROTECTED_FIELD" value="protected"/>
                        <oldparam id="CERT.OBJ10.RMO.PACKAGE_FIELD" name="PACKAGE_FIELD" value="package-private"/>
                        <oldparam id="CERT.OBJ10.RMO.PRIVATE_FIELD" name="PRIVATE_FIELD" value="private"/>
                        <oldparam id="CERT.OBJ10.RMO.IGNORE_LIST" name="IGNORE_LIST" value="Ignore fields of the following classes: (Glob expression)"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="false" id="CERT.OBJ10.RMO.STATIC_FINAL_FIELD_ONLY" inputType="checkbox" label="Check &quot;static final&quot; fields only"/>
                        <group collapsible="false" id="CERT.OBJ10.RMO.group.0" label="Check fields of accessibility">
                            <param defaultValue="true" id="CERT.OBJ10.RMO.PUBLIC_FIELD" inputType="checkbox" label="public"/>
                            <param defaultValue="false" id="CERT.OBJ10.RMO.PROTECTED_FIELD" inputType="checkbox" label="protected"/>
                            <param defaultValue="false" id="CERT.OBJ10.RMO.PACKAGE_FIELD" inputType="checkbox" label="package-private"/>
                            <param defaultValue="false" id="CERT.OBJ10.RMO.PRIVATE_FIELD" inputType="checkbox" label="private"/>
                        </group>
                        <param defaultValue="java.lang.System;java.util.Locale" id="CERT.OBJ10.RMO.IGNORE_LIST" inputType="stringList" label="Ignore fields of the following classes: (Glob expression)" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
         <category description="NUM09-J: Do not use floating-point variables as loop counters" name="NUM09">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.FPLI" header="Do not use floating point variables as loop indices." id="FPLI" originalId="PB.NUM.FPLI" scope="LINE" severity="3" since="8.1">
                    <messages>
                        <msg index="1" value="The floating point variable ''{0}'' should not be used as an index for this loop."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.NUM09.FPLI.IGNORED_OPERATORS" name="IGNORED_OPERATORS" value="Ignore variables which are compared using &quot;&lt;&quot; or &quot;&gt;&quot; in the conditional expression"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="false" id="CERT.NUM09.FPLI.IGNORED_OPERATORS" inputType="checkbox" label="Ignore variables which are compared using &quot;&lt;&quot; or &quot;&gt;&quot; in the conditional expression"/>
                    </parameters>
                </rule>
         </category>
         <category description="NUM13-J: Avoid loss of precision when converting primitive integers to floating-point" name="NUM13">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AIC" header="Avoid implicit casts from integer data types to floating point data types." id="AIC" originalId="PB.NUM.AIC" scope="LINE" severity="2" since="8.2">
                    <messages>
                        <msg index="1" value="This expression will be implicitly cast from an &quot;{0}&quot; to a &quot;{1}&quot; because the called method requires a &quot;{1}&quot; argument."/>
                        <msg index="2" value="This expression will be implicitly cast from a &quot;{0}&quot; to a &quot;{1}&quot; because the called method requires a &quot;{1}&quot; argument."/>
                        <msg index="3" value="This expression will be implicitly cast from an &quot;{0}&quot; to a &quot;{1}&quot; because the expression is assigned to a &quot;{1}&quot; variable."/>
                        <msg index="4" value="This expression will be implicitly cast from a &quot;{0}&quot; to a &quot;{1}&quot; because the expression is assigned to a &quot;{1}&quot; variable."/>
                    </messages>
                </rule>
         </category>
         <category description="MET12-J: Do not use finalizers" name="MET12">
            <rule class="com.parasoft.jtest.standards.rules.builtin.GC.IFF" header="Call 'super.finalize()' in the &quot;finally&quot; block of 'finalize()' methods." id="IFF" originalId="GC.IFF" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Missing &quot;finally&quot; block that invokes 'super.finalize()'."/>
                    <msg index="2" value="'finalize()' method's &quot;finally&quot; block does not call 'super.finalize()'."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.UC.FCSF" header="Avoid redundant 'finalize()' methods which only call the superclass' 'finalize()' method" id="FCSF" originalId="UC.FCSF" scope="LINE" severity="3" since="8.0">
                <messages>
                    <msg index="1" value="This 'finalize()' method does nothing except call the superclass' 'finalize()' method."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.MFP" header="Give &quot;finalize()&quot; methods &quot;protected&quot; access." id="MFP" originalId="OOP.MFP" scope="LINE" severity="3" since="8.0">
                <messages>
                    <msg index="1" value="This &quot;finalize()&quot; method has &quot;public&quot; access"/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.API.OF" header="Do not overload the 'finalize()' method" id="OF" index="1" originalId="PB.API.OF" scope="LINE" severity="2" since="6.0">
                    <messages>
                        <msg index="1" value="Avoid overloading 'finalize()' method."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.GC.FM" header="Do not use 'finalize()' methods to unregister listeners." id="FM" originalId="GC.FM" scope="LINE" severity="1" since="4.5">
                <messages>
                    <msg index="1" value="Attempting to remove listener in 'finalize()' method."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.UC.EF" header="Avoid empty &quot;finalize()&quot; methods." id="EF" originalId="UC.EF" scope="LINE" severity="3">
                <messages>
                    <msg index="1" value="Avoid empty 'finalize()' method"/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.GC.FCF" header="Call 'super.finalize()' from 'finalize()'." id="FCF" originalId="GC.FCF" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Missing call to ''super.finalize()'' in ''finalize()''."/>
                </messages>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/568.html" name="CWE">568</reference>
                </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.GC.NCF" header="Do not call 'finalize()' explicitly." id="NCF" originalId="GC.NCF" scope="LINE" severity="1" since="4.5">
                <messages>
                    <msg index="1" value="'finalize()' called explicitly."/>
                </messages>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/586.html" name="CWE">586</reference>
                </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.MNDF" header="Do not define 'finalize()' method in bean classes." id="MNDF" originalId="EJB.MNDF" scope="CLASS" severity="1" since="4.5">
                <messages>
                    <msg index="1" value="Bean &quot;class&quot; should not define 'finalize()' method."/>
                </messages>
            </rule>
         </category>
         <category description="LCK10-J: Use a correct form of the double-checked locking idiom" name="LCK10">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.DCL" header="Avoid unsafe implementations of the &quot;double-checked locking&quot; pattern." id="DCL" originalId="TRS.DCL" scope="LINE" severity="2" since="6.0">
                <messages>
                    <msg index="1" value="The &quot;double-checked locking&quot; pattern is used; this pattern can cause unexpected problems when compiler optimizations are performed."/>
                </messages>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Race Conditions p. 161</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/609.html" name="CWE">609</reference>
                </references>
            </rule>
         </category>
         <category description="SEC04-J: Protect sensitive operations with security manager checks" name="SEC04">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SCF" header="Enforce 'SecurityManager' checks before setting or getting fields" id="SCF" originalId="SECURITY.WSC.SCF" scope="METHOD" severity="1" since="8.4">
                    <messages>
                        <msg index="1" value="Missing ''SecurityManager'' check before setting field in method ''{0}()''."/>
                        <msg index="2" value="Missing ''SecurityManager'' check before getting field in method ''{0}()''."/>
                        <msg index="3" value="Method ''{0}'' is not declared &quot;final&quot;."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.SEC04.SCF.PARAM_LEVEL" name="PARAM_LEVEL" value="Maximum depth to look for 'SecurityManager' check"/>
                        <oldparam id="CERT.SEC04.SCF.CHECK_NON_FINAL_METHOD" name="CHECK_NON_FINAL_METHOD" value="Ensure methods containing 'SecurityManager' checks are declared &quot;final&quot;"/>
                        <oldparam id="CERT.SEC04.SCF.FINAL_CLASS" name="FINAL_CLASS" value="Check non-&quot;final&quot; classes only"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/732.html" name="CWE">732</reference>
                    </references>
                    <parameters>
                        <param defaultValue="1" id="CERT.SEC04.SCF.PARAM_LEVEL" inputType="integer" label="Maximum depth to look for 'SecurityManager' check" min="0"/>
                        <param defaultValue="true" id="CERT.SEC04.SCF.CHECK_NON_FINAL_METHOD" inputType="checkbox" label="Ensure methods containing 'SecurityManager' checks are declared &quot;final&quot;">
                            <param defaultValue="true" id="CERT.SEC04.SCF.FINAL_CLASS" inputType="checkbox" label="Check non-&quot;final&quot; classes only"/>
                        </param>
                    </parameters>
                </rule>
         </category>
         <category description="ERR05-J: Do not let checked exceptions escape from a finally block" name="ERR05">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ARCF" header="Avoid using 'return's inside 'finally blocks if thare are other 'return's inside the try-catch block." id="ARCF" originalId="PB.CUB.ARCF" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Avoid multiple 'return' if a 'return' is present inside finally block."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.ERR05.ARCF.ALSO_CATCH" name="ALSO_CATCH" value="Only flag return statements when they are in try-catch blocks"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/584.html" name="CWE">584</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CERT.ERR05.ARCF.ALSO_CATCH" inputType="checkbox" label="Only flag return statements when they are in try-catch blocks"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ATSF" header="Do not exit &quot;finally&quot; blocks abruptly." id="ATSF" originalId="PB.CUB.ATSF" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="The enclosing &quot;finally&quot; block should not be exited with a &quot;{0}&quot; statement."/>
                        <msg index="2" value="This method call may cause the enclosing &quot;finally&quot; block to be exited because it throws a checked exception."/>
                        <msg index="3" value="This constructor call may cause the enclosing &quot;finally&quot; block to be exited because it throws a checked exception."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.ERR05.ATSF.WHAT_TO_CHECK" name="WHAT_TO_CHECK" value="What to Check"/>
                        <oldparam id="CERT.ERR05.ATSF.CHECK_RETURN" name="CHECK_RETURN" value="&quot;return&quot; statements"/>
                        <oldparam id="CERT.ERR05.ATSF.CHECK_THROW" name="CHECK_THROW" value="&quot;throw&quot; statements"/>
                        <oldparam id="CERT.ERR05.ATSF.CHECK_BREAK" name="CHECK_BREAK" value="&quot;break&quot; and &quot;continue&quot; statements"/>
                        <oldparam id="CERT.ERR05.ATSF.CHECK_METH_THROW" name="CHECK_METH_THROW" value="method calls which throw uncaught exceptions"/>
                        <oldparam id="CERT.ERR05.ATSF.ALLOW_RETHROW" name="ALLOW_RETHROW" value="allow rethrowing of exceptions from within &quot;finally&quot; blocks"/>
                    </oldparameters>
                    <parameters>
                        <group collapsible="false" id="CERT.ERR05.ATSF.group.0" label="What to Check">
                            <param defaultValue="true" id="CERT.ERR05.ATSF.CHECK_THROW" inputType="checkbox" label="&quot;throw&quot; statements">
                                <param defaultValue="false" id="CERT.ERR05.ATSF.ALLOW_RETHROW" inputType="checkbox" label="allow rethrowing of exceptions from within &quot;finally&quot; blocks"/>
                            </param>
                            <param defaultValue="false" id="CERT.ERR05.ATSF.CHECK_RETURN" inputType="checkbox" label="&quot;return&quot; statements"/>
                            <param defaultValue="false" id="CERT.ERR05.ATSF.CHECK_BREAK" inputType="checkbox" label="&quot;break&quot; and &quot;continue&quot; statements"/>
                            <param defaultValue="false" id="CERT.ERR05.ATSF.CHECK_METH_THROW" inputType="checkbox" label="method calls which throw uncaught exceptions"/>
                        </group>
                    </parameters>
                </rule>
         </category>
         <category description="LCK08-J: Ensure acrively held locks are released on exceptional conditions" name="LCK08">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.RLF" header="Release Locks in a &quot;finally&quot; block." id="RLF" originalId="TRS.RLF" scope="LINE" severity="1" since="8.4">
                <messages>
                    <msg index="1" value="Lock ''{0}'' not released from &quot;finally&quot; block."/>
                </messages>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Race Conditions p. 161</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/832.html" name="CWE">832</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/833.html" name="CWE">833</reference>
                </references>
            </rule>
         </category>
         <category description="THI03-J: Always invoke wait() and await() methods inside a loop" name="THI03">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.UWIL" header="Call 'wait()' and 'await()' only inside a loop that tests the liveness condition" id="UWIL" originalId="TRS.UWIL" scope="LINE" severity="1" since="4.5">
                <messages>
                    <msg index="1" value="Called ''{0}'' without an enclosing loop to test the liveness condition."/>
                </messages>
            </rule>
         </category>
         <category description="IDS06-J: Exclude unsanitized uer input from format strings" name="IDS06">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.VAFS" header="Ensure the correct number of arguments for varargs methods with format strings" id="VAFS" originalId="PB.API.VAFS" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Number of arguments to method ''{0}'' does not match format string."/>
                    </messages>
                </rule>
         </category>
         <category description="ERR09-J: Do not allow untrusted code to terminate the JVM" name="ERR09">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.JVM" header="Do not stop the JVM in a web component." id="JVM" originalId="SECURITY.EAB.JVM" scope="LINE" severity="1" since="7.5">
                    <messages>
                        <msg index="1" value="Call to ''System.{0}()'' in a web component."/>
                        <msg index="2" value="Method ''{0}'' indirectly calls &quot;System.exit()&quot; in a web component."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.ERR09.JVM.DEPTH" name="DEPTH" value="Maximum depth to look for &quot;System.exit()&quot; calls"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/382.html" name="CWE">382</reference>
                    </references>
                    <parameters>
                        <param defaultValue="2" id="CERT.ERR09.JVM.DEPTH" inputType="integer" label="Maximum depth to look for &quot;System.exit()&quot; calls" max="5" min="1"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.EXIT" header="Do not call methods which terminates Java Virtual Machine" id="EXIT" originalId="CODSTA.BP.EXIT" scope="LINE" severity="3" since="10.4">
                    <messages>
                        <msg index="1" value="'System.exit()' called."/>
                        <msg index="2" value="'Runtime.exit()' called."/>
                        <msg index="3" value="'Runtime.halt()' called."/>
                    </messages>
                    <parameters>
                        <param defaultValue="true" id="CERT.ERR09.EXIT.IGNORE_IN_MAIN" inputType="checkbox" label="Ignore in the 'main()' method"/>
                        <param defaultValue="false" id="CERT.ERR09.EXIT.IGNORE_IF_COMMENT" inputType="checkbox" label="Ignore if the method call is followed by a comment on the same line"/>
                        <param defaultValue="false" id="CERT.ERR09.EXIT.IGNORE_IF_COMMENT_ABOVE" inputType="checkbox" label="Ignore if the line above the method call contains a comment"/>
                    </parameters>
                </rule>
         </category>
         <category description="MET07-J: Never declare a class method that hides a method declared in a superclass or superinterfaces" name="MET07">
            <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.AHSM" header="Do not hide inherited &quot;static&quot; member methods" id="AHSM" originalId="OOP.AHSM" scope="METHOD" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="&quot;static&quot; method ''{0}()'' overrides &quot;static&quot; method in ancestor class ''{1}''."/>
                </messages>
            </rule>
         </category>
         <category description="SER04-J: Do not allow serialization and deserialization to bypass the security manager" name="SER04">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SCSER" header="Enforce 'SecurityManager' checks in methods of 'Serializable' classes" id="SCSER" originalId="SECURITY.WSC.SCSER" scope="METHOD" severity="1" since="8.4">
                    <messages>
                        <msg index="1" value="Missing 'SecurityManager' check in readObject() method."/>
                        <msg index="2" value="Missing 'SecurityManager' check in readObjectNoData() method."/>
                        <msg index="3" value="Missing 'SecurityManager' check in writeObject() method."/>
                        <msg index="4" value="Missing 'SecurityManager' check in constructor."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.SER04.SCSER.PARAM_LEVEL" name="PARAM_LEVEL" value="Maximum depth to look for 'SecurityManager' check"/>
                        <oldparam id="CERT.SER04.SCSER.SUPER_CLASS_CHECK" name="SUPER_CLASS_CHECK" value="Check indirect 'SecurityManager' checks in super constructor(s)"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/732.html" name="CWE">732</reference>
                    </references>
                    <parameters>
                        <param defaultValue="1" id="CERT.SER04.SCSER.PARAM_LEVEL" inputType="integer" label="Maximum depth to look for 'SecurityManager' check" min="0"/>
                        <param defaultValue="false" id="CERT.SER04.SCSER.SUPER_CLASS_CHECK" inputType="checkbox" label="Check indirect 'SecurityManager' checks in super constructor(s)"/>
                    </parameters>
                </rule>
         </category>
         <category description="ERR07-J: Do not throw RuntimeExceptions, Exceptions or Throwable" name="ERR07">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.NTX" header="Avoid declaring methods to throw general or unchecked Exception types" id="NTX" originalId="CODSTA.BP.NTX" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Throwing explicit ''{0}'' object in ''{1}()''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.ERR07.NTX.CHECKED_EXCEPTS" name="CHECKED_EXCEPTS" value="Exception types which should not be declared to be thrown (fully qualified names)"/>
                        <oldparam id="CERT.ERR07.NTX.SKIP_JUNIT" name="SKIP_JUNIT" value="Skip JUnit 'TestCase' classes."/>
                        <oldparam id="CERT.ERR07.NTX.SUBCLASSES" name="SUBCLASSES" value="Check for exceptions which are subclasses of 'Error' and 'RuntimeException'."/>
                        <oldparam id="CERT.ERR07.NTX.IGNORE_OVERRIDING" name="IGNORE_OVERRIDING" value="Ignore overriding methods."/>
                        <oldparam id="CERT.ERR07.NTX.IGNORE_PROPAGATED" name="IGNORE_PROPAGATED" value="Ignore methods which propagate exception types of called methods."/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/397.html" name="CWE">397</reference>
                    </references>
                    <parameters>
                        <param defaultValue="java.lang.Exception;java.lang.Error;java.lang.Throwable;java.lang.RuntimeException" id="CERT.ERR07.NTX.CHECKED_EXCEPTS" inputType="stringList" label="Exception types which should not be declared to be thrown (fully qualified names)" prevType="StringList"/>
                        <param defaultValue="false" id="CERT.ERR07.NTX.SUBCLASSES" inputType="checkbox" label="Check for exceptions which are subclasses of 'Error' and 'RuntimeException'."/>
                        <param defaultValue="false" id="CERT.ERR07.NTX.SKIP_JUNIT" inputType="checkbox" label="Skip JUnit classes."/>
                        <param defaultValue="true" id="CERT.ERR07.NTX.IGNORE_OVERRIDING" inputType="checkbox" label="Ignore overriding methods."/>
                        <param defaultValue="true" id="CERT.ERR07.NTX.IGNORE_PROPAGATED" inputType="checkbox" label="Ignore methods which propagate exception types of called methods."/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.NTERR" header="Do not throw exception types which are too general or are unchecked exceptions." id="NTERR" originalId="EXCEPT.NTERR" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Avoid throwing ''{0}''."/>
                </messages>
                <oldparameters>
                    <oldparam id="CERT.ERR07.NTERR.CHECKED_EXCEPTS" name="CHECKED_EXCEPTS" value="Exception types which should not be thrown (fully qualified names)"/>
                </oldparameters>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/397.html" name="CWE">397</reference>
                </references>
                <parameters>
                    <param defaultValue="java.lang.Exception;java.lang.Error;java.lang.Throwable;java.lang.RuntimeException" id="CERT.ERR07.NTERR.CHECKED_EXCEPTS" inputType="stringList" label="Exception types which should not be thrown (fully qualified names)" prevType="StringList"/>
                </parameters>
            </rule>
         </category>
         <category description="NUM10-J: Do not construct BigDecimal objects from floating-point literals" name="NUM10">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.NUM.BBDCC" header="Do not pass floating point values to the 'BigDecimal' constructor" id="BBDCC" originalId="PB.NUM.BBDCC" scope="LINE" severity="2" since="8.0">
                    <messages>
                        <msg index="1" value="The 'BigDecimal' constructor is called with a floating point value as an argument"/>
                    </messages>
                </rule>
         </category>
         <category description="VNA03-J: Do not assume that a group of calls to independently atomic methods is atomic" name="VNA03">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.MRAV" header="Access related Atomic variables in a synchronized block." id="MRAV" originalId="TRS.MRAV" scope="LINE" severity="4" since="8.4">
                <messages>
                    <msg index="1" value="Atomic variables: ''{0}'' are not accessed in a synchronized block."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.SSUG" header="Make the get method for a field synchronized if the set method is synchronized" id="SSUG" originalId="TRS.SSUG" scope="LINE" severity="3" since="8.0">
                <messages>
                    <msg index="1" value="There is a synchronized set method for the field ''{0}'', so this get method should also be synchronized."/>
                </messages>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Race Conditions p. 161</reference>
                </references>
            </rule>
         </category>
         <category description="FIO13-J: Do not log sensitive information outside a trusted boundary" name="FIO13">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.PEO" header="Do not pass exception messages into output in order to prevent the application from leaking sensitive information" id="PEO" originalId="SECURITY.ESD.PEO" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Print method ''{0}()'' is not allowed in a &quot;catch&quot; block."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.FIO13.PEO.PRINT_METHOD_EXPRESSION" name="PRINT_METHOD_EXPRESSION" value="Print methods (Specify names in regular expressions)"/>
                        <oldparam id="CERT.FIO13.PEO.EXCEPTIONS" name="EXCEPTIONS" value="Exceptions (Specify types and method names in regular expressions)"/>
                        <oldparam id="CERT.FIO13.PEO.TYPE" name="TYPE" value="Type"/>
                        <oldparam id="CERT.FIO13.PEO.METHOD" name="METHOD" value="Method"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/209.html" name="CWE">209</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/497.html" name="CWE">497</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*print.*;.*Print.*" id="CERT.FIO13.PEO.PRINT_METHOD_EXPRESSION" inputType="stringList" label="Print methods (Specify names in regular expressions)" prevType="StringList"/>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CERT.FIO13.PEO.EXCEPTIONS" label="Exceptions (Specify types and method names in regular expressions)" reader="SATable">
                            <columns>
                                <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" label="Type" required="true"/>
                                <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" label="Method" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" value="^java\.util\.logging\.Logger$"/>
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" value="^.*$"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" value="^org\.apache\.log4j\.Logger$"/>
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" value="^.*$"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.CONSEN" header="Do not log confidential or sensitive information" id="CONSEN" originalId="SECURITY.ESD.CONSEN" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="''{0}'' should not be used by a logger, it can expose confidential info."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.FIO13.CONSEN.SUSPICIOUS_WORDS" name="SUSPICIOUS_WORDS" value="Regular expressions representing sensive data:"/>
                        <oldparam id="CERT.FIO13.CONSEN.LOG_METHOD_EXPRESSIONS" name="LOG_METHOD_EXPRESSIONS" value="Logging method name in regular expression"/>
                        <oldparam id="CERT.FIO13.CONSEN.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/533.html" name="CWE">533</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/534.html" name="CWE">534</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*ssn.*@delim@.*pass.*" id="CERT.FIO13.CONSEN.SUSPICIOUS_WORDS" inputType="stringList" label="Regular expressions representing sensive data:" prevType="StringList"/>
                        <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="CERT.FIO13.CONSEN.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                        <param defaultValue=".*log.*" id="CERT.FIO13.CONSEN.LOG_METHOD_EXPRESSIONS" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
         <category description="MSC00-J: Use SSLSocket rather than Socket for secure data exchange" name="MSC00">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.USC" header="Use the SSL-enabled version of classes when possible." id="USC" originalId="SECURITY.WSC.USC" scope="LINE" severity="3" since="7.5">
                    <messages>
                        <msg index="1" value="Consider using the SSL-enabled type ''SSLServerSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="2" value="Consider using the SSL-enabled type ''SSLSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="3" value="Consider using the SSL-enabled type ''HttpsURLConnection'' for the {0} ''{1}''."/>
                        <msg index="4" value="Consider using the SSL-enabled type ''SslRMIClientSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="5" value="Consider using the SSL-enabled type ''SslRMIServerSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="6" value="Consider using the SSL-enabled type ''SSLSocket'' for the {0} ''{1}''."/>
                        <msg index="7" value="Consider using the SSL-enabled type ''SSLServerSocket'' for the {0} ''{1}''."/>
                        <msg index="8" value="Consider using the SSL-enabled type ''SSLPermission'' for the {0} ''{1}''."/>
                    </messages>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010">A9-Insufficient Transport Layer Protection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/494.html" name="CWE">494</reference>
                    </references>
                </rule>
         </category>
         <category description="OBJ06-J: Defensively copy mutable inputs and mutable internal components" name="OBJ06">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.CPCL" header="Enforce returning a defensive copy in 'clone()' methods" id="CPCL" originalId="SECURITY.EAB.CPCL" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Field ''{0}'' is not initialized as a defensive copy."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.MUCOP" header="Provide mutable classes with copy functionality" id="MUCOP" originalId="OOP.MUCOP" scope="LINE" severity="3" since="9.0">
                <messages>
                    <msg index="1" value="{0} missing."/>
                </messages>
                <oldparameters>
                    <oldparam id="CERT.OBJ06.MUCOP.PUBLIC_CLONE" name="PUBLIC_CLONE" value="Provide a public clone method(relevant for final classes)"/>
                    <oldparam id="CERT.OBJ06.MUCOP.COPY_CONSTRUCTOR" name="COPY_CONSTRUCTOR" value="Provide a copy constructor"/>
                    <oldparam id="CERT.OBJ06.MUCOP.STATIC_CREATION" name="STATIC_CREATION" value="Provide a static creation method"/>
                    <oldparam id="CERT.OBJ06.MUCOP.SELECT_OPTIONS" name="SELECT_OPTIONS" value="Select which options to require"/>
                </oldparameters>
                <parameters>
                    <group collapsible="false" id="CERT.OBJ06.MUCOP.group.0" label="Select which options to require">
                        <param defaultValue="true" id="CERT.OBJ06.MUCOP.PUBLIC_CLONE" inputType="checkbox" label="Provide a public clone method(relevant for final classes)"/>
                        <param defaultValue="true" id="CERT.OBJ06.MUCOP.STATIC_CREATION" inputType="checkbox" label="Provide a static creation method"/>
                        <param defaultValue="true" id="CERT.OBJ06.MUCOP.COPY_CONSTRUCTOR" inputType="checkbox" label="Provide a copy constructor"/>
                    </group>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.MPT" header="Do not pass user-given mutable objects directly to certain types" id="MPT" originalId="SECURITY.EAB.MPT" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="New instance of type ''{0}'' is passed mutable parameter ''{1}'' directly."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.OBJ06.MPT.CHECK_PROTECTED" name="CHECK_PROTECTED" value="Check &quot;protected&quot; methods"/>
                        <oldparam id="CERT.OBJ06.MPT.CHECK_PUBLIC" name="CHECK_PUBLIC" value="Check &quot;public&quot; methods"/>
                        <oldparam id="CERT.OBJ06.MPT.CHECK_PACKAGE" name="CHECK_PACKAGE" value="Check &quot;package-private&quot; methods"/>
                        <oldparam id="CERT.OBJ06.MPT.CHECK_ARRAYS" name="CHECK_ARRAYS" value="Check arrays"/>
                        <oldparam id="CERT.OBJ06.MPT.CHECK_MUTABLE_TYPES" name="CHECK_MUTABLE_TYPES" value="Check mutable types"/>
                        <oldparam id="CERT.OBJ06.MPT.CHECKED_CONSTRUCTORS" name="CHECKED_CONSTRUCTORS" value="Check for values passed to new instances of the following types:"/>
                        <oldparam id="CERT.OBJ06.MPT.TYPES_TO_CHECK" name="TYPES_TO_CHECK" value="Types to check"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="CERT.OBJ06.MPT.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods"/>
                        <param defaultValue="false" id="CERT.OBJ06.MPT.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods"/>
                        <param defaultValue="false" id="CERT.OBJ06.MPT.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; methods"/>
                        <group collapsible="false" id="CERT.OBJ06.MPT.group.0" label="Types to check">
                            <param defaultValue="true" id="CERT.OBJ06.MPT.CHECK_ARRAYS" inputType="checkbox" label="Check arrays"/>
                            <param defaultValue="true" id="CERT.OBJ06.MPT.CHECK_MUTABLE_TYPES" inputType="checkbox" label="Check mutable types"/>
                        </group>
                        <param defaultValue="java\.security\.PrivilegedAction;java\.security\.PrivilegedExceptionAction" id="CERT.OBJ06.MPT.CHECKED_CONSTRUCTORS" inputType="stringList" label="Check for values passed to new instances of the following types:" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.SMO" header="Do not store user-given mutable objects directly into variables" id="SMO" originalId="SECURITY.EAB.SMO" scope="LINE" severity="3" since="8.0">
                    <messages>
                        <msg index="1" value="This assignment may store the original parameter ''{0}'' rather than a copy of the parameter into the field ''{1}''."/>
                        <msg index="2" value="This assignment may store the original parameter ''{0}'' rather than a copy of the parameter into the variable ''{1}''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.OBJ06.SMO.CHECK_PROTECTED" name="CHECK_PROTECTED" value="Check &quot;protected&quot; methods"/>
                        <oldparam id="CERT.OBJ06.SMO.CHECK_PUBLIC" name="CHECK_PUBLIC" value="Check &quot;public&quot; methods"/>
                        <oldparam id="CERT.OBJ06.SMO.CHECK_PACKAGE" name="CHECK_PACKAGE" value="Check &quot;package-private&quot; methods"/>
                        <oldparam id="CERT.OBJ06.SMO.CHECK_ARRAYS" name="CHECK_ARRAYS" value="Check arrays"/>
                        <oldparam id="CERT.OBJ06.SMO.CHECK_MUTABLE_TYPES" name="CHECK_MUTABLE_TYPES" value="Check mutable types"/>
                        <oldparam id="CERT.OBJ06.SMO.TYPES_TO_CHECK" name="TYPES_TO_CHECK" value="Types to check"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="CERT.OBJ06.SMO.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods"/>
                        <param defaultValue="false" id="CERT.OBJ06.SMO.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods"/>
                        <param defaultValue="false" id="CERT.OBJ06.SMO.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; methods"/>
                        <group collapsible="false" id="CERT.OBJ06.SMO.group.0" label="Types to check">
                            <param defaultValue="true" id="CERT.OBJ06.SMO.CHECK_ARRAYS" inputType="checkbox" label="Check arrays"/>
                            <param defaultValue="true" id="CERT.OBJ06.SMO.CHECK_MUTABLE_TYPES" inputType="checkbox" label="Check mutable types"/>
                        </group>
                    </parameters>
                </rule>
         </category>
         <category description="NUM07-J: Do not attempt comparisons with NaN" name="NUM07">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.NAN" header="Avoid comparisons to Double.NaN or Float.NaN." id="NAN" originalId="PB.NUM.NAN" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Avoid comparison to ''{0}''."/>
                    </messages>
                </rule>
         </category>
         <category description="OBJ09-J: Compare classes and not class names" name="OBJ09">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.CMP" header="Do not compare Class objects by name." id="CMP" originalId="SECURITY.EAB.CMP" scope="LINE" severity="1" since="4.5">
                    <messages>
                        <msg index="1" value="Class object comparison by name."/>
                    </messages>
                </rule>
         </category>
         <category description="MET11-J: Ensure that keys used in comparison operations are immutable" name="MET11">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.IKICO" header="Ensure that keys used in comparison operations are immutable" id="IKICO" originalId="PB.IKICO" scope="LINE" severity="3" since="10.4">
                <messages>
                    <msg index="1" value="A mutable field &quot;{1}&quot; is used in the &quot;{0}&quot; method."/>
                </messages>
            </rule>
         </category>
         <category description="LCK09-J: Do not perform operations that can block while holding a lock" name="LCK09">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.TSHL" header="Do not call 'Thread.sleep()' while holding a lock since doing so can cause poor performance and deadlocks." id="TSHL2" originalId="TRS.TSHL" scope="LINE" severity="2" since="8.1">
                <messages>
                    <msg index="1" value="'Thread.sleep()' called from a &quot;synchronized&quot; block.  It may be better to use 'wait()' instead."/>
                    <msg index="2" value="'Thread.sleep()' called from a &quot;synchronized&quot; method.  It may be better to use 'wait()' instead."/>
                </messages>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Race Conditions p. 161</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/833.html" name="CWE">833</reference>
                </references>
            </rule>
         </category>
         <category description="NUM00-J: Detect or prevent integer overflow" name="NUM00">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.BSA" header="Do not use an integer outside the range of [0, 31] as the amount of a shift" id="BSA" originalId="PB.NUM.BSA" scope="LINE" severity="2" since="8.0">
                    <messages>
                        <msg index="1" value="The shift amount ''{0}'' is outside the range [0, 31]."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/190.html" name="CWE">190</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/191.html" name="CWE">191</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ICO" header="Avoid calculations which result in overflow or NaN" id="ICO" originalId="PB.NUM.ICO" scope="LINE" severity="1" since="8.1">
                    <messages>
                        <msg index="1" value="This calculation will not produce an accurate result because it will result in overflow."/>
                        <msg index="2" value="This calculation will throw 'java.lang.ArithmeticException'."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Buffer Overruns and Overflow p. 112</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Strings and Integers p. 180</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/190.html" name="CWE">190</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CACO" header="Avoid using compound assignment operators in cases which may cause overflow." id="CACO" originalId="PB.NUM.CACO" scope="LINE" severity="3" since="8.1">
                    <messages>
                        <msg index="1" value="Compound assignment operators should not be used when the destination type is ''{0}''."/>
                        <msg index="2" value="Compound assignment operators should not be used when the destination type is ''{0}'' and the operand type is ''{1}''."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Buffer Overruns and Overflow p. 112</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Strings and Integers p. 180</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/190.html" name="CWE">190</reference>
                    </references>
                </rule>
         </category>
         <category description="SER03-J: Do not serialize unencrypted, sensitive data" name="SER03">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.SIF" header="Inspect instance fields of serializable objects to make sure they will not expose sensitive information" id="SIF" originalId="SECURITY.ESD.SIF" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Inspect field ''{0}'' to ensure it will not expose sensitive data."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.SER03.SIF.IGNORE_FINAL" name="IGNORE_FINAL" value="Ignore &quot;final&quot; fields"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/499.html" name="CWE">499</reference>
                    </references>
                    <parameters>
                        <param defaultValue="false" id="CERT.SER03.SIF.IGNORE_FINAL" inputType="checkbox" label="Ignore &quot;final&quot; fields"/>
                    </parameters>
                </rule>
         </category>
         <category description="EXP03-J: Do not use the equality operators when comparing boxed values" name="EXP03">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.UEIC" header="Do not use '==' or '!=' to compare objects" id="UEIC" originalId="PB.CUB.UEIC" scope="LINE" severity="2" since="4.5">
                    <messages>
                        <msg index="1" value="&quot;==&quot; is used when comparing Objects. 'equals()' should be used instead."/>
                        <msg index="2" value="&quot;!=&quot; is used when comparing Objects. 'equals()' should be used instead."/>
                        <msg index="3" value="&quot;==&quot; is used when comparing 'String' Objects. 'equals()' should be used instead."/>
                        <msg index="4" value="&quot;!=&quot; is used when comparing 'String' Objects. 'equals()' should be used instead."/>
                        <msg index="5" value="The 'equals()' method of class 'Object' is used when comparing array Objects. 'java.util.Arrays.equals (Object[], Object[])' should be used instead."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.EXP03.UEIC.STRING_ONLY" name="STRING_ONLY" value="Only 'String' objects "/>
                        <oldparam id="CERT.EXP03.UEIC.CHECK_ARRAYS" name="CHECK_ARRAYS" value="Check for calls to the 'equals()' method of class Object on arrays"/>
                        <oldparam id="CERT.EXP03.UEIC.ALL" name="ALL" value="All objects"/>
                        <oldparam id="CERT.EXP03.UEIC.SCOPE" name="SCOPE" value="Scope of checking:"/>
                        <oldparam id="CERT.EXP03.UEIC.IGNORE_TYPES" name="IGNORE_TYPES" value="Allow &quot;==&quot; and &quot;!=&quot; operators when compared object is type:"/>
                        <oldparam id="CERT.EXP03.UEIC.CHECK_STATICFINAL" name="CHECK_STATICFINAL" value="Check comparisons to &quot;static&quot; &quot;final&quot; objects"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Java gotchas p. 164</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/597.html" name="CWE">597</reference>
                    </references>
                    <parameters>
                        <radioGroup id="CERT.EXP03.UEIC.SCOPE" label="Scope of checking:" prevType="MultipleChoice" showLabel="true">
                            <radioItem defaultValue="checked" label="All objects" value="0"/>
                            <radioItem label="Only 'String' objects " value="1"/>
                        </radioGroup>
                        <param defaultValue="java.lang.Class;java.lang.Thread" id="CERT.EXP03.UEIC.IGNORE_TYPES" inputType="stringList" label="Allow &quot;==&quot; and &quot;!=&quot; operators when compared object is type:" prevType="StringList"/>
                        <param defaultValue="true" id="CERT.EXP03.UEIC.CHECK_ARRAYS" inputType="checkbox" label="Check for calls to the 'equals()' method of class Object on arrays"/>
                        <param defaultValue="false" id="CERT.EXP03.UEIC.CHECK_STATICFINAL" inputType="checkbox" label="Check comparisons to &quot;static&quot; &quot;final&quot; objects"/>
                        <param defaultValue="false" id="CERT.EXP03.UEIC.CHECK_EQUALS_METHOD" inputType="checkbox" label="Check comparisons in equals() methods"/>
                    </parameters>
                </rule>
         </category>
         <category description="OBJ07-J: Sensitive classes must not let themselves be copied" name="OBJ07">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MCNC" header="Make your classes noncloneable" id="MCNC" originalId="SECURITY.WSC.MCNC" scope="LINE" severity="5" since="4.5">
                    <messages>
                        <msg index="1" value="'clone()' method is missing"/>
                        <msg index="2" value="'clone()' method is not &quot;final&quot;"/>
                        <msg index="3" value="java.lang.CloneNotSupportedException is not thrown"/>
                        <msg index="4" value="'clone()' method has parameter"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Java leading security practice p. 170</reference>
                    </references>
                </rule>
         </category>
         <category description="ERR00-J: Do not suppress or ignore checked exceptions" name="ERR00">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.UEHL.LGE" header="Ensure all exceptions are either logged with a standard logger or rethrown" id="LGE" originalId="SECURITY.UEHL.LGE" scope="LINE" severity="2" since="6.0">
                    <messages>
                        <msg index="1" value="The exception is not logged in the &quot;catch&quot; clause."/>
                        <msg index="2" value="The exception is neither logged nor rethrown in the &quot;catch&quot; clause."/>
                        <msg index="3" value="The exception is neither logged nor rethrown in the &quot;catch&quot; clause. Add a comment to the clause if this is expected."/>
                        <msg index="4" value="The ''{0}'' exception is not passed to the logging method called in the &quot;catch&quot; clause."/>
                        <msg index="5" value="The information passed from the ''{0}'' exception to the logging method may be incomplete."/>
                        <msg index="6" value="The ''{0}'' exception is not rethrown in the &quot;catch&quot; block or passed to the new exception as an argument."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.ERR00.LGE.FLAG_LEVEL" name="FLAG_LEVEL" value="Catch clause should contain:"/>
                        <oldparam id="CERT.ERR00.LGE.FLAG_IF_NO_LOG" name="FLAG_IF_NO_LOG" value="Logging method."/>
                        <oldparam id="CERT.ERR00.LGE.FLAG_IF_NO_LOG_AND_THROW" name="FLAG_IF_NO_LOG_AND_THROW" value="Logging method or exception rethrow statement."/>
                        <oldparam id="CERT.ERR00.LGE.FLAG_IF_NO_LOG_AND_THROW_AND_COMMENT" name="FLAG_IF_NO_LOG_AND_THROW_AND_COMMENT" value="Logging method, comment or exception rethrow statement."/>
                        <oldparam id="CERT.ERR00.LGE.LOG_METHOD_EXPRESSION" name="LOG_METHOD_EXPRESSION" value="Logging method name in regular expression"/>
                        <oldparam id="CERT.ERR00.LGE.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                        <oldparam id="CERT.ERR00.LGE.CHECK_EXCEPT_LOGGED" name="CHECK_EXCEPT_LOGGED" value="Check that the exception is passed into the logging method call"/>
                        <oldparam id="CERT.ERR00.LGE.IGNORE_LIST" name="IGNORE_LIST" value="Ignore exception variables matching the following regular expression(s):"/>
                        <oldparam id="CERT.ERR00.LGE.LOGGERS_TAB" name="LOGGERS_TAB" value="Loggers"/>
                        <oldparam id="CERT.ERR00.LGE.IGNORE_LIST_TAB" name="IGNORE_LIST_TAB" value="Ignore List"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/390.html" name="CWE">390</reference>
                    </references>
                    <parameters>
                        <group collapsible="false" id="CERT.ERR00.LGE.tab.LOGGERS_TAB" label="Loggers">
                            <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger;org.apache.logging.log4j.Logger;org.slf4j.Logger" id="CERT.ERR00.LGE.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                            <param defaultValue="^log.*" id="CERT.ERR00.LGE.LOG_METHOD_EXPRESSION" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                        </group>
                        <group collapsible="false" id="CERT.ERR00.LGE.tab.IGNORE_LIST_TAB" label="Ignore List">
                            <param defaultValue="^ignore$" id="CERT.ERR00.LGE.IGNORE_LIST" inputType="stringList" label="Ignore exception variables matching the following regular expression(s):" prevType="StringList"/>
                        </group>
                        <radioGroup id="CERT.ERR00.LGE.FLAG_LEVEL" label="Catch clause should contain:" prevType="MultipleChoice" showLabel="true">
                            <radioItem label="Logging method." value="0"/>
                            <radioItem defaultValue="checked" label="Logging method or &quot;throw&quot; exception statement." value="1"/>
                            <radioItem label="Logging method, comment, or &quot;throw&quot; exception statement." value="2"/>
                        </radioGroup>
                        <param defaultValue="false" id="CERT.ERR00.LGE.CHECK_EXCEPT_LOGGED" inputType="checkbox" label="Check if the exception is passed into the logging method call"/>
                        <param defaultValue="false" id="CERT.ERR00.LGE.CHECK_EXCEPT_FULL_PASSED" inputType="checkbox" label="Check if the exception passed to the logging method is complete"/>
                        <param defaultValue="false" id="CERT.ERR00.LGE.CHECK_EXCEPT_THROW" inputType="checkbox" label="Check if the caught exception is passed to a new exception or rethrown"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.UC.UCATCH" header="Use a caught exception in the &quot;catch&quot; block" id="UCATCH" originalId="UC.UCATCH" scope="LINE" severity="3" since="5.0">
                <messages>
                    <msg index="1" value="Caught exception ''{0}'' is not used in &quot;catch&quot; block."/>
                </messages>
                <oldparameters>
                    <oldparam id="CERT.ERR00.UCATCH.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="Comment to suppress the error(in regular expression):"/>
                    <oldparam id="CERT.ERR00.UCATCH.IGNORE_VARIABLES" name="IGNORE_VARIABLES" value="Ignore exceptions with names matching the following regular expression(s):"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="ignore%5Cs%2Bexception" id="CERT.ERR00.UCATCH.REGULAR_EXPRESSION" inputType="stringList" label="Comment to suppress the error(in regular expression):" prevType="StringList"/>
                    <param defaultValue="^ignore$" id="CERT.ERR00.UCATCH.IGNORE_VARIABLES" inputType="stringList" label="Ignore exceptions with names matching the following regular expression(s):" prevType="StringList"/>
                </parameters>
            </rule>
         </category>
         <category description="OBJ05-J: Defensively copy private mutable class members before returning their references" name="OBJ05">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.CPCL" header="Enforce returning a defensive copy in 'clone()' methods" id="CPCL" originalId="SECURITY.EAB.CPCL" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="Field ''{0}'' is not initialized as a defensive copy."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.MUCOP" header="Provide mutable classes with copy functionality" id="MUCOP" originalId="OOP.MUCOP" scope="LINE" severity="3" since="9.0">
                <messages>
                    <msg index="1" value="{0} missing."/>
                </messages>
                <oldparameters>
                    <oldparam id="CERT.OBJ05.MUCOP.PUBLIC_CLONE" name="PUBLIC_CLONE" value="Provide a public clone method(relevant for final classes)"/>
                    <oldparam id="CERT.OBJ05.MUCOP.COPY_CONSTRUCTOR" name="COPY_CONSTRUCTOR" value="Provide a copy constructor"/>
                    <oldparam id="CERT.OBJ05.MUCOP.STATIC_CREATION" name="STATIC_CREATION" value="Provide a static creation method"/>
                    <oldparam id="CERT.OBJ05.MUCOP.SELECT_OPTIONS" name="SELECT_OPTIONS" value="Select which options to require"/>
                </oldparameters>
                <parameters>
                    <group collapsible="false" id="CERT.OBJ05.MUCOP.group.0" label="Select which options to require">
                        <param defaultValue="true" id="CERT.OBJ05.MUCOP.PUBLIC_CLONE" inputType="checkbox" label="Provide a public clone method(relevant for final classes)"/>
                        <param defaultValue="true" id="CERT.OBJ05.MUCOP.STATIC_CREATION" inputType="checkbox" label="Provide a static creation method"/>
                        <param defaultValue="true" id="CERT.OBJ05.MUCOP.COPY_CONSTRUCTOR" inputType="checkbox" label="Provide a copy constructor"/>
                    </group>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.SMO" header="Do not store user-given mutable objects directly into variables" id="SMO" originalId="SECURITY.EAB.SMO" scope="LINE" severity="3" since="8.0">
                    <messages>
                        <msg index="1" value="This assignment may store the original parameter ''{0}'' rather than a copy of the parameter into the field ''{1}''."/>
                        <msg index="2" value="This assignment may store the original parameter ''{0}'' rather than a copy of the parameter into the variable ''{1}''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.OBJ05.SMO.CHECK_PROTECTED" name="CHECK_PROTECTED" value="Check &quot;protected&quot; methods"/>
                        <oldparam id="CERT.OBJ05.SMO.CHECK_PUBLIC" name="CHECK_PUBLIC" value="Check &quot;public&quot; methods"/>
                        <oldparam id="CERT.OBJ05.SMO.CHECK_PACKAGE" name="CHECK_PACKAGE" value="Check &quot;package-private&quot; methods"/>
                        <oldparam id="CERT.OBJ05.SMO.CHECK_ARRAYS" name="CHECK_ARRAYS" value="Check arrays"/>
                        <oldparam id="CERT.OBJ05.SMO.CHECK_MUTABLE_TYPES" name="CHECK_MUTABLE_TYPES" value="Check mutable types"/>
                        <oldparam id="CERT.OBJ05.SMO.TYPES_TO_CHECK" name="TYPES_TO_CHECK" value="Types to check"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="CERT.OBJ05.SMO.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods"/>
                        <param defaultValue="false" id="CERT.OBJ05.SMO.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods"/>
                        <param defaultValue="false" id="CERT.OBJ05.SMO.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; methods"/>
                        <group collapsible="false" id="CERT.OBJ05.SMO.group.0" label="Types to check">
                            <param defaultValue="true" id="CERT.OBJ05.SMO.CHECK_ARRAYS" inputType="checkbox" label="Check arrays"/>
                            <param defaultValue="true" id="CERT.OBJ05.SMO.CHECK_MUTABLE_TYPES" inputType="checkbox" label="Check mutable types"/>
                        </group>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.MPT" header="Do not pass user-given mutable objects directly to certain types" id="MPT" originalId="SECURITY.EAB.MPT" scope="LINE" severity="3" since="8.4">
                    <messages>
                        <msg index="1" value="New instance of type ''{0}'' is passed mutable parameter ''{1}'' directly."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.OBJ05.MPT.CHECK_PROTECTED" name="CHECK_PROTECTED" value="Check &quot;protected&quot; methods"/>
                        <oldparam id="CERT.OBJ05.MPT.CHECK_PUBLIC" name="CHECK_PUBLIC" value="Check &quot;public&quot; methods"/>
                        <oldparam id="CERT.OBJ05.MPT.CHECK_PACKAGE" name="CHECK_PACKAGE" value="Check &quot;package-private&quot; methods"/>
                        <oldparam id="CERT.OBJ05.MPT.CHECK_ARRAYS" name="CHECK_ARRAYS" value="Check arrays"/>
                        <oldparam id="CERT.OBJ05.MPT.CHECK_MUTABLE_TYPES" name="CHECK_MUTABLE_TYPES" value="Check mutable types"/>
                        <oldparam id="CERT.OBJ05.MPT.CHECKED_CONSTRUCTORS" name="CHECKED_CONSTRUCTORS" value="Check for values passed to new instances of the following types:"/>
                        <oldparam id="CERT.OBJ05.MPT.TYPES_TO_CHECK" name="TYPES_TO_CHECK" value="Types to check"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="CERT.OBJ05.MPT.CHECK_PUBLIC" inputType="checkbox" label="Check &quot;public&quot; methods"/>
                        <param defaultValue="false" id="CERT.OBJ05.MPT.CHECK_PROTECTED" inputType="checkbox" label="Check &quot;protected&quot; methods"/>
                        <param defaultValue="false" id="CERT.OBJ05.MPT.CHECK_PACKAGE" inputType="checkbox" label="Check &quot;package-private&quot; methods"/>
                        <group collapsible="false" id="CERT.OBJ05.MPT.group.0" label="Types to check">
                            <param defaultValue="true" id="CERT.OBJ05.MPT.CHECK_ARRAYS" inputType="checkbox" label="Check arrays"/>
                            <param defaultValue="true" id="CERT.OBJ05.MPT.CHECK_MUTABLE_TYPES" inputType="checkbox" label="Check mutable types"/>
                        </group>
                        <param defaultValue="java\.security\.PrivilegedAction;java\.security\.PrivilegedExceptionAction" id="CERT.OBJ05.MPT.CHECKED_CONSTRUCTORS" inputType="stringList" label="Check for values passed to new instances of the following types:" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
         <category description="MSC02-J: Generate strong random numbers" name="MSC02">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SRD" header="Use 'java.security.SecureRandom' instead of 'java.util.Random' or 'Math.random()'." id="SRD" originalId="SECURITY.WSC.SRD" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Avoid using the insecure ''{0}'' as a random number generator"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/330.html" name="CWE">330</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/338.html" name="CWE">338</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE">676</reference>
                    </references>
                </rule>
         </category>
         <category description="MET04-J: Do not increase the accessibility of overridden or hidden methods" name="MET04">
            <rule class="com.parasoft.jtest.standards.rules.builtin.OOP.OPM" header="Do not override an instance &quot;private&quot; method" id="OPM" originalId="OOP.OPM" scope="METHOD" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Private method ''{0}'' also declared in class ''{1}''."/>
                </messages>
            </rule>
         </category>
         <category description="LCK00-J: Use private final lock objects to synchronize classes that may interact with untrusted code" name="LCK00">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.SOPF" header="Do not synchronize on &quot;public&quot; fields since doing so may cause deadlocks" id="SOPF" originalId="TRS.SOPF" scope="LINE" severity="2" since="8.3">
                <messages>
                    <msg index="1" value="Synchronization on the &quot;{0}&quot; field &quot;{1}&quot;."/>
                </messages>
                <oldparameters>
                    <oldparam id="CERT.LCK00.SOPF.CHECK_ACCESSIBILITY" name="CHECK_ACCESSIBILITY" value="Check fields with the following accessibilities:"/>
                    <oldparam id="CERT.LCK00.SOPF.CHECK_PUBLIC" name="CHECK_PUBLIC" value="Check &quot;public&quot; fields"/>
                    <oldparam id="CERT.LCK00.SOPF.CHECK_NON_PRIVATE" name="CHECK_NON_PRIVATE" value="Check non-&quot;private&quot; fields"/>
                </oldparameters>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Race Conditions p. 161</reference>
                </references>
                <parameters>
                    <radioGroup id="CERT.LCK00.SOPF.CHECK_ACCESSIBILITY" label="Check fields with the following accessibilities:" prevType="MultipleChoice" showLabel="true">
                        <radioItem defaultValue="checked" label="Check &quot;public&quot; fields" value="0"/>
                        <radioItem label="Check non-&quot;private&quot; fields" value="1"/>
                    </radioGroup>
                </parameters>
            </rule>
         </category>
         <category description="THI05-J: Do not use Thread::stop() to terminate threads." name="THI05">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.THRD" header="Avoid calling unsafe deprecated methods of 'Thread' and 'Runtime'." id="THRD" originalId="TRS.THRD" scope="LINE" severity="2" since="4.5">
                <messages>
                    <msg index="1" value="Unsafe method ''{0}'' was called."/>
                    <msg index="2" value="''{0}'' should not be used because it only exists for use with the deadlock-prone ''suspend()'' method."/>
                    <msg index="3" value="Deadlock-prone method ''{0}'' was called."/>
                    <msg index="4" value="Deprecated method ''{0}'' was called"/>
                </messages>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Race Conditions p. 161</reference>
                </references>
            </rule>
         </category>
         <category description="TSM01-J: Do not let the this reference escape during object construction" name="TSM01">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.CTRE" header="Do not let &quot;this&quot; reference escape during construction." id="CTRE" originalId="TRS.CTRE" scope="LINE" severity="3" since="8.4">
                <messages>
                    <msg index="1" value="Method invocation ''{0}'' publishes an inner class in constructor ''{1}''."/>
                </messages>
            </rule>
         </category>
         <category description="ERR04-J: Do not complete abruptly from finally block" name="ERR04">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ARCF" header="Avoid using 'return's inside 'finally blocks if thare are other 'return's inside the try-catch block." id="ARCF" originalId="PB.CUB.ARCF" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Avoid multiple 'return' if a 'return' is present inside finally block."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.ERR04.ARCF.ALSO_CATCH" name="ALSO_CATCH" value="Only flag return statements when they are in try-catch blocks"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/584.html" name="CWE">584</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CERT.ERR04.ARCF.ALSO_CATCH" inputType="checkbox" label="Only flag return statements when they are in try-catch blocks"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ATSF" header="Do not exit &quot;finally&quot; blocks abruptly." id="ATSF" originalId="PB.CUB.ATSF" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="The enclosing &quot;finally&quot; block should not be exited with a &quot;{0}&quot; statement."/>
                        <msg index="2" value="This method call may cause the enclosing &quot;finally&quot; block to be exited because it throws a checked exception."/>
                        <msg index="3" value="This constructor call may cause the enclosing &quot;finally&quot; block to be exited because it throws a checked exception."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.ERR04.ATSF.WHAT_TO_CHECK" name="WHAT_TO_CHECK" value="What to Check"/>
                        <oldparam id="CERT.ERR04.ATSF.CHECK_RETURN" name="CHECK_RETURN" value="&quot;return&quot; statements"/>
                        <oldparam id="CERT.ERR04.ATSF.CHECK_THROW" name="CHECK_THROW" value="&quot;throw&quot; statements"/>
                        <oldparam id="CERT.ERR04.ATSF.CHECK_BREAK" name="CHECK_BREAK" value="&quot;break&quot; and &quot;continue&quot; statements"/>
                        <oldparam id="CERT.ERR04.ATSF.CHECK_METH_THROW" name="CHECK_METH_THROW" value="method calls which throw uncaught exceptions"/>
                        <oldparam id="CERT.ERR04.ATSF.ALLOW_RETHROW" name="ALLOW_RETHROW" value="allow rethrowing of exceptions from within &quot;finally&quot; blocks"/>
                    </oldparameters>
                    <parameters>
                        <group collapsible="false" id="CERT.ERR04.ATSF.group.0" label="What to Check">
                            <param defaultValue="true" id="CERT.ERR04.ATSF.CHECK_THROW" inputType="checkbox" label="&quot;throw&quot; statements">
                                <param defaultValue="false" id="CERT.ERR04.ATSF.ALLOW_RETHROW" inputType="checkbox" label="allow rethrowing of exceptions from within &quot;finally&quot; blocks"/>
                            </param>
                            <param defaultValue="false" id="CERT.ERR04.ATSF.CHECK_RETURN" inputType="checkbox" label="&quot;return&quot; statements"/>
                            <param defaultValue="false" id="CERT.ERR04.ATSF.CHECK_BREAK" inputType="checkbox" label="&quot;break&quot; and &quot;continue&quot; statements"/>
                            <param defaultValue="false" id="CERT.ERR04.ATSF.CHECK_METH_THROW" inputType="checkbox" label="method calls which throw uncaught exceptions"/>
                        </group>
                    </parameters>
                </rule>
         </category>
         <category description="LCK01-J: Do not synchronize on objects that may be reused" name="LCK01">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.SCS" header="Do not synchronize on constant Strings." id="SCS" originalId="TRS.SCS" scope="LINE" severity="1" since="8.2">
                <messages>
                    <msg index="1" value="Synchronizing on a constant String can lead to deadlocks."/>
                </messages>
            </rule>
         </category>
         <category description="EXP00-J: Do not ignore values returned by methods" name="EXP00">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AECB" header="Avoid &quot;try&quot;, &quot;catch&quot; and &quot;finally&quot; blocks with empty bodies" id="AECB" originalId="PB.TYPO.AECB" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="&quot;try&quot; block has an empty body."/>
                        <msg index="2" value="&quot;catch&quot; block has an empty body."/>
                        <msg index="3" value="&quot;finally&quot; block has an empty body."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.EXP00.AECB.CHECK_FINALLY" name="CHECK_FINALLY" value="Check &quot;finally&quot; block."/>
                        <oldparam id="CERT.EXP00.AECB.CHECK_TRY" name="CHECK_TRY" value="Check &quot;try&quot; block."/>
                        <oldparam id="CERT.EXP00.AECB.CHECK_CATCH" name="CHECK_CATCH" value="Check &quot;catch&quot; block."/>
                        <oldparam id="CERT.EXP00.AECB.CHECK_COMMENTS" name="CHECK_COMMENTS" value="Disallow blocks with comments as content."/>
                        <oldparam id="CERT.EXP00.AECB.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="Regular expression of exception variable name. (enclosing catch block would be ignored if matches)"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/391.html" name="CWE">391</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CERT.EXP00.AECB.CHECK_TRY" inputType="checkbox" label="Check &quot;try&quot; block."/>
                        <param defaultValue="true" id="CERT.EXP00.AECB.CHECK_CATCH" inputType="checkbox" label="Check &quot;catch&quot; block."/>
                        <param defaultValue="true" id="CERT.EXP00.AECB.CHECK_FINALLY" inputType="checkbox" label="Check &quot;finally&quot; block."/>
                        <param defaultValue="false" id="CERT.EXP00.AECB.CHECK_COMMENTS" inputType="checkbox" label="Disallow blocks with comments as content."/>
                        <param defaultValue="%5Eignore%24;" id="CERT.EXP00.AECB.REGULAR_EXPRESSION" inputType="stringList" label="Regular expression of exception variable name. (enclosing catch block would be ignored if matches)" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.NASSIG" header="Ensure method and constructor return values are used" id="NASSIG" originalId="PB.USC.NASSIG" scope="LINE" severity="3" since="5.0">
                    <messages>
                        <msg index="1" value="Return value from method ''{0}'' is not used."/>
                        <msg index="2" value="Return value from method ''{0}'' is not used, immutable variable ''{1}'' has not been updated."/>
                        <msg index="3" value="Return value from constructor ''{0}'' is not used."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.EXP00.NASSIG.GENERAL_TAB" name="GENERAL_TAB" value="General"/>
                        <oldparam id="CERT.EXP00.NASSIG.CHECK_CONSTRUCTORS" name="CHECK_CONSTRUCTORS" value="Check constructor calls"/>
                        <oldparam id="CERT.EXP00.NASSIG.CHECK_METHODS" name="CHECK_METHODS" value="Check method calls"/>
                        <oldparam id="CERT.EXP00.NASSIG.ONLY_IMMUTABLE" name="ONLY_IMMUTABLE" value="Only check method calls on immutable types where all of the parameter types are immutable."/>
                        <oldparam id="CERT.EXP00.NASSIG.ONLY_IMMUTABLE_NOT_UPDATE" name="ONLY_IMMUTABLE_NOT_UPDATE" value="Only check method calls which are used to update the state of immutable variables."/>
                        <oldparam id="CERT.EXP00.NASSIG.IGNORE_NON_JDK" name="IGNORE_NON_JDK" value="Ignore methods and constructors which are not defined in the &quot;java&quot; or &quot;javax&quot; packages."/>
                        <oldparam id="CERT.EXP00.NASSIG.CHECK_IGNORE_TAB" name="CHECK_IGNORE_TAB" value="Check/Ignore"/>
                        <oldparam id="CERT.EXP00.NASSIG.CHECK_IGNORE" name="CHECK_IGNORE" value="Specify whether to check or ignore certain methods and constructors"/>
                        <oldparam id="CERT.EXP00.NASSIG.CHECK_FOLLOWING" name="CHECK_FOLLOWING" value="Check the following methods and constructors:"/>
                        <oldparam id="CERT.EXP00.NASSIG.IGNORE_FOLLOWING" name="IGNORE_FOLLOWING" value="Ignore the following methods and constructors:"/>
                        <oldparam id="CERT.EXP00.NASSIG.CHECK_TABLE" name="CHECK_TABLE" value="Specify types and methods/constructors as a Glob expression (use * as wildcard)"/>
                        <oldparam id="CERT.EXP00.NASSIG.IGNORE_TABLE" name="IGNORE_TABLE" value="Specify types and methods/constructors as a Glob expression (use * as wildcard)"/>
                        <oldparam id="CERT.EXP00.NASSIG.TYPE" name="TYPE" value="Type"/>
                        <oldparam id="CERT.EXP00.NASSIG.METHOD" name="METHOD" value="Method/Constructor"/>
                    </oldparameters>
                    <parameters>
                        <group collapsible="false" id="CERT.EXP00.NASSIG.tab.GENERAL_TAB" label="General">
                            <param defaultValue="true" id="CERT.EXP00.NASSIG.CHECK_CONSTRUCTORS" inputType="checkbox" label="Check constructor calls"/>
                            <param defaultValue="true" id="CERT.EXP00.NASSIG.CHECK_METHODS" inputType="checkbox" label="Check method calls">
                                <param defaultValue="true" id="CERT.EXP00.NASSIG.ONLY_IMMUTABLE" inputType="checkbox" label="Only check method calls on immutable types where all of the parameter types are immutable.">
                                    <param defaultValue="false" id="CERT.EXP00.NASSIG.ONLY_IMMUTABLE_NOT_UPDATE" inputType="checkbox" label="Only check method calls which are used to update the state of immutable variables."/>
                                </param>
                            </param>
                            <param defaultValue="false" id="CERT.EXP00.NASSIG.IGNORE_NON_JDK" inputType="checkbox" label="Ignore methods and constructors which are not defined in the &quot;java&quot; or &quot;javax&quot; packages."/>
                        </group>
                        <group collapsible="false" id="CERT.EXP00.NASSIG.tab.CHECK_IGNORE_TAB" label="Check/Ignore">
                            <radioGroup id="CERT.EXP00.NASSIG.CHECK_IGNORE" label="Specify whether to check or ignore certain methods and constructors" prevType="MultipleChoice" showLabel="true">
                                <radioItem label="Check the following methods and constructors:" value="0">
                                    <!--param id="PB.USC.NASSIG.CHECK_TABLE" inputType="bigtext" defaultValue="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;table version=&quot;1.0&quot;&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.String&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;concat(java.lang.String)&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.String&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;copy*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.String&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;intern()&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.String&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;replace*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.String&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;split*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.String&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;sub*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.String&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;to*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.String&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;trim()&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.String&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;valueOf*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.sql.ResultSet&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;absolute(int)&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.sql.ResultSet&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;first()&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.sql.ResultSet&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;last()&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.sql.ResultSet&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;previous()&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.sql.ResultSet&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;next()&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.sql.ResultSet&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;relative(int)&quot;/&gt;&lt;/row&gt;&lt;/table&gt;" label="Specify types and methods/constructors as a Glob expression (use * as wildcard)"/-->
                                    <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CERT.EXP00.NASSIG.CHECK_TABLE" label="Specify types and methods/constructors as a Glob expression (use * as wildcard)" reader="SATable">
                                        <columns>
                                            <column columnType="text" editable="true" id="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" label="Type" required="true"/>
                                            <column columnType="text" editable="true" id="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" label="Method/Constructor" required="true"/>
                                        </columns>
                                        <predefinedRows>
                                            <row id="1">
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.lang.String"/>
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="concat(java.lang.String)"/>
                                            </row>
                                            <row id="2">
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.lang.String"/>
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="copy*"/>
                                            </row>
                                            <row id="3">
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.lang.String"/>
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="intern()"/>
                                            </row>
                                            <row id="4">
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.lang.String"/>
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="replace*"/>
                                            </row>
                                            <row id="5">
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.lang.String"/>
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="split*"/>
                                            </row>
                                            <row id="6">
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.lang.String"/>
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="sub*"/>
                                            </row>
                                            <row id="7">
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.lang.String"/>
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="to*"/>
                                            </row>
                                            <row id="8">
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.lang.String"/>
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="trim()"/>
                                            </row>
                                            <row id="9">
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.lang.String"/>
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="valueOf*"/>
                                            </row>
                                            <row id="10">
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.sql.ResultSet"/>
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="absolute(int)"/>
                                            </row>
                                            <row id="11">
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.sql.ResultSet"/>
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="first()"/>
                                            </row>
                                            <row id="12">
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.sql.ResultSet"/>
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="last()"/>
                                            </row>
                                            <row id="13">
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.sql.ResultSet"/>
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="previous()"/>
                                            </row>
                                            <row id="14">
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.sql.ResultSet"/>
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="next()"/>
                                            </row>
                                            <row id="15">
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN1" value="java.sql.ResultSet"/>
                                                <column refColumnId="PB__USC__NASSIG__CHECK_TABLE__COLUMN2" value="relative(int)"/>
                                            </row>
                                        </predefinedRows>
                                    </complexParamTable>
                                </radioItem>
                                <radioItem defaultValue="checked" label="Ignore the following methods and constructors:" value="1">
                                    <!--param id="PB.USC.NASSIG.IGNORE_TABLE" inputType="bigtext" defaultValue="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;table version=&quot;1.0&quot;&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.io.ObjectInputStream&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;enableResolveObject(boolean)&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.Process&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;exitValue()&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.Process&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;waitFor()&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.Runtime&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;exec*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.Runtime&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;removeShutdownHook(java.lang.Thread)&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.StringBuffer&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;append*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.util.*&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;clear()&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.util.*&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;remove*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.util.*&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;put*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.util.*&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;add*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.util.*&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;remove*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.util.*&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;retain*&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.Throwable&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;fillInStackTrace()&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.lang.Throwable&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;initCause(java.lang.Throwable)&quot;/&gt;&lt;/row&gt;&lt;row remove=&quot;true&quot;&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;java.sql.PreparedStatement&quot;/&gt;&lt;column edit=&quot;false&quot; type=&quot;-1&quot; value=&quot;execute()&quot;/&gt;&lt;/row&gt;&lt;/table&gt;" label="Specify types and methods/constructors as a Glob expression (use * as wildcard)"/-->
                                    <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CERT.EXP00.NASSIG.IGNORE_TABLE" label="Specify types and methods/constructors as a Glob expression (use * as wildcard)" reader="SATable">
                                        <columns>
                                            <column columnType="text" editable="true" id="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" label="Type" required="true"/>
                                            <column columnType="text" editable="true" id="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" label="Method/Constructor" required="true"/>
                                        </columns>
                                        <predefinedRows>
                                            <row id="1">
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.io.ObjectInputStream"/>
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="enableResolveObject(boolean)"/>
                                            </row>
                                            <row id="2">
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.lang.Process"/>
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="exitValue()"/>
                                            </row>
                                            <row id="3">
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.lang.Process"/>
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="waitFor()"/>
                                            </row>
                                            <row id="4">
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.lang.Runtime"/>
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="exec*"/>
                                            </row>
                                            <row id="5">
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.lang.Runtime"/>
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="removeShutdownHook(java.lang.Thread)"/>
                                            </row>
                                            <row id="6">
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.lang.StringBuffer"/>
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="append*"/>
                                            </row>
                                            <row id="7">
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.util.*"/>
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="clear()"/>
                                            </row>
                                            <row id="8">
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.util.*"/>
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="remove*"/>
                                            </row>
                                            <row id="9">
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.util.*"/>
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="put*"/>
                                            </row>
                                            <row id="10">
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.util.*"/>
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="add*"/>
                                            </row>
                                            <row id="11">
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.util.*"/>
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="remove*"/>
                                            </row>
                                            <row id="12">
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.util.*"/>
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="retain*"/>
                                            </row>
                                            <row id="13">
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.lang.Throwable"/>
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="fillInStackTrace()"/>
                                            </row>
                                            <row id="14">
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.lang.Throwable"/>
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="initCause(java.lang.Throwable)"/>
                                            </row>
                                            <row id="15">
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN1" value="java.sql.PreparedStatement"/>
                                                <column refColumnId="PB__USC__NASSIG__IGNORE_TABLE__COLUMN2" value="execute()"/>
                                            </row>
                                        </predefinedRows>
                                    </complexParamTable>
                                </radioItem>
                            </radioGroup>
                        </group>
                    </parameters>
                </rule>
         </category>
         <category description="SER11-J: Prevent overwriting of externalizable objects" name="SER11">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.IRX" header="Avoid re-initializing fields in the 'readExternal()' method of 'Externalizable' classes" id="IRX" originalId="SERIAL.IRX" scope="LINE" severity="3" since="8.4">
                <messages>
                    <msg index="1" value="Fields are re-initialized in 'readExternal()'."/>
                </messages>
            </rule>
         </category>
         <category description="LCK05-J: Synchronize access to static fields that can be modified by untrusted code" name="LCK05">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.IASF" header="Inspect accesses to &quot;static&quot; fields which may require synchronization" id="IASF" originalId="TRS.IASF" scope="LINE" severity="3" since="8.3">
                <messages>
                    <msg index="1" value="This code may not be thread-safe; setting and accessing the field ''{0}'' may require synchronization."/>
                </messages>
                <oldparameters>
                    <oldparam id="CERT.LCK05.IASF.CHECK_LOCALS" name="CHECK_LOCALS" value="Check non-static instance fields"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="false" id="CERT.LCK05.IASF.CHECK_LOCALS" inputType="checkbox" label="Check non-static instance fields"/>
                </parameters>
            </rule>
         </category>
         <category description="THI00-J: Do not invoke Thread::run()" name="THI00">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.IRUN" header="Do not call the 'run()' method directly on classes extending 'java.lang.Thread' or implementing 'java.lang.Runnable'." id="IRUN" originalId="TRS.IRUN" scope="LINE" severity="1" since="6.0">
                <messages>
                    <msg index="1" value="''{0}'', which extends 'java.lang.Thread', calls method 'run()'."/>
                    <msg index="2" value="''{0}'', which implements 'java.lang.Runnable' calls method 'run()'."/>
                </messages>
                <oldparameters>
                    <oldparam id="CERT.THI00.IRUN.CHECK_RUNNABLE" name="CHECK_RUNNABLE" value="Check classes implementing 'java.lang.Runnable'"/>
                </oldparameters>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/572.html" name="CWE">572</reference>
                </references>
                <parameters>
                    <param defaultValue="false" id="CERT.THI00.IRUN.CHECK_RUNNABLE" inputType="checkbox" label="Check classes implementing 'java.lang.Runnable'"/>
                </parameters>
            </rule>
         </category>
         <category description="MET09-J: Classes that define equals() method must also define hashCode() method" name="MET09">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.OVERRIDE" header="Override 'Object.hashCode()' when you override 'Object.equals()' and vice versa" id="OVERRIDE" originalId="CODSTA.OIM.OVERRIDE" scope="CLASS" severity="1" since="4.5">
                    <messages>
                        <msg index="1" value="Class overriding ''equals(Object)'' does not override ''hashCode()'': {0}."/>
                        <msg index="2" value="Class inherits overridden version of ''equals(Object)'' but does not override ''hashCode()'': {0}."/>
                        <msg index="3" value="Class overriding ''hashCode()'' does not override ''equals(Object)'': {0}."/>
                        <msg index="4" value="Class inherits overridden version of ''hashCode()'' but does not override ''equals(Object)'': {0}."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.MET09.OVERRIDE.CODSTA.OVERRIDE" name="CODSTA.OVERRIDE" value="Check that 'hashCode()' is overridden whenever 'equals()' is overridden."/>
                        <oldparam id="CERT.MET09.OVERRIDE.CODSTA.OVERRIDE2" name="CODSTA.OVERRIDE2" value="Check that 'equals()' is overridden whenever 'hashCode()' is overridden."/>
                        <oldparam id="CERT.MET09.OVERRIDE.CHECK_INHERITED" name="CHECK_INHERITED" value="Include methods inherited from &quot;abstract&quot; superclasses in the checking."/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Java gotchas p. 164</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/581.html" name="CWE">581</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="CERT.MET09.OVERRIDE.CODSTA.OVERRIDE" inputType="checkbox" label="Check that 'hashCode()' is overridden whenever 'equals()' is overridden."/>
                        <param defaultValue="true" id="CERT.MET09.OVERRIDE.CODSTA.OVERRIDE2" inputType="checkbox" label="Check that 'equals()' is overridden whenever 'hashCode()' is overridden."/>
                        <param defaultValue="false" id="CERT.MET09.OVERRIDE.CHECK_INHERITED" inputType="checkbox" label="Include methods inherited from &quot;abstract&quot; superclasses in the checking."/>
                    </parameters>
                </rule>
         </category>
         <category description="LCK07-J: Avoid deadlock by requesting and releasing locks in the same order" name="LCK07">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.LORD" header="Ensure that nested locks are ordered correctly" id="LORD" originalId="TRS.LORD" scope="LINE" severity="2" since="9.0">
                <messages>
                    <msg index="1" value="Lock ''{0}'' should not be wrapped by lock ''{1}''."/>
                </messages>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/832.html" name="CWE">832</reference>
                </references>
            </rule>
         </category>
         <category description="LCK04-J: Do not synchronize on a collection view if the backing collection is accessible" name="LCK04">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.SOBC" header="Do not synchronize on a collection view if the backing collection is accessible" id="SOBC" originalId="TRS.SOBC" scope="LINE" severity="4" since="10.4">
                <messages>
                    <msg index="1" value="Do not synchronize on the collection view ''{0}''"/>
                </messages>
            </rule>
         </category>
         <category description="FIO07.JDo not let external process block on IO buffers" name="FIO07">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PORT.EXEC" header="Do not use &quot;Runtime.exec()&quot;." id="EXEC" originalId="PORT.EXEC" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Non-portable 'Runtime.exec()' used"/>
                </messages>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Buffer Overruns and Overflow p. 112</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/511.html" name="CWE">511</reference>
                </references>
            </rule>
         </category>
         <category description="FIO03-J: Remove temporary files before termination" name="FIO03">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.ATF" header="Avoid temporary files" id="ATF" originalId="SECURITY.IBA.ATF" scope="LINE" severity="3" since="9.0">
                    <messages>
                        <msg index="1" value="A temporary file has been created"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Secure application deployment p. 95</reference>
                    </references>
                </rule>
         </category>
         <category description="VNA02-J: Ensure that compound operations on shared variables are atomic" name="VNA02">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.MRAV" header="Access related Atomic variables in a synchronized block." id="MRAV" originalId="TRS.MRAV" scope="LINE" severity="4" since="8.4">
                <messages>
                    <msg index="1" value="Atomic variables: ''{0}'' are not accessed in a synchronized block."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.SSUG" header="Make the get method for a field synchronized if the set method is synchronized" id="SSUG" originalId="TRS.SSUG" scope="LINE" severity="3" since="8.0">
                <messages>
                    <msg index="1" value="There is a synchronized set method for the field ''{0}'', so this get method should also be synchronized."/>
                </messages>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Race Conditions p. 161</reference>
                </references>
            </rule>
         </category>
         <category description="TSM00-J: Do not override thread-safe methods with methods that are not thread-safe" name="TSM00">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.OSNS" header="Avoid overriding synchronized methods with non-synchronized methods." id="OSNS" originalId="TRS.OSNS" scope="LINE" severity="3" since="9.0">
                <messages>
                    <msg index="1" value="Non-synchronized method ''{0}'' overrides a synchronized method."/>
                </messages>
                <oldparameters>
                    <oldparam id="CERT.TSM00.OSNS.IGNORE_CALL_OVERRIDDEN" name="IGNORE_CALL_OVERRIDDEN" value="Ignore methods which call the method they override"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="true" id="CERT.TSM00.OSNS.IGNORE_CALL_OVERRIDDEN" inputType="checkbox" label="Ignore methods which call the method they override"/>
                </parameters>
            </rule>
         </category>
         <category description="VNA00-J: Ensure visibility when accessing shared primitive variables" name="VNA00">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.MRAV" header="Access related Atomic variables in a synchronized block." id="MRAV" originalId="TRS.MRAV" scope="LINE" severity="4" since="8.4">
                <messages>
                    <msg index="1" value="Atomic variables: ''{0}'' are not accessed in a synchronized block."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.LORD" header="Ensure that nested locks are ordered correctly" id="LORD" originalId="TRS.LORD" scope="LINE" severity="2" since="9.0">
                <messages>
                    <msg index="1" value="Lock ''{0}'' should not be wrapped by lock ''{1}''."/>
                </messages>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/832.html" name="CWE">832</reference>
                </references>
            </rule>
         </category>
         <category description="STR00-J: Don't form strings containing partial characters from variable-width encodings" name="STR00">
            <rule class="com.parasoft.jtest.standards.rules.builtin.INTER.COS" header="Do not use String concatenation in an Internationalized environment." id="COS" originalId="INTER.COS" severity="5" since="4.5">
                <messages>
                    <msg index="1" value="Concatenating strings."/>
                </messages>
            </rule>
         </category>
         <category description="OBJ11-J: Be wary of letting constructors throw exceptions" name="OBJ11">
            <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.EPNFC" header="Do not throw exceptions from constructors of &quot;public&quot; non-&quot;final&quot; classes." id="EPNFC" originalId="EXCEPT.EPNFC" scope="LINE" severity="3" since="8.4">
                <messages>
                    <msg index="1" value="Constructor ''{0}'' throws ''{1}''."/>
                </messages>
            </rule>
         </category>
         <category description="JNI00-J: Define wrappers around native methods" name="JNI00">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.NATIW" header="Use wrapper methods to secure native methods" id="NATIW" originalId="SECURITY.IBA.NATIW" scope="LINE" severity="3" since="9.0">
                    <messages>
                        <msg index="1" value="{0} should only be accessed using a wrapper method."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Buffer Overruns and Overflow p. 112</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/111.html" name="CWE">111</reference>
                    </references>
                </rule>
         </category>
         <category description="FIO08-J: Distinguish between characters or bytes read from a stream and -1" name="FIO08">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CRRV" header="Check the return value of methods which read or skip input" id="CRRV" originalId="PB.LOGIC.CRRV" scope="LINE" severity="3" since="8.0">
                    <messages>
                        <msg index="1" value="The return value of this call to ''{0}()'' is not checked."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.FIO08.CRRV.CHECKED_METHOD_LIST" name="CHECKED_METHOD_LIST" value="Methods to be checked: \n(in form of &lt;fully qualified type name&gt;#&lt;method&gt;(&lt;parameter1 type&gt;,&lt;parameter2 type&gt;))"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/252.html" name="CWE">252</reference>
                    </references>
                    <parameters>
                        <param defaultValue="java.io.InputStream#read();java.io.InputStream#read(byte[]);java.io.InputStream#read(byte[],int,int);java.io.InputStream#skip(long);java.io.DataInput#skipBytes(int)" description="Methods to be checked: (in form of &lt;fully qualified type name&gt;#&lt;method&gt;(&lt;parameter1 type&gt;,&lt;parameter2 type&gt;))" id="CERT.FIO08.CRRV.CHECKED_METHOD_LIST" inputType="stringList" label="Methods to be checked:" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
         <category description="MSC01-J: Do not use an empty infinite loop" name="MSC01">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.EB" header="Avoid control statements with empty bodies" id="EB" originalId="PB.TYPO.EB" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="''{0}'' statement with an empty body."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.MSC01.EB.CHECK_EMPTY_STATEMENT" name="CHECK_EMPTY_STATEMENT" value="empty statement"/>
                        <oldparam id="CERT.MSC01.EB.CHECK_TYPE_TABLE" name="CHECK_TYPE_TABLE" value="Flag as empty body:"/>
                        <oldparam id="CERT.MSC01.EB.CHECK_TYPE" name="CHECK_TYPE" value="Conditional statement type"/>
                        <oldparam id="CERT.MSC01.EB.CHECK_EMPTY_BLOCK" name="CHECK_EMPTY_BLOCK" value="empty block"/>
                        <oldparam id="CERT.MSC01.EB.SAME_LINE_ONLY" name="SAME_LINE_ONLY" value="Report only if the empty statement is on the same line as the control statement."/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/483.html" name="CWE">483</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CERT.MSC01.EB.CHECK_TYPE_TABLE" label="Flag as empty body:" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN1" label="Conditional statement type" required="true"/>
                                <column columnType="checkbox" editable="true" id="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN2" label="empty statement" required="true"/>
                                <column columnType="checkbox" editable="true" id="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN3" label="empty block" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN1" value="if"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN2" value="true"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN3" value="false"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN1" value="else"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN2" value="true"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN3" value="false"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN1" value="for"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN2" value="true"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN3" value="false"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN1" value="while"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN2" value="true"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN3" value="false"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN1" value="do while"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN2" value="true"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN3" value="false"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN1" value="switch"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN2" value="true"/>
                                    <column refColumnId="PB__TYPO__EB__CHECK_TYPE_TABLE__COLUMN3" value="false"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>

                        <param defaultValue="true" id="CERT.MSC01.EB.SAME_LINE_ONLY" inputType="checkbox" label="Report only if the empty statement is on the same line as the control statement."/>
                    </parameters>
                </rule>
         </category>
         <category description="TPS00-J: Use thread pools to enable graceful degradation of service during traffic bursts" name="TPS00">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.ISTART" header="Do not call the 'start()' method directly on Thread class instances " id="ISTART" originalId="TRS.ISTART" scope="LINE" severity="4" since="10.4">
                <messages>
                    <msg index="1" value="A call to the Thread.start() method."/>
                </messages>
                <parameters>
                    <param defaultValue="true" id="CERT.TPS00.ISTART.CHECK_ONLY_IN_LOOPS" inputType="checkbox" label="Ignore method calls outside of loops"/>
                </parameters>
            </rule>
         </category>
         <category description="ENV02-J: Do not trust the values of environment variables" name="ENV02">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PORT.ENV" header="Do not use the non-portable 'System.getenv()' method." id="ENV" originalId="PORT.ENV" scope="LINE" severity="1" since="4.5">
                <messages>
                    <msg index="1" value="Non-portable method ''System.getenv()'' called to get the environment variable ''{0}''."/>
                    <msg index="2" value="Non-portable method 'System.getenv()' called."/>
                </messages>
                <oldparameters>
                    <oldparam id="CERT.ENV02.ENV.IGNORE_1_5" name="IGNORE_1_5" value="Ignore code which uses JDK 1.5 or later"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="false" id="CERT.ENV02.ENV.IGNORE_1_5" inputType="checkbox" label="Ignore code which uses JDK 1.5 or later"/>
                </parameters>
            </rule>
         </category>
         <category description="NUM04-J: Do not use floating-point numbers if precise computation is required" name="NUM04">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.UBD" header="Do not use &quot;float&quot; and &quot;double&quot; if exact answers are required" id="UBD" originalId="PB.NUM.UBD" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="''{0}'' used in a high-precision calculation or comparison is of type &quot;double&quot; or &quot;float&quot;"/>
                    </messages>
                </rule>
         </category>
         <category description="FIO04-J: Release resources when they are no longer needed" name="FIO04">
            <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.CIO" header="Close input and output resources in &quot;finally&quot; blocks" id="CIO" originalId="OPT.CIO" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Variable ''{0}'' is not closed within a &quot;finally&quot; block."/>
                </messages>
                <oldparameters>
                    <oldparam id="CERT.FIO04.CIO.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
                    <oldparam id="CERT.FIO04.CIO.ADDITIONAL_CLOSE_METHODS" name="ADDITIONAL_CLOSE_METHODS" value="Additional resource closing methods (in regular expression)"/>
                    <oldparam id="CERT.FIO04.CIO.METHOD" name="METHOD" value="Method name"/>
                    <oldparam id="CERT.FIO04.CIO.TYPE" name="TYPE" value="Declaring type"/>
                    <oldparam id="CERT.FIO04.CIO.IGNORE_TYPES" name="IGNORE_TYPES" value="Ignored types (Specify fully qualified names)"/>
                </oldparameters>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE">404</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE">772</reference>
                </references>
                <parameters>
                    <param defaultValue="java.io.ByteArrayInputStream;java.io.ByteArrayOutputStream;java.io.CharArrayWriter;java.io.StringBufferInputStream;java.io.StringReader;java.io.StringWriter;" id="CERT.FIO04.CIO.IGNORE_TYPES" inputType="stringList" label="Ignored types (Specify fully qualified names)" prevType="StringList"/>
                    <!--param id="OPT.CIO.ADDITIONAL_CLOSE_METHODS" inputType="bigtext" defaultValue="" label="Additional resource closing methods (in regular expression)"/-->
                    <!--  complexParamTable id="OPT.CIO.ADDITIONAL_CLOSE_METHODS" reader="SATable" label="Additional resource closing methods (in regular expression)" canAddRow="true" canRemoveRow="true" canEditRow="true" canSetOrdering="true">
                        <columns>
                            <column id="OPT__CIO__ADDITIONAL_CLOSE_METHODS__COLUMN1" label="Declaring type" columnType="text" defaultValue=".*" editable="true" required="true" />
                            <column id="OPT__CIO__ADDITIONAL_CLOSE_METHODS__COLUMN2" label="Method name" columnType="text" defaultValue=".*" editable="true" required="true" />
                        </columns>
                    </complexParamTable>-->
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.OPT.CCR" header="Close all &quot;java.io.Closeable&quot; resources in a &quot;finally&quot; block." id="CCR" originalId="OPT.CCR" scope="LINE" severity="3" since="8.1">
                <messages>
                    <msg index="1" value="Resource ''{0}'' is opened but is not closed in a &quot;finally&quot; block."/>
                </messages>
                <oldparameters>
                    <oldparam id="CERT.FIO04.CCR.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
                    <oldparam id="CERT.FIO04.CCR.ADDITIONAL_CLOSE_METHODS" name="ADDITIONAL_CLOSE_METHODS" value="Additional resource closing methods (in regular expression)"/>
                    <oldparam id="CERT.FIO04.CCR.METHOD" name="METHOD" value="Method name"/>
                    <oldparam id="CERT.FIO04.CCR.TYPE" name="TYPE" value="Declaring type"/>
                    <oldparam id="CERT.FIO04.CCR.IGNORE_TYPES" name="IGNORE_TYPES" value="Ignored types (Specify fully qualified names)"/>
                </oldparameters>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/404.html" name="CWE">404</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/772.html" name="CWE">772</reference>
                </references>
                <parameters>
                    <param defaultValue="java.io.ByteArrayInputStream;java.io.ByteArrayOutputStream;java.io.CharArrayWriter;java.io.StringBufferInputStream;java.io.StringReader;java.io.StringWriter;" id="CERT.FIO04.CCR.IGNORE_TYPES" inputType="stringList" label="Ignored types (Specify fully qualified names)" prevType="StringList"/>
                </parameters>
            </rule>
         </category>
         <category description="SEC03-J: Do not load trusted classes after allowing untrusted code to load in arbitrary classes" name="SEC03">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.ACL" header="Do not access the class loader in a web component." id="ACL" originalId="SECURITY.BV.ACL" scope="LINE" severity="3" since="7.5">
                    <messages>
                        <msg index="1" value="Call to ''{0}'' in a web component."/>
                        <msg index="2" value="Method ''{0}'' indirectly calls &quot;getClassLoader()&quot; in a web component."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.SEC03.ACL.DEPTH" name="DEPTH" value="Maximum depth to look for &quot;getClassLoader()&quot; calls"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="2" id="CERT.SEC03.ACL.DEPTH" inputType="integer" label="Maximum depth to look for &quot;getClassLoader()&quot; calls" max="5" min="1"/>
                    </parameters>
                </rule>
         </category>
         <category description="SEC05-J: Do not use reflection to increase accessibility of classes, methods or fields" name="SEC05">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.ARM" header="Avoid using reflection methods" id="ARM" originalId="CODSTA.BP.ARM" scope="LINE" severity="4" since="9.0">
                    <messages>
                        <msg index="1" value="Reflection method ''{0}'' called."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.SEC05.ARM.CHECKED_METHODS" name="CHECKED_METHODS" value="Check the following methods:"/>
                        <oldparam id="CERT.SEC05.ARM.TYPE" name="TYPE" value="Type (qualified name)"/>
                        <oldparam id="CERT.SEC05.ARM.METHOD" name="METHOD" value="Method name (regular expression)"/>
                    </oldparameters>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="CERT.SEC05.ARM.CHECKED_METHODS" label="Check the following methods:" reader="SATable">
                            <columns>
                                <column columnType="text" defaultValue="unknown" editable="true" id="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" label="Type (qualified name)" required="true"/>
                                <column columnType="text" defaultValue="unknown" editable="true" id="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" label="Method name (regular expression)" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" value="get(Declared)?(Constructor|Field|Method)(s)?"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" value="java.lang.Class"/>
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" value="newInstance"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Constructor"/>
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" value="setAccessible"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Constructor"/>
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" value="newInstance"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Method"/>
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" value="invoke"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Method"/>
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" value="setAccessible"/>
                                </row>
                                <row id="7">
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN1" value="java.lang.reflect.Field"/>
                                    <column refColumnId="CODSTA__BP__ARM__CHECKED_METHODS__COLUMN2" value="set.*"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="DCL00-J: Prevent class initialization cycles" name="DCL00">
            <rule class="com.parasoft.jtest.standards.rules.builtin.GLOBAL.ACD" header="Ensure that files do not contain cyclical dependencies" id="ACD" originalId="GLOBAL.ACD" scope="LINE" severity="4" type="global">
                <messages>
                    <msg index="1" value="The file ''{0}'' contains a cyclical dependency in its imports : {1}"/>
                    <msg index="2" value="in {0} {1}:{2}-{3}:{4}"/>
                </messages>
                <parameters>
                    <param defaultValue="5" id="CERT.DCL00.ACD.MAX_DEPTH" inputType="integer" label="Maximum Depth of Cyclical Dependencies to Detect:" min="1" required="true"/>
                </parameters>
            </rule>
         </category>
         <category description="EXP02-J: Do not use the Object.equals() method to compare two arrays" name="EXP02">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.UEIC" header="Do not use '==' or '!=' to compare objects" id="UEIC" originalId="PB.CUB.UEIC" scope="LINE" severity="2" since="4.5">
                    <messages>
                        <msg index="1" value="&quot;==&quot; is used when comparing Objects. 'equals()' should be used instead."/>
                        <msg index="2" value="&quot;!=&quot; is used when comparing Objects. 'equals()' should be used instead."/>
                        <msg index="3" value="&quot;==&quot; is used when comparing 'String' Objects. 'equals()' should be used instead."/>
                        <msg index="4" value="&quot;!=&quot; is used when comparing 'String' Objects. 'equals()' should be used instead."/>
                        <msg index="5" value="The 'equals()' method of class 'Object' is used when comparing array Objects. 'java.util.Arrays.equals (Object[], Object[])' should be used instead."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="CERT.EXP02.UEIC.STRING_ONLY" name="STRING_ONLY" value="Only 'String' objects "/>
                        <oldparam id="CERT.EXP02.UEIC.CHECK_ARRAYS" name="CHECK_ARRAYS" value="Check for calls to the 'equals()' method of class Object on arrays"/>
                        <oldparam id="CERT.EXP02.UEIC.ALL" name="ALL" value="All objects"/>
                        <oldparam id="CERT.EXP02.UEIC.SCOPE" name="SCOPE" value="Scope of checking:"/>
                        <oldparam id="CERT.EXP02.UEIC.IGNORE_TYPES" name="IGNORE_TYPES" value="Allow &quot;==&quot; and &quot;!=&quot; operators when compared object is type:"/>
                        <oldparam id="CERT.EXP02.UEIC.CHECK_STATICFINAL" name="CHECK_STATICFINAL" value="Check comparisons to &quot;static&quot; &quot;final&quot; objects"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Java gotchas p. 164</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/597.html" name="CWE">597</reference>
                    </references>
                    <parameters>
                        <radioGroup id="CERT.EXP02.UEIC.SCOPE" label="Scope of checking:" prevType="MultipleChoice" showLabel="true">
                            <radioItem defaultValue="checked" label="All objects" value="0"/>
                            <radioItem label="Only 'String' objects " value="1"/>
                        </radioGroup>
                        <param defaultValue="java.lang.Class;java.lang.Thread" id="CERT.EXP02.UEIC.IGNORE_TYPES" inputType="stringList" label="Allow &quot;==&quot; and &quot;!=&quot; operators when compared object is type:" prevType="StringList"/>
                        <param defaultValue="true" id="CERT.EXP02.UEIC.CHECK_ARRAYS" inputType="checkbox" label="Check for calls to the 'equals()' method of class Object on arrays"/>
                        <param defaultValue="false" id="CERT.EXP02.UEIC.CHECK_STATICFINAL" inputType="checkbox" label="Check comparisons to &quot;static&quot; &quot;final&quot; objects"/>
                        <param defaultValue="false" id="CERT.EXP02.UEIC.CHECK_EQUALS_METHOD" inputType="checkbox" label="Check comparisons in equals() methods"/>
                    </parameters>
                </rule>
         </category>
         <category description="EXP01-J: Do not use a null in a case where an object is required" name="EXP01">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.NCMD" header="Ensure that dereferenced variables match variables which were previously checked for &quot;null&quot;" id="NCMD" originalId="PB.RE.NCMD" scope="LINE" severity="3" since="8.3">
                    <messages>
                        <msg index="1" value="The variable dereferenced here (&quot;{0}&quot;) does not match the variable which was just checked for &quot;null&quot; (&quot;{1}&quot;)."/>
                    </messages>
                </rule>
         </category>
         <category description="THI01-J: Do not invode ThreadGroup methods" name="THI01">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.AUTG" header="Do not use variables of the unsafe type 'java.lang.ThreadGroup'" id="AUTG" originalId="TRS.AUTG" scope="LINE" severity="2" since="4.5">
                <messages>
                    <msg index="1" value="Use of the unsafe type ''java.lang.ThreadGroup'' : {0}."/>
                </messages>
            </rule>
         </category>
         <category description="SER01-J: Do not deviate from the proper signatures of serialization methods" name="SER01">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.ROWO" header="Ensure that the 'readObject()' and 'writeObject()' methods have the correct signature." id="ROWO" originalId="SERIAL.ROWO" scope="LINE" severity="1" since="8.2">
                <messages>
                    <msg index="1" value="This ''readObject()'' method does not have the signature &quot;private void readObject(ObjectInputStream) throws IOException, ClassNotFoundException&quot;"/>
                    <msg index="2" value="This ''writeObject()'' method does not have the signature &quot;private void writeObject(ObjectOutputStream) throws IOException&quot;"/>
                </messages>
            </rule>
         </category>
         <category description="MET06-J: Do not invoke overridable methods in clone()" name="MET06">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CLONE" header="Make your 'clone()' method &quot;final&quot; for security." id="CLONE" originalId="SECURITY.WSC.CLONE" scope="LINE" severity="4" since="4.5">
                    <messages>
                        <msg index="1" value="'clone()' method is not &quot;final&quot;."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/491.html" name="CWE">491</reference>
                    </references>
                </rule>
         </category>
         <category description="SER07-J: Do not use the default serialized form for classes with implementation-defined invariants" name="SER07">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.RRSC" header="Define a &quot;readResolve&quot; method for all instances of Serializable types." id="RRSC" originalId="SERIAL.RRSC" scope="LINE" severity="3" since="8.1">
                <messages>
                    <msg index="1" value="The class ''{0}'' implements ''Serializable'' but does not define a &quot;readResolve()&quot; method."/>
                    <msg index="2" value="The &quot;readResolve()&quot; method of the class ''{0}'' may have a return value other than the Serializable instance."/>
                    <msg index="3" value="The &quot;readResolve()&quot; method of the class ''{0}'' does not have the correct signature."/>
                </messages>
                <oldparameters>
                    <oldparam id="CERT.SER07.RRSC.CHECK_PUBLIC" name="CHECK_PUBLIC" value="a &quot;public&quot; constructor"/>
                    <oldparam id="CERT.SER07.RRSC.CHECK_PROTECTED" name="CHECK_PROTECTED" value="a &quot;protected&quot; constructor"/>
                    <oldparam id="CERT.SER07.RRSC.CHECK_PACKAGE_PRIVATE" name="CHECK_PACKAGE_PRIVATE" value="a &quot;package-private&quot; constructor"/>
                    <oldparam id="CERT.SER07.RRSC.CHECK_PRIVATE" name="CHECK_PRIVATE" value="a &quot;private&quot; constructor"/>
                </oldparameters>
                <parameters>
                    <group collapsible="false" id="CERT.SER07.RRSC.group.0" label="Check classes with:">
                        <param defaultValue="false" id="CERT.SER07.RRSC.CHECK_PUBLIC" inputType="checkbox" label="a &quot;public&quot; constructor"/>
                        <param defaultValue="false" id="CERT.SER07.RRSC.CHECK_PROTECTED" inputType="checkbox" label="a &quot;protected&quot; constructor"/>
                        <param defaultValue="false" id="CERT.SER07.RRSC.CHECK_PACKAGE_PRIVATE" inputType="checkbox" label="a &quot;package-private&quot; constructor"/>
                        <param defaultValue="true" id="CERT.SER07.RRSC.CHECK_PRIVATE" inputType="checkbox" label="a &quot;private&quot; constructor"/>
                    </group>
                </parameters>
            </rule>
         </category>
         <category description="STR01-J: Do not assume that a Java char fully represents a Unicode code point" name="STR01">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CUB.NCUCP" header="Do not assume that a Java char fully represents a Unicode code point" id="NCUCP" originalId="PB.CUB.NCUCP" scope="LINE" severity="3" since="2021.1">
                    <messages>
                        <msg index="1" value="The ''{0}'' method does not support all Unicode characters and should be replaced with ''{1}''"/>
                    </messages>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="CERT.STR01.NCUCP.METHODS_TABLE_HEADER" label="Methods to be checked" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" label="Incorrect method (qualified name)" required="true" textSize="large"/>
                                <column columnType="text" editable="true" id="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" label="Correct method (qualified name)" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isDefined(char)"/>
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isDefined(int)"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isDigit(char)"/>
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isDigit(int)"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isIdentifierIgnorable(char)"/>
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isIdentifierIgnorable(int)"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isISOControl(char)"/>
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isISOControl(int)"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isJavaIdentifierPart(char)"/>
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isJavaIdentifierPart(int)"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isJavaIdentifierStart(char)"/>
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isJavaIdentifierStart(int)"/>
                                </row>
                                <row id="7">
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isLetter(char)"/>
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isLetter(int)"/>
                                </row>
                                <row id="8">
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isLetterOrDigit(char)"/>
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isLetterOrDigit(int)"/>
                                </row>
                                <row id="9">
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isLowerCase(char)"/>
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isLowerCase(int)"/>
                                </row>
                                <row id="10">
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isMirrored(char)"/>
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isMirrored(int)"/>
                                </row>
                                <row id="11">
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isSpaceChar(char)"/>
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isSpaceChar(int)"/>
                                </row>
                                <row id="12">
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isTitleCase(char)"/>
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isTitleCase(int)"/>
                                </row>
                                <row id="13">
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isUnicodeIdentifierPart(char)"/>
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isUnicodeIdentifierPart(int)"/>
                                </row>
                                <row id="14">
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isUnicodeIdentifierStart(char)"/>
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isUnicodeIdentifierStart(int)"/>
                                </row>
                                <row id="15">
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isUpperCase(char)"/>
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isUpperCase(int)"/>
                                </row>
                                <row id="16">
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN1" value="java.lang.Character$isWhitespace(char)"/>
                                    <column refColumnId="PB__CUB__NCUCP__METHODS_TABLE_HEADER__COLUMN2" value="java.lang.Character$isWhitespace(int)"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="NUM01-J: Do not perform bitwise and arithmetic operations on the same data" name="NUM01">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.EPC.NCBAV" header="Do not perform bitwise and arithmetic operations on the same data" id="NCBAV" originalId="CODSTA.EPC.NCBAV" scope="LINE" severity="3" since="2021.1">
                    <messages>
                        <msg index="1" value="The variable used in this statement is operated on using both bitwise and arithmetic operations."/>
                    </messages>
                </rule>
         </category>
         <category description="OBJ03-J: Prevent heap pollution" name="OBJ03">
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.AGBPT" header="Avoid conversions from parameterized types to raw types" id="AGBPT" originalId="CODSTA.EPC.AGBPT" scope="LINE" severity="3" since="8.0">
                    <messages>
                        <msg index="1" value="Do not assign an expression with a parameterized type to a variable with a non-parameterized type."/>
                    </messages>
                </rule>
         </category>
         <category description="TSM02-J: Do not use background threads during class initialization" name="TSM02">
            <rule class="com.parasoft.jtest.standards.rules.builtin.TRS.CSTART" header="Do not call the &quot;start&quot; method of threads from inside a constructor." id="CSTART" originalId="TRS.CSTART" scope="LINE" severity="2" since="6.0">
                <messages>
                    <msg index="1" value="&quot;start&quot; method called from inside constructor ''{0}''."/>
                </messages>
                <oldparameters>
                    <oldparam id="CERT.TSM02.CSTART.CHECK_TYPES" name="CHECK_TYPES" value="Check the following constructors:"/>
                    <oldparam id="CERT.TSM02.CSTART.CHECK_THREAD" name="CHECK_THREAD" value="Check only classes extending Thread"/>
                    <oldparam id="CERT.TSM02.CSTART.CHECK_ALL" name="CHECK_ALL" value="Check all classes"/>
                </oldparameters>
                <parameters>
                    <radioGroup id="CERT.TSM02.CSTART.CHECK_TYPES" label="Check the following constructors:" prevType="MultipleChoice" showLabel="true">
                        <radioItem defaultValue="checked" label="Check only classes extending Thread" value="0"/>
                        <radioItem label="Check all classes" value="1"/>
                    </radioGroup>
                </parameters>
            </rule>
         </category>
         <category description="IDS07-J: Sanitize untrusted data passed to Runtime.exec() method" name="IDS07">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PORT.EXEC" header="Do not use &quot;Runtime.exec()&quot;." id="EXEC" originalId="PORT.EXEC" scope="LINE" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="Non-portable 'Runtime.exec()' used"/>
                </messages>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Buffer Overruns and Overflow p. 112</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/511.html" name="CWE">511</reference>
                </references>
            </rule>
         </category>
      </category>
      <category description="OWASP Top 10 Most Critical Web Application Security Risks (2021)" name="OWASP2021">
         <category description="A5-Security Misconfiguration" name="A5">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.JXCORS" header="Restrict cross-origin resource sharing to secure origins" id="JXCORS" originalId="SECURITY.WSC.JXCORS" scope="LINE" severity="4" since="2020.1">
                    <messages>
                        <msg index="1" value="The &quot;Access-Control-Allow-Origin&quot; header is set to allow unrestricted access to cross-origin resources"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.NCNPE" header="Do not catch 'NullPointerException'" id="NCNPE" originalId="EXCEPT.NCNPE" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Avoid catching 'NullPointerException'"/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.DMDS" header="Avoid using the DriverManagerDataSource class in production code" id="DMDS" originalId="SECURITY.WSC.DMDS" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The DriverManagerDataSource class is not a pooled data source and should not be used in production code."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.SIO" header="Avoid calling print methods of 'System.err' or 'System.out'" id="SIO" originalId="SECURITY.ESD.SIO" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Make sure ''{0}'' is not a leftover debug statement."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2021.A5.SIO.METHOD_SKIP_LIST" name="METHOD_SKIP_LIST" value="Methods to be excluded from this rule"/>
                    </oldparameters>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010">A3-Broken Authentication and Session Management</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="OWASP2021.A5.SIO.SCANNED_CLASS_TABLE" label="Include classes" reader="SATable">
                            <columns>
                                <column columnType="checkbox" defaultValue="true" editable="true" id="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN1" label="Base class/ interface" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN2" label="Class/interface name (regular expression)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN1" value="true"/>
                                    <column refColumnId="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN2" value=".*"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <param defaultValue="main;show;verbose" id="OWASP2021.A5.SIO.METHOD_SKIP_LIST" inputType="stringList" label="Exclude methods" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.NTERR" header="Do not throw exception types which are too general or are unchecked exceptions." id="NTERR" originalId="EXCEPT.NTERR" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Avoid throwing ''{0}''."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2021.A5.NTERR.CHECKED_EXCEPTS" name="CHECKED_EXCEPTS" value="Exception types which should not be thrown (fully qualified names)"/>
                </oldparameters>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/397.html" name="CWE">397</reference>
                </references>
                <parameters>
                    <param defaultValue="java.lang.Exception;java.lang.Error;java.lang.Throwable;java.lang.RuntimeException" id="OWASP2021.A5.NTERR.CHECKED_EXCEPTS" inputType="stringList" label="Exception types which should not be thrown (fully qualified names)" prevType="StringList"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SPRING.DCSRFJAVA" header="Do not disable CSRF protection" id="DCSRFJAVA" originalId="SPRING.DCSRFJAVA" scope="LINE" severity="2" since="10.4.3">
                <messages>
                    <msg index="1" value="CSRF protection is disabled."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.EWSSEC" header="Avoid debug information from Spring Security framework to logs" id="EWSSEC" originalId="SECURITY.WSC.EWSSEC" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="Debug features is activated in @EnableWebSecurity annotation"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.DXXE" header="Disable XML external entity injection." id="DXXE" originalId="SECURITY.IBA.DXXE" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="XXE injection has not been disabled."/>
                        <msg index="2" value="XXE injection has not been disabled. Ensure your parser version allows you to configure the required options."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.NCE" header="Do not catch exception types which are too general or are unchecked exceptions." id="NCE" originalId="CODSTA.EPC.NCE" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="&quot;catch&quot; statement directly catches the general exception type ''{0}''."/>
                        <msg index="2" value="&quot;catch&quot; statement directly catches the unchecked exception type ''{0}''."/>
                        <msg index="3" value="&quot;catch&quot; statement catches general parent exception type: ''{0}''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2021.A5.NCE.GENERAL" name="GENERAL" value="Check for general exception types."/>
                        <oldparam id="OWASP2021.A5.NCE.UNCHECKED" name="UNCHECKED" value="Check for unchecked exception types."/>
                        <oldparam id="OWASP2021.A5.NCE.NUM_CHILDREN" name="NUM_CHILDREN" value="Check for parent exceptions caught where number of child exceptions thrown is less than"/>
                        <oldparam id="OWASP2021.A5.NCE.IGNORE_EXCEPTIONS" name="IGNORE_EXCEPTIONS" value="Ignore exceptions with names matching the following regular expression(s):"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/396.html" name="CWE">396</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="OWASP2021.A5.NCE.GENERAL" inputType="checkbox" label="Check for general exception types."/>
                        <param defaultValue="false" id="OWASP2021.A5.NCE.UNCHECKED" inputType="checkbox" label="Check for unchecked exception types."/>
                        <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="OWASP2021.A5.NCE.NUM_CHILDREN" label="Check for parent exceptions caught where number of child exceptions thrown is less than" prevType="InputValueWithCheckBox" reader="SATable">
                            <columns>
                                <column columnType="checkbox" editable="true" id="CODSTA__EPC__NCE__NUM_CHILDREN__COLUMN1" label="" required="true"/>
                                <column columnType="text" editable="true" id="CODSTA__EPC__NCE__NUM_CHILDREN__COLUMN2" label="" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="CODSTA__EPC__NCE__NUM_CHILDREN__COLUMN1" value="true"/>
                                    <column refColumnId="CODSTA__EPC__NCE__NUM_CHILDREN__COLUMN2" value="3"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <param defaultValue="^ignore$" id="OWASP2021.A5.NCE.IGNORE_EXCEPTIONS" inputType="stringList" label="Ignore exceptions with names matching the following regular expression(s):" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AECB" header="Avoid &quot;try&quot;, &quot;catch&quot; and &quot;finally&quot; blocks with empty bodies" id="AECB" originalId="PB.TYPO.AECB" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="&quot;try&quot; block has an empty body."/>
                        <msg index="2" value="&quot;catch&quot; block has an empty body."/>
                        <msg index="3" value="&quot;finally&quot; block has an empty body."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2021.A5.AECB.CHECK_FINALLY" name="CHECK_FINALLY" value="Check &quot;finally&quot; block."/>
                        <oldparam id="OWASP2021.A5.AECB.CHECK_TRY" name="CHECK_TRY" value="Check &quot;try&quot; block."/>
                        <oldparam id="OWASP2021.A5.AECB.CHECK_CATCH" name="CHECK_CATCH" value="Check &quot;catch&quot; block."/>
                        <oldparam id="OWASP2021.A5.AECB.CHECK_COMMENTS" name="CHECK_COMMENTS" value="Disallow blocks with comments as content."/>
                        <oldparam id="OWASP2021.A5.AECB.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="Regular expression of exception variable name. (enclosing catch block would be ignored if matches)"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/391.html" name="CWE">391</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="OWASP2021.A5.AECB.CHECK_TRY" inputType="checkbox" label="Check &quot;try&quot; block."/>
                        <param defaultValue="true" id="OWASP2021.A5.AECB.CHECK_CATCH" inputType="checkbox" label="Check &quot;catch&quot; block."/>
                        <param defaultValue="true" id="OWASP2021.A5.AECB.CHECK_FINALLY" inputType="checkbox" label="Check &quot;finally&quot; block."/>
                        <param defaultValue="false" id="OWASP2021.A5.AECB.CHECK_COMMENTS" inputType="checkbox" label="Disallow blocks with comments as content."/>
                        <param defaultValue="%5Eignore%24;" id="OWASP2021.A5.AECB.REGULAR_EXPRESSION" inputType="stringList" label="Regular expression of exception variable name. (enclosing catch block would be ignored if matches)" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ACPST" header="Do not call the 'printStackTrace()' method of &quot;Throwable&quot; objects." id="ACPST" originalId="SECURITY.WSC.ACPST" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="The 'printStackTrace()' method of a &quot;Throwable&quot; object is called here."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2021.A5.ACPST.IGNORE_OVERRIDDEN" name="IGNORE_OVERRIDDEN" value="Ignore overridden versions of the 'printStackTrace()' methods"/>
                        <oldparam id="OWASP2021.A5.ACPST.IGNORE_OVERLOADED" name="IGNORE_OVERLOADED" value="Ignore overloaded versions of the 'printStackTrace()' method"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/209.html" name="CWE">209</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="OWASP2021.A5.ACPST.IGNORE_OVERRIDDEN" inputType="checkbox" label="Ignore overridden methods"/>
                        <param defaultValue="true" id="OWASP2021.A5.ACPST.IGNORE_OVERLOADED" inputType="checkbox" label="Ignore overloaded methods"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.NTX" header="Avoid declaring methods to throw general or unchecked Exception types" id="NTX" originalId="CODSTA.BP.NTX" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Throwing explicit ''{0}'' object in ''{1}()''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2021.A5.NTX.CHECKED_EXCEPTS" name="CHECKED_EXCEPTS" value="Exception types which should not be declared to be thrown (fully qualified names)"/>
                        <oldparam id="OWASP2021.A5.NTX.SKIP_JUNIT" name="SKIP_JUNIT" value="Skip JUnit 'TestCase' classes."/>
                        <oldparam id="OWASP2021.A5.NTX.SUBCLASSES" name="SUBCLASSES" value="Check for exceptions which are subclasses of 'Error' and 'RuntimeException'."/>
                        <oldparam id="OWASP2021.A5.NTX.IGNORE_OVERRIDING" name="IGNORE_OVERRIDING" value="Ignore overriding methods."/>
                        <oldparam id="OWASP2021.A5.NTX.IGNORE_PROPAGATED" name="IGNORE_PROPAGATED" value="Ignore methods which propagate exception types of called methods."/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/397.html" name="CWE">397</reference>
                    </references>
                    <parameters>
                        <param defaultValue="java.lang.Exception;java.lang.Error;java.lang.Throwable;java.lang.RuntimeException" id="OWASP2021.A5.NTX.CHECKED_EXCEPTS" inputType="stringList" label="Exception types which should not be declared to be thrown (fully qualified names)" prevType="StringList"/>
                        <param defaultValue="false" id="OWASP2021.A5.NTX.SUBCLASSES" inputType="checkbox" label="Check for exceptions which are subclasses of 'Error' and 'RuntimeException'."/>
                        <param defaultValue="false" id="OWASP2021.A5.NTX.SKIP_JUNIT" inputType="checkbox" label="Skip JUnit classes."/>
                        <param defaultValue="true" id="OWASP2021.A5.NTX.IGNORE_OVERRIDING" inputType="checkbox" label="Ignore overriding methods."/>
                        <param defaultValue="true" id="OWASP2021.A5.NTX.IGNORE_PROPAGATED" inputType="checkbox" label="Ignore methods which propagate exception types of called methods."/>
                    </parameters>
                </rule>
         </category>
         <category description="A2-Cryptographic Failures" name="A2">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MCMDU" header="MessageDigest objects must process the data with the 'update' method" id="MCMDU" originalId="SECURITY.WSC.MCMDU" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The 'update' method is not called on the ''{0}'' variable after the message digest object is obtained"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SIKG" header="Initialize KeyGenerator instances " id="SIKG" originalId="SECURITY.WSC.SIKG" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The ''{0}'' object of the KeyGenerator class is created but not initialized"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.VSI" header="Properly validate server identity" id="VSI" originalId="SECURITY.WSC.VSI" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="SMTP SSL does not check server identity."/>
                        <msg index="2" value="SMTP SSL does not check server identity. Ensure the library version allows you to configure the required options."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.PEO" header="Do not pass exception messages into output in order to prevent the application from leaking sensitive information" id="PEO" originalId="SECURITY.ESD.PEO" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Print method ''{0}()'' is not allowed in a &quot;catch&quot; block."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2021.A2.PEO.PRINT_METHOD_EXPRESSION" name="PRINT_METHOD_EXPRESSION" value="Print methods (Specify names in regular expressions)"/>
                        <oldparam id="OWASP2021.A2.PEO.EXCEPTIONS" name="EXCEPTIONS" value="Exceptions (Specify types and method names in regular expressions)"/>
                        <oldparam id="OWASP2021.A2.PEO.TYPE" name="TYPE" value="Type"/>
                        <oldparam id="OWASP2021.A2.PEO.METHOD" name="METHOD" value="Method"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/209.html" name="CWE">209</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/497.html" name="CWE">497</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*print.*;.*Print.*" id="OWASP2021.A2.PEO.PRINT_METHOD_EXPRESSION" inputType="stringList" label="Print methods (Specify names in regular expressions)" prevType="StringList"/>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2021.A2.PEO.EXCEPTIONS" label="Exceptions (Specify types and method names in regular expressions)" reader="SATable">
                            <columns>
                                <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" label="Type" required="true"/>
                                <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" label="Method" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" value="^java\.util\.logging\.Logger$"/>
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" value="^.*$"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" value="^org\.apache\.log4j\.Logger$"/>
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" value="^.*$"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HCCK" header="Avoid using hard-coded cryptographic keys" id="HCCK" originalId="SECURITY.WSC.HCCK" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Hard-coded cryptographic key here."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2021.A2.HCCK.MIN_LENGTH" name="MIN_LENGTH" value="Check keys whose length is greater than "/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/321.html" name="CWE">321</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/506.html" name="CWE">506</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/759.html" name="CWE">759</reference>
                    </references>
                    <parameters>
                        <param defaultValue="9" id="OWASP2021.A2.HCCK.MIN_LENGTH" inputType="integer" label="Check keys whose length is greater than " min="9"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.IVR" header="Avoid non-random &quot;byte[]&quot; when using IvParameterSpec." id="IVR" originalId="SECURITY.WSC.IVR" scope="LINE" severity="2" since="8.4">
                    <messages>
                        <msg index="1" value="IvParameterSpec instantiated with non-random value ''{0}''."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/329.html" name="CWE">329</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AISSAJAVA" header="Avoid using insecure cryptographic algorithms for data encryption with Spring" id="AISSAJAVA" originalId="SECURITY.WSC.AISSAJAVA" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The cryptographic class is insecure."/>
                        <msg index="2" value="The cryptographic algorithm used in the constructor of MessageDigestPasswordEncoder is insecure."/>
                    </messages>
                    <parameters>
                        <!-- <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_ENCODERS" inputType="stringList" defaultValue="org.springframework.security.crypto.password.LdapShaPasswordEncoder;org.springframework.security.crypto.password.Md5PasswordEncoder;org.springframework.security.crypto.password.Md4PasswordEncoder;org.springframework.security.crypto.password.NoOpPasswordEncoder;org.springframework.security.authentication.encoding.LdapShaPasswordEncoder;org.springframework.security.authentication.encoding.Md5PasswordEncoder;org.springframework.security.authentication.encoding.Md4PasswordEncoder" label="Insecure classes that should not be used for encryption" prevType="StringList"/>
                        <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_NAMES" inputType="stringList" defaultValue="MD2;MD5;SHA-1" label="Insecure algorithms in the MessageDigestPasswordEncoder class" prevType="StringList"/>-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="OWASP2021.A2.AISSAJAVA.BANNED_ALGO_ENCODERS" label="Insecure classes that should not be used for encryption" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" label="Fully Qualified Name of Insecure Class" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md5PasswordEncoder"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md4PasswordEncoder"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.NoOpPasswordEncoder"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>
                                </row>
                                <row id="7">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md4PasswordEncoder"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="OWASP2021.A2.AISSAJAVA.BANNED_ALGO_NAMES" label="Insecure algorithms in the MessageDigestPasswordEncoder class" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" label="Name of Insecure Algorithm" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD2"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD5"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="SHA-1"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PORT.HCNA" header="Do not hard-code IP addresses and port numbers." id="HCNA" originalId="PORT.HCNA" scope="LINE" severity="3" since="9.0">
                <messages>
                    <msg index="1" value="Hard-coded IP address ''{0}''."/>
                    <msg index="2" value="Hard-coded port number ''{0}''."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2021.A2.HCNA.IP" name="IP" value="Do not hard-code IP addresses"/>
                    <oldparam id="OWASP2021.A2.HCNA.PORT" name="PORT" value="Do not hard-code port numbers"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="true" id="OWASP2021.A2.HCNA.IP" inputType="checkbox" label="Do not hard-code IP addresses"/>
                    <param defaultValue="true" id="OWASP2021.A2.HCNA.PORT" inputType="checkbox" label="Do not hard-code port numbers"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ICA" header="Avoid using insecure algorithms for cryptography." id="ICA" originalId="SECURITY.WSC.ICA" scope="LINE" severity="1" since="8.3">
                    <messages>
                        <msg index="1" value="The &quot;{0}&quot; algorithm is not an acceptable cryptography algorithm for the &quot;{1}&quot; class."/>
                        <msg index="2" value="The cryptography algorithm is used without padding."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2021.A2.ICA.SUGGESTED_ALGS" name="SUGGESTED_ALGS" value="Safe Cryptography Algorithms"/>
                        <oldparam id="OWASP2021.A2.ICA.TYPE_NAME" name="TYPE_NAME" value="Fully Qualified Class Name"/>
                        <oldparam id="OWASP2021.A2.ICA.ALGORITHM_NAME" name="ALGORITHM_NAME" value="Algorithm Names (in regular expressions)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/328.html" name="CWE">328</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/780.html" name="CWE">780</reference>
                    </references>
                    <parameters>
                        <!--param id="SECURITY.WSC.ICA.SUGGESTED_ALGS" inputType="bigtext" defaultValue="java.security.KeyPairGenerator&lt;#&gt;RSA;java.security.MessageDigest&lt;#&gt;SHA-256#SHA-384#SHA-512;javax.crypto.Cipher&lt;#&gt;3DES#AES#ARCFOUR/RC4#Blowfish#ECIES#RC4#RC5#RSA(.*)OAEPWith(.*)And(.*)Padding;javax.crypto.KeyGenerator&lt;#&gt;AES#ARCFOUR/RC4#Blowfish#HmacSHA256#HmacSHA384#HmacSHA512#RC2" label="Safe Cryptography Algorithms" prevType="DuoList"/-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="OWASP2021.A2.ICA.SUGGESTED_ALGS" label="Secure Cryptographic Algorithms" prevType="DuoList" reader="SADuoList">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" label="Fully Qualified Class Name" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.KeyPairGenerator"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.MessageDigest"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.KeyGenerator"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.Cipher"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.net.ssl.SSLContext"/>
                                </row>
                            </predefinedRows>
                            <childTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="OWASP2021.A2.ICA.SUGGESTED_ALGS.CHILDTABLE1" label="">
                                <columns>
                                    <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" label="Name of Secure Algorithm (in regular expressions)" required="true"/>
                                </columns>
                                <predefinedRows refParentRowId="1">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="2">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-256"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-384"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-512"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="3">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA256"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA384"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA512"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC2"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESede"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="4">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="3DES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES/(.*)/PKCS5Padding"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ECIES"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC4"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC5"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA(.*)OAEPWith(.*)And(.*)Padding"/>
                                    </row>
                                    <row id="9">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESEDE/(.*)/PKCS5Padding"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="5">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="TLSv1.2"/>
                                    </row>
                                </predefinedRows>
                            </childTable>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SRD" header="Use 'java.security.SecureRandom' instead of 'java.util.Random' or 'Math.random()'." id="SRD" originalId="SECURITY.WSC.SRD" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Avoid using the insecure ''{0}'' as a random number generator"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/330.html" name="CWE">330</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/338.html" name="CWE">338</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE">676</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.USC" header="Use the SSL-enabled version of classes when possible." id="USC" originalId="SECURITY.WSC.USC" scope="LINE" severity="3" since="7.5">
                    <messages>
                        <msg index="1" value="Consider using the SSL-enabled type ''SSLServerSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="2" value="Consider using the SSL-enabled type ''SSLSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="3" value="Consider using the SSL-enabled type ''HttpsURLConnection'' for the {0} ''{1}''."/>
                        <msg index="4" value="Consider using the SSL-enabled type ''SslRMIClientSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="5" value="Consider using the SSL-enabled type ''SslRMIServerSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="6" value="Consider using the SSL-enabled type ''SSLSocket'' for the {0} ''{1}''."/>
                        <msg index="7" value="Consider using the SSL-enabled type ''SSLServerSocket'' for the {0} ''{1}''."/>
                        <msg index="8" value="Consider using the SSL-enabled type ''SSLPermission'' for the {0} ''{1}''."/>
                    </messages>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010">A9-Insufficient Transport Layer Protection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/494.html" name="CWE">494</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HV" header="Ensure the HostnameVerifier.verify() method validates the certificate" id="HV" originalId="SECURITY.WSC.HV" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The certificate is not validated, because the 'verify' method always returns 'true'"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AUNC" header="Avoid using the javax.crypto.NullCipher class in non-test classes." id="AUNC" originalId="SECURITY.WSC.AUNC" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The NullCipher class that does not encrypt the plaintext is used in a non-test class."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MDSALT" header="Use hash functions with a salt" id="MDSALT" originalId="SECURITY.WSC.MDSALT" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="A salt is not added to the digest"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.CONSEN" header="Do not log confidential or sensitive information" id="CONSEN" originalId="SECURITY.ESD.CONSEN" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="''{0}'' should not be used by a logger, it can expose confidential info."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2021.A2.CONSEN.SUSPICIOUS_WORDS" name="SUSPICIOUS_WORDS" value="Regular expressions representing sensive data:"/>
                        <oldparam id="OWASP2021.A2.CONSEN.LOG_METHOD_EXPRESSIONS" name="LOG_METHOD_EXPRESSIONS" value="Logging method name in regular expression"/>
                        <oldparam id="OWASP2021.A2.CONSEN.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/533.html" name="CWE">533</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/534.html" name="CWE">534</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*ssn.*@delim@.*pass.*" id="OWASP2021.A2.CONSEN.SUSPICIOUS_WORDS" inputType="stringList" label="Regular expressions representing sensive data:" prevType="StringList"/>
                        <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="OWASP2021.A2.CONSEN.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                        <param defaultValue=".*log.*" id="OWASP2021.A2.CONSEN.LOG_METHOD_EXPRESSIONS" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ENPP" header="Ensure arguments passed to certain methods come from predefined methods list." id="ENPP" originalId="SECURITY.WSC.ENPP" scope="LINE" severity="2" since="9.2">
                    <messages>
                        <msg index="1" value="Argument number {0} passed to method ''{1}'' is not an allowed method call."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2021.A2.ENPP.PAIRS_TABLE_HEADER" name="PAIRS_TABLE_HEADER" value="Methods and arguments configuration"/>
                        <oldparam id="OWASP2021.A2.ENPP.PAIRS_TABLE_1ST" name="PAIRS_TABLE_1ST" value="Method to be checked (&lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,...)"/>
                        <oldparam id="OWASP2021.A2.ENPP.PAIRS_TABLE_INDEX" name="PAIRS_TABLE_INDEX" value="Argument Index to Check (''0''-based)"/>
                        <oldparam id="OWASP2021.A2.ENPP.PAIRS_TABLE_2ND" name="PAIRS_TABLE_2ND" value="Allowed method name (in Regular Expressions)"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/329.html" name="CWE">329</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/336.html" name="CWE">336</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/337.html" name="CWE">337</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE">676</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2021.A2.ENPP.PAIRS_TABLE_HEADER" label="Methods and arguments configuration" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" label="Method to be checked (&lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,...)" required="true"/>
                                <column columnType="text" defaultValue="0" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" label="Argument Index to Check (''0''-based)" required="true" textSize="small"/>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" label="Allowed method name (in Regular Expressions)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#SecureRandom(byte[])"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#setSeed(byte[])"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#setSeed(long)"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="javax.crypto.spec.IvParameterSpec#IvParameterSpec(byte[])"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidIV"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="javax.crypto.spec.IvParameterSpec#IvParameterSpec(byte[],int,int)"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidIV"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="A8-Software and Data Integrity Failures" name="A8">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.RWAF" header="Ensure that all fields are assigned by the 'readObject()' method and written out by the 'writeObject()' method" id="RWAF" originalId="SERIAL.RWAF" scope="LINE" severity="3" since="8.1">
                <messages>
                    <msg index="1" value="The ''{0}'' field is not read by the ''readObject()'' method."/>
                    <msg index="2" value="The ''{0}'' field is not written out by the ''writeObject()'' method."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2021.A8.RWAF.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="5" id="OWASP2021.A8.RWAF.MAX_LEVEL" inputType="integer" label="Maximum level of checking allowed" min="0"/>
                    <param defaultValue="true" id="OWASP2021.A8.RWAF.CHECK_WRITE" inputType="checkbox" label="Check 'writeObject' methods" min="0"/>
                    <param defaultValue="true" id="OWASP2021.A8.RWAF.CHECK_READ" inputType="checkbox" label="Check 'readObject' methods" min="0"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.RRSC" header="Define a &quot;readResolve&quot; method for all instances of Serializable types." id="RRSC" originalId="SERIAL.RRSC" scope="LINE" severity="3" since="8.1">
                <messages>
                    <msg index="1" value="The class ''{0}'' implements ''Serializable'' but does not define a &quot;readResolve()&quot; method."/>
                    <msg index="2" value="The &quot;readResolve()&quot; method of the class ''{0}'' may have a return value other than the Serializable instance."/>
                    <msg index="3" value="The &quot;readResolve()&quot; method of the class ''{0}'' does not have the correct signature."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2021.A8.RRSC.CHECK_PUBLIC" name="CHECK_PUBLIC" value="a &quot;public&quot; constructor"/>
                    <oldparam id="OWASP2021.A8.RRSC.CHECK_PROTECTED" name="CHECK_PROTECTED" value="a &quot;protected&quot; constructor"/>
                    <oldparam id="OWASP2021.A8.RRSC.CHECK_PACKAGE_PRIVATE" name="CHECK_PACKAGE_PRIVATE" value="a &quot;package-private&quot; constructor"/>
                    <oldparam id="OWASP2021.A8.RRSC.CHECK_PRIVATE" name="CHECK_PRIVATE" value="a &quot;private&quot; constructor"/>
                </oldparameters>
                <parameters>
                    <group collapsible="false" id="OWASP2021.A8.RRSC.group.0" label="Check classes with:">
                        <param defaultValue="false" id="OWASP2021.A8.RRSC.CHECK_PUBLIC" inputType="checkbox" label="a &quot;public&quot; constructor"/>
                        <param defaultValue="false" id="OWASP2021.A8.RRSC.CHECK_PROTECTED" inputType="checkbox" label="a &quot;protected&quot; constructor"/>
                        <param defaultValue="false" id="OWASP2021.A8.RRSC.CHECK_PACKAGE_PRIVATE" inputType="checkbox" label="a &quot;package-private&quot; constructor"/>
                        <param defaultValue="true" id="OWASP2021.A8.RRSC.CHECK_PRIVATE" inputType="checkbox" label="a &quot;private&quot; constructor"/>
                    </group>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.SC" header="Disable LDAP deserialization" id="SC" originalId="SECURITY.IBA.SC" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The SearchControls object allows deserialization"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PBRTE" header="Always specify absolute paths to execute commands" id="PBRTE" originalId="SECURITY.WSC.PBRTE" scope="LINE" severity="1" since="10.4.3">
                    <messages>
                        <msg index="1" value="The specified command is not an absolute path with separators"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.DUID" header="Create a 'serialVersionUID' for all 'Serializable' classes." id="DUID" originalId="SERIAL.DUID" scope="CLASS" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="No 'serialVersionUID' declared in class ''{0}''."/>
                    <msg index="2" value="'serialVersionUID' must be declared &quot;static final long&quot;, otherwise it will not be used."/>
                    <msg index="3" value="'serialVersionUID' should be declared &quot;private&quot;."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2021.A8.DUID.CHECK_PRIVATE" name="CHECK_PRIVATE" value="Check if serialVersionUID is &quot;private&quot;"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="false" id="OWASP2021.A8.DUID.CHECK_PRIVATE" inputType="checkbox" label="Check if serialVersionUID is &quot;private&quot;"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.VOBD" header="Validate objects before deserialization" id="VOBD" originalId="SERIAL.VOBD" scope="LINE" severity="3" since="10.4.3">
                <messages>
                    <msg index="1" value="The object read from the ObjectInputStream is not validated before deserialization"/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.SCBNP" header="Always declare writeObject and readObject methods for Serializable subclasses of non-Serializable parents" id="SCBNP" originalId="SERIAL.SCBNP" scope="LINE" severity="3" since="9.0">
                <messages>
                    <msg index="1" value="Class has a non-serializable parent but implements Serializable without specifying readObject or WriteObject methods."/>
                    <msg index="2" value="Class has a non-serializable parent but implements Serializable without specifying readObject method."/>
                    <msg index="3" value="Class has a non-serializable parent but implements Serializable without specifying WriteObject method."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.SROS" header="Do not declare the 'readObject()' method as &quot;synchronized&quot;" id="SROS" originalId="SERIAL.SROS" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Method readObject()  is synchronized."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.OROM" header="Implement 'readObject()' and 'writeObject()' for all 'Serializable' classes." id="OROM" originalId="SECURITY.EAB.OROM" scope="CLASS" severity="5" since="4.5">
                    <messages>
                        <msg index="1" value="Serializable class ''{0}'' does not implement 'readObject()'."/>
                        <msg index="2" value="Serializable class ''{0}'' implements 'readObject()', but this method is not 'final'."/>
                        <msg index="3" value="Serializable class ''{0}'' does not implement 'writeObject()'."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2021.A8.OROM.MUST_BE_FINAL" name="MUST_BE_FINAL" value="Make sure the 'readObject()' method is 'final'."/>
                        <oldparam id="OWASP2021.A8.OROM.CHECK_FOR_READ" name="CHECK_FOR_READ" value="Check that the 'readObject()' method is implemented in all serializable classes."/>
                        <oldparam id="OWASP2021.A8.OROM.CHECK_FOR_WRITE" name="CHECK_FOR_WRITE" value="Check that the 'writeObject()' method is implemented in all serializable classes."/>
                        <oldparam id="OWASP2021.A8.OROM.IGNORE_TYPES" name="IGNORE_TYPES" value="Ignore types extending or implementing the following types (Specify fully qualified names):"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="OWASP2021.A8.OROM.CHECK_FOR_READ" inputType="checkbox" label="Check that the 'readObject()' method is implemented in all serializable classes.">
                            <param defaultValue="false" id="OWASP2021.A8.OROM.MUST_BE_FINAL" inputType="checkbox" label="Make sure the 'readObject()' method is 'final'."/>
                        </param>
                        <param defaultValue="false" id="OWASP2021.A8.OROM.CHECK_FOR_WRITE" inputType="checkbox" label="Check that the 'writeObject()' method is implemented in all serializable classes."/>
                        <param defaultValue="" id="OWASP2021.A8.OROM.IGNORE_TYPES" inputType="stringList" label="Ignore types extending or implementing the following types (Specify fully qualified names):" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.MASP" header="Assign 'protected' accessibility to 'readResolve()' and 'writeReplace()' methods in serializable classes" id="MASP" originalId="PB.API.MASP" scope="METHOD" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Method is not &quot;protected&quot;: ''{0}''"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.AUXD" header="Avoid parsing untrusted data with XMLDecoder" id="AUXD" originalId="SECURITY.IBA.AUXD" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The XMLDecoder class is used."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.VJFS" header="Always verify JarFile signatures" id="VJFS" originalId="SECURITY.WSC.VJFS" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Consider using a JarFile constructor with verification enabled."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/347.html" name="CWE">347</reference>
                    </references>
                </rule>
         </category>
         <category description="A7-Identification and Authentication Failures" name="A7">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HTTPRHA" header="Do not rely on IP addresses obtained from HTTP request headers for authentication" id="HTTPRHA" originalId="SECURITY.WSC.HTTPRHA" scope="LINE" severity="3" since="2020.1">
                    <messages>
                        <msg index="1" value="The IP address retrieved from the HTTP request header is used for authentication"/>
                        <msg index="2" value="The IP address retrieved from the header using the 'getRemoteAddr()' method is used for authentication"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HGRSI" header="Avoid using the 'getRequestedSessionId' method from the 'HttpServletRequest' class" id="HGRSI" originalId="SECURITY.WSC.HGRSI" scope="LINE" severity="4" since="10.4.2">
                    <messages>
                        <msg index="1" value="The 'getRequestedSessionId' method may return untrusted data"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ISL" header="Always call 'HttpSession.invalidate()' before 'LoginContext.login()'" id="ISL" originalId="SECURITY.WSC.ISL" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Login without session invalidation."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Session Management p. 78</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/384.html" name="CWE">384</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.RUIM" header="Ensure proper session expiration" id="RUIM" originalId="SECURITY.IBA.RUIM" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The session expiration time used in this metod call is obtained form a servlet request"/>
                        <msg index="2" value="The negative timeout value used in this metod call prevents session expiration"/>
                    </messages>
                </rule>
         </category>
         <category description="A4-Insecure Design" name="A4">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.SNSO" header="Do not store non-serializable objects as HttpSession attributes" id="SNSO" originalId="SERIAL.SNSO" scope="LINE" severity="1" since="8.4">
                <messages>
                    <msg index="1" value="Argument ''{0}'' to method &quot;setAttribute&quot; is non-serializable."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2021.A4.SNSO.IGNORE_NULL" name="IGNORE_NULL" value="Ignore &quot;null&quot; values"/>
                    <oldparam id="OWASP2021.A4.SNSO.CHECK_ABSTRACT" name="CHECK_ABSTRACT" value="Check abstract classes"/>
                    <oldparam id="OWASP2021.A4.SNSO.CHECK_INTERFACE" name="CHECK_INTERFACE" value="Check interfaces"/>
                    <oldparam id="OWASP2021.A4.SNSO.CHECK_COLLECTION" name="CHECK_COLLECTION" value="Check Collections"/>
                    <oldparam id="OWASP2021.A4.SNSO.CHECK_MAP" name="CHECK_MAP" value="Check Maps"/>
                </oldparameters>
                <references>
                    <reference href="http://cwe.mitre.org/data/definitions/579.html" name="CWE">579</reference>
                </references>
                <parameters>
                    <param defaultValue="true" id="OWASP2021.A4.SNSO.IGNORE_NULL" inputType="checkbox" label="Ignore &quot;null&quot; values"/>
                    <param defaultValue="true" id="OWASP2021.A4.SNSO.CHECK_ABSTRACT" inputType="checkbox" label="Check abstract classes"/>
                    <param defaultValue="true" id="OWASP2021.A4.SNSO.CHECK_INTERFACE" inputType="checkbox" label="Check interfaces"/>
                    <param defaultValue="false" id="OWASP2021.A4.SNSO.CHECK_COLLECTION" inputType="checkbox" label="Check Collections"/>
                    <param defaultValue="false" id="OWASP2021.A4.SNSO.CHECK_MAP" inputType="checkbox" label="Check Maps"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ONS" header="Ensure method arguments are serializable" id="ONS" originalId="PB.API.ONS" scope="LINE" severity="1" since="8.2">
                    <messages>
                        <msg index="1" value="This object of type ''{0}'' may not be serializable."/>
                        <msg index="2" value="This object of type ''{0}'' may not be completely serializable."/>
                    </messages>
                    <parameters>
                        <param defaultValue="false" id="OWASP2021.A4.ONS.CHECK_INTERFACES" inputType="checkbox" label="Check implementations of interface method arguments (slow)"/>
                        <param defaultValue="true" id="OWASP2021.A4.ONS.IGNORE_PARAM_COLLECTION" inputType="checkbox" label="Ignore Collections or Maps with Serializable type arguments"/>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2021.A4.ONS.SERIAL_LIST" label="List of methods to be checked: " reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="PB__API__ONS__SERIAL_LIST__COLUMN1" label="Type" required="true"/>
                                <column columnType="text" editable="true" id="PB__API__ONS__SERIAL_LIST__COLUMN2" label="Method" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN1" value="javax.servlet.http.HttpSession"/>
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN2" value="setAttribute"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN1" value="java.io.ObjectOutputStream"/>
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN2" value="writeObject"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN1" value="java.io.ObjectOutputStream"/>
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN2" value="writeObjectOverride"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN1" value="java.io.ObjectOutputStream"/>
                                    <column refColumnId="PB__API__ONS__SERIAL_LIST__COLUMN2" value="writeUnshared"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <param defaultValue="^java\.util\.Collection$;^java\.util\.Map$;^java\.lang\.Object$" id="OWASP2021.A4.ONS.IGNORE_TYPE_LIST" inputType="stringList" label="Ignore method arguments of the following types (specify as regular expression):"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.UOSC" header="Use the ''getSecure()'' and ''setSecure()'' methods to enforce the use of secure cookies." id="UOSC" originalId="SECURITY.WSC.UOSC" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="The ''Cookie'' variable ''{0}'' may be used without making sure that it is a secure cookie."/>
                        <msg index="2" value="Make sure that the appropriate version of library is used."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Session Management p. 78</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010">A3-Broken Authentication and Session Management</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A5" name="OWASP-2010">A5-Cross Site Request Forgery (CSRF)</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/614.html" name="CWE">614</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/352.html" name="CWE">352</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE">807</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PBFA" header="Ensure sufficient protection against multiple failed authentication attempts" id="PBFA" originalId="SECURITY.WSC.PBFA" scope="LINE" severity="5" type="global">
                    <messages>
                        <msg index="1" value="This class uses the object of the AuthenticationFailureBadCredentialsEvent class. Ensure that sufficient protection against multiple failed authentication attempts is implemented."/>
                        <msg index="2" value="Ensure that the implementation of the 'onAuthenticationFailure()' method provides sufficient protection against multiple failed authentication attempts."/>
                        <msg index="3" value="Ensure that the implementation of the 'configure()' method provides sufficient protection against multiple failed authentication attempts."/>
                        <msg index="4" value="Ensure that the application code includes sufficient protection against multiple failed authentication attempts."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.PLC" header="Avoid storing sensitive data in plaintext in a cookie" id="PLC" originalId="SECURITY.ESD.PLC" scope="LINE" severity="1" since="9.2">
                    <messages>
                        <msg index="1" value="Do not store important to safety data in cookie."/>
                        <msg index="2" value="Do not store sensitive data in plaintext in cookie."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2021.A4.PLC.TABLE_HEADER" name="TABLE_HEADER" value="List of RegExp to check key in cookie"/>
                        <oldparam id="OWASP2021.A4.PLC.CHECK_VALUES_HEADER" name="CHECK_VALUES_HEADER" value="Check values"/>
                        <oldparam id="OWASP2021.A4.PLC.NAME_HEADER" name="NAME_HEADER" value="Key in cookie (RegExp)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010">A9-Insufficient Transport Layer Protection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/315.html" name="CWE">315</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE">807</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2021.A4.PLC.TABLE_HEADER" label="List of RegExp to check key in cookie" reader="SATable">
                            <columns>
                                <column columnType="checkbox" defaultValue="true" editable="true" id="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" label="Check values" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" label="Key in cookie (RegExp)" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" value="false"/>
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" value=".*(pass|role).*"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" value="true"/>
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" value=".*(user|login|account).*"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.DNSL" header="Avoid DNS lookups for decision making" id="DNSL" originalId="SECURITY.WSC.DNSL" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="DNS lookup checked here."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/247.html" name="CWE">247</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/494.html" name="CWE">494</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE">807</reference>
                    </references>
                </rule>
         </category>
         <category description="A9-Security Logging and Monitoring Failures" name="A9">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.UEHL.LGE" header="Ensure all exceptions are either logged with a standard logger or rethrown" id="LGE" originalId="SECURITY.UEHL.LGE" scope="LINE" severity="2" since="6.0">
                    <messages>
                        <msg index="1" value="The exception is not logged in the &quot;catch&quot; clause."/>
                        <msg index="2" value="The exception is neither logged nor rethrown in the &quot;catch&quot; clause."/>
                        <msg index="3" value="The exception is neither logged nor rethrown in the &quot;catch&quot; clause. Add a comment to the clause if this is expected."/>
                        <msg index="4" value="The ''{0}'' exception is not passed to the logging method called in the &quot;catch&quot; clause."/>
                        <msg index="5" value="The information passed from the ''{0}'' exception to the logging method may be incomplete."/>
                        <msg index="6" value="The ''{0}'' exception is not rethrown in the &quot;catch&quot; block or passed to the new exception as an argument."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2021.A9.LGE.FLAG_LEVEL" name="FLAG_LEVEL" value="Catch clause should contain:"/>
                        <oldparam id="OWASP2021.A9.LGE.FLAG_IF_NO_LOG" name="FLAG_IF_NO_LOG" value="Logging method."/>
                        <oldparam id="OWASP2021.A9.LGE.FLAG_IF_NO_LOG_AND_THROW" name="FLAG_IF_NO_LOG_AND_THROW" value="Logging method or exception rethrow statement."/>
                        <oldparam id="OWASP2021.A9.LGE.FLAG_IF_NO_LOG_AND_THROW_AND_COMMENT" name="FLAG_IF_NO_LOG_AND_THROW_AND_COMMENT" value="Logging method, comment or exception rethrow statement."/>
                        <oldparam id="OWASP2021.A9.LGE.LOG_METHOD_EXPRESSION" name="LOG_METHOD_EXPRESSION" value="Logging method name in regular expression"/>
                        <oldparam id="OWASP2021.A9.LGE.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                        <oldparam id="OWASP2021.A9.LGE.CHECK_EXCEPT_LOGGED" name="CHECK_EXCEPT_LOGGED" value="Check that the exception is passed into the logging method call"/>
                        <oldparam id="OWASP2021.A9.LGE.IGNORE_LIST" name="IGNORE_LIST" value="Ignore exception variables matching the following regular expression(s):"/>
                        <oldparam id="OWASP2021.A9.LGE.LOGGERS_TAB" name="LOGGERS_TAB" value="Loggers"/>
                        <oldparam id="OWASP2021.A9.LGE.IGNORE_LIST_TAB" name="IGNORE_LIST_TAB" value="Ignore List"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/390.html" name="CWE">390</reference>
                    </references>
                    <parameters>
                        <group collapsible="false" id="OWASP2021.A9.LGE.tab.LOGGERS_TAB" label="Loggers">
                            <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger;org.apache.logging.log4j.Logger;org.slf4j.Logger" id="OWASP2021.A9.LGE.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                            <param defaultValue="^log.*" id="OWASP2021.A9.LGE.LOG_METHOD_EXPRESSION" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                        </group>
                        <group collapsible="false" id="OWASP2021.A9.LGE.tab.IGNORE_LIST_TAB" label="Ignore List">
                            <param defaultValue="^ignore$" id="OWASP2021.A9.LGE.IGNORE_LIST" inputType="stringList" label="Ignore exception variables matching the following regular expression(s):" prevType="StringList"/>
                        </group>
                        <radioGroup id="OWASP2021.A9.LGE.FLAG_LEVEL" label="Catch clause should contain:" prevType="MultipleChoice" showLabel="true">
                            <radioItem label="Logging method." value="0"/>
                            <radioItem defaultValue="checked" label="Logging method or &quot;throw&quot; exception statement." value="1"/>
                            <radioItem label="Logging method, comment, or &quot;throw&quot; exception statement." value="2"/>
                        </radioGroup>
                        <param defaultValue="false" id="OWASP2021.A9.LGE.CHECK_EXCEPT_LOGGED" inputType="checkbox" label="Check if the exception is passed into the logging method call"/>
                        <param defaultValue="false" id="OWASP2021.A9.LGE.CHECK_EXCEPT_FULL_PASSED" inputType="checkbox" label="Check if the exception passed to the logging method is complete"/>
                        <param defaultValue="false" id="OWASP2021.A9.LGE.CHECK_EXCEPT_THROW" inputType="checkbox" label="Check if the caught exception is passed to a new exception or rethrown"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.ENFL" header="Ensure all sensitive method invocations are logged" id="ENFL" originalId="SECURITY.BV.ENFL" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="''{0}'' is invoked without being logged in the previous statement."/>
                        <msg index="2" value="''{0}'' is invoked without being logged in the next statement."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2021.A9.ENFL.LOG_TAG" name="LOG_TAG" value="Loggers"/>
                        <oldparam id="OWASP2021.A9.ENFL.PRE_LOG_METHODS" name="PRE_LOG_METHODS" value="Method invocations that need logging in previous statement"/>
                        <oldparam id="OWASP2021.A9.ENFL.LOG_METHOD_EXPRESSIONS" name="LOG_METHOD_EXPRESSIONS" value="Logging method name in regular expression"/>
                        <oldparam id="OWASP2021.A9.ENFL.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                        <oldparam id="OWASP2021.A9.ENFL.POST_LOG_TAG" name="POST_LOG_TAG" value="Next statement"/>
                        <oldparam id="OWASP2021.A9.ENFL.METHOD" name="METHOD" value="Method"/>
                        <oldparam id="OWASP2021.A9.ENFL.PRE_LOG_TAG" name="PRE_LOG_TAG" value="Previous statement"/>
                        <oldparam id="OWASP2021.A9.ENFL.POST_LOG_METHODS" name="POST_LOG_METHODS" value="Method invocations that need logging in next statement"/>
                        <oldparam id="OWASP2021.A9.ENFL.TYPE" name="TYPE" value="Type"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                    </references>
                    <parameters>
                        <group collapsible="false" id="OWASP2021.A9.ENFL.tab.PRE_LOG_TAG" label="Previous statement">
                            <!--param id="SECURITY.BV.ENFL.PRE_LOG_METHODS" inputType="bigtext" defaultValue="true;javax.security.auth.login.LoginContext;false;login;false;true;javax.security.auth.Subject;false;doAs;false;true;javax.security.auth.Subject;false;doAsPrivileged;false" label="Method invocations that need logging in previous statement"/-->
                            <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2021.A9.ENFL.PRE_LOG_METHODS" label="Method invocations that need logging in previous statement" reader="SATable">
                                <columns>
                                    <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" label="Type" required="true"/>
                                    <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" label="Method" required="true"/>
                                </columns>
                                <predefinedRows>
                                    <row id="1">
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" value="javax.security.auth.login.LoginContext"/>
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" value="login"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" value="javax.security.auth.Subject"/>
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" value="doAs"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" value="javax.security.auth.Subject"/>
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" value="doAsPrivileged"/>
                                    </row>
                                </predefinedRows>
                            </complexParamTable>
                        </group>
                        <group collapsible="false" id="OWASP2021.A9.ENFL.tab.POST_LOG_TAG" label="Next statement">
                            <!--param id="SECURITY.BV.ENFL.POST_LOG_METHODS" inputType="bigtext" defaultValue="true;javax.security.auth.login.LoginContext;false;logout;false" label="Method invocations that need logging in next statement"/-->
                            <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2021.A9.ENFL.POST_LOG_METHODS" label="Method invocations that need logging in next statement" reader="SATable">
                                <columns>
                                    <column columnType="text" defaultValue="unknown" editable="false" id="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN1" label="Type" required="true"/>
                                    <column columnType="text" defaultValue="unknown" editable="false" id="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN2" label="Method" required="true"/>
                                </columns>
                                <predefinedRows>
                                    <row id="1">
                                        <column refColumnId="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN1" value="javax.security.auth.login.LoginContext"/>
                                        <column refColumnId="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN2" value="logout"/>
                                    </row>
                                </predefinedRows>
                            </complexParamTable>
                        </group>
                        <group collapsible="false" id="OWASP2021.A9.ENFL.tab.LOG_TAG" label="Loggers">
                            <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="OWASP2021.A9.ENFL.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                            <param defaultValue="^log$" id="OWASP2021.A9.ENFL.LOG_METHOD_EXPRESSIONS" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                        </group>
                    </parameters>
                </rule>
         </category>
         <category description="A3-Injection" name="A3">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.CDBV" header="Canonicalize all data before validation." id="CDBV" originalId="SECURITY.IBA.CDBV" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="The data in ''{0}'' may not have been canonicalized before being validated."/>
                        <msg index="2" value="The return value of this call to ''{0}'' may not have been canonicalized before being validated."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2021.A3.CDBV.CANON_METHS" name="CANON_METHS" value="Canonicalization method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                        <oldparam id="OWASP2021.A3.CDBV.VALID_METHS" name="VALID_METHS" value="Validation method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                        <oldparam id="OWASP2021.A3.CDBV.VALID_CLASSES" name="VALID_CLASSES" value="Only check calls within the following classes\n[regular expressions for fully qualified class name]"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Input Validation p. 81</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A1" name="OWASP-2010">A1-Injection</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A2" name="OWASP-2010">A2-Cross Site Scripting (XSS)</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/79.html" name="CWE">79</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*#canonicalize" description="Canonicalization method names (in regular expressions) [qualified name of declaring type#method name]" id="OWASP2021.A3.CDBV.CANON_METHS" inputType="stringList" label="Canonicalization method names (in regular expressions)" prevType="StringList"/>
                        <param defaultValue=".*#^validate" description="Validation method names (in regular expressions) [qualified name of declaring type#method name]" id="OWASP2021.A3.CDBV.VALID_METHS" inputType="stringList" label="Validation method names (in regular expressions)" prevType="StringList"/>
                        <param defaultValue=".*" description="Only check calls within the following classes [regular expressions for fully qualified class name]" id="OWASP2021.A3.CDBV.VALID_CLASSES" inputType="stringList" label="Only check calls within the following classes" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.UPS" header="Use 'prepareCall' or 'prepareStatement' instead of 'createStatement'" id="UPS" originalId="SECURITY.IBA.UPS" scope="LINe" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="Consider using 'prepareCall()' or 'prepareStatement()' to prevent SQL injection vulnerabilities"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for SQL Injection p. 121</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A1" name="OWASP-2010">A1-Injection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/89.html" name="CWE">89</reference>
                    </references>
                </rule>
         </category>
      </category>
      <category description="OWASP Top 10 Most Critical Web Application Security Risks (2017)" name="OWASP2017">
         <category description="A3-Sensitive Data Exposure" name="A3">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ENPP" header="Ensure arguments passed to certain methods come from predefined methods list." id="ENPP" originalId="SECURITY.WSC.ENPP" scope="LINE" severity="2" since="9.2">
                    <messages>
                        <msg index="1" value="Argument number {0} passed to method ''{1}'' is not an allowed method call."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2017.A3.ENPP.PAIRS_TABLE_HEADER" name="PAIRS_TABLE_HEADER" value="Methods and arguments configuration"/>
                        <oldparam id="OWASP2017.A3.ENPP.PAIRS_TABLE_1ST" name="PAIRS_TABLE_1ST" value="Method to be checked (&lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,...)"/>
                        <oldparam id="OWASP2017.A3.ENPP.PAIRS_TABLE_INDEX" name="PAIRS_TABLE_INDEX" value="Argument Index to Check (''0''-based)"/>
                        <oldparam id="OWASP2017.A3.ENPP.PAIRS_TABLE_2ND" name="PAIRS_TABLE_2ND" value="Allowed method name (in Regular Expressions)"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/329.html" name="CWE">329</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/336.html" name="CWE">336</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/337.html" name="CWE">337</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE">676</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2017.A3.ENPP.PAIRS_TABLE_HEADER" label="Methods and arguments configuration" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" label="Method to be checked (&lt;qualified name of declaring type&gt;#&lt;method name&gt;(&lt;parameter1 fully qualified type&gt;,...)" required="true"/>
                                <column columnType="text" defaultValue="0" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" label="Argument Index to Check (''0''-based)" required="true" textSize="small"/>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" label="Allowed method name (in Regular Expressions)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#SecureRandom(byte[])"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#setSeed(byte[])"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="java.security.SecureRandom#setSeed(long)"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidSeed"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="javax.crypto.spec.IvParameterSpec#IvParameterSpec(byte[])"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidIV"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN1" value="javax.crypto.spec.IvParameterSpec#IvParameterSpec(byte[],int,int)"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN2" value="0"/>
                                    <column refColumnId="SECURITY__WSC__ENPP__PAIRS_TABLE_HEADER__COLUMN3" value=".*[vV]alidIV"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AUNC" header="Avoid using the javax.crypto.NullCipher class in non-test classes." id="AUNC" originalId="SECURITY.WSC.AUNC" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The NullCipher class that does not encrypt the plaintext is used in a non-test class."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.IVR" header="Avoid non-random &quot;byte[]&quot; when using IvParameterSpec." id="IVR" originalId="SECURITY.WSC.IVR" scope="LINE" severity="2" since="8.4">
                    <messages>
                        <msg index="1" value="IvParameterSpec instantiated with non-random value ''{0}''."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/329.html" name="CWE">329</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SIKG" header="Initialize KeyGenerator instances " id="SIKG" originalId="SECURITY.WSC.SIKG" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The ''{0}'' object of the KeyGenerator class is created but not initialized"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SRD" header="Use 'java.security.SecureRandom' instead of 'java.util.Random' or 'Math.random()'." id="SRD" originalId="SECURITY.WSC.SRD" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Avoid using the insecure ''{0}'' as a random number generator"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/330.html" name="CWE">330</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/338.html" name="CWE">338</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE">676</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MCMDU" header="MessageDigest objects must process the data with the 'update' method" id="MCMDU" originalId="SECURITY.WSC.MCMDU" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The 'update' method is not called on the ''{0}'' variable after the message digest object is obtained"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.USC" header="Use the SSL-enabled version of classes when possible." id="USC" originalId="SECURITY.WSC.USC" scope="LINE" severity="3" since="7.5">
                    <messages>
                        <msg index="1" value="Consider using the SSL-enabled type ''SSLServerSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="2" value="Consider using the SSL-enabled type ''SSLSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="3" value="Consider using the SSL-enabled type ''HttpsURLConnection'' for the {0} ''{1}''."/>
                        <msg index="4" value="Consider using the SSL-enabled type ''SslRMIClientSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="5" value="Consider using the SSL-enabled type ''SslRMIServerSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="6" value="Consider using the SSL-enabled type ''SSLSocket'' for the {0} ''{1}''."/>
                        <msg index="7" value="Consider using the SSL-enabled type ''SSLServerSocket'' for the {0} ''{1}''."/>
                        <msg index="8" value="Consider using the SSL-enabled type ''SSLPermission'' for the {0} ''{1}''."/>
                    </messages>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010">A9-Insufficient Transport Layer Protection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/494.html" name="CWE">494</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.CONSEN" header="Do not log confidential or sensitive information" id="CONSEN" originalId="SECURITY.ESD.CONSEN" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="''{0}'' should not be used by a logger, it can expose confidential info."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2017.A3.CONSEN.SUSPICIOUS_WORDS" name="SUSPICIOUS_WORDS" value="Regular expressions representing sensive data:"/>
                        <oldparam id="OWASP2017.A3.CONSEN.LOG_METHOD_EXPRESSIONS" name="LOG_METHOD_EXPRESSIONS" value="Logging method name in regular expression"/>
                        <oldparam id="OWASP2017.A3.CONSEN.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/533.html" name="CWE">533</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/534.html" name="CWE">534</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*ssn.*@delim@.*pass.*" id="OWASP2017.A3.CONSEN.SUSPICIOUS_WORDS" inputType="stringList" label="Regular expressions representing sensive data:" prevType="StringList"/>
                        <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="OWASP2017.A3.CONSEN.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                        <param defaultValue=".*log.*" id="OWASP2017.A3.CONSEN.LOG_METHOD_EXPRESSIONS" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.VJFS" header="Always verify JarFile signatures" id="VJFS" originalId="SECURITY.WSC.VJFS" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Consider using a JarFile constructor with verification enabled."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/347.html" name="CWE">347</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HCCK" header="Avoid using hard-coded cryptographic keys" id="HCCK" originalId="SECURITY.WSC.HCCK" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Hard-coded cryptographic key here."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2017.A3.HCCK.MIN_LENGTH" name="MIN_LENGTH" value="Check keys whose length is greater than "/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/321.html" name="CWE">321</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/506.html" name="CWE">506</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/759.html" name="CWE">759</reference>
                    </references>
                    <parameters>
                        <param defaultValue="9" id="OWASP2017.A3.HCCK.MIN_LENGTH" inputType="integer" label="Check keys whose length is greater than " min="9"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PORT.HCNA" header="Do not hard-code IP addresses and port numbers." id="HCNA" originalId="PORT.HCNA" scope="LINE" severity="3" since="9.0">
                <messages>
                    <msg index="1" value="Hard-coded IP address ''{0}''."/>
                    <msg index="2" value="Hard-coded port number ''{0}''."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2017.A3.HCNA.IP" name="IP" value="Do not hard-code IP addresses"/>
                    <oldparam id="OWASP2017.A3.HCNA.PORT" name="PORT" value="Do not hard-code port numbers"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="true" id="OWASP2017.A3.HCNA.IP" inputType="checkbox" label="Do not hard-code IP addresses"/>
                    <param defaultValue="true" id="OWASP2017.A3.HCNA.PORT" inputType="checkbox" label="Do not hard-code port numbers"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ICA" header="Avoid using insecure algorithms for cryptography." id="ICA" originalId="SECURITY.WSC.ICA" scope="LINE" severity="1" since="8.3">
                    <messages>
                        <msg index="1" value="The &quot;{0}&quot; algorithm is not an acceptable cryptography algorithm for the &quot;{1}&quot; class."/>
                        <msg index="2" value="The cryptography algorithm is used without padding."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2017.A3.ICA.SUGGESTED_ALGS" name="SUGGESTED_ALGS" value="Safe Cryptography Algorithms"/>
                        <oldparam id="OWASP2017.A3.ICA.TYPE_NAME" name="TYPE_NAME" value="Fully Qualified Class Name"/>
                        <oldparam id="OWASP2017.A3.ICA.ALGORITHM_NAME" name="ALGORITHM_NAME" value="Algorithm Names (in regular expressions)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/328.html" name="CWE">328</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/780.html" name="CWE">780</reference>
                    </references>
                    <parameters>
                        <!--param id="SECURITY.WSC.ICA.SUGGESTED_ALGS" inputType="bigtext" defaultValue="java.security.KeyPairGenerator&lt;#&gt;RSA;java.security.MessageDigest&lt;#&gt;SHA-256#SHA-384#SHA-512;javax.crypto.Cipher&lt;#&gt;3DES#AES#ARCFOUR/RC4#Blowfish#ECIES#RC4#RC5#RSA(.*)OAEPWith(.*)And(.*)Padding;javax.crypto.KeyGenerator&lt;#&gt;AES#ARCFOUR/RC4#Blowfish#HmacSHA256#HmacSHA384#HmacSHA512#RC2" label="Safe Cryptography Algorithms" prevType="DuoList"/-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="OWASP2017.A3.ICA.SUGGESTED_ALGS" label="Secure Cryptographic Algorithms" prevType="DuoList" reader="SADuoList">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" label="Fully Qualified Class Name" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.KeyPairGenerator"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.MessageDigest"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.KeyGenerator"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.Cipher"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.net.ssl.SSLContext"/>
                                </row>
                            </predefinedRows>
                            <childTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="OWASP2017.A3.ICA.SUGGESTED_ALGS.CHILDTABLE1" label="">
                                <columns>
                                    <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" label="Name of Secure Algorithm (in regular expressions)" required="true"/>
                                </columns>
                                <predefinedRows refParentRowId="1">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="2">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-256"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-384"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-512"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="3">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA256"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA384"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA512"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC2"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESede"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="4">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="3DES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES/(.*)/PKCS5Padding"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ECIES"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC4"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC5"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA(.*)OAEPWith(.*)And(.*)Padding"/>
                                    </row>
                                    <row id="9">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESEDE/(.*)/PKCS5Padding"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="5">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="TLSv1.2"/>
                                    </row>
                                </predefinedRows>
                            </childTable>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AISSAJAVA" header="Avoid using insecure cryptographic algorithms for data encryption with Spring" id="AISSAJAVA" originalId="SECURITY.WSC.AISSAJAVA" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The cryptographic class is insecure."/>
                        <msg index="2" value="The cryptographic algorithm used in the constructor of MessageDigestPasswordEncoder is insecure."/>
                    </messages>
                    <parameters>
                        <!-- <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_ENCODERS" inputType="stringList" defaultValue="org.springframework.security.crypto.password.LdapShaPasswordEncoder;org.springframework.security.crypto.password.Md5PasswordEncoder;org.springframework.security.crypto.password.Md4PasswordEncoder;org.springframework.security.crypto.password.NoOpPasswordEncoder;org.springframework.security.authentication.encoding.LdapShaPasswordEncoder;org.springframework.security.authentication.encoding.Md5PasswordEncoder;org.springframework.security.authentication.encoding.Md4PasswordEncoder" label="Insecure classes that should not be used for encryption" prevType="StringList"/>
                        <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_NAMES" inputType="stringList" defaultValue="MD2;MD5;SHA-1" label="Insecure algorithms in the MessageDigestPasswordEncoder class" prevType="StringList"/>-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="OWASP2017.A3.AISSAJAVA.BANNED_ALGO_ENCODERS" label="Insecure classes that should not be used for encryption" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" label="Fully Qualified Name of Insecure Class" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md5PasswordEncoder"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md4PasswordEncoder"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.NoOpPasswordEncoder"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>
                                </row>
                                <row id="7">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md4PasswordEncoder"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="OWASP2017.A3.AISSAJAVA.BANNED_ALGO_NAMES" label="Insecure algorithms in the MessageDigestPasswordEncoder class" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" label="Name of Insecure Algorithm" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD2"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD5"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="SHA-1"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MDSALT" header="Use hash functions with a salt" id="MDSALT" originalId="SECURITY.WSC.MDSALT" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="A salt is not added to the digest"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HV" header="Ensure the HostnameVerifier.verify() method validates the certificate" id="HV" originalId="SECURITY.WSC.HV" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The certificate is not validated, because the 'verify' method always returns 'true'"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.VSI" header="Properly validate server identity" id="VSI" originalId="SECURITY.WSC.VSI" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="SMTP SSL does not check server identity."/>
                        <msg index="2" value="SMTP SSL does not check server identity. Ensure the library version allows you to configure the required options."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.PEO" header="Do not pass exception messages into output in order to prevent the application from leaking sensitive information" id="PEO" originalId="SECURITY.ESD.PEO" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Print method ''{0}()'' is not allowed in a &quot;catch&quot; block."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2017.A3.PEO.PRINT_METHOD_EXPRESSION" name="PRINT_METHOD_EXPRESSION" value="Print methods (Specify names in regular expressions)"/>
                        <oldparam id="OWASP2017.A3.PEO.EXCEPTIONS" name="EXCEPTIONS" value="Exceptions (Specify types and method names in regular expressions)"/>
                        <oldparam id="OWASP2017.A3.PEO.TYPE" name="TYPE" value="Type"/>
                        <oldparam id="OWASP2017.A3.PEO.METHOD" name="METHOD" value="Method"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/209.html" name="CWE">209</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/497.html" name="CWE">497</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*print.*;.*Print.*" id="OWASP2017.A3.PEO.PRINT_METHOD_EXPRESSION" inputType="stringList" label="Print methods (Specify names in regular expressions)" prevType="StringList"/>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2017.A3.PEO.EXCEPTIONS" label="Exceptions (Specify types and method names in regular expressions)" reader="SATable">
                            <columns>
                                <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" label="Type" required="true"/>
                                <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" label="Method" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" value="^java\.util\.logging\.Logger$"/>
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" value="^.*$"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" value="^org\.apache\.log4j\.Logger$"/>
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" value="^.*$"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="A2-Broken Authentication" name="A2">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HGRSI" header="Avoid using the 'getRequestedSessionId' method from the 'HttpServletRequest' class" id="HGRSI" originalId="SECURITY.WSC.HGRSI" scope="LINE" severity="4" since="10.4.2">
                    <messages>
                        <msg index="1" value="The 'getRequestedSessionId' method may return untrusted data"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HTTPRHA" header="Do not rely on IP addresses obtained from HTTP request headers for authentication" id="HTTPRHA" originalId="SECURITY.WSC.HTTPRHA" scope="LINE" severity="3" since="2020.1">
                    <messages>
                        <msg index="1" value="The IP address retrieved from the HTTP request header is used for authentication"/>
                        <msg index="2" value="The IP address retrieved from the header using the 'getRemoteAddr()' method is used for authentication"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ISL" header="Always call 'HttpSession.invalidate()' before 'LoginContext.login()'" id="ISL" originalId="SECURITY.WSC.ISL" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Login without session invalidation."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Session Management p. 78</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/384.html" name="CWE">384</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.RUIM" header="Ensure proper session expiration" id="RUIM" originalId="SECURITY.IBA.RUIM" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The session expiration time used in this metod call is obtained form a servlet request"/>
                        <msg index="2" value="The negative timeout value used in this metod call prevents session expiration"/>
                    </messages>
                </rule>
         </category>
         <category description="A6-Security Misconfiguration" name="A6">
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AECB" header="Avoid &quot;try&quot;, &quot;catch&quot; and &quot;finally&quot; blocks with empty bodies" id="AECB" originalId="PB.TYPO.AECB" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="&quot;try&quot; block has an empty body."/>
                        <msg index="2" value="&quot;catch&quot; block has an empty body."/>
                        <msg index="3" value="&quot;finally&quot; block has an empty body."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2017.A6.AECB.CHECK_FINALLY" name="CHECK_FINALLY" value="Check &quot;finally&quot; block."/>
                        <oldparam id="OWASP2017.A6.AECB.CHECK_TRY" name="CHECK_TRY" value="Check &quot;try&quot; block."/>
                        <oldparam id="OWASP2017.A6.AECB.CHECK_CATCH" name="CHECK_CATCH" value="Check &quot;catch&quot; block."/>
                        <oldparam id="OWASP2017.A6.AECB.CHECK_COMMENTS" name="CHECK_COMMENTS" value="Disallow blocks with comments as content."/>
                        <oldparam id="OWASP2017.A6.AECB.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="Regular expression of exception variable name. (enclosing catch block would be ignored if matches)"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/391.html" name="CWE">391</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="OWASP2017.A6.AECB.CHECK_TRY" inputType="checkbox" label="Check &quot;try&quot; block."/>
                        <param defaultValue="true" id="OWASP2017.A6.AECB.CHECK_CATCH" inputType="checkbox" label="Check &quot;catch&quot; block."/>
                        <param defaultValue="true" id="OWASP2017.A6.AECB.CHECK_FINALLY" inputType="checkbox" label="Check &quot;finally&quot; block."/>
                        <param defaultValue="false" id="OWASP2017.A6.AECB.CHECK_COMMENTS" inputType="checkbox" label="Disallow blocks with comments as content."/>
                        <param defaultValue="%5Eignore%24;" id="OWASP2017.A6.AECB.REGULAR_EXPRESSION" inputType="stringList" label="Regular expression of exception variable name. (enclosing catch block would be ignored if matches)" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.NCE" header="Do not catch exception types which are too general or are unchecked exceptions." id="NCE" originalId="CODSTA.EPC.NCE" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="&quot;catch&quot; statement directly catches the general exception type ''{0}''."/>
                        <msg index="2" value="&quot;catch&quot; statement directly catches the unchecked exception type ''{0}''."/>
                        <msg index="3" value="&quot;catch&quot; statement catches general parent exception type: ''{0}''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2017.A6.NCE.GENERAL" name="GENERAL" value="Check for general exception types."/>
                        <oldparam id="OWASP2017.A6.NCE.UNCHECKED" name="UNCHECKED" value="Check for unchecked exception types."/>
                        <oldparam id="OWASP2017.A6.NCE.NUM_CHILDREN" name="NUM_CHILDREN" value="Check for parent exceptions caught where number of child exceptions thrown is less than"/>
                        <oldparam id="OWASP2017.A6.NCE.IGNORE_EXCEPTIONS" name="IGNORE_EXCEPTIONS" value="Ignore exceptions with names matching the following regular expression(s):"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/396.html" name="CWE">396</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="OWASP2017.A6.NCE.GENERAL" inputType="checkbox" label="Check for general exception types."/>
                        <param defaultValue="false" id="OWASP2017.A6.NCE.UNCHECKED" inputType="checkbox" label="Check for unchecked exception types."/>
                        <complexParamTable canAddRow="false" canEditRow="true" canRemoveRow="false" canSetOrdering="false" id="OWASP2017.A6.NCE.NUM_CHILDREN" label="Check for parent exceptions caught where number of child exceptions thrown is less than" prevType="InputValueWithCheckBox" reader="SATable">
                            <columns>
                                <column columnType="checkbox" editable="true" id="CODSTA__EPC__NCE__NUM_CHILDREN__COLUMN1" label="" required="true"/>
                                <column columnType="text" editable="true" id="CODSTA__EPC__NCE__NUM_CHILDREN__COLUMN2" label="" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="CODSTA__EPC__NCE__NUM_CHILDREN__COLUMN1" value="true"/>
                                    <column refColumnId="CODSTA__EPC__NCE__NUM_CHILDREN__COLUMN2" value="3"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <param defaultValue="^ignore$" id="OWASP2017.A6.NCE.IGNORE_EXCEPTIONS" inputType="stringList" label="Ignore exceptions with names matching the following regular expression(s):" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.NTERR" header="Do not throw exception types which are too general or are unchecked exceptions." id="NTERR" originalId="EXCEPT.NTERR" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Avoid throwing ''{0}''."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2017.A6.NTERR.CHECKED_EXCEPTS" name="CHECKED_EXCEPTS" value="Exception types which should not be thrown (fully qualified names)"/>
                </oldparameters>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/397.html" name="CWE">397</reference>
                </references>
                <parameters>
                    <param defaultValue="java.lang.Exception;java.lang.Error;java.lang.Throwable;java.lang.RuntimeException" id="OWASP2017.A6.NTERR.CHECKED_EXCEPTS" inputType="stringList" label="Exception types which should not be thrown (fully qualified names)" prevType="StringList"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SPRING.DCSRFJAVA" header="Do not disable CSRF protection" id="DCSRFJAVA" originalId="SPRING.DCSRFJAVA" scope="LINE" severity="2" since="10.4.3">
                <messages>
                    <msg index="1" value="CSRF protection is disabled."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.EWSSEC" header="Avoid debug information from Spring Security framework to logs" id="EWSSEC" originalId="SECURITY.WSC.EWSSEC" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="Debug features is activated in @EnableWebSecurity annotation"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.EXCEPT.NCNPE" header="Do not catch 'NullPointerException'" id="NCNPE" originalId="EXCEPT.NCNPE" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Avoid catching 'NullPointerException'"/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.SIO" header="Avoid calling print methods of 'System.err' or 'System.out'" id="SIO" originalId="SECURITY.ESD.SIO" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Make sure ''{0}'' is not a leftover debug statement."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2017.A6.SIO.METHOD_SKIP_LIST" name="METHOD_SKIP_LIST" value="Methods to be excluded from this rule"/>
                    </oldparameters>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010">A3-Broken Authentication and Session Management</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="OWASP2017.A6.SIO.SCANNED_CLASS_TABLE" label="Include classes" reader="SATable">
                            <columns>
                                <column columnType="checkbox" defaultValue="true" editable="true" id="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN1" label="Base class/ interface" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN2" label="Class/interface name (regular expression)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN1" value="true"/>
                                    <column refColumnId="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN2" value=".*"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <param defaultValue="main;show;verbose" id="OWASP2017.A6.SIO.METHOD_SKIP_LIST" inputType="stringList" label="Exclude methods" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.JXCORS" header="Restrict cross-origin resource sharing to secure origins" id="JXCORS" originalId="SECURITY.WSC.JXCORS" scope="LINE" severity="4" since="2020.1">
                    <messages>
                        <msg index="1" value="The &quot;Access-Control-Allow-Origin&quot; header is set to allow unrestricted access to cross-origin resources"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.DMDS" header="Avoid using the DriverManagerDataSource class in production code" id="DMDS" originalId="SECURITY.WSC.DMDS" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The DriverManagerDataSource class is not a pooled data source and should not be used in production code."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.CODSTA.NTX" header="Avoid declaring methods to throw general or unchecked Exception types" id="NTX" originalId="CODSTA.BP.NTX" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Throwing explicit ''{0}'' object in ''{1}()''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2017.A6.NTX.CHECKED_EXCEPTS" name="CHECKED_EXCEPTS" value="Exception types which should not be declared to be thrown (fully qualified names)"/>
                        <oldparam id="OWASP2017.A6.NTX.SKIP_JUNIT" name="SKIP_JUNIT" value="Skip JUnit 'TestCase' classes."/>
                        <oldparam id="OWASP2017.A6.NTX.SUBCLASSES" name="SUBCLASSES" value="Check for exceptions which are subclasses of 'Error' and 'RuntimeException'."/>
                        <oldparam id="OWASP2017.A6.NTX.IGNORE_OVERRIDING" name="IGNORE_OVERRIDING" value="Ignore overriding methods."/>
                        <oldparam id="OWASP2017.A6.NTX.IGNORE_PROPAGATED" name="IGNORE_PROPAGATED" value="Ignore methods which propagate exception types of called methods."/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/397.html" name="CWE">397</reference>
                    </references>
                    <parameters>
                        <param defaultValue="java.lang.Exception;java.lang.Error;java.lang.Throwable;java.lang.RuntimeException" id="OWASP2017.A6.NTX.CHECKED_EXCEPTS" inputType="stringList" label="Exception types which should not be declared to be thrown (fully qualified names)" prevType="StringList"/>
                        <param defaultValue="false" id="OWASP2017.A6.NTX.SUBCLASSES" inputType="checkbox" label="Check for exceptions which are subclasses of 'Error' and 'RuntimeException'."/>
                        <param defaultValue="false" id="OWASP2017.A6.NTX.SKIP_JUNIT" inputType="checkbox" label="Skip JUnit classes."/>
                        <param defaultValue="true" id="OWASP2017.A6.NTX.IGNORE_OVERRIDING" inputType="checkbox" label="Ignore overriding methods."/>
                        <param defaultValue="true" id="OWASP2017.A6.NTX.IGNORE_PROPAGATED" inputType="checkbox" label="Ignore methods which propagate exception types of called methods."/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ACPST" header="Do not call the 'printStackTrace()' method of &quot;Throwable&quot; objects." id="ACPST" originalId="SECURITY.WSC.ACPST" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="The 'printStackTrace()' method of a &quot;Throwable&quot; object is called here."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2017.A6.ACPST.IGNORE_OVERRIDDEN" name="IGNORE_OVERRIDDEN" value="Ignore overridden versions of the 'printStackTrace()' methods"/>
                        <oldparam id="OWASP2017.A6.ACPST.IGNORE_OVERLOADED" name="IGNORE_OVERLOADED" value="Ignore overloaded versions of the 'printStackTrace()' method"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/209.html" name="CWE">209</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="OWASP2017.A6.ACPST.IGNORE_OVERRIDDEN" inputType="checkbox" label="Ignore overridden methods"/>
                        <param defaultValue="true" id="OWASP2017.A6.ACPST.IGNORE_OVERLOADED" inputType="checkbox" label="Ignore overloaded methods"/>
                    </parameters>
                </rule>
         </category>
         <category description="A4-XML External Entities (XXE)" name="A4">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.DXXE" header="Disable XML external entity injection." id="DXXE" originalId="SECURITY.IBA.DXXE" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="XXE injection has not been disabled."/>
                        <msg index="2" value="XXE injection has not been disabled. Ensure your parser version allows you to configure the required options."/>
                    </messages>
                </rule>
         </category>
         <category description="A8-Insecure Deserialization" name="A8">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.DUID" header="Create a 'serialVersionUID' for all 'Serializable' classes." id="DUID" originalId="SERIAL.DUID" scope="CLASS" severity="3" since="4.5">
                <messages>
                    <msg index="1" value="No 'serialVersionUID' declared in class ''{0}''."/>
                    <msg index="2" value="'serialVersionUID' must be declared &quot;static final long&quot;, otherwise it will not be used."/>
                    <msg index="3" value="'serialVersionUID' should be declared &quot;private&quot;."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2017.A8.DUID.CHECK_PRIVATE" name="CHECK_PRIVATE" value="Check if serialVersionUID is &quot;private&quot;"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="false" id="OWASP2017.A8.DUID.CHECK_PRIVATE" inputType="checkbox" label="Check if serialVersionUID is &quot;private&quot;"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.SCBNP" header="Always declare writeObject and readObject methods for Serializable subclasses of non-Serializable parents" id="SCBNP" originalId="SERIAL.SCBNP" scope="LINE" severity="3" since="9.0">
                <messages>
                    <msg index="1" value="Class has a non-serializable parent but implements Serializable without specifying readObject or WriteObject methods."/>
                    <msg index="2" value="Class has a non-serializable parent but implements Serializable without specifying readObject method."/>
                    <msg index="3" value="Class has a non-serializable parent but implements Serializable without specifying WriteObject method."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.RRSC" header="Define a &quot;readResolve&quot; method for all instances of Serializable types." id="RRSC" originalId="SERIAL.RRSC" scope="LINE" severity="3" since="8.1">
                <messages>
                    <msg index="1" value="The class ''{0}'' implements ''Serializable'' but does not define a &quot;readResolve()&quot; method."/>
                    <msg index="2" value="The &quot;readResolve()&quot; method of the class ''{0}'' may have a return value other than the Serializable instance."/>
                    <msg index="3" value="The &quot;readResolve()&quot; method of the class ''{0}'' does not have the correct signature."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2017.A8.RRSC.CHECK_PUBLIC" name="CHECK_PUBLIC" value="a &quot;public&quot; constructor"/>
                    <oldparam id="OWASP2017.A8.RRSC.CHECK_PROTECTED" name="CHECK_PROTECTED" value="a &quot;protected&quot; constructor"/>
                    <oldparam id="OWASP2017.A8.RRSC.CHECK_PACKAGE_PRIVATE" name="CHECK_PACKAGE_PRIVATE" value="a &quot;package-private&quot; constructor"/>
                    <oldparam id="OWASP2017.A8.RRSC.CHECK_PRIVATE" name="CHECK_PRIVATE" value="a &quot;private&quot; constructor"/>
                </oldparameters>
                <parameters>
                    <group collapsible="false" id="OWASP2017.A8.RRSC.group.0" label="Check classes with:">
                        <param defaultValue="false" id="OWASP2017.A8.RRSC.CHECK_PUBLIC" inputType="checkbox" label="a &quot;public&quot; constructor"/>
                        <param defaultValue="false" id="OWASP2017.A8.RRSC.CHECK_PROTECTED" inputType="checkbox" label="a &quot;protected&quot; constructor"/>
                        <param defaultValue="false" id="OWASP2017.A8.RRSC.CHECK_PACKAGE_PRIVATE" inputType="checkbox" label="a &quot;package-private&quot; constructor"/>
                        <param defaultValue="true" id="OWASP2017.A8.RRSC.CHECK_PRIVATE" inputType="checkbox" label="a &quot;private&quot; constructor"/>
                    </group>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.AUXD" header="Avoid parsing untrusted data with XMLDecoder" id="AUXD" originalId="SECURITY.IBA.AUXD" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The XMLDecoder class is used."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.EAB.OROM" header="Implement 'readObject()' and 'writeObject()' for all 'Serializable' classes." id="OROM" originalId="SECURITY.EAB.OROM" scope="CLASS" severity="5" since="4.5">
                    <messages>
                        <msg index="1" value="Serializable class ''{0}'' does not implement 'readObject()'."/>
                        <msg index="2" value="Serializable class ''{0}'' implements 'readObject()', but this method is not 'final'."/>
                        <msg index="3" value="Serializable class ''{0}'' does not implement 'writeObject()'."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2017.A8.OROM.MUST_BE_FINAL" name="MUST_BE_FINAL" value="Make sure the 'readObject()' method is 'final'."/>
                        <oldparam id="OWASP2017.A8.OROM.CHECK_FOR_READ" name="CHECK_FOR_READ" value="Check that the 'readObject()' method is implemented in all serializable classes."/>
                        <oldparam id="OWASP2017.A8.OROM.CHECK_FOR_WRITE" name="CHECK_FOR_WRITE" value="Check that the 'writeObject()' method is implemented in all serializable classes."/>
                        <oldparam id="OWASP2017.A8.OROM.IGNORE_TYPES" name="IGNORE_TYPES" value="Ignore types extending or implementing the following types (Specify fully qualified names):"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="OWASP2017.A8.OROM.CHECK_FOR_READ" inputType="checkbox" label="Check that the 'readObject()' method is implemented in all serializable classes.">
                            <param defaultValue="false" id="OWASP2017.A8.OROM.MUST_BE_FINAL" inputType="checkbox" label="Make sure the 'readObject()' method is 'final'."/>
                        </param>
                        <param defaultValue="false" id="OWASP2017.A8.OROM.CHECK_FOR_WRITE" inputType="checkbox" label="Check that the 'writeObject()' method is implemented in all serializable classes."/>
                        <param defaultValue="" id="OWASP2017.A8.OROM.IGNORE_TYPES" inputType="stringList" label="Ignore types extending or implementing the following types (Specify fully qualified names):" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.RWAF" header="Ensure that all fields are assigned by the 'readObject()' method and written out by the 'writeObject()' method" id="RWAF" originalId="SERIAL.RWAF" scope="LINE" severity="3" since="8.1">
                <messages>
                    <msg index="1" value="The ''{0}'' field is not read by the ''readObject()'' method."/>
                    <msg index="2" value="The ''{0}'' field is not written out by the ''writeObject()'' method."/>
                </messages>
                <oldparameters>
                    <oldparam id="OWASP2017.A8.RWAF.MAX_LEVEL" name="MAX_LEVEL" value="Maximum level of checking allowed"/>
                </oldparameters>
                <parameters>
                    <param defaultValue="5" id="OWASP2017.A8.RWAF.MAX_LEVEL" inputType="integer" label="Maximum level of checking allowed" min="0"/>
                    <param defaultValue="true" id="OWASP2017.A8.RWAF.CHECK_WRITE" inputType="checkbox" label="Check 'writeObject' methods" min="0"/>
                    <param defaultValue="true" id="OWASP2017.A8.RWAF.CHECK_READ" inputType="checkbox" label="Check 'readObject' methods" min="0"/>
                </parameters>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.SROS" header="Do not declare the 'readObject()' method as &quot;synchronized&quot;" id="SROS" originalId="SERIAL.SROS" scope="LINE" severity="3" since="6.0">
                <messages>
                    <msg index="1" value="Method readObject()  is synchronized."/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERIAL.VOBD" header="Validate objects before deserialization" id="VOBD" originalId="SERIAL.VOBD" scope="LINE" severity="3" since="10.4.3">
                <messages>
                    <msg index="1" value="The object read from the ObjectInputStream is not validated before deserialization"/>
                </messages>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.SC" header="Disable LDAP deserialization" id="SC" originalId="SECURITY.IBA.SC" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The SearchControls object allows deserialization"/>
                    </messages>
                </rule>
         </category>
         <category description="A1-Injection" name="A1">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.UPS" header="Use 'prepareCall' or 'prepareStatement' instead of 'createStatement'" id="UPS" originalId="SECURITY.IBA.UPS" scope="LINe" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="Consider using 'prepareCall()' or 'prepareStatement()' to prevent SQL injection vulnerabilities"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for SQL Injection p. 121</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A1" name="OWASP-2010">A1-Injection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/89.html" name="CWE">89</reference>
                    </references>
                </rule>
         </category>
         <category description="A10-Insufficient Logging&amp;Monitoring" name="A10">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.BV.ENFL" header="Ensure all sensitive method invocations are logged" id="ENFL" originalId="SECURITY.BV.ENFL" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="''{0}'' is invoked without being logged in the previous statement."/>
                        <msg index="2" value="''{0}'' is invoked without being logged in the next statement."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2017.A10.ENFL.LOG_TAG" name="LOG_TAG" value="Loggers"/>
                        <oldparam id="OWASP2017.A10.ENFL.PRE_LOG_METHODS" name="PRE_LOG_METHODS" value="Method invocations that need logging in previous statement"/>
                        <oldparam id="OWASP2017.A10.ENFL.LOG_METHOD_EXPRESSIONS" name="LOG_METHOD_EXPRESSIONS" value="Logging method name in regular expression"/>
                        <oldparam id="OWASP2017.A10.ENFL.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                        <oldparam id="OWASP2017.A10.ENFL.POST_LOG_TAG" name="POST_LOG_TAG" value="Next statement"/>
                        <oldparam id="OWASP2017.A10.ENFL.METHOD" name="METHOD" value="Method"/>
                        <oldparam id="OWASP2017.A10.ENFL.PRE_LOG_TAG" name="PRE_LOG_TAG" value="Previous statement"/>
                        <oldparam id="OWASP2017.A10.ENFL.POST_LOG_METHODS" name="POST_LOG_METHODS" value="Method invocations that need logging in next statement"/>
                        <oldparam id="OWASP2017.A10.ENFL.TYPE" name="TYPE" value="Type"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                    </references>
                    <parameters>
                        <group collapsible="false" id="OWASP2017.A10.ENFL.tab.PRE_LOG_TAG" label="Previous statement">
                            <!--param id="SECURITY.BV.ENFL.PRE_LOG_METHODS" inputType="bigtext" defaultValue="true;javax.security.auth.login.LoginContext;false;login;false;true;javax.security.auth.Subject;false;doAs;false;true;javax.security.auth.Subject;false;doAsPrivileged;false" label="Method invocations that need logging in previous statement"/-->
                            <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2017.A10.ENFL.PRE_LOG_METHODS" label="Method invocations that need logging in previous statement" reader="SATable">
                                <columns>
                                    <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" label="Type" required="true"/>
                                    <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" label="Method" required="true"/>
                                </columns>
                                <predefinedRows>
                                    <row id="1">
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" value="javax.security.auth.login.LoginContext"/>
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" value="login"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" value="javax.security.auth.Subject"/>
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" value="doAs"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN1" value="javax.security.auth.Subject"/>
                                        <column refColumnId="SECURITY__BV__ENFL__PRE_LOG_METHODS__COLUMN2" value="doAsPrivileged"/>
                                    </row>
                                </predefinedRows>
                            </complexParamTable>
                        </group>
                        <group collapsible="false" id="OWASP2017.A10.ENFL.tab.POST_LOG_TAG" label="Next statement">
                            <!--param id="SECURITY.BV.ENFL.POST_LOG_METHODS" inputType="bigtext" defaultValue="true;javax.security.auth.login.LoginContext;false;logout;false" label="Method invocations that need logging in next statement"/-->
                            <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="OWASP2017.A10.ENFL.POST_LOG_METHODS" label="Method invocations that need logging in next statement" reader="SATable">
                                <columns>
                                    <column columnType="text" defaultValue="unknown" editable="false" id="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN1" label="Type" required="true"/>
                                    <column columnType="text" defaultValue="unknown" editable="false" id="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN2" label="Method" required="true"/>
                                </columns>
                                <predefinedRows>
                                    <row id="1">
                                        <column refColumnId="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN1" value="javax.security.auth.login.LoginContext"/>
                                        <column refColumnId="SECURITY__BV__ENFL__POST_LOG_METHODS__COLUMN2" value="logout"/>
                                    </row>
                                </predefinedRows>
                            </complexParamTable>
                        </group>
                        <group collapsible="false" id="OWASP2017.A10.ENFL.tab.LOG_TAG" label="Loggers">
                            <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="OWASP2017.A10.ENFL.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                            <param defaultValue="^log$" id="OWASP2017.A10.ENFL.LOG_METHOD_EXPRESSIONS" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                        </group>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.UEHL.LGE" header="Ensure all exceptions are either logged with a standard logger or rethrown" id="LGE" originalId="SECURITY.UEHL.LGE" scope="LINE" severity="2" since="6.0">
                    <messages>
                        <msg index="1" value="The exception is not logged in the &quot;catch&quot; clause."/>
                        <msg index="2" value="The exception is neither logged nor rethrown in the &quot;catch&quot; clause."/>
                        <msg index="3" value="The exception is neither logged nor rethrown in the &quot;catch&quot; clause. Add a comment to the clause if this is expected."/>
                        <msg index="4" value="The ''{0}'' exception is not passed to the logging method called in the &quot;catch&quot; clause."/>
                        <msg index="5" value="The information passed from the ''{0}'' exception to the logging method may be incomplete."/>
                        <msg index="6" value="The ''{0}'' exception is not rethrown in the &quot;catch&quot; block or passed to the new exception as an argument."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2017.A10.LGE.FLAG_LEVEL" name="FLAG_LEVEL" value="Catch clause should contain:"/>
                        <oldparam id="OWASP2017.A10.LGE.FLAG_IF_NO_LOG" name="FLAG_IF_NO_LOG" value="Logging method."/>
                        <oldparam id="OWASP2017.A10.LGE.FLAG_IF_NO_LOG_AND_THROW" name="FLAG_IF_NO_LOG_AND_THROW" value="Logging method or exception rethrow statement."/>
                        <oldparam id="OWASP2017.A10.LGE.FLAG_IF_NO_LOG_AND_THROW_AND_COMMENT" name="FLAG_IF_NO_LOG_AND_THROW_AND_COMMENT" value="Logging method, comment or exception rethrow statement."/>
                        <oldparam id="OWASP2017.A10.LGE.LOG_METHOD_EXPRESSION" name="LOG_METHOD_EXPRESSION" value="Logging method name in regular expression"/>
                        <oldparam id="OWASP2017.A10.LGE.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                        <oldparam id="OWASP2017.A10.LGE.CHECK_EXCEPT_LOGGED" name="CHECK_EXCEPT_LOGGED" value="Check that the exception is passed into the logging method call"/>
                        <oldparam id="OWASP2017.A10.LGE.IGNORE_LIST" name="IGNORE_LIST" value="Ignore exception variables matching the following regular expression(s):"/>
                        <oldparam id="OWASP2017.A10.LGE.LOGGERS_TAB" name="LOGGERS_TAB" value="Loggers"/>
                        <oldparam id="OWASP2017.A10.LGE.IGNORE_LIST_TAB" name="IGNORE_LIST_TAB" value="Ignore List"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/390.html" name="CWE">390</reference>
                    </references>
                    <parameters>
                        <group collapsible="false" id="OWASP2017.A10.LGE.tab.LOGGERS_TAB" label="Loggers">
                            <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger;org.apache.logging.log4j.Logger;org.slf4j.Logger" id="OWASP2017.A10.LGE.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                            <param defaultValue="^log.*" id="OWASP2017.A10.LGE.LOG_METHOD_EXPRESSION" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                        </group>
                        <group collapsible="false" id="OWASP2017.A10.LGE.tab.IGNORE_LIST_TAB" label="Ignore List">
                            <param defaultValue="^ignore$" id="OWASP2017.A10.LGE.IGNORE_LIST" inputType="stringList" label="Ignore exception variables matching the following regular expression(s):" prevType="StringList"/>
                        </group>
                        <radioGroup id="OWASP2017.A10.LGE.FLAG_LEVEL" label="Catch clause should contain:" prevType="MultipleChoice" showLabel="true">
                            <radioItem label="Logging method." value="0"/>
                            <radioItem defaultValue="checked" label="Logging method or &quot;throw&quot; exception statement." value="1"/>
                            <radioItem label="Logging method, comment, or &quot;throw&quot; exception statement." value="2"/>
                        </radioGroup>
                        <param defaultValue="false" id="OWASP2017.A10.LGE.CHECK_EXCEPT_LOGGED" inputType="checkbox" label="Check if the exception is passed into the logging method call"/>
                        <param defaultValue="false" id="OWASP2017.A10.LGE.CHECK_EXCEPT_FULL_PASSED" inputType="checkbox" label="Check if the exception passed to the logging method is complete"/>
                        <param defaultValue="false" id="OWASP2017.A10.LGE.CHECK_EXCEPT_THROW" inputType="checkbox" label="Check if the caught exception is passed to a new exception or rethrown"/>
                    </parameters>
                </rule>
         </category>
         <category description="A7-Cross-Site Scripting (XSS)" name="A7">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.CDBV" header="Canonicalize all data before validation." id="CDBV" originalId="SECURITY.IBA.CDBV" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="The data in ''{0}'' may not have been canonicalized before being validated."/>
                        <msg index="2" value="The return value of this call to ''{0}'' may not have been canonicalized before being validated."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="OWASP2017.A7.CDBV.CANON_METHS" name="CANON_METHS" value="Canonicalization method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                        <oldparam id="OWASP2017.A7.CDBV.VALID_METHS" name="VALID_METHS" value="Validation method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                        <oldparam id="OWASP2017.A7.CDBV.VALID_CLASSES" name="VALID_CLASSES" value="Only check calls within the following classes\n[regular expressions for fully qualified class name]"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Input Validation p. 81</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A1" name="OWASP-2010">A1-Injection</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A2" name="OWASP-2010">A2-Cross Site Scripting (XSS)</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/79.html" name="CWE">79</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*#canonicalize" description="Canonicalization method names (in regular expressions) [qualified name of declaring type#method name]" id="OWASP2017.A7.CDBV.CANON_METHS" inputType="stringList" label="Canonicalization method names (in regular expressions)" prevType="StringList"/>
                        <param defaultValue=".*#^validate" description="Validation method names (in regular expressions) [qualified name of declaring type#method name]" id="OWASP2017.A7.CDBV.VALID_METHS" inputType="stringList" label="Validation method names (in regular expressions)" prevType="StringList"/>
                        <param defaultValue=".*" description="Only check calls within the following classes [regular expressions for fully qualified class name]" id="OWASP2017.A7.CDBV.VALID_CLASSES" inputType="stringList" label="Only check calls within the following classes" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
      </category>
      <category description="Payment Card Industry Data Security Standard 3.2" name="PCIDSS32">
         <category description="6.5.3 Insecure cryptographic storage" name="653">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ACMD" header="Avoid using custom MessageDigest implementations" id="ACMD" originalId="SECURITY.WSC.ACMD" scope="LINE" severity="4" since="10.4.2">
                    <messages>
                        <msg index="1" value="The class that extends MessageDigest may provide unsafe algorithms"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CKTS" header="Avoid using cryptographic keys which are too short." id="CKTS" originalId="SECURITY.WSC.CKTS" scope="LINE" severity="2" since="8.4">
                    <messages>
                        <msg index="1" value="Key size ({0} bits) is below the recommended minimum key size ({1} bits) for the &quot;{2}&quot; algorithm."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="PCIDSS32.653.CKTS.MIN_LENGTH_TABLE" name="MIN_LENGTH_TABLE" value="Minimum Key Size for Each Algorithm"/>
                        <oldparam id="PCIDSS32.653.CKTS.ALGORITHM_NAME" name="ALGORITHM_NAME" value="Algorithm Name"/>
                        <oldparam id="PCIDSS32.653.CKTS.MINIMUM_KEY_SIZE" name="MINIMUM_KEY_SIZE" value="Minimum Key Size (in Bits)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="PCIDSS32.653.CKTS.MIN_LENGTH_TABLE" label="Minimum Key Size for Each Algorithm" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" label="Algorithm Name" required="true"/>
                                <column columnType="text" defaultValue="128" editable="true" id="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" label="Minimum Key Size (in Bits)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" value="AES"/>
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" value="128"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN1" value="RSA"/>
                                    <column refColumnId="SECURITY__WSC__CKTS__MIN_LENGTH_TABLE__COLUMN2" value="1024"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AISSAJAVA" header="Avoid using insecure cryptographic algorithms for data encryption with Spring" id="AISSAJAVA" originalId="SECURITY.WSC.AISSAJAVA" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The cryptographic class is insecure."/>
                        <msg index="2" value="The cryptographic algorithm used in the constructor of MessageDigestPasswordEncoder is insecure."/>
                    </messages>
                    <parameters>
                        <!-- <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_ENCODERS" inputType="stringList" defaultValue="org.springframework.security.crypto.password.LdapShaPasswordEncoder;org.springframework.security.crypto.password.Md5PasswordEncoder;org.springframework.security.crypto.password.Md4PasswordEncoder;org.springframework.security.crypto.password.NoOpPasswordEncoder;org.springframework.security.authentication.encoding.LdapShaPasswordEncoder;org.springframework.security.authentication.encoding.Md5PasswordEncoder;org.springframework.security.authentication.encoding.Md4PasswordEncoder" label="Insecure classes that should not be used for encryption" prevType="StringList"/>
                        <param id="SECURITY.WSC.AISSAJAVA.BANNED_ALGO_NAMES" inputType="stringList" defaultValue="MD2;MD5;SHA-1" label="Insecure algorithms in the MessageDigestPasswordEncoder class" prevType="StringList"/>-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="PCIDSS32.653.AISSAJAVA.BANNED_ALGO_ENCODERS" label="Insecure classes that should not be used for encryption" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" label="Fully Qualified Name of Insecure Class" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md5PasswordEncoder"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.Md4PasswordEncoder"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.crypto.password.NoOpPasswordEncoder"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.LdapShaPasswordEncoder"/>
                                </row>
                                <row id="6">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>
                                </row>
                                <row id="7">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_ENCODERS_COLUMN1" value="org.springframework.security.authentication.encoding.Md4PasswordEncoder"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="PCIDSS32.653.AISSAJAVA.BANNED_ALGO_NAMES" label="Insecure algorithms in the MessageDigestPasswordEncoder class" reader="SATable">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" label="Name of Insecure Algorithm" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD2"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="MD5"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY_WSC_AISSAJAVA_BANNED_ALGO_NAMES_COLUMN1" value="SHA-1"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SRD" header="Use 'java.security.SecureRandom' instead of 'java.util.Random' or 'Math.random()'." id="SRD" originalId="SECURITY.WSC.SRD" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Avoid using the insecure ''{0}'' as a random number generator"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/330.html" name="CWE">330</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/338.html" name="CWE">338</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/676.html" name="CWE">676</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ICA" header="Avoid using insecure algorithms for cryptography." id="ICA" originalId="SECURITY.WSC.ICA" scope="LINE" severity="1" since="8.3">
                    <messages>
                        <msg index="1" value="The &quot;{0}&quot; algorithm is not an acceptable cryptography algorithm for the &quot;{1}&quot; class."/>
                        <msg index="2" value="The cryptography algorithm is used without padding."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="PCIDSS32.653.ICA.SUGGESTED_ALGS" name="SUGGESTED_ALGS" value="Safe Cryptography Algorithms"/>
                        <oldparam id="PCIDSS32.653.ICA.TYPE_NAME" name="TYPE_NAME" value="Fully Qualified Class Name"/>
                        <oldparam id="PCIDSS32.653.ICA.ALGORITHM_NAME" name="ALGORITHM_NAME" value="Algorithm Names (in regular expressions)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/327.html" name="CWE">327</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/328.html" name="CWE">328</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/780.html" name="CWE">780</reference>
                    </references>
                    <parameters>
                        <!--param id="SECURITY.WSC.ICA.SUGGESTED_ALGS" inputType="bigtext" defaultValue="java.security.KeyPairGenerator&lt;#&gt;RSA;java.security.MessageDigest&lt;#&gt;SHA-256#SHA-384#SHA-512;javax.crypto.Cipher&lt;#&gt;3DES#AES#ARCFOUR/RC4#Blowfish#ECIES#RC4#RC5#RSA(.*)OAEPWith(.*)And(.*)Padding;javax.crypto.KeyGenerator&lt;#&gt;AES#ARCFOUR/RC4#Blowfish#HmacSHA256#HmacSHA384#HmacSHA512#RC2" label="Safe Cryptography Algorithms" prevType="DuoList"/-->
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="PCIDSS32.653.ICA.SUGGESTED_ALGS" label="Secure Cryptographic Algorithms" prevType="DuoList" reader="SADuoList">
                            <columns>
                                <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" label="Fully Qualified Class Name" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.KeyPairGenerator"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="java.security.MessageDigest"/>
                                </row>
                                <row id="3">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.KeyGenerator"/>
                                </row>
                                <row id="4">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.crypto.Cipher"/>
                                </row>
                                <row id="5">
                                    <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN1" value="javax.net.ssl.SSLContext"/>
                                </row>
                            </predefinedRows>
                            <childTable canAddRow="true" canEditRow="true" canRemoveRow="true" id="PCIDSS32.653.ICA.SUGGESTED_ALGS.CHILDTABLE1" label="">
                                <columns>
                                    <column columnType="text" editable="true" id="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" label="Name of Secure Algorithm (in regular expressions)" required="true"/>
                                </columns>
                                <predefinedRows refParentRowId="1">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="2">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-256"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-384"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="SHA-512"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="3">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA256"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA384"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="HmacSHA512"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC2"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESede"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="4">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="3DES"/>
                                    </row>
                                    <row id="2">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="AES/(.*)/PKCS5Padding"/>
                                    </row>
                                    <row id="3">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ARCFOUR/RC4"/>
                                    </row>
                                    <row id="4">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="Blowfish"/>
                                    </row>
                                    <row id="5">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="ECIES"/>
                                    </row>
                                    <row id="6">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC4"/>
                                    </row>
                                    <row id="7">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RC5"/>
                                    </row>
                                    <row id="8">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="RSA(.*)OAEPWith(.*)And(.*)Padding"/>
                                    </row>
                                    <row id="9">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="DESEDE/(.*)/PKCS5Padding"/>
                                    </row>
                                </predefinedRows>
                                <predefinedRows refParentRowId="5">
                                    <row id="1">
                                        <column refColumnId="SECURITY__WSC__ICA__SUGGESTED_ALGS__COLUMN2" value="TLSv1.2"/>
                                    </row>
                                </predefinedRows>
                            </childTable>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.AUNC" header="Avoid using the javax.crypto.NullCipher class in non-test classes." id="AUNC" originalId="SECURITY.WSC.AUNC" scope="LINE" severity="2" since="10.4.2">
                    <messages>
                        <msg index="1" value="The NullCipher class that does not encrypt the plaintext is used in a non-test class."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MDSALT" header="Use hash functions with a salt" id="MDSALT" originalId="SECURITY.WSC.MDSALT" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="A salt is not added to the digest"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.PLC" header="Avoid storing sensitive data in plaintext in a cookie" id="PLC" originalId="SECURITY.ESD.PLC" scope="LINE" severity="1" since="9.2">
                    <messages>
                        <msg index="1" value="Do not store important to safety data in cookie."/>
                        <msg index="2" value="Do not store sensitive data in plaintext in cookie."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="PCIDSS32.653.PLC.TABLE_HEADER" name="TABLE_HEADER" value="List of RegExp to check key in cookie"/>
                        <oldparam id="PCIDSS32.653.PLC.CHECK_VALUES_HEADER" name="CHECK_VALUES_HEADER" value="Check values"/>
                        <oldparam id="PCIDSS32.653.PLC.NAME_HEADER" name="NAME_HEADER" value="Key in cookie (RegExp)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010">A9-Insufficient Transport Layer Protection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/315.html" name="CWE">315</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE">807</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="PCIDSS32.653.PLC.TABLE_HEADER" label="List of RegExp to check key in cookie" reader="SATable">
                            <columns>
                                <column columnType="checkbox" defaultValue="true" editable="true" id="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" label="Check values" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" label="Key in cookie (RegExp)" required="true" textSize="large"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" value="false"/>
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" value=".*(pass|role).*"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN1" value="true"/>
                                    <column refColumnId="SECURITY__ESD__PLC__TABLE_HEADER__COLUMN2" value=".*(user|login|account).*"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
         </category>
         <category description="6.5.8 Improper access control" name="658">
            <rule class="com.parasoft.jtest.standards.rules.builtin.EJB.PERMIT" header="Avoid EJB 3 methods without security annotations" id="PERMIT" originalId="EJB.EJB3.PERMIT" scope="LINE" severity="1" since="9.2">
                    <messages>
                        <msg index="1" value="Method without permit (@RolesAllowed, @PermitAll, @DenyAll) annotations."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authorization p. 73</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A4" name="OWASP-2010">A4-Insecure Direct Object Reference</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A8" name="OWASP-2010">A8-Failure to Restrict URL Access</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/862.html" name="CWE">862</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/863.html" name="CWE">863</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.PBFA" header="Ensure sufficient protection against multiple failed authentication attempts" id="PBFA" originalId="SECURITY.WSC.PBFA" scope="LINE" severity="5" type="global">
                    <messages>
                        <msg index="1" value="This class uses the object of the AuthenticationFailureBadCredentialsEvent class. Ensure that sufficient protection against multiple failed authentication attempts is implemented."/>
                        <msg index="2" value="Ensure that the implementation of the 'onAuthenticationFailure()' method provides sufficient protection against multiple failed authentication attempts."/>
                        <msg index="3" value="Ensure that the implementation of the 'configure()' method provides sufficient protection against multiple failed authentication attempts."/>
                        <msg index="4" value="Ensure that the application code includes sufficient protection against multiple failed authentication attempts."/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.AUSS" header="Avoid using &quot;SELECT *&quot; in SQL queries." id="AUSS" originalId="SECURITY.IBA.AUSS" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="This String contains &quot;SELECT *&quot;, make sure it is not being used in a database query."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for SQL Injection p. 121</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/566.html" name="CWE">566</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.CAM" header="Keep all authentication methods centralized to enforce consistency" id="CAM" originalId="SECURITY.WSC.CAM" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="''{0}()'' is not allowed to be invoked within ''{1}()'', it should only be invoked inside centralized authentication method declarations."/>
                        <msg index="2" value="''{0}()'' is not allowed to be invoked unless enclosed by centralized access control methods."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="PCIDSS32.658.CAM.ENCLOSING_METHOD_LIST" name="ENCLOSING_METHOD_LIST" value="Centralized authentication method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                        <oldparam id="PCIDSS32.658.CAM.DANGEROUS_METHOD_LIST" name="DANGEROUS_METHOD_LIST" value="Authentication method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authentication p. 66</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A8" name="OWASP-2010">A8-Failure to Restrict URL Access</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                    </references>
                    <parameters>
                        <param defaultValue="javax.security.auth.login.LoginContext#getSubject.*;javax.security.auth.login.LoginContext#login.*;" description="Authentication method names (in regular expressions) [qualified name of declaring type#method name]" id="PCIDSS32.658.CAM.DANGEROUS_METHOD_LIST" inputType="stringList" label="Authentication method names (in regular expressions)" prevType="StringList"/>
                        <param defaultValue=".*#login.*;" description="Centralized authentication method names (in regular expressions) [qualified name of declaring type#method name]" id="PCIDSS32.658.CAM.ENCLOSING_METHOD_LIST" inputType="stringList" label="Centralized authentication method names (in regular expressions)" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SSM" header="Ensure that an appropriate security manager is set" id="SSM" originalId="SECURITY.WSC.SSM" scope="LINe" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Security manager is missing, 'setSecurityManager' should be invoked"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Authentication p. 66</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010">A3 - Broken Authentication and Session Management</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/180.html" name="CWE">180</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                    </references>
                </rule>
         </category>
         <category description="6.5.7 Cross-site scripting (XSS)" name="657">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.CDBV" header="Canonicalize all data before validation." id="CDBV" originalId="SECURITY.IBA.CDBV" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="The data in ''{0}'' may not have been canonicalized before being validated."/>
                        <msg index="2" value="The return value of this call to ''{0}'' may not have been canonicalized before being validated."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="PCIDSS32.657.CDBV.CANON_METHS" name="CANON_METHS" value="Canonicalization method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                        <oldparam id="PCIDSS32.657.CDBV.VALID_METHS" name="VALID_METHS" value="Validation method names (in regular expressions)\n[qualified name of declaring type#method name]"/>
                        <oldparam id="PCIDSS32.657.CDBV.VALID_CLASSES" name="VALID_CLASSES" value="Only check calls within the following classes\n[regular expressions for fully qualified class name]"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Input Validation p. 81</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A1" name="OWASP-2010">A1-Injection</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A2" name="OWASP-2010">A2-Cross Site Scripting (XSS)</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/79.html" name="CWE">79</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*#canonicalize" description="Canonicalization method names (in regular expressions) [qualified name of declaring type#method name]" id="PCIDSS32.657.CDBV.CANON_METHS" inputType="stringList" label="Canonicalization method names (in regular expressions)" prevType="StringList"/>
                        <param defaultValue=".*#^validate" description="Validation method names (in regular expressions) [qualified name of declaring type#method name]" id="PCIDSS32.657.CDBV.VALID_METHS" inputType="stringList" label="Validation method names (in regular expressions)" prevType="StringList"/>
                        <param defaultValue=".*" description="Only check calls within the following classes [regular expressions for fully qualified class name]" id="PCIDSS32.657.CDBV.VALID_CLASSES" inputType="stringList" label="Only check calls within the following classes" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
         <category description="6.5.5 Improper error handling" name="655">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.PEO" header="Do not pass exception messages into output in order to prevent the application from leaking sensitive information" id="PEO" originalId="SECURITY.ESD.PEO" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Print method ''{0}()'' is not allowed in a &quot;catch&quot; block."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="PCIDSS32.655.PEO.PRINT_METHOD_EXPRESSION" name="PRINT_METHOD_EXPRESSION" value="Print methods (Specify names in regular expressions)"/>
                        <oldparam id="PCIDSS32.655.PEO.EXCEPTIONS" name="EXCEPTIONS" value="Exceptions (Specify types and method names in regular expressions)"/>
                        <oldparam id="PCIDSS32.655.PEO.TYPE" name="TYPE" value="Type"/>
                        <oldparam id="PCIDSS32.655.PEO.METHOD" name="METHOD" value="Method"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/209.html" name="CWE">209</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/497.html" name="CWE">497</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*print.*;.*Print.*" id="PCIDSS32.655.PEO.PRINT_METHOD_EXPRESSION" inputType="stringList" label="Print methods (Specify names in regular expressions)" prevType="StringList"/>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="true" id="PCIDSS32.655.PEO.EXCEPTIONS" label="Exceptions (Specify types and method names in regular expressions)" reader="SATable">
                            <columns>
                                <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" label="Type" required="true"/>
                                <column columnType="text" defaultValue="unknown" editable="true" id="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" label="Method" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" value="^java\.util\.logging\.Logger$"/>
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" value="^.*$"/>
                                </row>
                                <row id="2">
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN1" value="^org\.apache\.log4j\.Logger$"/>
                                    <column refColumnId="SECURITY__ESD__PEO__EXCEPTIONS__COLUMN2" value="^.*$"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SERVLET.CETS" header="Catch all exceptions which may be thrown within Servlet methods" id="CETS" originalId="SERVLET.CETS" scope="LINE" severity="4">
                <messages>
                    <msg index="1" value="The method ''{0}()'' is declared to throw the exception type ''{1}'', but this exception is not caught."/>
                </messages>
                <references>
                    <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                    <reference href="http://cwe.mitre.org/data/definitions/600.html" name="CWE">600</reference>
                </references>
            </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.CRRV" header="Check the return value of methods which read or skip input" id="CRRV" originalId="PB.LOGIC.CRRV" scope="LINE" severity="3" since="8.0">
                    <messages>
                        <msg index="1" value="The return value of this call to ''{0}()'' is not checked."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="PCIDSS32.655.CRRV.CHECKED_METHOD_LIST" name="CHECKED_METHOD_LIST" value="Methods to be checked: \n(in form of &lt;fully qualified type name&gt;#&lt;method&gt;(&lt;parameter1 type&gt;,&lt;parameter2 type&gt;))"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/252.html" name="CWE">252</reference>
                    </references>
                    <parameters>
                        <param defaultValue="java.io.InputStream#read();java.io.InputStream#read(byte[]);java.io.InputStream#read(byte[],int,int);java.io.InputStream#skip(long);java.io.DataInput#skipBytes(int)" description="Methods to be checked: (in form of &lt;fully qualified type name&gt;#&lt;method&gt;(&lt;parameter1 type&gt;,&lt;parameter2 type&gt;))" id="PCIDSS32.655.CRRV.CHECKED_METHOD_LIST" inputType="stringList" label="Methods to be checked:" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.ARCF" header="Avoid using 'return's inside 'finally blocks if thare are other 'return's inside the try-catch block." id="ARCF" originalId="PB.CUB.ARCF" scope="LINE" severity="1" since="6.0">
                    <messages>
                        <msg index="1" value="Avoid multiple 'return' if a 'return' is present inside finally block."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="PCIDSS32.655.ARCF.ALSO_CATCH" name="ALSO_CATCH" value="Only flag return statements when they are in try-catch blocks"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/584.html" name="CWE">584</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="PCIDSS32.655.ARCF.ALSO_CATCH" inputType="checkbox" label="Only flag return statements when they are in try-catch blocks"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.SIO" header="Avoid calling print methods of 'System.err' or 'System.out'" id="SIO" originalId="SECURITY.ESD.SIO" scope="LINE" severity="3" since="4.5">
                    <messages>
                        <msg index="1" value="Make sure ''{0}'' is not a leftover debug statement."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="PCIDSS32.655.SIO.METHOD_SKIP_LIST" name="METHOD_SKIP_LIST" value="Methods to be excluded from this rule"/>
                    </oldparameters>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010">A3-Broken Authentication and Session Management</reference>
                    </references>
                    <parameters>
                        <complexParamTable canAddRow="true" canEditRow="true" canRemoveRow="true" canSetOrdering="false" id="PCIDSS32.655.SIO.SCANNED_CLASS_TABLE" label="Include classes" reader="SATable">
                            <columns>
                                <column columnType="checkbox" defaultValue="true" editable="true" id="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN1" label="Base class/ interface" required="true"/>
                                <column columnType="text" editable="true" id="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN2" label="Class/interface name (regular expression)" required="true"/>
                            </columns>
                            <predefinedRows>
                                <row id="1">
                                    <column refColumnId="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN1" value="true"/>
                                    <column refColumnId="SECURITY__ESD__SIO__SCANNED_CLASS_TABLE__COLUMN2" value=".*"/>
                                </row>
                            </predefinedRows>
                        </complexParamTable>
                        <param defaultValue="main;show;verbose" id="PCIDSS32.655.SIO.METHOD_SKIP_LIST" inputType="stringList" label="Exclude methods" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ACPST" header="Do not call the 'printStackTrace()' method of &quot;Throwable&quot; objects." id="ACPST" originalId="SECURITY.WSC.ACPST" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="The 'printStackTrace()' method of a &quot;Throwable&quot; object is called here."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="PCIDSS32.655.ACPST.IGNORE_OVERRIDDEN" name="IGNORE_OVERRIDDEN" value="Ignore overridden versions of the 'printStackTrace()' methods"/>
                        <oldparam id="PCIDSS32.655.ACPST.IGNORE_OVERLOADED" name="IGNORE_OVERLOADED" value="Ignore overloaded versions of the 'printStackTrace()' method"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Error Handling p. 83</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/209.html" name="CWE">209</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="PCIDSS32.655.ACPST.IGNORE_OVERRIDDEN" inputType="checkbox" label="Ignore overridden methods"/>
                        <param defaultValue="true" id="PCIDSS32.655.ACPST.IGNORE_OVERLOADED" inputType="checkbox" label="Ignore overloaded methods"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.UEHL.LGE" header="Ensure all exceptions are either logged with a standard logger or rethrown" id="LGE" originalId="SECURITY.UEHL.LGE" scope="LINE" severity="2" since="6.0">
                    <messages>
                        <msg index="1" value="The exception is not logged in the &quot;catch&quot; clause."/>
                        <msg index="2" value="The exception is neither logged nor rethrown in the &quot;catch&quot; clause."/>
                        <msg index="3" value="The exception is neither logged nor rethrown in the &quot;catch&quot; clause. Add a comment to the clause if this is expected."/>
                        <msg index="4" value="The ''{0}'' exception is not passed to the logging method called in the &quot;catch&quot; clause."/>
                        <msg index="5" value="The information passed from the ''{0}'' exception to the logging method may be incomplete."/>
                        <msg index="6" value="The ''{0}'' exception is not rethrown in the &quot;catch&quot; block or passed to the new exception as an argument."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="PCIDSS32.655.LGE.FLAG_LEVEL" name="FLAG_LEVEL" value="Catch clause should contain:"/>
                        <oldparam id="PCIDSS32.655.LGE.FLAG_IF_NO_LOG" name="FLAG_IF_NO_LOG" value="Logging method."/>
                        <oldparam id="PCIDSS32.655.LGE.FLAG_IF_NO_LOG_AND_THROW" name="FLAG_IF_NO_LOG_AND_THROW" value="Logging method or exception rethrow statement."/>
                        <oldparam id="PCIDSS32.655.LGE.FLAG_IF_NO_LOG_AND_THROW_AND_COMMENT" name="FLAG_IF_NO_LOG_AND_THROW_AND_COMMENT" value="Logging method, comment or exception rethrow statement."/>
                        <oldparam id="PCIDSS32.655.LGE.LOG_METHOD_EXPRESSION" name="LOG_METHOD_EXPRESSION" value="Logging method name in regular expression"/>
                        <oldparam id="PCIDSS32.655.LGE.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                        <oldparam id="PCIDSS32.655.LGE.CHECK_EXCEPT_LOGGED" name="CHECK_EXCEPT_LOGGED" value="Check that the exception is passed into the logging method call"/>
                        <oldparam id="PCIDSS32.655.LGE.IGNORE_LIST" name="IGNORE_LIST" value="Ignore exception variables matching the following regular expression(s):"/>
                        <oldparam id="PCIDSS32.655.LGE.LOGGERS_TAB" name="LOGGERS_TAB" value="Loggers"/>
                        <oldparam id="PCIDSS32.655.LGE.IGNORE_LIST_TAB" name="IGNORE_LIST_TAB" value="Ignore List"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="" name="OWASP-2007">A6 - Information Leakage and Improper Error Handling</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/390.html" name="CWE">390</reference>
                    </references>
                    <parameters>
                        <group collapsible="false" id="PCIDSS32.655.LGE.tab.LOGGERS_TAB" label="Loggers">
                            <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger;org.apache.logging.log4j.Logger;org.slf4j.Logger" id="PCIDSS32.655.LGE.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                            <param defaultValue="^log.*" id="PCIDSS32.655.LGE.LOG_METHOD_EXPRESSION" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                        </group>
                        <group collapsible="false" id="PCIDSS32.655.LGE.tab.IGNORE_LIST_TAB" label="Ignore List">
                            <param defaultValue="^ignore$" id="PCIDSS32.655.LGE.IGNORE_LIST" inputType="stringList" label="Ignore exception variables matching the following regular expression(s):" prevType="StringList"/>
                        </group>
                        <radioGroup id="PCIDSS32.655.LGE.FLAG_LEVEL" label="Catch clause should contain:" prevType="MultipleChoice" showLabel="true">
                            <radioItem label="Logging method." value="0"/>
                            <radioItem defaultValue="checked" label="Logging method or &quot;throw&quot; exception statement." value="1"/>
                            <radioItem label="Logging method, comment, or &quot;throw&quot; exception statement." value="2"/>
                        </radioGroup>
                        <param defaultValue="false" id="PCIDSS32.655.LGE.CHECK_EXCEPT_LOGGED" inputType="checkbox" label="Check if the exception is passed into the logging method call"/>
                        <param defaultValue="false" id="PCIDSS32.655.LGE.CHECK_EXCEPT_FULL_PASSED" inputType="checkbox" label="Check if the exception passed to the logging method is complete"/>
                        <param defaultValue="false" id="PCIDSS32.655.LGE.CHECK_EXCEPT_THROW" inputType="checkbox" label="Check if the caught exception is passed to a new exception or rethrown"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.PB.AECB" header="Avoid &quot;try&quot;, &quot;catch&quot; and &quot;finally&quot; blocks with empty bodies" id="AECB" originalId="PB.TYPO.AECB" scope="LINE" severity="3" since="6.0">
                    <messages>
                        <msg index="1" value="&quot;try&quot; block has an empty body."/>
                        <msg index="2" value="&quot;catch&quot; block has an empty body."/>
                        <msg index="3" value="&quot;finally&quot; block has an empty body."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="PCIDSS32.655.AECB.CHECK_FINALLY" name="CHECK_FINALLY" value="Check &quot;finally&quot; block."/>
                        <oldparam id="PCIDSS32.655.AECB.CHECK_TRY" name="CHECK_TRY" value="Check &quot;try&quot; block."/>
                        <oldparam id="PCIDSS32.655.AECB.CHECK_CATCH" name="CHECK_CATCH" value="Check &quot;catch&quot; block."/>
                        <oldparam id="PCIDSS32.655.AECB.CHECK_COMMENTS" name="CHECK_COMMENTS" value="Disallow blocks with comments as content."/>
                        <oldparam id="PCIDSS32.655.AECB.REGULAR_EXPRESSION" name="REGULAR_EXPRESSION" value="Regular expression of exception variable name. (enclosing catch block would be ignored if matches)"/>
                    </oldparameters>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/391.html" name="CWE">391</reference>
                    </references>
                    <parameters>
                        <param defaultValue="true" id="PCIDSS32.655.AECB.CHECK_TRY" inputType="checkbox" label="Check &quot;try&quot; block."/>
                        <param defaultValue="true" id="PCIDSS32.655.AECB.CHECK_CATCH" inputType="checkbox" label="Check &quot;catch&quot; block."/>
                        <param defaultValue="true" id="PCIDSS32.655.AECB.CHECK_FINALLY" inputType="checkbox" label="Check &quot;finally&quot; block."/>
                        <param defaultValue="false" id="PCIDSS32.655.AECB.CHECK_COMMENTS" inputType="checkbox" label="Disallow blocks with comments as content."/>
                        <param defaultValue="%5Eignore%24;" id="PCIDSS32.655.AECB.REGULAR_EXPRESSION" inputType="stringList" label="Regular expression of exception variable name. (enclosing catch block would be ignored if matches)" prevType="StringList"/>
                    </parameters>
                </rule>
         </category>
         <category description="6.5.4 Insecure communications" name="654">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.USC" header="Use the SSL-enabled version of classes when possible." id="USC" originalId="SECURITY.WSC.USC" scope="LINE" severity="3" since="7.5">
                    <messages>
                        <msg index="1" value="Consider using the SSL-enabled type ''SSLServerSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="2" value="Consider using the SSL-enabled type ''SSLSocketFactory'' for the {0} ''{1}''"/>
                        <msg index="3" value="Consider using the SSL-enabled type ''HttpsURLConnection'' for the {0} ''{1}''."/>
                        <msg index="4" value="Consider using the SSL-enabled type ''SslRMIClientSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="5" value="Consider using the SSL-enabled type ''SslRMIServerSocketFactory'' for the {0} ''{1}''."/>
                        <msg index="6" value="Consider using the SSL-enabled type ''SSLSocket'' for the {0} ''{1}''."/>
                        <msg index="7" value="Consider using the SSL-enabled type ''SSLServerSocket'' for the {0} ''{1}''."/>
                        <msg index="8" value="Consider using the SSL-enabled type ''SSLPermission'' for the {0} ''{1}''."/>
                    </messages>
                    <references>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A9" name="OWASP-2010">A9-Insufficient Transport Layer Protection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/494.html" name="CWE">494</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.SIKG" header="Initialize KeyGenerator instances " id="SIKG" originalId="SECURITY.WSC.SIKG" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The ''{0}'' object of the KeyGenerator class is created but not initialized"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.MCMDU" header="MessageDigest objects must process the data with the 'update' method" id="MCMDU" originalId="SECURITY.WSC.MCMDU" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The 'update' method is not called on the ''{0}'' variable after the message digest object is obtained"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.ESD.CONSEN" header="Do not log confidential or sensitive information" id="CONSEN" originalId="SECURITY.ESD.CONSEN" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="''{0}'' should not be used by a logger, it can expose confidential info."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="PCIDSS32.654.CONSEN.SUSPICIOUS_WORDS" name="SUSPICIOUS_WORDS" value="Regular expressions representing sensive data:"/>
                        <oldparam id="PCIDSS32.654.CONSEN.LOG_METHOD_EXPRESSIONS" name="LOG_METHOD_EXPRESSIONS" value="Logging method name in regular expression"/>
                        <oldparam id="PCIDSS32.654.CONSEN.LOGGER_NAMES" name="LOGGER_NAMES" value="Acceptable Loggers (Specify fully qualified names)"/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Logging Issues p. 153</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/311.html" name="CWE">311</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/533.html" name="CWE">533</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/534.html" name="CWE">534</reference>
                    </references>
                    <parameters>
                        <param defaultValue=".*ssn.*@delim@.*pass.*" id="PCIDSS32.654.CONSEN.SUSPICIOUS_WORDS" inputType="stringList" label="Regular expressions representing sensive data:" prevType="StringList"/>
                        <param defaultValue="java.util.logging.Logger;org.apache.log4j.Logger" id="PCIDSS32.654.CONSEN.LOGGER_NAMES" inputType="stringList" label="Acceptable Loggers (Specify fully qualified names)" prevType="StringList"/>
                        <param defaultValue=".*log.*" id="PCIDSS32.654.CONSEN.LOG_METHOD_EXPRESSIONS" inputType="stringList" label="Logging method name in regular expression" prevType="StringList"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HCCK" header="Avoid using hard-coded cryptographic keys" id="HCCK" originalId="SECURITY.WSC.HCCK" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Hard-coded cryptographic key here."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="PCIDSS32.654.HCCK.MIN_LENGTH" name="MIN_LENGTH" value="Check keys whose length is greater than "/>
                    </oldparameters>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Cryptographic controls p. 95</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A7" name="OWASP-2010">A7-Insecure Cryptographic Storage</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/321.html" name="CWE">321</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/506.html" name="CWE">506</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/759.html" name="CWE">759</reference>
                    </references>
                    <parameters>
                        <param defaultValue="9" id="PCIDSS32.654.HCCK.MIN_LENGTH" inputType="integer" label="Check keys whose length is greater than " min="9"/>
                    </parameters>
                </rule>
         </category>
         <category description="6.5.1 Injection flaws" name="651">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.XPIJ" header="Avoid XPath injection when evaluating XPath queries" id="XPIJ" originalId="SECURITY.IBA.XPIJ" scope="LINE" severity="1" since="8.4">
                    <messages>
                        <msg index="1" value="Avoid using variable ''{0}'' in XPath query."/>
                        <msg index="2" value="'XPathVariableResolver' is not set in XPath variable ''{0}''."/>
                    </messages>
                    <oldparameters>
                        <oldparam id="PCIDSS32.651.XPIJ.CHECK_VAR_RESOLVER" name="CHECK_VAR_RESOLVER" value="Check if 'XPathVariableResolver' is not set in XPath objects"/>
                    </oldparameters>
                    <parameters>
                        <param defaultValue="true" id="PCIDSS32.651.XPIJ.CHECK_VAR_RESOLVER" inputType="checkbox" label="Check if 'XPathVariableResolver' is not set in XPath objects"/>
                    </parameters>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.UPS" header="Use 'prepareCall' or 'prepareStatement' instead of 'createStatement'" id="UPS" originalId="SECURITY.IBA.UPS" scope="LINe" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="Consider using 'prepareCall()' or 'prepareStatement()' to prevent SQL injection vulnerabilities"/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for SQL Injection p. 121</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A1" name="OWASP-2010">A1-Injection</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/89.html" name="CWE">89</reference>
                    </references>
                </rule>
         </category>
         <category description="6.5.10 Broken authentication and session management" name="6510">
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.ISL" header="Always call 'HttpSession.invalidate()' before 'LoginContext.login()'" id="ISL" originalId="SECURITY.WSC.ISL" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="Login without session invalidation."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Session Management p. 78</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/384.html" name="CWE">384</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.IBA.RUIM" header="Ensure proper session expiration" id="RUIM" originalId="SECURITY.IBA.RUIM" scope="LINE" severity="1" since="10.4.2">
                    <messages>
                        <msg index="1" value="The session expiration time used in this metod call is obtained form a servlet request"/>
                        <msg index="2" value="The negative timeout value used in this metod call prevents session expiration"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.UOSC" header="Use the ''getSecure()'' and ''setSecure()'' methods to enforce the use of secure cookies." id="UOSC" originalId="SECURITY.WSC.UOSC" scope="LINE" severity="1" since="8.0">
                    <messages>
                        <msg index="1" value="The ''Cookie'' variable ''{0}'' may be used without making sure that it is a secure cookie."/>
                        <msg index="2" value="Make sure that the appropriate version of library is used."/>
                    </messages>
                    <references>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing by technical control: Session Management p. 78</reference>
                        <reference href="" name="OWASP-CODEREVIEW-1.1">Reviewing Code for Session Integrity issues p. 158</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A3" name="OWASP-2010">A3-Broken Authentication and Session Management</reference>
                        <reference href="https://www.owasp.org/index.php/Top_10_2010-A5" name="OWASP-2010">A5-Cross Site Request Forgery (CSRF)</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/614.html" name="CWE">614</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/306.html" name="CWE">306</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/352.html" name="CWE">352</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE">807</reference>
                    </references>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.HGRSI" header="Avoid using the 'getRequestedSessionId' method from the 'HttpServletRequest' class" id="HGRSI" originalId="SECURITY.WSC.HGRSI" scope="LINE" severity="4" since="10.4.2">
                    <messages>
                        <msg index="1" value="The 'getRequestedSessionId' method may return untrusted data"/>
                    </messages>
                </rule>
            <rule class="com.parasoft.jtest.standards.rules.builtin.SECURITY.WSC.DNSL" header="Avoid DNS lookups for decision making" id="DNSL" originalId="SECURITY.WSC.DNSL" scope="LINE" severity="1" since="9.0">
                    <messages>
                        <msg index="1" value="DNS lookup checked here."/>
                    </messages>
                    <references>
                        <reference href="http://cwe.mitre.org/data/definitions/247.html" name="CWE">247</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/494.html" name="CWE">494</reference>
                        <reference href="http://cwe.mitre.org/data/definitions/807.html" name="CWE">807</reference>
                    </references>
                </rule>
         </category>
      </category>
   </builtin>
</rules>
